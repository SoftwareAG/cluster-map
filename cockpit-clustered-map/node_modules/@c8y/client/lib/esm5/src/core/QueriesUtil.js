"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var QueriesUtil = /** @class */ (function () {
    function QueriesUtil() {
        var _this = this;
        this.operatorFns = {
            __not: function (operand) {
                return ['not(', _this.buildQueryFilter(operand, null), ')'].join('');
            },
            __and: function (operand) {
                return _this.buildQueryFilter(operand, null, 'and');
            },
            __or: function (operand) {
                return _this.buildQueryFilter(operand, null, 'or');
            },
            __eq: function (operand, contextKey) {
                if (typeof operand === 'object' && operand !== null) {
                    return _this.buildQueryFilter(operand, contextKey);
                }
                return [contextKey, 'eq', _this.quoteString(operand)].join(' ');
            },
            __gt: function (operand, contextKey) {
                return [contextKey, 'gt', _this.quoteString(operand)].join(' ');
            },
            __ge: function (operand, contextKey) {
                return [contextKey, 'ge', _this.quoteString(operand)].join(' ');
            },
            __lt: function (operand, contextKey) {
                return [contextKey, 'lt', _this.quoteString(operand)].join(' ');
            },
            __le: function (operand, contextKey) {
                return [contextKey, 'le', _this.quoteString(operand)].join(' ');
            },
            __in: function (operand, contextKey) {
                var stmts = operand.filter(function (op) { return !!op; }).map(function (op) {
                    return [contextKey, 'eq', _this.quoteString(op)].join(' ');
                });
                return _this.glue(stmts, 'or');
            },
            __bygroupid: function (operand) {
                return ['bygroupid(', operand, ')'].join('');
            },
            __has: function (operand) {
                return ['has(', operand, ')'].join('');
            }
        };
    }
    QueriesUtil.prototype.buildQuery = function (query) {
        var q = [];
        var filter = this.buildQueryFilter(query.__filter || query);
        var orderBy = this.buildQueryOrderby(query.__orderby);
        if (filter) {
            q.push(['$filter=(', filter, ')'].join(''));
        }
        if (orderBy) {
            q.push(['$orderby=', orderBy].join(''));
        }
        return q.join(' ');
    };
    QueriesUtil.prototype.buildQueryFilter = function (queryObj, _queryKey, _glueType) {
        var _this = this;
        var queryKey = _queryKey || null;
        var glueType = _glueType || 'and';
        var q = [];
        if (Array.isArray(queryObj)) {
            queryObj.forEach(function (qObj) {
                var _q = _this.buildQueryFilter(qObj, null, glueType);
                if (_q) {
                    q.push(_q);
                }
            });
        }
        else {
            var _q_1;
            Object.keys(queryObj).forEach(function (k) {
                if (_this.operatorFns[k] !== undefined) {
                    _q_1 = _this.operatorFns[k](queryObj[k], queryKey);
                    if (_q_1) {
                        q.push(_q_1);
                    }
                }
                else {
                    _q_1 = _this.operatorFns.__eq(queryObj[k], k);
                    if (_q_1) {
                        q.push(_q_1);
                    }
                }
            });
        }
        return this.glue(q, glueType);
    };
    QueriesUtil.prototype.buildQueryOrderby = function (query) {
        var o = [];
        if (query) {
            query.forEach(function (q) {
                Object.keys(q).forEach(function (k) {
                    if (q[k] !== 0) {
                        o.push([k, q[k] > 0 ? 'asc' : 'desc'].join(' '));
                    }
                });
            });
        }
        return o.join(',');
    };
    QueriesUtil.prototype.glue = function (stmts, type) {
        return ((stmts.length > 1) ? (['(', stmts.join(") " + type + " ("), ')'].join('')) : (stmts[0]));
    };
    QueriesUtil.prototype.quoteString = function (s) {
        return typeof s === 'string' ? ['\'', s, '\''].join('') : s;
    };
    return QueriesUtil;
}());
exports.QueriesUtil = QueriesUtil;
//# sourceMappingURL=QueriesUtil.js.map