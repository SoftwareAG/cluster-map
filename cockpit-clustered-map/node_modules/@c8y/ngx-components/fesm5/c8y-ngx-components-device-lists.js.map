{"version":3,"file":"c8y-ngx-components-device-lists.js","sources":["ng://@c8y/ngx-components/device-lists/device-grid-example-guard.ts","ng://@c8y/ngx-components/device-lists/device-lists-navigation.factory.ts","ng://@c8y/ngx-components/device-lists/device-grid-example.component.ts","ng://@c8y/ngx-components/device-lists/device-lists.module.ts","ng://@c8y/ngx-components/device-lists/c8y-ngx-components-device-lists.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { OptionsService } from '@c8y/ngx-components';\n\n@Injectable()\nexport class DeviceGridExampleGuard implements CanActivate {\n  constructor(private optionsService: OptionsService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    // FIXME: not entirely correct but enough for testing (see beta provider isActivatedFor)\n    return Boolean(this.optionsService.get('beta', false));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { gettext, NavigatorNode, NavigatorNodeFactory } from '@c8y/ngx-components';\nimport { DeviceGridExampleGuard } from './device-grid-example-guard';\n\n@Injectable()\nexport class DeviceListsNavigationFactory implements NavigatorNodeFactory {\n  constructor(private deviceGridExampleGuard: DeviceGridExampleGuard) {}\n\n  async get() {\n    if (!this.deviceGridExampleGuard.canActivate(null, null)) {\n      return [];\n    }\n    const navs = new NavigatorNode({\n      label: gettext('Grids'),\n      icon: 'table'\n    });\n    navs.add(\n      new NavigatorNode({\n        label: gettext('Device grid'),\n        path: '/grids/device-grid',\n        icon: 'table'\n      })\n    );\n    return navs;\n  }\n}\n","import { Component } from '@angular/core';\nimport {\n  DeviceGridService,\n  DeviceGridColumn,\n  CustomDeviceGridColumn,\n  gettext\n} from '@c8y/ngx-components';\nimport { find } from 'lodash-es';\n\n@Component({\n  selector: 'c8y-device-grid-example',\n  templateUrl: './device-grid-example.component.html'\n})\nexport class DeviceGridExampleComponent {\n  examples: Array<{ label: string; columns: DeviceGridColumn[] }>;\n  selectedExample;\n  columnsInput: DeviceGridColumn[];\n  columnsOutput: DeviceGridColumn[];\n  deviceQueryStringOutput: string;\n\n  constructor(protected deviceGridService: DeviceGridService) {\n    this.examples = [\n      this.getExampleWithStandardColumns(),\n      this.getExampleWithStandardColumnsAndSavedFilteringSorting(),\n      this.getExampleWithCustomColumnAndPredefinedFiltering()\n    ];\n  }\n\n  getExampleWithStandardColumns() {\n    const columns = this.deviceGridService.getDefaultColumns();\n    return {\n      label: 'Standard columns',\n      columns\n    };\n  }\n\n  getExampleWithStandardColumnsAndSavedFilteringSorting() {\n    const columns = this.deviceGridService.getDefaultColumns();\n    const nameColumn = find(columns, { name: 'name' });\n    nameColumn.externalFilterQuery = {\n      names: ['*Temp*']\n    };\n    nameColumn.sortOrder = 'desc';\n    return {\n      label: 'Standard columns with saved filtering/sorting',\n      columns\n    };\n  }\n\n  getExampleWithCustomColumnAndPredefinedFiltering() {\n    const columns = this.deviceGridService.getDefaultColumns();\n    const typeColumn = new CustomDeviceGridColumn();\n    typeColumn.name = 'type';\n    typeColumn.path = 'type';\n    typeColumn.header = gettext('Type');\n    typeColumn.externalFilterQuery = {\n      equals: ['c8y_MQTTDevice']\n    };\n    columns.splice(2, 0, typeColumn);\n    return {\n      label: 'Standard columns with custom one with predefined filtering',\n      columns\n    };\n  }\n\n  onExampleSelect(example) {\n    this.columnsInput = example.columns;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Route, RouterModule } from '@angular/router';\nimport { CommonModule, HOOK_NAVIGATOR_NODES, CoreModule } from '@c8y/ngx-components';\nimport { DeviceListsNavigationFactory } from './device-lists-navigation.factory';\nimport { DeviceGridExampleGuard } from './device-grid-example-guard';\nimport { DeviceGridExampleComponent } from './device-grid-example.component';\n\nconst routes: Route[] = [\n  {\n    path: 'grids/device-grid',\n    component: DeviceGridExampleComponent,\n    canActivate: [DeviceGridExampleGuard]\n  }\n];\n\n@NgModule({\n  imports: [CoreModule, CommonModule, RouterModule.forRoot(routes, { useHash: true })],\n  declarations: [DeviceGridExampleComponent],\n  entryComponents: [DeviceGridExampleComponent],\n  exports: [],\n  providers: [\n    {\n      provide: HOOK_NAVIGATOR_NODES,\n      useClass: DeviceListsNavigationFactory,\n      multi: true\n    },\n    DeviceGridExampleGuard\n  ]\n})\nexport class DeviceListsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {DeviceGridExampleGuard as ɵb} from './device-grid-example-guard';\nexport {DeviceGridExampleComponent as ɵa} from './device-grid-example.component';\nexport {DeviceListsNavigationFactory as ɵc} from './device-lists-navigation.factory';"],"names":[],"mappings":"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"}