import { __awaiter, __generator, __decorate } from 'tslib';
import { Injectable, Component, NgModule } from '@angular/core';
import { gettext, AlertService, NavigatorNode, OptionsService, CoreModule, HOOK_NAVIGATOR_NODES, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { pipe, Subject, timer, of } from 'rxjs';
import { map, debounce, distinctUntilChanged } from 'rxjs/operators';
import { InventoryService, InventoryBinaryService } from '@c8y/client';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { uniqBy } from 'lodash';
import { TooltipModule } from 'ngx-bootstrap/tooltip';

var _a;
var RepositoryType;
(function (RepositoryType) {
    RepositoryType["FIRMWARE"] = "c8y_Firmware";
    RepositoryType["SOFTWARE"] = "c8y_Software";
    RepositoryType["CONFIGURATION"] = "c8y_ConfigurationDump";
})(RepositoryType || (RepositoryType = {}));
var REPOSITORY_BINARY_TYPE = (_a = {},
    _a[RepositoryType.SOFTWARE] = 'c8y_SoftwareBinary',
    _a[RepositoryType.FIRMWARE] = 'c8y_FirmwareBinary',
    _a[RepositoryType.CONFIGURATION] = 'c8y_ConfigurationDumpBinary',
    _a);

var RepositoryService = /** @class */ (function () {
    function RepositoryService(inventory, inventoryBinary) {
        this.inventory = inventory;
        this.inventoryBinary = inventoryBinary;
    }
    RepositoryService.prototype.listConfigurations = function () {
        return this.inventory.list({
            type: RepositoryType.CONFIGURATION,
            withTotalPages: true,
            pageSize: 50
        });
    };
    RepositoryService.prototype.delete = function (entity) {
        // TODO: add cascading delete (will be done by Dawid)
        return this.inventory.delete(entity);
    };
    RepositoryService.prototype.save = function (data, type, mo) {
        if (mo === void 0) { mo = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var existingUrl, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        switch (type) {
                            case RepositoryType.CONFIGURATION: {
                                Object.assign(mo, {
                                    type: RepositoryType.CONFIGURATION,
                                    configurationType: data.selected ? data.selected.configurationType : undefined,
                                    name: data.versionOrName,
                                    description: data.description,
                                    deviceType: data.deviceType,
                                    c8y_Global: {}
                                });
                                break;
                            }
                        }
                        existingUrl = mo.url;
                        if (!data.binary.url) return [3 /*break*/, 1];
                        mo.url = data.binary.url;
                        return [3 /*break*/, 3];
                    case 1:
                        if (!data.binary.file) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.inventoryBinary.create(data.binary.file, { c8y_Global: {} })];
                    case 2:
                        response = _a.sent();
                        mo.url = response.data.self;
                        _a.label = 3;
                    case 3:
                        if (mo.id) {
                            return [2 /*return*/, this.updateEntry(mo, existingUrl)];
                        }
                        return [2 /*return*/, this.createEntry(mo)];
                }
            });
        });
    };
    RepositoryService.prototype.createEntry = function (mo) {
        return __awaiter(this, void 0, void 0, function () {
            var binaryId, newMo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventoryBinary.getIdFromUrl(mo.url)];
                    case 1:
                        binaryId = _a.sent();
                        return [4 /*yield*/, this.inventory.create(mo)];
                    case 2:
                        newMo = _a.sent();
                        if (!binaryId) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.inventory.childAdditionsAdd(binaryId, newMo.data)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, newMo];
                }
            });
        });
    };
    RepositoryService.prototype.updateEntry = function (mo, url) {
        return __awaiter(this, void 0, void 0, function () {
            var existingBinaryId, newBinaryId, id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventoryBinary.getIdFromUrl(url)];
                    case 1:
                        existingBinaryId = _a.sent();
                        return [4 /*yield*/, this.inventoryBinary.getIdFromUrl(mo.url)];
                    case 2:
                        newBinaryId = _a.sent();
                        if (!(existingBinaryId && existingBinaryId !== newBinaryId)) return [3 /*break*/, 4];
                        id = this.inventoryBinary.getIdFromUrl(url);
                        return [4 /*yield*/, this.inventoryBinary.delete(id)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!newBinaryId) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.inventory.childAdditionsAdd(newBinaryId, mo)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/, this.inventory.update(mo)];
                }
            });
        });
    };
    RepositoryService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: InventoryBinaryService }
    ]; };
    RepositoryService = __decorate([
        Injectable()
    ], RepositoryService);
    return RepositoryService;
}());

var ConfigurationNewModalComponent = /** @class */ (function () {
    function ConfigurationNewModalComponent(repositoryService, bsModalRef, alert) {
        var _this = this;
        this.repositoryService = repositoryService;
        this.bsModalRef = bsModalRef;
        this.alert = alert;
        this.binary = {
            file: undefined,
            url: undefined
        };
        this.pattern = '';
        this.mo = {};
        this.isLoading = false;
        this.result = new Promise(function (resolve, reject) {
            _this._save = resolve;
            _this._cancel = reject;
        });
    }
    ConfigurationNewModalComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.repositoryService.listConfigurations()];
                    case 1:
                        _a.configs = _b.sent();
                        this.setPipe('');
                        return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationNewModalComponent.prototype.cancel = function () {
        this.bsModalRef.hide();
        this._cancel();
    };
    ConfigurationNewModalComponent.prototype.setPipe = function (filterStr) {
        this.pattern = filterStr;
        this.filterPipe = pipe(map(function (data) { return uniqBy(data, 'configurationType'); }), map(function (data) {
            return data.filter(function (mo) {
                return mo.configurationType &&
                    mo.configurationType.toLowerCase().indexOf(filterStr.toLowerCase()) > -1;
            });
        }));
    };
    ConfigurationNewModalComponent.prototype.uploadFile = function (dropped, ngForm) {
        this.binary.file = dropped[0].file;
        this.binary.url = undefined;
        ngForm.form.markAsDirty();
    };
    ConfigurationNewModalComponent.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, selected, versionOrName, description, binary, deviceType, ex_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, 3, 4]);
                        this.isLoading = true;
                        _a = this, selected = _a.selected, versionOrName = _a.versionOrName, description = _a.description, binary = _a.binary, deviceType = _a.deviceType;
                        return [4 /*yield*/, this.repositoryService.save({ selected: selected, versionOrName: versionOrName, description: description, binary: binary, deviceType: deviceType }, RepositoryType.CONFIGURATION, this.mo)];
                    case 1:
                        _b.sent();
                        this.alert.success(this.mo.id ? gettext('Configuration updated.') : gettext('Configuration created.'));
                        this.bsModalRef.hide();
                        this._save();
                        return [3 /*break*/, 4];
                    case 2:
                        ex_1 = _b.sent();
                        this.alert.addServerFailure(ex_1);
                        this._cancel();
                        return [3 /*break*/, 4];
                    case 3:
                        this.isLoading = false;
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationNewModalComponent.ctorParameters = function () { return [
        { type: RepositoryService },
        { type: BsModalRef },
        { type: AlertService }
    ]; };
    ConfigurationNewModalComponent = __decorate([
        Component({
            selector: 'c8y-configuration-new-modal',
            template: "<div class=\"modal-header bg-primary text-white text-center\">\n  <h1 c8yIcon=\"cogs\" style=\"font-size: 55px;\"></h1>\n  <h4 class=\"p-t-16 text-uppercase\" translate *ngIf=\"mo.id\">Update configuration</h4>\n  <h4 class=\"p-t-16 text-uppercase\" translate *ngIf=\"!mo.id\">Add configuration</h4>\n</div>\n\n<form #configurationForm=\"ngForm\" (ngSubmit)=\"configurationForm.form.valid && save()\">\n  <div class=\"modal-body\">\n    <c8y-form-group>\n      <label translate>Name</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"e.g. hosts\"\n        autocomplete=\"off\"\n        required\n        maxlength=\"254\"\n        [(ngModel)]=\"versionOrName\"\n        name=\"versionOrName\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate>Device type</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"e.g. Posix\"\n        maxlength=\"254\"\n        autocomplete=\"off\"\n        [(ngModel)]=\"deviceType\"\n        name=\"deviceType\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate>Description</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"e.g. Host configuration Posix\"\n        maxlength=\"254\"\n        autocomplete=\"off\"\n        [(ngModel)]=\"description\"\n        name=\"description\"\n      />\n    </c8y-form-group>\n\n    <c8y-form-group>\n      <label translate>Configuration type</label>\n      <c8y-typeahead\n        [(selected)]=\"selected\"\n        placeholder=\"e.g. ssh\"\n        (onSearch)=\"setPipe($event)\"\n        displayProperty=\"configurationType\"\n      >\n        <c8y-li\n          *c8yFor=\"let config of configs; pipe: filterPipe; notFound: notFoundTemplate\"\n          class=\"p-l-8 p-r-8 c8y-list__item--link\"\n          (click)=\"selected = config; setPipe('')\"\n          [active]=\"selected === config\"\n        >\n          <c8y-highlight\n            [text]=\"config.configurationType || '--'\"\n            [pattern]=\"pattern\"\n          ></c8y-highlight>\n        </c8y-li>\n        <ng-template #notFoundTemplate>\n          <c8y-li class=\"bg-gray-lighter p-8\" *ngIf=\"pattern.length > 0\">\n            <span translate>No match found, add new`configuration`?</span>\n            <button type=\"button\" class=\"btn btn-primary btn-xs m-l-16\" translate>\n              Create new`configuration`\n            </button>\n          </c8y-li>\n        </ng-template>\n      </c8y-typeahead>\n    </c8y-form-group>\n\n    <c8y-drop-area\n      (dropped)=\"uploadFile($event, configurationForm)\"\n      [loadingMessage]=\"'Importing, please wait.' | translate\"\n      [title]=\"'Add a configuration file' | translate\"\n      [loading]=\"isLoading\"\n    >\n    </c8y-drop-area>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button (click)=\"cancel()\" type=\"button\" class=\"btn btn-default\" [disabled]=\"isLoading\">\n      <span translate>Cancel</span>\n    </button>\n    <button\n      type=\"button\"\n      class=\"btn btn-primary\"\n      type=\"submit\"\n      [disabled]=\"!configurationForm.valid || configurationForm.pristine || isLoading\"\n    >\n      <span translate *ngIf=\"!mo.id\">Add configuration</span>\n      <span translate *ngIf=\"mo.id\">Update configuration</span>\n    </button>\n  </div>\n</form>\n"
        })
    ], ConfigurationNewModalComponent);
    return ConfigurationNewModalComponent;
}());

var ConfigurationListComponent = /** @class */ (function () {
    function ConfigurationListComponent(alert, repositoryService, modalService) {
        this.alert = alert;
        this.repositoryService = repositoryService;
        this.modalService = modalService;
        this.filterChange$ = new Subject();
        this.filterTerm = '';
        this.CARRIAGE_RETURN_KEY = 13;
        this.CARRIAGE_RETURN_CODE = 'Enter';
        this.DELETED_SUCCESS_MSG = gettext('Configuration deleted.');
    }
    ConfigurationListComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reset()];
                    case 1:
                        _a.sent();
                        this.filterChange$
                            .pipe(debounce(function (event) {
                            return event.code === _this.CARRIAGE_RETURN_CODE || event.keyCode === _this.CARRIAGE_RETURN_KEY
                                ? timer(10)
                                : timer(300);
                        }), map(function (e) { return e.target.value; }), distinctUntilChanged())
                            .subscribe(function (filterTerm) {
                            _this.filterTerm = filterTerm;
                            _this.setPipe(filterTerm);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationListComponent.prototype.ngOnDestroy = function () {
        this.filterChange$.complete();
    };
    ConfigurationListComponent.prototype.add = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.modalService.show(ConfigurationNewModalComponent, {
                                class: 'modal-sm',
                                ignoreBackdropClick: true
                            }).content.result];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.reset()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationListComponent.prototype.edit = function (configuration) {
        return __awaiter(this, void 0, void 0, function () {
            var modal, ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        modal = this.modalService.show(ConfigurationNewModalComponent, {
                            class: 'modal-sm',
                            ignoreBackdropClick: true,
                            initialState: {
                                selected: { id: configuration.id, configurationType: configuration.configurationType },
                                versionOrName: configuration.name,
                                deviceType: configuration.deviceType,
                                description: configuration.description,
                                binary: { url: configuration.url }
                            }
                        }).content;
                        modal.mo = configuration;
                        return [4 /*yield*/, modal.result];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.reset()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationListComponent.prototype.delete = function (configuration) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.repositoryService.delete(configuration)];
                    case 1:
                        _a.sent();
                        this.alert.success(this.DELETED_SUCCESS_MSG);
                        return [4 /*yield*/, this.reset()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_3 = _a.sent();
                        this.alert.addServerFailure(ex_3);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationListComponent.prototype.setPipe = function (filterTerm) {
        var _this = this;
        this.filterPipe = pipe(map(function (data) {
            return filterTerm.trim().length === 0
                ? data
                : data.filter(function (mo) {
                    return _this.filterContainString(mo.name, filterTerm) ||
                        _this.filterContainString(mo.configurationType, filterTerm);
                });
        }));
    };
    ConfigurationListComponent.prototype.filterContainString = function (name, filterTerm) {
        var term = filterTerm.toLowerCase().trim();
        return name && name.toLowerCase().indexOf(term) > -1;
    };
    ConfigurationListComponent.prototype.reset = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.filterTerm = '';
                        _a = this;
                        _b = of;
                        return [4 /*yield*/, this.repositoryService.listConfigurations()];
                    case 1:
                        _a.configurations$ = _b.apply(void 0, [_c.sent()]);
                        this.setPipe('');
                        return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationListComponent.ctorParameters = function () { return [
        { type: AlertService },
        { type: RepositoryService },
        { type: BsModalService }
    ]; };
    ConfigurationListComponent = __decorate([
        Component({
            selector: 'c8y-configuration-list',
            template: "<c8y-title>\n  <span translate>Configuration snapshots repository</span>&nbsp;\n  <small *ngIf=\"(configurations$ | async)?.paging.totalPages === 1 && !filterTerm\"\n    >{{ (configurations$ | async).data.length }} <span translate>snapshots</span></small\n  >\n  <small\n    *ngIf=\"(configurations$ | async)?.paging.totalPages > 1 && !filterTerm\"\n    [tooltip]=\"'More data available. Scroll to the bottom of the list to load it.' | translate\"\n    container=\"body\"\n    >{{ (configurations$ | async).paging.pageSize }}+ <span translate>snapshots</span></small\n  >\n  <small *ngIf=\"filterTerm\"\n    ><span translate>Search results for</span>&nbsp;\"{{ this.filterTerm }}\"</small\n  >\n</c8y-title>\n\n<c8y-action-bar-item itemClass=\"navbar-form\">\n  <div class=\"input-group input-group-search\">\n    <input\n      class=\"form-control\"\n      placeholder=\"{{ 'Filter\u2026' | translate }}\"\n      type=\"text\"\n      [value]=\"filterTerm\"\n      (keyup)=\"filterChange$.next($event)\"\n    />\n    <span class=\"input-group-btn\">\n      <button class=\"btn btn-clean\" (click)=\"filterTerm = ''; setPipe('')\">\n        <i [c8yIcon]=\"filterTerm.length === 0 ? 'filter' : 'close'\"></i>\n      </button>\n    </span>\n  </div>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button class=\"btn btn-link\" (click)=\"add()\">\n    <i c8yIcon=\"plus-square\"></i> {{ 'Add configuration snapshot' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div\n  class=\"c8y-empty-state text-center\"\n  *ngIf=\"!filterTerm && (configurations$ | async)?.data.length === 0\"\n>\n  <h1 c8yIcon=\"gears\"></h1>\n  <h3 translate>There are no configuration snapshots defined</h3>\n  <p translate>Add a configuration snapshot first.</p>\n  <div>\n    <button (click)=\"add()\" class=\"btn btn-primary\" translate>\n      Add configuration snapshot\n    </button>\n  </div>\n  <p c8y-guide-docs>\n    <small translate\n      >Find out more in the\n      <a c8y-guide-href=\"users-guide/device-management/#configuration-repository\"\n        >User guide`KEEP_ORIGINAL`</a\n      >.</small\n    >\n  </p>\n</div>\n\n<ng-template #notFound>\n  <c8y-li class=\"p-8 text-center\">\n    <p>\n      <span translate>No more entries found for filter:</span>&nbsp;<strong>{{\n        filterTerm\n      }}</strong>\n    </p>\n    <button class=\"btn btn-primary btn-xs m-t-8\" translate (click)=\"filterTerm = ''; setPipe('')\">\n      Reset filter\n    </button>\n  </c8y-li>\n</ng-template>\n<div class=\"p-b-32\">\n  <c8y-list-group>\n    <c8y-li\n      *c8yFor=\"\n        let configuration of configurations$;\n        pipe: filterPipe;\n        notFound: this.filterTerm ? notFound : undefined\n      \"\n    >\n      <c8y-li-icon icon=\"gears\"></c8y-li-icon>\n      <div class=\"row flex-row\">\n        <div class=\"col-xs-3\">\n          <c8y-highlight\n            [text]=\"configuration.name || '-'\"\n            elementClass=\"text-info\"\n            [pattern]=\"filterTerm\"\n          ></c8y-highlight>\n        </div>\n        <div class=\"col-xs-3\">\n          <span class=\"text-muted text-truncate\" [title]=\"configuration.description\">{{\n            configuration.description\n          }}</span>\n        </div>\n        <div class=\"col-xs-3\">\n          <small translate class=\"text-muted text-uppercase\">Device type:</small>&nbsp;\n          {{ configuration.deviceType || '-' }}\n        </div>\n        <div class=\"col-xs-3 text-right\">\n          <span class=\"label label-primary\" *ngIf=\"configuration.configurationType\">\n            <c8y-highlight\n              [text]=\"configuration.configurationType\"\n              elementClass=\"text-info\"\n              [pattern]=\"filterTerm\"\n            ></c8y-highlight>\n          </span>\n        </div>\n      </div>\n      <c8y-li-action (click)=\"edit(configuration)\" icon=\"pencil\">\n        Edit\n      </c8y-li-action>\n      <c8y-li-action (click)=\"delete(configuration)\" icon=\"trash-o\">\n        Delete\n      </c8y-li-action>\n    </c8y-li>\n  </c8y-list-group>\n</div>\n"
        })
    ], ConfigurationListComponent);
    return ConfigurationListComponent;
}());

var RepositoryNavigationFactory = /** @class */ (function () {
    function RepositoryNavigationFactory(optionsService) {
        this.optionsService = optionsService;
        this.navs = [];
    }
    RepositoryNavigationFactory.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var betaFlag;
            return __generator(this, function (_a) {
                betaFlag = localStorage.getItem('c8y_beta_status');
                if (betaFlag === 'all' && this.navs.length === 0) {
                    this.navs.push(new NavigatorNode({
                        label: gettext('Configuration repository'),
                        path: 'configuration-new',
                        icon: 'gears',
                        parent: gettext('Management'),
                        priority: 800
                    }));
                }
                return [2 /*return*/, this.navs];
            });
        });
    };
    RepositoryNavigationFactory.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };
    RepositoryNavigationFactory = __decorate([
        Injectable()
    ], RepositoryNavigationFactory);
    return RepositoryNavigationFactory;
}());

var ɵ0 = [
    {
        path: 'configuration-new',
        component: ConfigurationListComponent
    }
];
var RepositoryModule = /** @class */ (function () {
    function RepositoryModule() {
    }
    RepositoryModule = __decorate([
        NgModule({
            imports: [CoreModule, TooltipModule],
            exports: [],
            entryComponents: [ConfigurationListComponent, ConfigurationNewModalComponent],
            declarations: [ConfigurationListComponent, ConfigurationNewModalComponent],
            providers: [
                RepositoryService,
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: RepositoryNavigationFactory,
                    multi: true
                },
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0,
                    multi: true
                }
            ]
        })
    ], RepositoryModule);
    return RepositoryModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { RepositoryModule, ɵ0, ConfigurationListComponent as ɵa, RepositoryService as ɵb, ConfigurationNewModalComponent as ɵc, RepositoryNavigationFactory as ɵd };
//# sourceMappingURL=c8y-ngx-components-repository.js.map
