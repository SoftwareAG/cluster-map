import { __decorate, __awaiter, __generator } from 'tslib';
import { Injectable, Component, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { OptionsService, NavigatorNode, gettext, CustomDeviceGridColumn, DeviceGridService, CoreModule, CommonModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { find } from 'lodash-es';

var DeviceGridExampleGuard = /** @class */ (function () {
    function DeviceGridExampleGuard(optionsService) {
        this.optionsService = optionsService;
    }
    DeviceGridExampleGuard.prototype.canActivate = function (route, state) {
        // FIXME: not entirely correct but enough for testing (see beta provider isActivatedFor)
        return Boolean(this.optionsService.get('beta', false));
    };
    DeviceGridExampleGuard.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };
    DeviceGridExampleGuard = __decorate([
        Injectable()
    ], DeviceGridExampleGuard);
    return DeviceGridExampleGuard;
}());

var DeviceListsNavigationFactory = /** @class */ (function () {
    function DeviceListsNavigationFactory(deviceGridExampleGuard) {
        this.deviceGridExampleGuard = deviceGridExampleGuard;
    }
    DeviceListsNavigationFactory.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var navs;
            return __generator(this, function (_a) {
                if (!this.deviceGridExampleGuard.canActivate(null, null)) {
                    return [2 /*return*/, []];
                }
                navs = new NavigatorNode({
                    label: gettext('Grids'),
                    icon: 'table'
                });
                navs.add(new NavigatorNode({
                    label: gettext('Device grid'),
                    path: '/grids/device-grid',
                    icon: 'table'
                }));
                return [2 /*return*/, navs];
            });
        });
    };
    DeviceListsNavigationFactory.ctorParameters = function () { return [
        { type: DeviceGridExampleGuard }
    ]; };
    DeviceListsNavigationFactory = __decorate([
        Injectable()
    ], DeviceListsNavigationFactory);
    return DeviceListsNavigationFactory;
}());

var DeviceGridExampleComponent = /** @class */ (function () {
    function DeviceGridExampleComponent(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.examples = [
            this.getExampleWithStandardColumns(),
            this.getExampleWithStandardColumnsAndSavedFilteringSorting(),
            this.getExampleWithCustomColumnAndPredefinedFiltering()
        ];
    }
    DeviceGridExampleComponent.prototype.getExampleWithStandardColumns = function () {
        var columns = this.deviceGridService.getDefaultColumns();
        return {
            label: 'Standard columns',
            columns: columns
        };
    };
    DeviceGridExampleComponent.prototype.getExampleWithStandardColumnsAndSavedFilteringSorting = function () {
        var columns = this.deviceGridService.getDefaultColumns();
        var nameColumn = find(columns, { name: 'name' });
        nameColumn.externalFilterQuery = {
            names: ['*Temp*']
        };
        nameColumn.sortOrder = 'desc';
        return {
            label: 'Standard columns with saved filtering/sorting',
            columns: columns
        };
    };
    DeviceGridExampleComponent.prototype.getExampleWithCustomColumnAndPredefinedFiltering = function () {
        var columns = this.deviceGridService.getDefaultColumns();
        var typeColumn = new CustomDeviceGridColumn();
        typeColumn.name = 'type';
        typeColumn.path = 'type';
        typeColumn.header = gettext('Type');
        typeColumn.externalFilterQuery = {
            equals: ['c8y_MQTTDevice']
        };
        columns.splice(2, 0, typeColumn);
        return {
            label: 'Standard columns with custom one with predefined filtering',
            columns: columns
        };
    };
    DeviceGridExampleComponent.prototype.onExampleSelect = function (example) {
        this.columnsInput = example.columns;
    };
    DeviceGridExampleComponent.ctorParameters = function () { return [
        { type: DeviceGridService }
    ]; };
    DeviceGridExampleComponent = __decorate([
        Component({
            selector: 'c8y-device-grid-example',
            template: "<div class=\"row\">\n  <c8y-device-grid\n    [title]=\"'Select devices for bulk operation'\"\n    [columns]=\"columnsInput\"\n    [actionControls]=\"[]\"\n    (onColumnsChange)=\"columnsOutput = $event\"\n    (onDeviceQueryStringChange)=\"deviceQueryStringOutput = $event\"\n  ></c8y-device-grid>\n</div>\n\n<div class=\"row\">\n  <div class=\"card col-sm-6\">\n    <div class=\"card-header separator\">\n      <h4 class=\"card-title\">Input</h4>\n    </div>\n    <div class=\"card-block\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          class=\"form-control\"\n          [ngModel]=\"selectedExample\"\n          (ngModelChange)=\"onExampleSelect($event)\"\n        >\n          <option *ngFor=\"let example of examples\" [ngValue]=\"example\">{{\n            example.label\n          }}</option></select\n        ><span></span>\n      </div>\n      <pre\n        >{{ columnsInput | json }}\n      </pre>\n    </div>\n  </div>\n\n  <div class=\"card col-sm-6\">\n    <div class=\"card-header\">\n      <span>\n        <h4 class=\"card-title\">Output</h4>\n      </span>\n    </div>\n    <div class=\"card-block\">\n      <pre\n        >{{ deviceQueryStringOutput | json }}\n      </pre>\n      <pre\n        >{{ columnsOutput | json }}\n      </pre>\n    </div>\n  </div>\n</div>\n"
        })
    ], DeviceGridExampleComponent);
    return DeviceGridExampleComponent;
}());

var routes = [
    {
        path: 'grids/device-grid',
        component: DeviceGridExampleComponent,
        canActivate: [DeviceGridExampleGuard]
    }
];
var DeviceListsModule = /** @class */ (function () {
    function DeviceListsModule() {
    }
    DeviceListsModule = __decorate([
        NgModule({
            imports: [CoreModule, CommonModule, RouterModule.forRoot(routes, { useHash: true })],
            declarations: [DeviceGridExampleComponent],
            entryComponents: [DeviceGridExampleComponent],
            exports: [],
            providers: [
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: DeviceListsNavigationFactory,
                    multi: true
                },
                DeviceGridExampleGuard
            ]
        })
    ], DeviceListsModule);
    return DeviceListsModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceListsModule, DeviceGridExampleComponent as ɵa, DeviceGridExampleGuard as ɵb, DeviceListsNavigationFactory as ɵc };
//# sourceMappingURL=c8y-ngx-components-device-lists.js.map
