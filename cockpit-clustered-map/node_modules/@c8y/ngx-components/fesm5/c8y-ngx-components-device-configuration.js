import { __awaiter, __generator, __decorate } from 'tslib';
import { EventEmitter, Injectable, Component, Input, Output, Pipe, NgModule } from '@angular/core';
import { gettext, AlertService, operationStatusIcons, operationStatusClasses, AppStateService, ViewContext, CoreModule, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { ActivatedRoute } from '@angular/router';
import { EventService, EventBinaryService, OperationService, InventoryService, InventoryBinaryService, Realtime, OperationStatus, UserService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { saveAs } from 'file-saver/FileSaver';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { cloneDeep } from 'lodash-es';

var DeviceConfigurationService = /** @class */ (function () {
    function DeviceConfigurationService(eventService, eventBinaryService, operationService, alertService, inventoryService, inventoryBinaryService, translateService) {
        this.eventService = eventService;
        this.eventBinaryService = eventBinaryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.translateService = translateService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.repositoryConfigListUpdated = new EventEmitter();
    }
    DeviceConfigurationService.prototype.getLatestConfigurationEvent = function (deviceId, type) {
        return __awaiter(this, void 0, void 0, function () {
            var filter, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = {
                            source: deviceId,
                            type: type,
                            dateFrom: this.dateFrom.toISOString(),
                            dateTo: this.dateTo.toISOString(),
                            pageSize: 1
                        };
                        return [4 /*yield*/, this.eventService.list(filter)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data[0]];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.getEventConfigurationBinary = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var binary, res, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.eventBinaryService.download(event)];
                    case 1:
                        res = _a.sent();
                        binary = res.text();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, binary];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.createUploadConfigFileOperation = function (device, configurationType) {
        return __awaiter(this, void 0, void 0, function () {
            var operation, operationText, operationCfg, data, ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationText = gettext('Retrieve {{ configurationType }} configuration snapshot from device {{ deviceName }}');
                        operationCfg = {
                            deviceId: device.id,
                            c8y_UploadConfigFile: {
                                type: configurationType
                            },
                            description: this.translateService.instant(operationText, {
                                configurationType: configurationType,
                                deviceName: device.name
                            })
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.operationService.create(operationCfg)];
                    case 2:
                        data = (_a.sent()).data;
                        operation = data;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        this.alertService.addServerFailure(ex_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, operation];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.getLatestConfigFileOperation = function (deviceId, configType, operationType) {
        return __awaiter(this, void 0, void 0, function () {
            var filter, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = {
                            deviceId: deviceId,
                            fragmentType: operationType,
                            dateFrom: this.dateFrom.toISOString(),
                            dateTo: this.dateTo.toISOString(),
                            revert: true,
                            pageSize: 2000
                        };
                        return [4 /*yield*/, this.operationService.list(filter)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.find(function (op) { return op[operationType].type === configType; })];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.getSnapshotsFromRepository = function (deviceType, configurationType) {
        return __awaiter(this, void 0, void 0, function () {
            var query, filter, deviceTypeFilter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = {
                            pageSize: 2000,
                            withTotalPages: true
                        };
                        query = {
                            __filter: {
                                __and: [
                                    {
                                        type: 'c8y_ConfigurationDump'
                                    },
                                    {
                                        __or: [
                                            { configurationType: { __eq: configurationType } },
                                            {
                                                __not: {
                                                    __has: 'configurationType'
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            __orderby: [{ configurationType: -1, name: 1 }]
                        };
                        if (deviceType) {
                            deviceTypeFilter = {
                                __or: [
                                    { deviceType: { __eq: deviceType } },
                                    {
                                        __not: {
                                            __has: 'deviceType'
                                        }
                                    }
                                ]
                            };
                            query.__filter.__and.push(deviceTypeFilter);
                        }
                        return [4 /*yield*/, this.inventoryService.listQuery(query, filter)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.createDownloadConfigFileOperation = function (device, configurationType, binaryUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var operation, operationText, operationCfg, data, ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationText = gettext('Send configuration {{ configurationType }} to device {{ deviceName }}');
                        operationCfg = {
                            deviceId: device.id,
                            c8y_DownloadConfigFile: {
                                url: binaryUrl,
                                type: configurationType
                            },
                            description: this.translateService.instant(operationText, {
                                configurationType: configurationType,
                                deviceName: device.name
                            })
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.operationService.create(operationCfg)];
                    case 2:
                        data = (_a.sent()).data;
                        operation = data;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_3 = _a.sent();
                        this.alertService.addServerFailure(ex_3);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, operation];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.getConfigurationBinaryFile = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var binary, moId, binaryMO, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        moId = this.inventoryBinaryService.getIdFromUrl(url);
                        if (!moId) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.inventoryService.detail(moId)];
                    case 1:
                        binaryMO = (_a.sent()).data;
                        return [4 /*yield*/, this.inventoryBinaryService.download(binaryMO)];
                    case 2:
                        res = _a.sent();
                        return [4 /*yield*/, res.text()];
                    case 3:
                        binary = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        binary = this.fetchExternalBinary(url);
                        _a.label = 5;
                    case 5: return [2 /*return*/, binary];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.saveToConfigurationRepository = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var mo, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mo = {};
                        Object.assign(mo, {
                            name: config.name,
                            type: 'c8y_ConfigurationDump',
                            deviceType: config.deviceType,
                            configurationType: config.configurationType,
                            c8y_Global: {}
                        });
                        return [4 /*yield*/, this.inventoryBinaryService.create(new Blob([config.binary]), {
                                c8y_Global: {}
                            })];
                    case 1:
                        response = _a.sent();
                        mo.url = response.data.self;
                        return [2 /*return*/, this.inventoryService.create(mo)];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.updateRepositoryConfigList = function () {
        this.repositoryConfigListUpdated.emit();
    };
    DeviceConfigurationService.prototype.fetchExternalBinary = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var configBinary, res, ex_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        res = _a.sent();
                        if (!(res.status === 200)) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.text()];
                    case 2:
                        configBinary = _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        ex_4 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, configBinary];
                }
            });
        });
    };
    DeviceConfigurationService.ctorParameters = function () { return [
        { type: EventService },
        { type: EventBinaryService },
        { type: OperationService },
        { type: AlertService },
        { type: InventoryService },
        { type: InventoryBinaryService },
        { type: TranslateService }
    ]; };
    DeviceConfigurationService = __decorate([
        Injectable()
    ], DeviceConfigurationService);
    return DeviceConfigurationService;
}());

var DeviceConfigurationComponent = /** @class */ (function () {
    function DeviceConfigurationComponent(route, deviceConfigurationService, realtime) {
        var _this = this;
        this.route = route;
        this.deviceConfigurationService = deviceConfigurationService;
        this.realtime = realtime;
        this.configSnapshot = {};
        this.deviceConfigurationService.repositoryConfigListUpdated.subscribe(function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.repositorySnapshot = undefined;
                        _a = this;
                        return [4 /*yield*/, this.getSnapshotsFromRepository(this.device.type, this.configurationType)];
                    case 1:
                        _a.repositorySnapshots = _b.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    }
    DeviceConfigurationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.device = this.route.snapshot.parent.data.contextData;
        this.supportedConfigurations = this.device.c8y_SupportedConfigurations.map(function (item) { return ({
            name: item
        }); });
        this.repositorySnapshotsEmptyState = {
            icon: 'gears',
            title: gettext('No configurations available.'),
            text: gettext('Add configuration to configuration repository')
        };
        var eventsChannel = '/eventsWithChildren/' + this.device.id;
        this.eventsSubscription = this.realtime.observable(eventsChannel).subscribe(function (_a) {
            var data = _a.data;
            _this.updateConfigSnapshotOnEvent(data);
        });
    };
    DeviceConfigurationComponent.prototype.onConfigTypeSelected = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var configEvent, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.configurationType = undefined;
                        this.repositorySnapshot = undefined;
                        this.configSnapshot = {};
                        return [4 /*yield*/, this.deviceConfigurationService.getLatestConfigurationEvent(this.device.id, config.name)];
                    case 1:
                        configEvent = _b.sent();
                        this.updateConfigSnapshotOnEvent(configEvent, config.name);
                        this.configurationType = config.name;
                        _a = this;
                        return [4 /*yield*/, this.getSnapshotsFromRepository(this.device.type, config.name)];
                    case 2:
                        _a.repositorySnapshots = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DeviceConfigurationComponent.prototype.getSnapshotsFromRepository = function (deviceType, configurationType) {
        return this.deviceConfigurationService.getSnapshotsFromRepository(deviceType, configurationType);
    };
    DeviceConfigurationComponent.prototype.updateConfigSnapshotOnEvent = function (event, configurationType) {
        return __awaiter(this, void 0, void 0, function () {
            var type, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        type = configurationType || this.configurationType;
                        if (!(event && event.type === type)) return [3 /*break*/, 2];
                        this.configSnapshot = {
                            time: event.time,
                            name: event.text,
                            deviceType: this.device.deviceType,
                            configurationType: type
                        };
                        _a = this.configSnapshot;
                        return [4 /*yield*/, this.deviceConfigurationService.getEventConfigurationBinary(event)];
                    case 1:
                        _a.binary = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    DeviceConfigurationComponent.prototype.onRepositoryConfigSelected = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.repositorySnapshot = {
                            time: config.creationTime,
                            name: config.name,
                            binaryUrl: config.url,
                            deviceType: config.deviceType,
                            configurationType: config.configurationType
                        };
                        if (!config.url) return [3 /*break*/, 2];
                        _a = this.repositorySnapshot;
                        return [4 /*yield*/, this.deviceConfigurationService.getConfigurationBinaryFile(config.url)];
                    case 1:
                        _a.binary = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    DeviceConfigurationComponent.prototype.ngOnDestroy = function () {
        this.eventsSubscription.unsubscribe();
    };
    DeviceConfigurationComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: DeviceConfigurationService },
        { type: Realtime }
    ]; };
    DeviceConfigurationComponent = __decorate([
        Component({
            selector: 'c8y-device-configuration',
            template: "<div class=\"card card--grid card--grid--fullpage grid__col--4-8 grid__row--6-6\">\n  <!-- DEVICE SUPPORTED CONFIGURATIONS -->\n  <div class=\"card--grid__inner-scroll\">\n    <div class=\"card-header separator\">\n      <h4 class=\"card-title\" translate>Configurations</h4>\n    </div>\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\"><span translate>Device-supported configurations</span></h5>\n    </div>\n    <div class=\"p-r-16\">\n      <c8y-device-configuration-list\n        [items]=\"supportedConfigurations\"\n        [itemIcon]=\"'gears'\"\n        (configSelected)=\"onConfigTypeSelected($event)\"\n      ></c8y-device-configuration-list>\n    </div>\n  </div>\n\n  <!-- CONFIGURATION PREVIEW -->\n  <div class=\"card--grid__inner-scroll bg-gray-lighter\">\n    <div class=\"card-header separator bg-gray-lighter hidden-xs hidden-sm\">\n      <h4>&nbsp;</h4>\n    </div>\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\"><span translate>Preview</span></h5>\n\n      <!-- EMPTY STATE -->\n      <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n        <h1 [c8yIcon]=\"'file-text'\"></h1>\n        <p>\n          <strong translate>No configuration selected.</strong><br />\n          <small translate>Select a configuration to preview</small>\n        </p>\n      </div>\n\n      <!-- PREVIEW AVAILABLE STATE -->\n      <c8y-device-configuration-preview\n        *ngIf=\"configurationType\"\n        [device]=\"device\"\n        [configurationType]=\"configurationType\"\n        [configSnapshot]=\"configSnapshot\"\n        [canSaveSnapshot]=\"true\"\n        [operationToTrigger]=\"'c8y_UploadConfigFile'\"\n        [actionButtonText]=\"'Get snapshot from device' | translate\"\n        [actionButtonIcon]=\"'download'\"\n      ></c8y-device-configuration-preview>\n    </div>\n  </div>\n\n  <!-- AVAILABLE SUPPORTED CONFIGURATIONS -->\n  <div class=\"card--grid__inner-scroll\">\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\" translate>Available supported configurations</h5>\n    </div>\n\n    <!-- EMPTY STATE -->\n    <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n      <h1 [c8yIcon]=\"'gears'\"></h1>\n      <p>\n        <strong translate>No selection</strong><br />\n        <small translate>Select a configuration from the device-supported configuration list</small>\n      </p>\n    </div>\n    <div class=\"p-r-16\" *ngIf=\"configurationType\">\n      <c8y-device-configuration-list\n        [items]=\"repositorySnapshots\"\n        [itemIcon]=\"'file-text'\"\n        [emptyState]=\"repositorySnapshotsEmptyState\"\n        [isFilterEnabled]=\"true\"\n        (configSelected)=\"onRepositoryConfigSelected($event)\"\n      ></c8y-device-configuration-list>\n    </div>\n  </div>\n\n  <!-- CONFIGURATION PREVIEW -->\n  <div class=\"card--grid__inner-scroll bg-gray-lighter\">\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\" translate>Preview</h5>\n\n      <!-- EMPTY STATE -->\n\n      <div class=\"c8y-empty-state text-left\" *ngIf=\"!repositorySnapshot\">\n        <h1 [c8yIcon]=\"'file-text'\"></h1>\n        <p>\n          <strong translate>No configuration selected.</strong><br />\n          <small *ngIf=\"!configurationType; else noSnapshot\" translate\n            >Select a configuration to preview</small\n          >\n          <ng-template #noSnapshot>\n            <small translate>Select the configuration you want to preview</small>\n          </ng-template>\n        </p>\n      </div>\n\n      <!-- CONFIGURATION SELECTED STATE -->\n      <c8y-device-configuration-preview\n        *ngIf=\"repositorySnapshot\"\n        [device]=\"device\"\n        [configurationType]=\"configurationType\"\n        [configSnapshot]=\"repositorySnapshot\"\n        [operationToTrigger]=\"'c8y_DownloadConfigFile'\"\n        [actionButtonText]=\"'Send configuration to device' | translate\"\n        [actionButtonIcon]=\"'upload'\"\n      ></c8y-device-configuration-preview>\n    </div>\n  </div>\n</div>\n"
        })
    ], DeviceConfigurationComponent);
    return DeviceConfigurationComponent;
}());

var ConfigurationListComponent = /** @class */ (function () {
    function ConfigurationListComponent() {
        this.configSelected = new EventEmitter();
        this.filterTerm = '';
    }
    ConfigurationListComponent.prototype.showConfigurationTypePreview = function (config) {
        this.selectedConfig = config;
        this.configSelected.emit(config);
    };
    ConfigurationListComponent.prototype.updatePipe = function (filterTerm) {
        this.filterTerm = filterTerm;
    };
    __decorate([
        Input()
    ], ConfigurationListComponent.prototype, "items", void 0);
    __decorate([
        Input()
    ], ConfigurationListComponent.prototype, "itemIcon", void 0);
    __decorate([
        Input()
    ], ConfigurationListComponent.prototype, "emptyState", void 0);
    __decorate([
        Input()
    ], ConfigurationListComponent.prototype, "isFilterEnabled", void 0);
    __decorate([
        Output()
    ], ConfigurationListComponent.prototype, "configSelected", void 0);
    ConfigurationListComponent = __decorate([
        Component({
            selector: 'c8y-device-configuration-list',
            template: "<div class=\"left-p-md bottom-p-xs\" *ngIf=\"isFilterEnabled\">\n  <c8y-filter [icon]=\"'search'\" (onSearch)=\"updatePipe($event)\"></c8y-filter>\n</div>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state text-left\" *ngIf=\"items?.length === 0\">\n  <h1 [c8yIcon]=\"emptyState.icon\"></h1>\n  <p>\n    <strong>{{ emptyState.title | translate }}</strong\n    ><br />\n    <small>{{ emptyState.text | translate }}</small>\n  </p>\n</div>\n\n<!-- CONFIGURATIONS AVAILABLE -->\n<div class=\"c8y-nav-stacked\">\n  <div\n    class=\"c8y-stacked-item flex-row\"\n    [class.active]=\"config === selectedConfig\"\n    *ngFor=\"let config of items | configurationFilterPipe: filterTerm\"\n    (click)=\"showConfigurationTypePreview(config)\"\n  >\n    <div class=\"list-item-icon\">\n      <i [c8yIcon]=\"itemIcon\"></i>\n    </div>\n    <div class=\"list-item-body text-truncate\">\n      <span>{{ config.name }}</span>\n      <span class=\"text-uppercase text-gray-light pull-right\">{{ config.deviceType }}</span>\n    </div>\n  </div>\n</div>\n\n<!-- for Carlos: config.configurationType to differentiate whether a config matches configuration type. -->\n"
        })
    ], ConfigurationListComponent);
    return ConfigurationListComponent;
}());

var ConfigurationOperationComponent = /** @class */ (function () {
    function ConfigurationOperationComponent() {
    }
    ConfigurationOperationComponent.prototype.ngOnInit = function () {
        this.statusIcons = operationStatusIcons;
        this.statusClasses = operationStatusClasses;
    };
    __decorate([
        Input()
    ], ConfigurationOperationComponent.prototype, "operation", void 0);
    ConfigurationOperationComponent = __decorate([
        Component({
            selector: 'c8y-device-configuration-operation',
            template: "<div class=\"card\">\n  <div class=\"list-group list-group-links\">\n    <a class=\"list-group-item flex-row\" href=\"#/device/{{ operation.deviceId }}/control\">\n      <div class=\"list-item-icon\">\n        <i\n          [c8yIcon]=\"statusIcons[operation.status]\"\n          [ngClass]=\"statusClasses[operation.status]\"\n          [tooltip]=\"operation.status | translate\"\n          tooltip-placement=\"right\"\n        ></i>\n      </div>\n      <div class=\"list-item-body\">\n        <div class=\"flex-row row\">\n          <span class=\"col-sm-8\">{{ operation.description | translate }}</span>\n          <div class=\"col-sm-4 text-muted\">\n            <i c8yIcon=\"calendar\"></i>&nbsp;\n            <small>{{ operation.creationTime | date: 'medium' }}</small>\n          </div>\n        </div>\n      </div>\n    </a>\n  </div>\n</div>\n"
        })
    ], ConfigurationOperationComponent);
    return ConfigurationOperationComponent;
}());

var SourceCodePreviewComponent = /** @class */ (function () {
    function SourceCodePreviewComponent() {
    }
    __decorate([
        Input()
    ], SourceCodePreviewComponent.prototype, "isDisabled", void 0);
    __decorate([
        Input()
    ], SourceCodePreviewComponent.prototype, "text", void 0);
    SourceCodePreviewComponent = __decorate([
        Component({
            selector: 'c8y-source-code-preview',
            template: "<textarea [disabled]=\"isDisabled\" class=\"form-control no-resize\" rows=\"8\">{{ text }}</textarea>\n"
        })
    ], SourceCodePreviewComponent);
    return SourceCodePreviewComponent;
}());

var DeviceConfigurationGuard = /** @class */ (function () {
    function DeviceConfigurationGuard() {
    }
    DeviceConfigurationGuard.prototype.canActivate = function (route, state) {
        var contextData = route.data.contextData || route.parent.data.contextData;
        return (contextData &&
            contextData.c8y_SupportedConfigurations &&
            contextData.c8y_SupportedConfigurations.length > 0);
    };
    return DeviceConfigurationGuard;
}());

var DeviceConfigurationOperation;
(function (DeviceConfigurationOperation) {
    DeviceConfigurationOperation["UPLOAD_CONFIG"] = "c8y_UploadConfigFile";
    DeviceConfigurationOperation["DOWNLOAD_CONFIG"] = "c8y_DownloadConfigFile";
})(DeviceConfigurationOperation || (DeviceConfigurationOperation = {}));

var SaveToRepositoryComponent = /** @class */ (function () {
    function SaveToRepositoryComponent(modal, alertService, deviceConfigurationService) {
        var _this = this;
        this.modal = modal;
        this.alertService = alertService;
        this.deviceConfigurationService = deviceConfigurationService;
        this.result = new Promise(function (resolve, reject) {
            _this._save = resolve;
            _this._cancel = reject;
        });
    }
    SaveToRepositoryComponent.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.deviceConfigurationService.saveToConfigurationRepository(this.configSnapshot)];
                    case 1:
                        _a.sent();
                        this.alertService.success(gettext('Configuration saved.'));
                        this._save();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        if (ex_1.data) {
                            this.alertService.danger(ex_1.data.message);
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SaveToRepositoryComponent.prototype.close = function () {
        this._cancel();
        this.modal.hide();
    };
    SaveToRepositoryComponent.ctorParameters = function () { return [
        { type: BsModalRef },
        { type: AlertService },
        { type: DeviceConfigurationService }
    ]; };
    SaveToRepositoryComponent = __decorate([
        Component({
            selector: 'c8y-save-config-to-configuration-repository',
            template: "<div class=\"modal-header bg-primary text-center text-white\">\n  <div style=\"font-size: 62px;\">\n    <span c8yIcon=\"gears\"></span>\n  </div>\n  <h4 class=\"text-uppercase\" translate>\n    Save configuration\n  </h4>\n</div>\n<div class=\"modal-body\">\n  <form #saveConfigurationSnapshot=\"ngForm\" class=\"p-t-24\">\n    <c8y-form-group>\n      <label translate for=\"name\">Name</label>\n      <input\n        id=\"name\"\n        type=\"text\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"name\"\n        [(ngModel)]=\"configSnapshot.name\"\n        required\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"deviceType\">Device type</label>\n      <input\n        id=\"deviceType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"deviceType\"\n        [(ngModel)]=\"configSnapshot.deviceType\"\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"configurationType\">Configuration type</label>\n      <input\n        id=\"configurationType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"configurationType\"\n        [(ngModel)]=\"configSnapshot.configurationType\"\n      />\n    </c8y-form-group>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n    Cancel\n  </button>\n\n  <button\n    title=\"{{ 'Add certificate' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"saveConfigurationSnapshot.form.invalid\"\n    translate\n  >\n    Save\n  </button>\n</div>\n"
        })
    ], SaveToRepositoryComponent);
    return SaveToRepositoryComponent;
}());

var ConfigurationPreviewComponent = /** @class */ (function () {
    function ConfigurationPreviewComponent(deviceConfigurationService, realtime, bsModal, user, appState) {
        this.deviceConfigurationService = deviceConfigurationService;
        this.realtime = realtime;
        this.bsModal = bsModal;
        this.user = user;
        this.appState = appState;
    }
    ConfigurationPreviewComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var configOperation, operationsChannel;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.operationToTrigger === DeviceConfigurationOperation.UPLOAD_CONFIG)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getOperation()];
                    case 1:
                        configOperation = _a.sent();
                        this.updateOperation(configOperation);
                        _a.label = 2;
                    case 2:
                        operationsChannel = "/operations/" + this.device.id;
                        this.operationsSubscription = this.realtime
                            .observable(operationsChannel)
                            .subscribe(function (_a) {
                            var data = _a.data;
                            _this.updateOperation(data);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationPreviewComponent.prototype.createDeviceOperation = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.deviceConfigurationService.createDownloadConfigFileOperation(this.device, this.configurationType, this.configSnapshot.binaryUrl)];
                    case 1:
                        _a.operation = _c.sent();
                        _c.label = 2;
                    case 2:
                        if (!(this.operationToTrigger === DeviceConfigurationOperation.UPLOAD_CONFIG)) return [3 /*break*/, 4];
                        _b = this;
                        return [4 /*yield*/, this.deviceConfigurationService.createUploadConfigFileOperation(this.device, this.configurationType)];
                    case 3:
                        _b.operation = _c.sent();
                        _c.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationPreviewComponent.prototype.showOperation = function () {
        if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
            return !!this.operation;
        }
        return (this.operation &&
            [OperationStatus.PENDING, OperationStatus.EXECUTING, OperationStatus.FAILED].includes(this.operation.status));
    };
    ConfigurationPreviewComponent.prototype.showBinary = function () {
        if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
            return true;
        }
        return !this.showOperation();
    };
    ConfigurationPreviewComponent.prototype.isCreateOperationDisabled = function () {
        return (this.operation &&
            [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(this.operation.status));
    };
    ConfigurationPreviewComponent.prototype.updateOperation = function (operation) {
        if (operation &&
            operation[this.operationToTrigger] &&
            operation[this.operationToTrigger].type &&
            operation[this.operationToTrigger].type === this.configurationType) {
            this.operation = operation;
        }
    };
    ConfigurationPreviewComponent.prototype.getOperation = function () {
        return this.deviceConfigurationService.getLatestConfigFileOperation(this.device.id, this.configurationType, this.operationToTrigger);
    };
    ConfigurationPreviewComponent.prototype.download = function () {
        var blob = new Blob([this.configSnapshot.binary]);
        var fileName = this.configSnapshot.name;
        saveAs(blob, fileName);
    };
    ConfigurationPreviewComponent.prototype.saveToRepository = function () {
        return __awaiter(this, void 0, void 0, function () {
            var initialState, modal, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        initialState = {
                            configSnapshot: cloneDeep(this.configSnapshot)
                        };
                        modal = this.bsModal.show(SaveToRepositoryComponent, {
                            class: 'modal-sm',
                            initialState: initialState,
                            ignoreBackdropClick: true
                        }).content;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, modal.result];
                    case 2:
                        _a.sent();
                        this.deviceConfigurationService.updateRepositoryConfigList();
                        modal.close();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ConfigurationPreviewComponent.prototype.hasPermission = function () {
        return this.user.hasAnyRole(this.appState.currentUser.value, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_CREATE'
        ]);
    };
    ConfigurationPreviewComponent.prototype.ngOnDestroy = function () {
        this.operationsSubscription.unsubscribe();
    };
    ConfigurationPreviewComponent.ctorParameters = function () { return [
        { type: DeviceConfigurationService },
        { type: Realtime },
        { type: BsModalService },
        { type: UserService },
        { type: AppStateService }
    ]; };
    __decorate([
        Input()
    ], ConfigurationPreviewComponent.prototype, "device", void 0);
    __decorate([
        Input()
    ], ConfigurationPreviewComponent.prototype, "configurationType", void 0);
    __decorate([
        Input()
    ], ConfigurationPreviewComponent.prototype, "configSnapshot", void 0);
    __decorate([
        Input()
    ], ConfigurationPreviewComponent.prototype, "canSaveSnapshot", void 0);
    __decorate([
        Input()
    ], ConfigurationPreviewComponent.prototype, "actionButtonText", void 0);
    __decorate([
        Input()
    ], ConfigurationPreviewComponent.prototype, "actionButtonIcon", void 0);
    __decorate([
        Input()
    ], ConfigurationPreviewComponent.prototype, "operationToTrigger", void 0);
    ConfigurationPreviewComponent = __decorate([
        Component({
            selector: 'c8y-device-configuration-preview',
            template: "<div *ngIf=\"configSnapshot\">\n  <div class=\"content-flex-55 p-b-16\">\n    <div class=\"col-5 p-t-4\">\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Configuration</span>\n      <span *ngIf=\"configSnapshot.name; else emptyText\">\n        <strong>{{ configSnapshot.name }}</strong>\n      </span>\n      <ng-template #emptyText> --- </ng-template>\n    </div>\n    <div class=\"col-4 p-t-4\">\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Last updated</span>\n      <small *ngIf=\"configSnapshot.time; else emptyDate\">\n        {{ configSnapshot.time | date: 'medium' }}\n      </small>\n      <ng-template #emptyDate> --- </ng-template>\n    </div>\n    <div class=\"col-3\">\n      <button\n        class=\"btn btn-default btn-sm pull-right\"\n        type=\"button\"\n        title=\"{{ actionButtonText | translate }}\"\n        (click)=\"createDeviceOperation()\"\n        [disabled]=\"isCreateOperationDisabled()\"\n      >\n        <i [c8yIcon]=\"actionButtonIcon\"></i> {{ actionButtonText | translate }}\n      </button>\n    </div>\n  </div>\n  <div class=\"c8y-empty-state text-left\" *ngIf=\"!configSnapshot.binary && showBinary()\">\n    <h1 [c8yIcon]=\"'file-image-o'\"></h1>\n    <p>\n      <strong translate>No preview available.</strong><br />\n      <small translate>Could not fetch the file.</small>\n    </p>\n  </div>\n  <div *ngIf=\"configSnapshot.binary && showBinary()\">\n    <c8y-source-code-preview\n      [text]=\"configSnapshot.binary\"\n      [isDisabled]=\"true\"\n    ></c8y-source-code-preview>\n    <div *ngIf=\"canSaveSnapshot\" class=\"top-p-md\">\n      <button\n        type=\"button\"\n        class=\"btn btn-primary btn-sm pull-right left-m-sm\"\n        (click)=\"download()\"\n        translate\n      >\n        Download\n      </button>\n      <button\n        *ngIf=\"hasPermission()\"\n        type=\"button\"\n        class=\"btn btn-default btn-sm pull-right\"\n        (click)=\"saveToRepository()\"\n        translate\n      >\n        Save to repository\n      </button>\n    </div>\n  </div>\n  <div *ngIf=\"showOperation()\">\n    <c8y-device-configuration-operation\n      [operation]=\"operation\"\n    ></c8y-device-configuration-operation>\n  </div>\n</div>\n"
        })
    ], ConfigurationPreviewComponent);
    return ConfigurationPreviewComponent;
}());

var ConfigurationFilterPipe = /** @class */ (function () {
    function ConfigurationFilterPipe() {
    }
    ConfigurationFilterPipe.prototype.transform = function (items, filterTerm) {
        var _this = this;
        return filterTerm.trim().length === 0
            ? items
            : items.filter(function (item) {
                return _this.filterContainString(item.name, filterTerm) ||
                    _this.filterContainString(item.deviceType, filterTerm);
            });
    };
    ConfigurationFilterPipe.prototype.filterContainString = function (name, filterTerm) {
        var term = filterTerm.toLowerCase().trim();
        return name && name.toLowerCase().indexOf(term) > -1;
    };
    ConfigurationFilterPipe = __decorate([
        Pipe({
            name: 'configurationFilterPipe'
        })
    ], ConfigurationFilterPipe);
    return ConfigurationFilterPipe;
}());

var routes = [
    {
        context: ViewContext.Device,
        path: 'device-configuration',
        component: DeviceConfigurationComponent,
        label: gettext('Configuration'),
        icon: 'gears',
        canActivate: [DeviceConfigurationGuard]
    }
];
var ɵ0 = routes;
var DeviceConfigurationModule = /** @class */ (function () {
    function DeviceConfigurationModule() {
    }
    DeviceConfigurationModule = __decorate([
        NgModule({
            declarations: [
                DeviceConfigurationComponent,
                ConfigurationListComponent,
                ConfigurationOperationComponent,
                SourceCodePreviewComponent,
                ConfigurationPreviewComponent,
                ConfigurationFilterPipe,
                SaveToRepositoryComponent
            ],
            exports: [],
            imports: [CoreModule, TooltipModule],
            entryComponents: [DeviceConfigurationComponent, SaveToRepositoryComponent],
            providers: [
                DeviceConfigurationService,
                DeviceConfigurationGuard,
                {
                    provide: HOOK_ONCE_ROUTE,
                    useValue: ɵ0,
                    multi: true
                }
            ]
        })
    ], DeviceConfigurationModule);
    return DeviceConfigurationModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceConfigurationModule, ɵ0, DeviceConfigurationComponent as ɵa, DeviceConfigurationService as ɵb, ConfigurationListComponent as ɵc, ConfigurationOperationComponent as ɵd, SourceCodePreviewComponent as ɵe, ConfigurationPreviewComponent as ɵf, ConfigurationFilterPipe as ɵg, SaveToRepositoryComponent as ɵh, DeviceConfigurationGuard as ɵi };
//# sourceMappingURL=c8y-ngx-components-device-configuration.js.map
