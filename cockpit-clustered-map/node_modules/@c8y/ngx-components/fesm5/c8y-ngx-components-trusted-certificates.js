import { __awaiter, __generator, __decorate, __assign } from 'tslib';
import { Component, Injectable, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { gettext, AlertService, Status, ModalService, OptionsService, NavigatorNode, CoreModule, CommonModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { TrustedCertificateService, TenantOptionsService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { tap, switchMap } from 'rxjs/operators';
import { BehaviorSubject, pipe } from 'rxjs';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import { ReactiveFormsModule } from '@angular/forms';

var AddTrustedCertificateComponent = /** @class */ (function () {
    function AddTrustedCertificateComponent(modal, trustedCertificateService, alertService) {
        var _this = this;
        this.modal = modal;
        this.trustedCertificateService = trustedCertificateService;
        this.alertService = alertService;
        this.AUTO_REGISTRATION_POPOVER = gettext('All devices with credentials signed by this certificate will be able to communicate with the platform without a prior registration.');
        this.trustedCertificate = {
            status: 'DISABLED'
        };
        this.result = new Promise(function (resolve, reject) {
            _this._save = resolve;
            _this._cancel = reject;
        });
    }
    AddTrustedCertificateComponent.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.trustedCertificateService.create(this.trustedCertificate)];
                    case 1:
                        _a.sent();
                        this.alertService.success(gettext('Certificate saved.'));
                        this._save();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AddTrustedCertificateComponent.prototype.close = function () {
        this._cancel();
        this.modal.hide();
    };
    AddTrustedCertificateComponent.ctorParameters = function () { return [
        { type: BsModalRef },
        { type: TrustedCertificateService },
        { type: AlertService }
    ]; };
    AddTrustedCertificateComponent = __decorate([
        Component({
            selector: 'c8y-add-trusted-certificate',
            template: "<div class=\"modal-header bg-primary text-center text-white\">\n  <div style=\"font-size: 62px;\">\n    <span c8yIcon=\"certificate\"></span>\n  </div>\n  <h4 class=\"text-uppercase\" translate>\n    Add trusted certificate\n  </h4>\n</div>\n<div class=\"modal-body\">\n  <form #addTrustedCertificateForm=\"ngForm\" class=\"p-t-24\">\n    <c8y-form-group>\n      <label translate for=\"certificateName\">Certificate name</label>\n      <input\n        id=\"certificateName\"\n        type=\"text\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"certificateName\"\n        [(ngModel)]=\"trustedCertificate.name\"\n        placeholder=\"{{ 'e.g. My certificate' | translate }}\"\n        required\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"certificate\">Certificate</label>\n      <textarea\n        id=\"certificate\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"certificateInPemFormat\"\n        [(ngModel)]=\"trustedCertificate.certInPemFormat\"\n        placeholder=\"{{ 'Paste the certificate in PEM format here (required)' | translate }}\"\n        required\n      ></textarea>\n    </c8y-form-group>\n    <c8y-form-group>\n      <label class=\"c8y-checkbox\" title=\"{{ 'Auto registration' | translate }}\">\n        <input\n          id=\"autoRegistration\"\n          type=\"checkbox\"\n          name=\"autoRegistration\"\n          [(ngModel)]=\"trustedCertificate.autoRegistrationEnabled\"\n        /><span></span>&nbsp;\n        {{ 'Auto registration' | translate }}\n        <button\n          class=\"btn btn-clean\"\n          popover=\"{{ AUTO_REGISTRATION_POPOVER | translate }}\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\"></i>\n        </button>\n      </label>\n    </c8y-form-group>\n    <button\n      type=\"button\"\n      class=\"btn\"\n      name=\"certificateStatus\"\n      [(ngModel)]=\"trustedCertificate.status\"\n      btnCheckbox\n      btnCheckboxTrue=\"ENABLED\"\n      btnCheckboxFalse=\"DISABLED\"\n    >\n      <span\n        title=\"{{ 'Disabled`trusted certificate status`' | translate }}\"\n        [hidden]=\"trustedCertificate.status !== 'DISABLED'\"\n      >\n        {{ 'Disabled`trusted certificate status`' | translate }}\n      </span>\n      <span\n        title=\"{{ 'Enabled`trusted certificate status`' | translate }}\"\n        [hidden]=\"trustedCertificate.status !== 'ENABLED'\"\n      >\n        {{ 'Enabled`trusted certificate status`' | translate }}\n      </span>\n    </button>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n    Cancel\n  </button>\n\n  <button\n    title=\"{{ 'Add certificate' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"addTrustedCertificateForm.form.invalid || addTrustedCertificateForm.form.pristine\"\n    translate\n  >\n    Add certificate\n  </button>\n</div>\n"
        })
    ], AddTrustedCertificateComponent);
    return AddTrustedCertificateComponent;
}());

var TrustedCertificatesComponent = /** @class */ (function () {
    function TrustedCertificatesComponent(bsModal, alertService, trustedCertificateService, modalService, translateService) {
        var _this = this;
        this.bsModal = bsModal;
        this.alertService = alertService;
        this.trustedCertificateService = trustedCertificateService;
        this.modalService = modalService;
        this.translateService = translateService;
        this.reloading = new BehaviorSubject(false);
        this.reload = new BehaviorSubject(null);
        this.trustedCertificates = this.reload.pipe(tap(function () { return _this.reloading.next(true); }), switchMap(function () { return _this.getTrustedCertificates(); }), tap(function () { return _this.reloading.next(false); }));
        this.sortByExpirationDateAsc = pipe(tap(function (results) {
            return results.sort(function (n1, n2) { return n1.notAfter.localeCompare(n2.notAfter); });
        }));
    }
    TrustedCertificatesComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadTrustedCertificates()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TrustedCertificatesComponent.prototype.loadTrustedCertificates = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.reload.next();
                return [2 /*return*/];
            });
        });
    };
    TrustedCertificatesComponent.prototype.getTrustedCertificates = function () {
        var filter = {
            pageSize: 1000,
            withTotalPages: true,
        };
        return this.trustedCertificateService.list(filter);
    };
    TrustedCertificatesComponent.prototype.addTrustedCertificate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var modal, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modal = this.bsModal.show(AddTrustedCertificateComponent, {
                            class: 'modal-sm',
                            ignoreBackdropClick: true,
                        }).content;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, modal.result];
                    case 2:
                        _a.sent();
                        modal.close();
                        this.reload.next();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    TrustedCertificatesComponent.prototype.deleteTrustedCertificate = function (certificate, index) {
        return __awaiter(this, void 0, void 0, function () {
            var title, confirmationText, finalQuestion, certificateName, body, ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        title = gettext('Delete trusted certificate');
                        confirmationText = gettext('You are about to delete a trusted certificate "{{ certificateName }}".');
                        finalQuestion = gettext('Do you want to proceed?');
                        certificateName = certificate.name;
                        body = [
                            this.translateService.instant(confirmationText, {
                                certificateName: certificateName,
                            }),
                            this.translateService.instant(finalQuestion),
                        ].join(' ');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.modalService.confirm(title, body, Status.DANGER, { ok: gettext('Delete') })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.trustedCertificateService.delete(certificate.fingerprint)];
                    case 3:
                        _a.sent();
                        this.alertService.success(gettext('Certificate deleted.'));
                        this.reload.next();
                        return [3 /*break*/, 5];
                    case 4:
                        ex_2 = _a.sent();
                        this.alertService.addServerFailure(ex_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    TrustedCertificatesComponent.prototype.updateCertificate = function (trustedCertificate, updatingPart) {
        return __awaiter(this, void 0, void 0, function () {
            var ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.trustedCertificateService.update(__assign({ fingerprint: trustedCertificate.fingerprint }, updatingPart))];
                    case 1:
                        _a.sent();
                        this.alertService.success(gettext('Certificate saved.'));
                        return [3 /*break*/, 3];
                    case 2:
                        ex_3 = _a.sent();
                        this.alertService.addServerFailure(ex_3);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    TrustedCertificatesComponent.prototype.highlightDependingOnExpirationStatus = function (item) {
        var warningOffset = 24 * 60 * 60 * 1000 * 90; // 90 days
        var todayTimestamp = new Date().getTime();
        var warningTimestamp = new Date().getTime() + warningOffset;
        var notAfterTimestamp = new Date(item.notAfter).getTime();
        var expired = notAfterTimestamp < todayTimestamp;
        var expiresInLessThan90Days = notAfterTimestamp < warningTimestamp;
        if (expired) {
            return 'text-danger';
        }
        if (expiresInLessThan90Days) {
            return 'text-warning';
        }
        return '';
    };
    TrustedCertificatesComponent.ctorParameters = function () { return [
        { type: BsModalService },
        { type: AlertService },
        { type: TrustedCertificateService },
        { type: ModalService },
        { type: TranslateService }
    ]; };
    TrustedCertificatesComponent = __decorate([
        Component({
            selector: 'c8y-trusted-certificates',
            template: "<c8y-title>{{ 'Trusted certificates' | translate }}</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    title=\"{{ 'Add certificate' | translate }}\"\n    class=\"btn btn-link\"\n    (click)=\"addTrustedCertificate()\"\n  >\n    <i c8yIcon=\"plus-square\"></i> {{ 'Add trusted certificate' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\">\n  <button\n    title=\"{{ 'Reload' | translate }}\"\n    class=\"btn btn-link\"\n    (click)=\"loadTrustedCertificates()\"\n  >\n    <i c8yIcon=\"refresh\" [ngClass]=\"{ 'fa-spin': reloading | async }\"></i>\n    {{ 'Reload' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<div class=\"c8y-empty-state text-center\" *ngIf=\"(trustedCertificates | async)?.data.length === 0\">\n  <h1 class=\"c8y-icon fa fa-certificate\"></h1>\n  <h3 translate>No trusted certificates to display.</h3>\n  <p translate>Add your first certificate by clicking below.</p>\n  <p>\n    <button\n      title=\"{{ 'Add trusted certificate' | translate }}\"\n      (click)=\"addTrustedCertificate()\"\n      class=\"btn btn-primary\"\n      translate\n    >\n      Add trusted certificate\n    </button>\n  </p>\n</div>\n\n<c8y-list-group class=\"elevation-1\">\n  <c8y-li\n    *c8yFor=\"\n      let trustedCertificate of trustedCertificates | async;\n      let i = index;\n      pipe: sortByExpirationDateAsc;\n      loadMore: 'none'\n    \"\n  >\n    <c8y-li-icon>\n      <i c8yIcon=\"certificate\"></i>\n      <i\n        c8yIcon=\"check-circle\"\n        class=\"text-success\"\n        *ngIf=\"trustedCertificate.status === 'ENABLED'\"\n      ></i>\n      <i c8yIcon=\"ban\" class=\"text-danger\" *ngIf=\"trustedCertificate.status === 'DISABLED'\"></i>\n    </c8y-li-icon>\n\n    <c8y-li-body class=\"content-flex-50\">\n      <div class=\"col-6\">{{ trustedCertificate.name }}</div>\n      <div class=\"col-6\">\n        <span class=\"text-label-small m-r-8\" translate>Algorithm</span>\n        {{ trustedCertificate.algorithmName }}\n      </div>\n      <div class=\"col-6\">\n        <span class=\"text-label-small m-r-8\" translate>Expiration date</span>\n        <small [ngClass]=\"highlightDependingOnExpirationStatus(trustedCertificate)\">\n          <i c8yIcon=\"calendar\" class=\"m-r-4\"></i>\n          <span>{{ trustedCertificate.notAfter | date: 'medium' }}</span>\n        </small>\n      </div>\n      <div class=\"col-6\">\n        <span title=\"{{ 'Auto registration' | translate }}\" translate class=\"text-label-small m-r-8\"\n          >Auto registration</span\n        >\n        <small *ngIf=\"trustedCertificate.autoRegistrationEnabled\">{{\n          'Enabled`auto registration`' | translate\n        }}</small>\n        <small *ngIf=\"!trustedCertificate.autoRegistrationEnabled\">{{\n          'Disabled`auto registration`' | translate\n        }}</small>\n      </div>\n    </c8y-li-body>\n\n    <c8y-li-action\n      (click)=\"deleteTrustedCertificate(trustedCertificate, i)\"\n      icon=\"trash\"\n      label=\"{{ 'Delete' | translate }}\"\n    >\n    </c8y-li-action>\n\n    <c8y-li-collapse [item]=\"trustedCertificate\">\n      <div class=\"p-t-16 p-b-16\">\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <c8y-form-group>\n              <label class=\"control-label\" translate>\n                Certificate name\n              </label>\n              <div class=\"input-group input-group-editable\">\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"trustedCertificate.name\" />\n                <span></span>\n                <div class=\"input-group-btn\">\n                  <button\n                    title=\"{{ 'Update certificate name' | translate }}\"\n                    (click)=\"\n                      updateCertificate(trustedCertificate, { name: trustedCertificate.name })\n                    \"\n                    class=\"btn btn-primary\"\n                  >\n                    {{ 'Save' | translate }}\n                  </button>\n                </div>\n              </div>\n            </c8y-form-group>\n            <c8y-form-group>\n              <label class=\"c8y-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [(ngModel)]=\"trustedCertificate.autoRegistrationEnabled\"\n                  (ngModelChange)=\"\n                    updateCertificate(trustedCertificate, { autoRegistrationEnabled: $event })\n                  \"\n                />\n                <span></span>\n                <span translate> Auto registration</span>\n              </label>\n            </c8y-form-group>\n            <c8y-form-group>\n              <button\n                type=\"button\"\n                class=\"btn\"\n                name=\"certificateStatus\"\n                [(ngModel)]=\"trustedCertificate.status\"\n                btnCheckbox\n                btnCheckboxTrue=\"ENABLED\"\n                btnCheckboxFalse=\"DISABLED\"\n                (ngModelChange)=\"updateCertificate(trustedCertificate, { status: $event })\"\n              >\n                <span\n                  title=\"{{ 'Disabled`trusted certificate status`' | translate }}\"\n                  [hidden]=\"trustedCertificate.status !== 'DISABLED'\"\n                >\n                  {{ 'Disabled`trusted certificate status`' | translate }}\n                </span>\n                <span\n                  title=\"{{ 'Enabled`trusted certificate status`' | translate }}\"\n                  [hidden]=\"trustedCertificate.status !== 'ENABLED'\"\n                >\n                  {{ 'Enabled`trusted certificate status`' | translate }}\n                </span>\n              </button>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-md-4\">\n            <c8y-form-group>\n              <label class=\"control-label\" translate>\n                Certificate\n              </label>\n              <textarea\n                class=\"form-control no-resize\"\n                name=\"name\"\n                type=\"text\"\n                rows=\"10\"\n                readonly\n                [(ngModel)]=\"trustedCertificate.certInPemFormat\"\n              >\n              </textarea>\n            </c8y-form-group>\n          </div>\n          <div class=\"col-md-4 p-r-24\">\n            <label translate>Additional properties</label>\n            <div class=\"content-flex-30 separator-top p-t-4 p-b-4\">\n              <div class=\"col-4 text-label-small\" translate>Algorithm</div>\n              <div class=\"col-8 small text-break-word\">{{ trustedCertificate.algorithmName }}</div>\n            </div>\n            <div class=\"content-flex-30 separator-top p-t-4 p-b-4\">\n              <div class=\"col-4 text-label-small\" translate>Version</div>\n              <div class=\"col-8 small text-break-word\">{{ trustedCertificate.version }}</div>\n            </div>\n            <div class=\"content-flex-30 separator-top p-t-4 p-b-4\">\n              <div class=\"col-4 text-label-small\" translate>Valid from</div>\n              <div class=\"col-8 small text-break-word\">\n                {{ trustedCertificate.notBefore | date: 'medium' }}\n              </div>\n            </div>\n            <div class=\"content-flex-30 separator-top p-t-4 p-b-4\">\n              <div class=\"col-4 text-label-small\" translate>Issuer</div>\n              <div class=\"col-8 small text-break-word\">{{ trustedCertificate.issuer }}</div>\n            </div>\n            <div class=\"content-flex-30 separator-top p-t-4 p-b-4\">\n              <div class=\"col-4 text-label-small\" translate>Expiration date</div>\n              <div class=\"col-8 small text-break-word\">\n                {{ trustedCertificate.notAfter | date: 'medium' }}\n              </div>\n            </div>\n            <div class=\"content-flex-30 separator-top p-t-4 p-b-4\">\n              <div class=\"col-4 text-label-small\" translate>Serial number</div>\n              <div class=\"col-8 small text-break-word\">{{ trustedCertificate.serialNumber }}</div>\n            </div>\n            <div class=\"content-flex-30 separator-top p-t-4 p-b-4\">\n              <div class=\"col-4 text-label-small\">\n                {{ 'Subject`of a certificate`' | translate }}\n              </div>\n              <div class=\"col-8 small text-break-word\">{{ trustedCertificate.subject }}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </c8y-li-collapse>\n  </c8y-li>\n</c8y-list-group>\n"
        })
    ], TrustedCertificatesComponent);
    return TrustedCertificatesComponent;
}());

var TrustedCertificatesGuard = /** @class */ (function () {
    function TrustedCertificatesGuard(optionsService) {
        this.optionsService = optionsService;
    }
    TrustedCertificatesGuard.prototype.canActivate = function (route, state) {
        return this.isFeatureEnabled();
    };
    TrustedCertificatesGuard.prototype.isFeatureEnabled = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.isFeatureEnabledCache === undefined)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.optionsService.getTenantOption('oauth.internal.token', 'trusted-certificates.enabled', false)];
                    case 1:
                        _a.isFeatureEnabledCache = (_b.sent());
                        _b.label = 2;
                    case 2: return [2 /*return*/, this.isFeatureEnabledCache];
                }
            });
        });
    };
    TrustedCertificatesGuard.ctorParameters = function () { return [
        { type: OptionsService }
    ]; };
    TrustedCertificatesGuard = __decorate([
        Injectable()
    ], TrustedCertificatesGuard);
    return TrustedCertificatesGuard;
}());

var TrustedCertificatesNavigationFactory = /** @class */ (function () {
    function TrustedCertificatesNavigationFactory(tenantOptionsService, trustedCertificatesGuard) {
        this.tenantOptionsService = tenantOptionsService;
        this.trustedCertificatesGuard = trustedCertificatesGuard;
        this.nav = [];
    }
    TrustedCertificatesNavigationFactory.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var isFeatureEnabled;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.trustedCertificatesGuard.isFeatureEnabled()];
                    case 1:
                        isFeatureEnabled = _a.sent();
                        if (isFeatureEnabled && this.nav.length === 0) {
                            this.nav.push(new NavigatorNode({
                                label: gettext('Trusted certificates'),
                                icon: 'certificate',
                                path: '/trusted-certificates',
                                parent: gettext('Management'),
                                priority: 100
                            }));
                        }
                        return [2 /*return*/, this.nav];
                }
            });
        });
    };
    TrustedCertificatesNavigationFactory.ctorParameters = function () { return [
        { type: TenantOptionsService },
        { type: TrustedCertificatesGuard }
    ]; };
    TrustedCertificatesNavigationFactory = __decorate([
        Injectable()
    ], TrustedCertificatesNavigationFactory);
    return TrustedCertificatesNavigationFactory;
}());

var trustedCertificatesRoutes = [
    {
        path: 'trusted-certificates',
        component: TrustedCertificatesComponent,
        canActivate: [TrustedCertificatesGuard]
    }
];
var TrustedCertificatesModule = /** @class */ (function () {
    function TrustedCertificatesModule() {
    }
    TrustedCertificatesModule = __decorate([
        NgModule({
            declarations: [TrustedCertificatesComponent, AddTrustedCertificateComponent],
            exports: [],
            imports: [
                CoreModule,
                CommonModule,
                RouterModule.forRoot(trustedCertificatesRoutes, { useHash: true }),
                BsDropdownModule.forRoot(),
                TooltipModule,
                ReactiveFormsModule,
                ButtonsModule,
                PopoverModule
            ],
            entryComponents: [TrustedCertificatesComponent, AddTrustedCertificateComponent],
            providers: [
                {
                    provide: HOOK_NAVIGATOR_NODES,
                    useClass: TrustedCertificatesNavigationFactory,
                    multi: true
                },
                TrustedCertificatesGuard
            ]
        })
    ], TrustedCertificatesModule);
    return TrustedCertificatesModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { TrustedCertificatesModule, TrustedCertificatesComponent as ɵa, AddTrustedCertificateComponent as ɵb, TrustedCertificatesGuard as ɵc, TrustedCertificatesNavigationFactory as ɵd };
//# sourceMappingURL=c8y-ngx-components-trusted-certificates.js.map
