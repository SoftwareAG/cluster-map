import { __awaiter, __generator, __values, __decorate } from 'tslib';
import { Injectable, Component, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { gettext, Status, ModalService, AlertService, NavigatorNode, HOOK_NAVIGATOR_NODES, CoreModule, CommonModule, FormsModule } from '@c8y/ngx-components';
import { UpgradeModule } from '@c8y/ngx-components/upgrade';
import { FetchClient, TenantOptionsService } from '@c8y/client';
import { pick } from 'lodash-es';

var SmsGatewayService = /** @class */ (function () {
    function SmsGatewayService(client, tenantOptionsService) {
        this.client = client;
        this.tenantOptionsService = tenantOptionsService;
        this.category = 'messaging';
        this.basePath = 'service/register/messaging';
        this.providerTemplates = {
            cepConfig: {
                'sms.senderAddress': 'cumulocity',
                'sms.senderName': 'cumulocity'
            },
            openit: {
                provider: 'openit',
                'openit.baseUrl': 'https://sms.plusserver.com/put.php'
            },
            sms77: {
                provider: 'sms77',
                'sms77.url': 'https://gateway.sms77.io/api/sms'
            }
        };
    }
    SmsGatewayService.prototype.getProviderConfig = function () {
        return this.tenantOptionsService.detail({ category: this.category, key: '' });
    };
    SmsGatewayService.prototype.saveProviderConfig = function (newConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var providerTemplate, cepConfig, config;
            return __generator(this, function (_a) {
                providerTemplate = this.providerTemplates[newConfig.provider];
                cepConfig = this.providerTemplates.cepConfig;
                Object.assign(newConfig, providerTemplate, cepConfig);
                config = {
                    method: 'PUT',
                    headers: { 'content-type': 'application/json' },
                    body: JSON.stringify(newConfig)
                };
                return [2 /*return*/, this.client.fetch(this.basePath, config)];
            });
        });
    };
    SmsGatewayService.prototype.deleteProviderConfig = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var providerTemplate;
            return __generator(this, function (_a) {
                providerTemplate = this.providerTemplates[config.provider];
                Object.assign(config, providerTemplate);
                return [2 /*return*/, this.deleteProviderOptions(config)];
            });
        });
    };
    SmsGatewayService.prototype.deleteProviderOptions = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, optionKey, e_1_1;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _a = __values(Object.keys(options)), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 4];
                        optionKey = _b.value;
                        return [4 /*yield*/, this.tenantOptionsService.delete({ category: this.category, key: optionKey })];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    SmsGatewayService.ctorParameters = function () { return [
        { type: FetchClient },
        { type: TenantOptionsService }
    ]; };
    SmsGatewayService = __decorate([
        Injectable()
    ], SmsGatewayService);
    return SmsGatewayService;
}());

var SmsGatewayComponent = /** @class */ (function () {
    function SmsGatewayComponent(modalService, alertService, smsGatewayService) {
        this.modalService = modalService;
        this.alertService = alertService;
        this.smsGatewayService = smsGatewayService;
        this.smsProviders = [
            { id: 'openit', name: 'OpenIT' },
            { id: 'sms77', name: 'sms77' }
        ];
        this.supportedConfigOptions = [
            'provider',
            'openit.username',
            'credentials.openit.password',
            'credentials.sms77.api.key'
        ];
        this.pageTitle = gettext('SMS provider');
    }
    SmsGatewayComponent.prototype.ngOnInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.smsConfig = this.getEmptyConfig();
                        this.oldConfig = this.getEmptyConfig();
                        return [4 /*yield*/, this.smsGatewayService.getProviderConfig()];
                    case 1:
                        res = _a.sent();
                        if (this.isSupportedProvider(res.data)) {
                            this.smsConfig = this.getConfigurableProperties(res.data);
                            this.oldConfig = this.smsConfig;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SmsGatewayComponent.prototype.getConfigurableProperties = function (config) {
        return pick(config, this.supportedConfigOptions);
    };
    SmsGatewayComponent.prototype.isSupportedProvider = function (config) {
        return this.smsProviders.some(function (prov) { return prov.id === config.provider; });
    };
    SmsGatewayComponent.prototype.saveSMSGatewayConfiguration = function (form) {
        return __awaiter(this, void 0, void 0, function () {
            var res, data, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.smsGatewayService.saveProviderConfig(this.smsConfig)];
                    case 1:
                        res = _b.sent();
                        if (!(res && res.status !== 200)) return [3 /*break*/, 5];
                        if (!res.json) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = undefined;
                        _b.label = 4;
                    case 4:
                        data = _a;
                        this.alertService.addServerFailure({ data: data, res: res });
                        return [3 /*break*/, 6];
                    case 5:
                        this.alertService.success(gettext('Credentials updated.'));
                        Object.assign(this.oldConfig, this.smsConfig);
                        form.pristine = true;
                        _b.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    SmsGatewayComponent.prototype.deleteSMSGatewayConfiguration = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.modalService.confirm(gettext('Delete credentials'), gettext("You are about to delete SMS provider credentials. Deleting credentials will lock out any users with\n      SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication.\n      Do you want to proceed?"), Status.DANGER, { ok: gettext('Delete') })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.smsGatewayService.deleteProviderConfig(this.oldConfig)];
                    case 2:
                        _a.sent();
                        this.alertService.success(gettext('Credentials deleted.'));
                        this.smsConfig = this.getEmptyConfig();
                        this.oldConfig = this.getEmptyConfig();
                        return [2 /*return*/];
                }
            });
        });
    };
    SmsGatewayComponent.prototype.getEmptyConfig = function () {
        return {
            provider: undefined
        };
    };
    SmsGatewayComponent.ctorParameters = function () { return [
        { type: ModalService },
        { type: AlertService },
        { type: SmsGatewayService }
    ]; };
    SmsGatewayComponent = __decorate([
        Component({
            selector: 'c8y-sms-gateway',
            template: "<c8y-title>{{ pageTitle | translate }}</c8y-title>\n<div class=\"row\">\n  <div class=\"col-xs-12 col-sm-10 col-md-8 col-lg-6\">\n    <form\n      class=\"card\"\n      #smsGatewayForm=\"ngForm\"\n      (ngSubmit)=\"smsGatewayForm.form.valid && saveSMSGatewayConfiguration(smsGatewayForm.form)\"\n    >\n      <div class=\"card-header\">\n        <h4 class=\"card-title\" translate>Credentials</h4>\n      </div>\n      <div class=\"card-block\">\n        <p class=\"bottom-m\" translate>\n          Enter your credentials from your SMS provider. This enables platform features that utilize\n          SMS services (e.g. two-factor authentication and user notifications).\n        </p>\n        <label translate>SMS provider</label>\n        <div class=\"form-group\">\n          <ul class=\"list-unstyled\">\n            <li *ngFor=\"let provider of smsProviders\">\n              <label class=\"c8y-radio\">\n                <input\n                  class=\"form-control\"\n                  type=\"radio\"\n                  name=\"providerName\"\n                  [(ngModel)]=\"smsConfig.provider\"\n                  [value]=\"provider.id\"\n                />\n                <span></span>\n                {{ provider.name | translate }}\n              </label>\n            </li>\n          </ul>\n        </div>\n        <div class=\"form-group\" *ngIf=\"smsConfig.provider === 'openit'\">\n          <label translate for=\"userName\">Username</label>\n          <input\n            id=\"userName\"\n            class=\"form-control\"\n            type=\"text\"\n            autocomplete=\"off\"\n            name=\"userName\"\n            [(ngModel)]=\"smsConfig['openit.username']\"\n            placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n            required\n          />\n        </div>\n        <div class=\"form-group\" *ngIf=\"smsConfig.provider === 'openit'\">\n          <label translate for=\"password\">Password</label>\n          <input\n            id=\"password\"\n            class=\"form-control\"\n            type=\"password\"\n            autocomplete=\"off\"\n            name=\"password\"\n            [(ngModel)]=\"smsConfig['credentials.openit.password']\"\n            placeholder=\"{{ 'e.g. my_password' | translate }}\"\n            required\n          />\n        </div>\n        <div class=\"form-group\" *ngIf=\"smsConfig.provider === 'sms77'\">\n          <label translate for=\"apiKey\">API key</label>\n          <input\n            id=\"apiKey\"\n            class=\"form-control\"\n            type=\"text\"\n            autocomplete=\"off\"\n            name=\"apiKey\"\n            [(ngModel)]=\"smsConfig['credentials.sms77.api.key']\"\n            required\n          />\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <button\n          type=\"button\"\n          class=\"btn btn-default\"\n          (click)=\"deleteSMSGatewayConfiguration()\"\n          [disabled]=\"!(oldConfig && oldConfig.provider)\"\n          title=\"{{ 'Delete' | translate }}\"\n          translate\n        >\n          Delete\n        </button>\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary\"\n          [disabled]=\"!smsGatewayForm.form.valid || smsGatewayForm.form.pristine\"\n          title=\"{{ 'Save' | translate }}\"\n          translate\n        >\n          Save\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
        })
    ], SmsGatewayComponent);
    return SmsGatewayComponent;
}());

var smsGatewayRoutes = [{ path: 'smsgateway', component: SmsGatewayComponent }];
var ɵ0 = [new NavigatorNode({
        label: gettext('SMS provider'),
        path: 'smsgateway',
        icon: 'envelope-o',
        parent: gettext('Settings'),
        priority: 1000
    })];
var navigatorNodesProvider = {
    provide: HOOK_NAVIGATOR_NODES,
    useValue: ɵ0,
    multi: true
};
var SmsGatewayModule = /** @class */ (function () {
    function SmsGatewayModule() {
    }
    SmsGatewayModule = __decorate([
        NgModule({
            declarations: [SmsGatewayComponent],
            exports: [SmsGatewayComponent],
            imports: [
                CoreModule,
                CommonModule,
                FormsModule,
                RouterModule.forRoot(smsGatewayRoutes, { useHash: true }),
                UpgradeModule
            ],
            entryComponents: [SmsGatewayComponent],
            providers: [SmsGatewayService, navigatorNodesProvider]
        })
    ], SmsGatewayModule);
    return SmsGatewayModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { SmsGatewayComponent, SmsGatewayModule, ɵ0, SmsGatewayService as ɵa };
//# sourceMappingURL=c8y-ngx-components-sms-gateway.js.map
