import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { ITrustedCertificate, TrustedCertificateService } from '@c8y/client';
import { AlertService, gettext } from '@c8y/ngx-components';
var AddTrustedCertificateComponent = /** @class */ (function () {
    function AddTrustedCertificateComponent(modal, trustedCertificateService, alertService) {
        var _this = this;
        this.modal = modal;
        this.trustedCertificateService = trustedCertificateService;
        this.alertService = alertService;
        this.AUTO_REGISTRATION_POPOVER = gettext('All devices with credentials signed by this certificate will be able to communicate with the platform without a prior registration.');
        this.trustedCertificate = {
            status: 'DISABLED'
        };
        this.result = new Promise(function (resolve, reject) {
            _this._save = resolve;
            _this._cancel = reject;
        });
    }
    AddTrustedCertificateComponent.prototype.save = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.trustedCertificateService.create(this.trustedCertificate)];
                    case 1:
                        _a.sent();
                        this.alertService.success(gettext('Certificate saved.'));
                        this._save();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AddTrustedCertificateComponent.prototype.close = function () {
        this._cancel();
        this.modal.hide();
    };
    AddTrustedCertificateComponent.ctorParameters = function () { return [
        { type: BsModalRef },
        { type: TrustedCertificateService },
        { type: AlertService }
    ]; };
    AddTrustedCertificateComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-add-trusted-certificate',
            template: "<div class=\"modal-header bg-primary text-center text-white\">\n  <div style=\"font-size: 62px;\">\n    <span c8yIcon=\"certificate\"></span>\n  </div>\n  <h4 class=\"text-uppercase\" translate>\n    Add trusted certificate\n  </h4>\n</div>\n<div class=\"modal-body\">\n  <form #addTrustedCertificateForm=\"ngForm\" class=\"p-t-24\">\n    <c8y-form-group>\n      <label translate for=\"certificateName\">Certificate name</label>\n      <input\n        id=\"certificateName\"\n        type=\"text\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"certificateName\"\n        [(ngModel)]=\"trustedCertificate.name\"\n        placeholder=\"{{ 'e.g. My certificate' | translate }}\"\n        required\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"certificate\">Certificate</label>\n      <textarea\n        id=\"certificate\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"certificateInPemFormat\"\n        [(ngModel)]=\"trustedCertificate.certInPemFormat\"\n        placeholder=\"{{ 'Paste the certificate in PEM format here (required)' | translate }}\"\n        required\n      ></textarea>\n    </c8y-form-group>\n    <c8y-form-group>\n      <label class=\"c8y-checkbox\" title=\"{{ 'Auto registration' | translate }}\">\n        <input\n          id=\"autoRegistration\"\n          type=\"checkbox\"\n          name=\"autoRegistration\"\n          [(ngModel)]=\"trustedCertificate.autoRegistrationEnabled\"\n        /><span></span>&nbsp;\n        {{ 'Auto registration' | translate }}\n        <button\n          class=\"btn btn-clean\"\n          popover=\"{{ AUTO_REGISTRATION_POPOVER | translate }}\"\n          triggers=\"focus\"\n        >\n          <i [c8yIcon]=\"'question-circle-o'\"></i>\n        </button>\n      </label>\n    </c8y-form-group>\n    <button\n      type=\"button\"\n      class=\"btn\"\n      name=\"certificateStatus\"\n      [(ngModel)]=\"trustedCertificate.status\"\n      btnCheckbox\n      btnCheckboxTrue=\"ENABLED\"\n      btnCheckboxFalse=\"DISABLED\"\n    >\n      <span\n        title=\"{{ 'Disabled`trusted certificate status`' | translate }}\"\n        [hidden]=\"trustedCertificate.status !== 'DISABLED'\"\n      >\n        {{ 'Disabled`trusted certificate status`' | translate }}\n      </span>\n      <span\n        title=\"{{ 'Enabled`trusted certificate status`' | translate }}\"\n        [hidden]=\"trustedCertificate.status !== 'ENABLED'\"\n      >\n        {{ 'Enabled`trusted certificate status`' | translate }}\n      </span>\n    </button>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n    Cancel\n  </button>\n\n  <button\n    title=\"{{ 'Add certificate' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"addTrustedCertificateForm.form.invalid || addTrustedCertificateForm.form.pristine\"\n    translate\n  >\n    Add certificate\n  </button>\n</div>\n"
        })
    ], AddTrustedCertificateComponent);
    return AddTrustedCertificateComponent;
}());
export { AddTrustedCertificateComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXRydXN0ZWQtY2VydGlmaWNhdGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy90cnVzdGVkLWNlcnRpZmljYXRlcy8iLCJzb3VyY2VzIjpbImFkZC10cnVzdGVkLWNlcnRpZmljYXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNNUQ7SUFhRSx3Q0FDVSxLQUFpQixFQUNqQix5QkFBb0QsRUFDcEQsWUFBMEI7UUFIcEMsaUJBSUk7UUFITSxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQ2pCLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMkI7UUFDcEQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFmcEMsOEJBQXlCLEdBQUcsT0FBTyxDQUFDLHFJQUFxSSxDQUFDLENBQUM7UUFDM0ssdUJBQWtCLEdBQWlDO1lBQ2pELE1BQU0sRUFBRSxVQUFVO1NBQ25CLENBQUM7UUFFRixXQUFNLEdBQWlCLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDakQsS0FBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7WUFDckIsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFRQSxDQUFDO0lBRUUsNkNBQUksR0FBVjs7Ozs7Ozt3QkFFSSxxQkFBTSxJQUFJLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFBOzt3QkFBcEUsU0FBb0UsQ0FBQzt3QkFDckUsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQzt3QkFDekQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOzs7O3dCQUViLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsSUFBRSxDQUFDLENBQUM7Ozs7OztLQUUxQztJQUVELDhDQUFLLEdBQUw7UUFDRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7O2dCQWxCZ0IsVUFBVTtnQkFDVSx5QkFBeUI7Z0JBQ3RDLFlBQVk7O0lBaEJ6Qiw4QkFBOEI7UUFKMUMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDZCQUE2QjtZQUN2Qyw4K0ZBQXVEO1NBQ3hELENBQUM7T0FDVyw4QkFBOEIsQ0FpQzFDO0lBQUQscUNBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQWpDWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IElUcnVzdGVkQ2VydGlmaWNhdGUsIFRydXN0ZWRDZXJ0aWZpY2F0ZVNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFkZC10cnVzdGVkLWNlcnRpZmljYXRlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FkZC10cnVzdGVkLWNlcnRpZmljYXRlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBZGRUcnVzdGVkQ2VydGlmaWNhdGVDb21wb25lbnQge1xuICBBVVRPX1JFR0lTVFJBVElPTl9QT1BPVkVSID0gZ2V0dGV4dCgnQWxsIGRldmljZXMgd2l0aCBjcmVkZW50aWFscyBzaWduZWQgYnkgdGhpcyBjZXJ0aWZpY2F0ZSB3aWxsIGJlIGFibGUgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgcGxhdGZvcm0gd2l0aG91dCBhIHByaW9yIHJlZ2lzdHJhdGlvbi4nKTtcbiAgdHJ1c3RlZENlcnRpZmljYXRlOiBQYXJ0aWFsPElUcnVzdGVkQ2VydGlmaWNhdGU+ID0ge1xuICAgIHN0YXR1czogJ0RJU0FCTEVEJ1xuICB9O1xuXG4gIHJlc3VsdDogUHJvbWlzZTxhbnk+ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRoaXMuX3NhdmUgPSByZXNvbHZlO1xuICAgIHRoaXMuX2NhbmNlbCA9IHJlamVjdDtcbiAgfSk7XG4gIHByaXZhdGUgX3NhdmU7XG4gIHByaXZhdGUgX2NhbmNlbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG1vZGFsOiBCc01vZGFsUmVmLFxuICAgIHByaXZhdGUgdHJ1c3RlZENlcnRpZmljYXRlU2VydmljZTogVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZSxcbiAgICBwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyBzYXZlKCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnRydXN0ZWRDZXJ0aWZpY2F0ZVNlcnZpY2UuY3JlYXRlKHRoaXMudHJ1c3RlZENlcnRpZmljYXRlKTtcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoZ2V0dGV4dCgnQ2VydGlmaWNhdGUgc2F2ZWQuJykpO1xuICAgICAgdGhpcy5fc2F2ZSgpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5hZGRTZXJ2ZXJGYWlsdXJlKGV4KTtcbiAgICB9XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9jYW5jZWwoKTtcbiAgICB0aGlzLm1vZGFsLmhpZGUoKTtcbiAgfVxufVxuIl19