import * as tslib_1 from "tslib";
import { Component, Input, Output, ViewChild, EventEmitter } from '@angular/core';
import { AppLogsService } from './app-logs.service';
import { fromEvent, Subject, of, interval, NEVER } from 'rxjs';
import { filter, catchError, tap, debounce, switchMap, takeUntil, finalize, delay, repeat, merge, scan } from 'rxjs/operators';
var AppLogsAutoRefreshComponent = /** @class */ (function () {
    function AppLogsAutoRefreshComponent(appLogsService) {
        this.appLogsService = appLogsService;
        this.cancel$ = new Subject();
        this.isAutoRefreshDisabled = false;
        this.logsToOutput = this.getEmptyLogsJson();
        this.isAutoRefreshOn = false;
        this.onNewLogs = new EventEmitter();
        this.toggleState = function (currentState) { return !currentState; };
    }
    Object.defineProperty(AppLogsAutoRefreshComponent.prototype, "buttonsDisabled", {
        set: function (areDisabled) {
            this.isAutoRefreshDisabled = areDisabled;
            if (areDisabled && this.isAutoRefreshOn) {
                this.cancel$.next(false);
            }
        },
        enumerable: true,
        configurable: true
    });
    AppLogsAutoRefreshComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var clicks$ = fromEvent(this.button.nativeElement, 'click').pipe(merge(this.cancel$), debounce(function () { return interval(300); }), scan(this.toggleState, false), tap(function (isAutoRefreshOn) { return _this.setButtonState(isAutoRefreshOn); }), switchMap(function (isOn) { return (isOn ? _this.watchForNewLogs() : NEVER); }));
        this.subscription = clicks$.subscribe();
    };
    AppLogsAutoRefreshComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    AppLogsAutoRefreshComponent.prototype.setButtonState = function (isAutoRefreshOn) {
        this.isAutoRefreshOn = isAutoRefreshOn;
    };
    AppLogsAutoRefreshComponent.prototype.watchForNewLogs = function () {
        var _this = this;
        return this.startPolling().pipe(takeUntil(this.cancel$.pipe(filter(function (isAutoRefreshOn) { return isAutoRefreshOn === false; }))), finalize(function () {
            _this.isAutoRefreshOn = false;
        }));
    };
    AppLogsAutoRefreshComponent.prototype.startPolling = function () {
        var _this = this;
        return of(1).pipe(switchMap(function () { return _this.getNewLogs().pipe(catchError(function (er) { return of(_this.getEmptyLogsJson()); })); }), tap(function (logs) { return _this.updateLogsToOutput(logs); }), delay(10000), repeat());
    };
    AppLogsAutoRefreshComponent.prototype.getNewLogs = function () {
        return this.appLogsService.getLogs$(this.getAppId(), this.getInstanceName());
    };
    AppLogsAutoRefreshComponent.prototype.getAppId = function () {
        return this.mo.applicationId;
    };
    AppLogsAutoRefreshComponent.prototype.getInstanceName = function () {
        return this.selectedInstance.name;
    };
    AppLogsAutoRefreshComponent.prototype.updateLogsToOutput = function (newLogs) {
        var dateFrom = newLogs.dateFrom, dateTo = newLogs.dateTo;
        if (dateFrom && dateTo) {
            this.logsToOutput = tslib_1.__assign({}, newLogs);
            this.onNewLogs.emit(this.logsToOutput);
        }
    };
    AppLogsAutoRefreshComponent.prototype.getEmptyLogsJson = function () {
        return {
            dateFrom: null,
            dateTo: null,
            logs: '',
            truncated: false
        };
    };
    AppLogsAutoRefreshComponent.ctorParameters = function () { return [
        { type: AppLogsService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], AppLogsAutoRefreshComponent.prototype, "selectedInstance", void 0);
    tslib_1.__decorate([
        Input()
    ], AppLogsAutoRefreshComponent.prototype, "mo", void 0);
    tslib_1.__decorate([
        Input()
    ], AppLogsAutoRefreshComponent.prototype, "buttonsDisabled", null);
    tslib_1.__decorate([
        Output()
    ], AppLogsAutoRefreshComponent.prototype, "onNewLogs", void 0);
    tslib_1.__decorate([
        ViewChild('autoRefresh', { static: true })
    ], AppLogsAutoRefreshComponent.prototype, "button", void 0);
    AppLogsAutoRefreshComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-app-logs-auto-refresh',
            template: "<button #autoRefresh\n  type=\"button\"\n  class=\"btn btn-link c8y-realtime\"\n  [ngStyle]=\"{'width': 'auto'}\"\n  title=\"{{'Toggle auto refresh' | translate}}\"\n  [disabled]=\"isAutoRefreshDisabled\"\n>\n  <span class=\"c8y-pulse\" [ngClass]=\"isAutoRefreshOn ? 'active' : 'inactive'\"></span>\n  {{'Auto refresh' | translate}}\n</button>"
        })
    ], AppLogsAutoRefreshComponent);
    return AppLogsAutoRefreshComponent;
}());
export { AppLogsAutoRefreshComponent };
//# sourceMappingURL=data:application/json;base64,