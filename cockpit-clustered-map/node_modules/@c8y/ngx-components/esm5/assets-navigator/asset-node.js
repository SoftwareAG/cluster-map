import * as tslib_1 from "tslib";
import { gettext, NavigatorNode, DeviceStatusComponent } from '@c8y/ngx-components';
import { get } from 'lodash-es';
import { Subject } from 'rxjs';
import { LoadMoreNode } from './load-more-node';
import { GroupFragment } from './group-fragment.model';
var Action;
(function (Action) {
    Action[Action["FETCH"] = 0] = "FETCH";
    Action[Action["NEXT"] = 1] = "NEXT";
    Action[Action["REFRESH"] = 2] = "REFRESH";
})(Action || (Action = {}));
var AssetNode = /** @class */ (function (_super) {
    tslib_1.__extends(AssetNode, _super);
    function AssetNode(service, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        _this.service = service;
        _this.root = _this.root || false;
        _this.mo = _this.mo || {};
        _this.path = _this.root ? 'group' : (_this.isDevice ? "device/" + _this.mo.id : "group/" + _this.mo.id);
        _this.draggable = !_this.service.moduleConfig.disableDragAndDrop && !_this.root;
        _this.droppable = !_this.service.moduleConfig.disableDragAndDrop && !_this.isDevice;
        _this.routerLinkExact = _this.root;
        _this.updateIcon(false);
        _this.onUpdateSubscription = _this.service
            .onUpdate(_this)
            .subscribe(function (_a) {
            var data = _a.data, method = _a.method;
            return _this.refresh(data, method);
        });
        return _this;
    }
    Object.defineProperty(AssetNode.prototype, "label", {
        get: function () {
            return (this.root && gettext('Groups')) || this.mo.name || '--';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssetNode.prototype, "hasChildren", {
        get: function () {
            return this.root || this.service.groups.isGroup(this.mo);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssetNode.prototype, "iconComponent", {
        get: function () {
            return this.isDevice ? DeviceStatusComponent : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssetNode.prototype, "isDevice", {
        get: function () {
            return !!(this.mo.c8y_IsDevice || get(this.mo, 'deviceParents.references.length'));
        },
        enumerable: true,
        configurable: true
    });
    AssetNode.prototype.openOnStart = function (url) {
        var urlRegex = /^\/group\//;
        if (this.root) {
            if (this.service.moduleConfig.openOnStart || urlRegex.test(url)) {
                return true;
            }
        }
        var matches = url.match(/\/(group)\/(\d+)/);
        var isMatch = false;
        if (matches) {
            var id_1 = matches[2];
            isMatch = [].concat(get(this.mo, 'childAssets.references', [])).some(function (_a) {
                var managedObject = _a.managedObject;
                return managedObject.id === id_1;
            });
            return isMatch;
        }
        return false;
    };
    AssetNode.prototype.refresh = function (mo, method) {
        if (mo === void 0) { mo = {}; }
        if (method === void 0) { method = 'GET'; }
        if (mo.id === this.mo.id) {
            this.mo = mo;
        }
        else if (method === 'DELETE') {
            this.parents.forEach(function (node) { return node.refresh(); });
            return;
        }
        if (this.events) {
            this.events.next(Action.REFRESH);
        }
    };
    AssetNode.prototype.click = function (options) {
        if (options === void 0) { options = {}; }
        if (this.isDevice) {
            this.service.preferBreadcrumb(this.parents);
            return;
        }
        if (!this.events) {
            this.hookEvents();
        }
        this.updateIcon(options.open);
        if (options.open) {
            this.events.next(Action.FETCH);
        }
    };
    AssetNode.prototype.addManagedObject = function (mo) {
        var childAdditions = this.mo.childAdditions;
        if (!this.isChildAddition(childAdditions, mo)) {
            this.add(this.service.createChildNode(mo));
        }
    };
    AssetNode.prototype.isChildAddition = function (childAdditions, mo) {
        return (childAdditions &&
            childAdditions.references.some(function (_a) {
                var id = _a.managedObject.id;
                return id === mo.id;
            }));
    };
    AssetNode.prototype.destroy = function () {
        this.onUpdateSubscription.unsubscribe();
    };
    Object.defineProperty(AssetNode.prototype, "canDrop", {
        get: function () {
            var _this = this;
            var nodeToMove = this.service.draggedData;
            if (nodeToMove) {
                var shouldGetChildOfItsOwn = !!nodeToMove.find(function (child) { return child === _this; });
                var isAlreadyChild = this.children
                    .some(function (child) { return child.mo && child.mo.id === nodeToMove.mo.id; });
                var preventMove = this === nodeToMove || shouldGetChildOfItsOwn || isAlreadyChild;
                return this.droppable && !preventMove;
            }
            return this.droppable;
        },
        enumerable: true,
        configurable: true
    });
    AssetNode.prototype.dragStart = function ($event) {
        _super.prototype.dragStart.call(this, $event);
        this.service.draggedData = this;
        this.service.rootNode.droppable = !this.isDevice;
    };
    AssetNode.prototype.dragEnd = function ($event) {
        _super.prototype.dragEnd.call(this, $event);
    };
    AssetNode.prototype.drop = function ($event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var nodeToMove;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.drop.call(this, $event);
                        nodeToMove = this.service.draggedData;
                        if (!this.canDrop) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.moveNode(nodeToMove)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        this.draggedHover = false;
                        this.service.draggedData = undefined;
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.fetch = function () {
        return this.root ? this.service.getRootNodes() : this.service.getGroupItems(this.mo.id);
    };
    AssetNode.prototype.moveNode = function (nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var isCopy, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, 7, 8]);
                        return [4 /*yield*/, this.showDropConfirm(nodeToMove)];
                    case 1:
                        isCopy = _a.sent();
                        return [4 /*yield*/, this.verifyNodeAccess(nodeToMove)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.addMovedNode(nodeToMove)];
                    case 3:
                        _a.sent();
                        if (!!isCopy) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.removeMovedNode(nodeToMove)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        this.expand();
                        return [3 /*break*/, 8];
                    case 6:
                        ex_1 = _a.sent();
                        if (ex_1) {
                            this.service.alert.addServerFailure(ex_1);
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        this.draggedHover = false;
                        this.service.draggedData = undefined;
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.showDropConfirm = function (nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var buttons;
            return tslib_1.__generator(this, function (_a) {
                this.confirm.title = gettext('Move');
                this.confirm.message = gettext('Do you want to move the group?');
                buttons = [{
                        label: gettext('Cancel'),
                        action: function () { return Promise.reject(); }
                    }, {
                        label: gettext('Move'),
                        status: 'default',
                        action: function () { return Promise.resolve(false); }
                    }];
                if (nodeToMove.isDevice) {
                    this.confirm.title = gettext('Move or add');
                    this.confirm.message = gettext('Do you want to move or add the device?');
                    buttons.push({
                        label: gettext('Add'),
                        status: 'primary',
                        action: function () { return Promise.resolve(true); }
                    });
                }
                return [2 /*return*/, this.confirm.show(buttons)];
            });
        });
    };
    AssetNode.prototype.verifyNodeAccess = function (nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.service.inventory.update({ id: nodeToMove.mo.id })];
            });
        });
    };
    AssetNode.prototype.addMovedNode = function (nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var mo, data, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.root) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.service.inventory.update({ id: nodeToMove.mo.id, type: GroupFragment.groupType })];
                    case 1:
                        data = (_a.sent()).data;
                        mo = data;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.service.inventory.childAssetsAdd(nodeToMove.mo, this.mo)];
                    case 3:
                        data = (_a.sent()).data;
                        mo = data;
                        _a.label = 4;
                    case 4:
                        this.addManagedObject(mo);
                        return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.removeMovedNode = function (nodeToMove) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, parent_1, e_1_1;
            var e_1, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 8, 9, 10]);
                        _a = tslib_1.__values(nodeToMove.parents), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 7];
                        parent_1 = _b.value;
                        if (parent_1.mo && parent_1.mo.type === GroupFragment.dynamicGroupType) {
                            return [3 /*break*/, 7]; // smart groups don't need to be changed
                        }
                        if (!parent_1.root) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.service.inventory.update({ id: nodeToMove.mo.id, type: GroupFragment.subGroupType })];
                    case 2:
                        _d.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.service.inventory.childAssetsRemove(nodeToMove.mo, parent_1.mo)];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        parent_1.remove(nodeToMove);
                        _d.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.hookEvents = function () {
        var _this = this;
        this.events = new Subject();
        this.events.subscribe(function (evt) {
            if (!_this.loading) {
                _this.handleEvent(evt);
            }
        });
    };
    AssetNode.prototype.handleEvent = function (evt) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(!this.children.length && evt === Action.FETCH)) return [3 /*break*/, 2];
                        this.loading = true;
                        _a = this.addNodes;
                        return [4 /*yield*/, this.fetch()];
                    case 1:
                        _a.apply(this, [_c.sent()]);
                        this.loading = false;
                        return [3 /*break*/, 5];
                    case 2:
                        if (!(evt === Action.NEXT)) return [3 /*break*/, 4];
                        this.loadMoreNode.loading = true;
                        _b = this.addNodes;
                        return [4 /*yield*/, this.paging.next()];
                    case 3:
                        _b.apply(this, [_c.sent()]);
                        this.loadMoreNode.loading = false;
                        return [3 /*break*/, 5];
                    case 4:
                        if (evt === Action.REFRESH) {
                            this.loading = false;
                            this.paging = undefined;
                            this.loadMoreNode = undefined;
                            this.empty();
                            this.events.next(Action.FETCH);
                        }
                        _c.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    AssetNode.prototype.addNodes = function (res) {
        var _this = this;
        if (res.paging) {
            var _a = this.paging = res.paging, pageSize = _a.pageSize, currentPage = _a.currentPage, totalPages = _a.totalPages;
            if (currentPage === 1) {
                this.empty();
            }
            var itemsCount = res.data.length;
            var moreItemsAvailable = totalPages ? (currentPage < totalPages) : (itemsCount === pageSize);
            this.toggleLoadMore(moreItemsAvailable);
        }
        (res.data || res).map(function (mo) { return _this.addManagedObject(mo); });
    };
    AssetNode.prototype.updateIcon = function (open) {
        this.icon = this.service.groups.icon(
        // if it's root we are going to pass a fake mo to get the same icon as groups
        this.root ? { type: GroupFragment.groupType } : this.mo, open);
    };
    AssetNode.prototype.toggleLoadMore = function (show) {
        var _this = this;
        if (!this.loadMoreNode && show) {
            this.loadMoreNode = new LoadMoreNode();
            this.add(this.loadMoreNode);
            this.loadMoreNode.click = function () { return _this.events.next(Action.NEXT); };
        }
        if (this.loadMoreNode) {
            this.loadMoreNode.hidden = !show;
        }
    };
    return AssetNode;
}(NavigatorNode));
export { AssetNode };
//# sourceMappingURL=data:application/json;base64,