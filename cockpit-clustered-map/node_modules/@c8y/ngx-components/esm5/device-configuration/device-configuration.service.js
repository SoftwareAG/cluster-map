import * as tslib_1 from "tslib";
import { EventEmitter, Injectable } from '@angular/core';
import { EventBinaryService, EventService, IEvent, IManagedObject, InventoryBinaryService, InventoryService, IOperation, OperationService } from '@c8y/client';
import { AlertService, gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
var DeviceConfigurationService = /** @class */ (function () {
    function DeviceConfigurationService(eventService, eventBinaryService, operationService, alertService, inventoryService, inventoryBinaryService, translateService) {
        this.eventService = eventService;
        this.eventBinaryService = eventBinaryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.translateService = translateService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.repositoryConfigListUpdated = new EventEmitter();
    }
    DeviceConfigurationService.prototype.getLatestConfigurationEvent = function (deviceId, type) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filter, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = {
                            source: deviceId,
                            type: type,
                            dateFrom: this.dateFrom.toISOString(),
                            dateTo: this.dateTo.toISOString(),
                            pageSize: 1
                        };
                        return [4 /*yield*/, this.eventService.list(filter)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data[0]];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.getEventConfigurationBinary = function (event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var binary, res, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.eventBinaryService.download(event)];
                    case 1:
                        res = _a.sent();
                        binary = res.text();
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        this.alertService.addServerFailure(ex_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, binary];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.createUploadConfigFileOperation = function (device, configurationType) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operation, operationText, operationCfg, data, ex_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationText = gettext('Retrieve {{ configurationType }} configuration snapshot from device {{ deviceName }}');
                        operationCfg = {
                            deviceId: device.id,
                            c8y_UploadConfigFile: {
                                type: configurationType
                            },
                            description: this.translateService.instant(operationText, {
                                configurationType: configurationType,
                                deviceName: device.name
                            })
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.operationService.create(operationCfg)];
                    case 2:
                        data = (_a.sent()).data;
                        operation = data;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_2 = _a.sent();
                        this.alertService.addServerFailure(ex_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, operation];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.getLatestConfigFileOperation = function (deviceId, configType, operationType) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filter, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = {
                            deviceId: deviceId,
                            fragmentType: operationType,
                            dateFrom: this.dateFrom.toISOString(),
                            dateTo: this.dateTo.toISOString(),
                            revert: true,
                            pageSize: 2000
                        };
                        return [4 /*yield*/, this.operationService.list(filter)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.find(function (op) { return op[operationType].type === configType; })];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.getSnapshotsFromRepository = function (deviceType, configurationType) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var query, filter, deviceTypeFilter;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filter = {
                            pageSize: 2000,
                            withTotalPages: true
                        };
                        query = {
                            __filter: {
                                __and: [
                                    {
                                        type: 'c8y_ConfigurationDump'
                                    },
                                    {
                                        __or: [
                                            { configurationType: { __eq: configurationType } },
                                            {
                                                __not: {
                                                    __has: 'configurationType'
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            __orderby: [{ configurationType: -1, name: 1 }]
                        };
                        if (deviceType) {
                            deviceTypeFilter = {
                                __or: [
                                    { deviceType: { __eq: deviceType } },
                                    {
                                        __not: {
                                            __has: 'deviceType'
                                        }
                                    }
                                ]
                            };
                            query.__filter.__and.push(deviceTypeFilter);
                        }
                        return [4 /*yield*/, this.inventoryService.listQuery(query, filter)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.createDownloadConfigFileOperation = function (device, configurationType, binaryUrl) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var operation, operationText, operationCfg, data, ex_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationText = gettext('Send configuration {{ configurationType }} to device {{ deviceName }}');
                        operationCfg = {
                            deviceId: device.id,
                            c8y_DownloadConfigFile: {
                                url: binaryUrl,
                                type: configurationType
                            },
                            description: this.translateService.instant(operationText, {
                                configurationType: configurationType,
                                deviceName: device.name
                            })
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.operationService.create(operationCfg)];
                    case 2:
                        data = (_a.sent()).data;
                        operation = data;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_3 = _a.sent();
                        this.alertService.addServerFailure(ex_3);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, operation];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.getConfigurationBinaryFile = function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var binary, moId, binaryMO, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        moId = this.inventoryBinaryService.getIdFromUrl(url);
                        if (!moId) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.inventoryService.detail(moId)];
                    case 1:
                        binaryMO = (_a.sent()).data;
                        return [4 /*yield*/, this.inventoryBinaryService.download(binaryMO)];
                    case 2:
                        res = _a.sent();
                        return [4 /*yield*/, res.text()];
                    case 3:
                        binary = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        binary = this.fetchExternalBinary(url);
                        _a.label = 5;
                    case 5: return [2 /*return*/, binary];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.saveToConfigurationRepository = function (config) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var mo, response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mo = {};
                        Object.assign(mo, {
                            name: config.name,
                            type: 'c8y_ConfigurationDump',
                            deviceType: config.deviceType,
                            configurationType: config.configurationType,
                            c8y_Global: {}
                        });
                        return [4 /*yield*/, this.inventoryBinaryService.create(new Blob([config.binary]), {
                                c8y_Global: {}
                            })];
                    case 1:
                        response = _a.sent();
                        mo.url = response.data.self;
                        return [2 /*return*/, this.inventoryService.create(mo)];
                }
            });
        });
    };
    DeviceConfigurationService.prototype.updateRepositoryConfigList = function () {
        this.repositoryConfigListUpdated.emit();
    };
    DeviceConfigurationService.prototype.fetchExternalBinary = function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var configBinary, res, ex_4;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        res = _a.sent();
                        if (!(res.status === 200)) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.text()];
                    case 2:
                        configBinary = _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        ex_4 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, configBinary];
                }
            });
        });
    };
    DeviceConfigurationService.ctorParameters = function () { return [
        { type: EventService },
        { type: EventBinaryService },
        { type: OperationService },
        { type: AlertService },
        { type: InventoryService },
        { type: InventoryBinaryService },
        { type: TranslateService }
    ]; };
    DeviceConfigurationService = tslib_1.__decorate([
        Injectable()
    ], DeviceConfigurationService);
    return DeviceConfigurationService;
}());
export { DeviceConfigurationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWNvbmZpZ3VyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvZGV2aWNlLWNvbmZpZ3VyYXRpb24vIiwic291cmNlcyI6WyJkZXZpY2UtY29uZmlndXJhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLFlBQVksRUFDWixNQUFNLEVBQ04sY0FBYyxFQUNkLHNCQUFzQixFQUN0QixnQkFBZ0IsRUFDaEIsVUFBVSxFQUNWLGdCQUFnQixFQUNqQixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3ZEO0lBS0Usb0NBQ1UsWUFBMEIsRUFDMUIsa0JBQXNDLEVBQ3RDLGdCQUFrQyxFQUNsQyxZQUEwQixFQUMxQixnQkFBa0MsRUFDbEMsc0JBQThDLEVBQzlDLGdCQUFrQztRQU5sQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzlDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFYbkMsYUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLFdBQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7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NUIsZ0JBQWdCOztJQVpqQywwQkFBMEI7UUFEdEMsVUFBVSxFQUFFO09BQ0EsMEJBQTBCLENBK0x0QztJQUFELGlDQUFDO0NBQUEsQUEvTEQsSUErTEM7U0EvTFksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBFdmVudEJpbmFyeVNlcnZpY2UsXG4gIEV2ZW50U2VydmljZSxcbiAgSUV2ZW50LFxuICBJTWFuYWdlZE9iamVjdCxcbiAgSW52ZW50b3J5QmluYXJ5U2VydmljZSxcbiAgSW52ZW50b3J5U2VydmljZSxcbiAgSU9wZXJhdGlvbixcbiAgT3BlcmF0aW9uU2VydmljZVxufSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERldmljZUNvbmZpZ3VyYXRpb25TZXJ2aWNlIHtcbiAgcmVhZG9ubHkgZGF0ZUZyb20gPSBuZXcgRGF0ZSgwKTtcbiAgcmVhZG9ubHkgZGF0ZVRvID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDg2NDAwMDAwKTsgLy8gMSBkYXkgaW4gdGhlIGZ1dHVyZVxuICByZXBvc2l0b3J5Q29uZmlnTGlzdFVwZGF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGV2ZW50U2VydmljZTogRXZlbnRTZXJ2aWNlLFxuICAgIHByaXZhdGUgZXZlbnRCaW5hcnlTZXJ2aWNlOiBFdmVudEJpbmFyeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBvcGVyYXRpb25TZXJ2aWNlOiBPcGVyYXRpb25TZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnlTZXJ2aWNlOiBJbnZlbnRvcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5QmluYXJ5U2VydmljZTogSW52ZW50b3J5QmluYXJ5U2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIGdldExhdGVzdENvbmZpZ3VyYXRpb25FdmVudChkZXZpY2VJZDogc3RyaW5nIHwgbnVtYmVyLCB0eXBlOiBzdHJpbmcpOiBQcm9taXNlPElFdmVudD4ge1xuICAgIGNvbnN0IGZpbHRlcjogb2JqZWN0ID0ge1xuICAgICAgc291cmNlOiBkZXZpY2VJZCxcbiAgICAgIHR5cGUsXG4gICAgICBkYXRlRnJvbTogdGhpcy5kYXRlRnJvbS50b0lTT1N0cmluZygpLFxuICAgICAgZGF0ZVRvOiB0aGlzLmRhdGVUby50b0lTT1N0cmluZygpLFxuICAgICAgcGFnZVNpemU6IDFcbiAgICB9O1xuXG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLmV2ZW50U2VydmljZS5saXN0KGZpbHRlcik7XG4gICAgcmV0dXJuIGRhdGFbMF07XG4gIH1cblxuICBhc3luYyBnZXRFdmVudENvbmZpZ3VyYXRpb25CaW5hcnkoZXZlbnQ6IElFdmVudCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgbGV0IGJpbmFyeTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5ldmVudEJpbmFyeVNlcnZpY2UuZG93bmxvYWQoZXZlbnQpO1xuICAgICAgYmluYXJ5ID0gcmVzLnRleHQoKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgfVxuICAgIHJldHVybiBiaW5hcnk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVVcGxvYWRDb25maWdGaWxlT3BlcmF0aW9uKGRldmljZSwgY29uZmlndXJhdGlvblR5cGUpIHtcbiAgICBsZXQgb3BlcmF0aW9uO1xuICAgIGNvbnN0IG9wZXJhdGlvblRleHQgPSBnZXR0ZXh0KFxuICAgICAgJ1JldHJpZXZlIHt7IGNvbmZpZ3VyYXRpb25UeXBlIH19IGNvbmZpZ3VyYXRpb24gc25hcHNob3QgZnJvbSBkZXZpY2Uge3sgZGV2aWNlTmFtZSB9fSdcbiAgICApO1xuICAgIGNvbnN0IG9wZXJhdGlvbkNmZzogSU9wZXJhdGlvbiA9IHtcbiAgICAgIGRldmljZUlkOiBkZXZpY2UuaWQsXG4gICAgICBjOHlfVXBsb2FkQ29uZmlnRmlsZToge1xuICAgICAgICB0eXBlOiBjb25maWd1cmF0aW9uVHlwZVxuICAgICAgfSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuaW5zdGFudChvcGVyYXRpb25UZXh0LCB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb25UeXBlLFxuICAgICAgICBkZXZpY2VOYW1lOiBkZXZpY2UubmFtZVxuICAgICAgfSlcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5vcGVyYXRpb25TZXJ2aWNlLmNyZWF0ZShvcGVyYXRpb25DZmcpO1xuICAgICAgb3BlcmF0aW9uID0gZGF0YTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRpb247XG4gIH1cblxuICBhc3luYyBnZXRMYXRlc3RDb25maWdGaWxlT3BlcmF0aW9uKGRldmljZUlkLCBjb25maWdUeXBlLCBvcGVyYXRpb25UeXBlKTogUHJvbWlzZTxJT3BlcmF0aW9uPiB7XG4gICAgY29uc3QgZmlsdGVyOiBvYmplY3QgPSB7XG4gICAgICBkZXZpY2VJZCxcbiAgICAgIGZyYWdtZW50VHlwZTogb3BlcmF0aW9uVHlwZSxcbiAgICAgIGRhdGVGcm9tOiB0aGlzLmRhdGVGcm9tLnRvSVNPU3RyaW5nKCksXG4gICAgICBkYXRlVG86IHRoaXMuZGF0ZVRvLnRvSVNPU3RyaW5nKCksXG4gICAgICByZXZlcnQ6IHRydWUsXG4gICAgICBwYWdlU2l6ZTogMjAwMFxuICAgIH07XG5cbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMub3BlcmF0aW9uU2VydmljZS5saXN0KGZpbHRlcik7XG4gICAgcmV0dXJuIGRhdGEuZmluZChvcCA9PiBvcFtvcGVyYXRpb25UeXBlXS50eXBlID09PSBjb25maWdUeXBlKTtcbiAgfVxuXG4gIGFzeW5jIGdldFNuYXBzaG90c0Zyb21SZXBvc2l0b3J5KGRldmljZVR5cGUsIGNvbmZpZ3VyYXRpb25UeXBlKTogUHJvbWlzZTxJTWFuYWdlZE9iamVjdFtdPiB7XG4gICAgbGV0IHF1ZXJ5OiBhbnk7XG4gICAgY29uc3QgZmlsdGVyOiBvYmplY3QgPSB7XG4gICAgICBwYWdlU2l6ZTogMjAwMCxcbiAgICAgIHdpdGhUb3RhbFBhZ2VzOiB0cnVlXG4gICAgfTtcbiAgICBxdWVyeSA9IHtcbiAgICAgIF9fZmlsdGVyOiB7XG4gICAgICAgIF9fYW5kOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ2M4eV9Db25maWd1cmF0aW9uRHVtcCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIF9fb3I6IFtcbiAgICAgICAgICAgICAgeyBjb25maWd1cmF0aW9uVHlwZTogeyBfX2VxOiBjb25maWd1cmF0aW9uVHlwZSB9IH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBfX25vdDoge1xuICAgICAgICAgICAgICAgICAgX19oYXM6ICdjb25maWd1cmF0aW9uVHlwZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBfX29yZGVyYnk6IFt7IGNvbmZpZ3VyYXRpb25UeXBlOiAtMSwgbmFtZTogMSB9XVxuICAgIH07XG5cbiAgICBpZiAoZGV2aWNlVHlwZSkge1xuICAgICAgY29uc3QgZGV2aWNlVHlwZUZpbHRlciA9IHtcbiAgICAgICAgX19vcjogW1xuICAgICAgICAgIHsgZGV2aWNlVHlwZTogeyBfX2VxOiBkZXZpY2VUeXBlIH0gfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBfX25vdDoge1xuICAgICAgICAgICAgICBfX2hhczogJ2RldmljZVR5cGUnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9O1xuICAgICAgcXVlcnkuX19maWx0ZXIuX19hbmQucHVzaChkZXZpY2VUeXBlRmlsdGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UubGlzdFF1ZXJ5KHF1ZXJ5LCBmaWx0ZXIpKS5kYXRhO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlRG93bmxvYWRDb25maWdGaWxlT3BlcmF0aW9uKGRldmljZSwgY29uZmlndXJhdGlvblR5cGUsIGJpbmFyeVVybCkge1xuICAgIGxldCBvcGVyYXRpb247XG4gICAgY29uc3Qgb3BlcmF0aW9uVGV4dCA9IGdldHRleHQoXG4gICAgICAnU2VuZCBjb25maWd1cmF0aW9uIHt7IGNvbmZpZ3VyYXRpb25UeXBlIH19IHRvIGRldmljZSB7eyBkZXZpY2VOYW1lIH19J1xuICAgICk7XG4gICAgY29uc3Qgb3BlcmF0aW9uQ2ZnOiBJT3BlcmF0aW9uID0ge1xuICAgICAgZGV2aWNlSWQ6IGRldmljZS5pZCxcbiAgICAgIGM4eV9Eb3dubG9hZENvbmZpZ0ZpbGU6IHtcbiAgICAgICAgdXJsOiBiaW5hcnlVcmwsXG4gICAgICAgIHR5cGU6IGNvbmZpZ3VyYXRpb25UeXBlXG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KG9wZXJhdGlvblRleHQsIHtcbiAgICAgICAgY29uZmlndXJhdGlvblR5cGUsXG4gICAgICAgIGRldmljZU5hbWU6IGRldmljZS5uYW1lXG4gICAgICB9KVxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5vcGVyYXRpb25TZXJ2aWNlLmNyZWF0ZShvcGVyYXRpb25DZmcpO1xuICAgICAgb3BlcmF0aW9uID0gZGF0YTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZShleCk7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRpb247XG4gIH1cblxuICBhc3luYyBnZXRDb25maWd1cmF0aW9uQmluYXJ5RmlsZSh1cmwpIHtcbiAgICBsZXQgYmluYXJ5O1xuICAgIGNvbnN0IG1vSWQgPSB0aGlzLmludmVudG9yeUJpbmFyeVNlcnZpY2UuZ2V0SWRGcm9tVXJsKHVybCk7XG4gICAgaWYgKG1vSWQpIHtcbiAgICAgIGNvbnN0IGJpbmFyeU1PID0gKGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5kZXRhaWwobW9JZCkpLmRhdGE7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmludmVudG9yeUJpbmFyeVNlcnZpY2UuZG93bmxvYWQoYmluYXJ5TU8pO1xuICAgICAgYmluYXJ5ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmluYXJ5ID0gdGhpcy5mZXRjaEV4dGVybmFsQmluYXJ5KHVybCk7XG4gICAgfVxuICAgIHJldHVybiBiaW5hcnk7XG4gIH1cblxuICBhc3luYyBzYXZlVG9Db25maWd1cmF0aW9uUmVwb3NpdG9yeShjb25maWcpIHtcbiAgICBjb25zdCBtbzogUGFydGlhbDxJTWFuYWdlZE9iamVjdD4gPSB7fTtcbiAgICBPYmplY3QuYXNzaWduKG1vLCB7XG4gICAgICBuYW1lOiBjb25maWcubmFtZSxcbiAgICAgIHR5cGU6ICdjOHlfQ29uZmlndXJhdGlvbkR1bXAnLFxuICAgICAgZGV2aWNlVHlwZTogY29uZmlnLmRldmljZVR5cGUsXG4gICAgICBjb25maWd1cmF0aW9uVHlwZTogY29uZmlnLmNvbmZpZ3VyYXRpb25UeXBlLFxuICAgICAgYzh5X0dsb2JhbDoge31cbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5QmluYXJ5U2VydmljZS5jcmVhdGUobmV3IEJsb2IoW2NvbmZpZy5iaW5hcnldKSwge1xuICAgICAgYzh5X0dsb2JhbDoge31cbiAgICB9KTtcbiAgICBtby51cmwgPSByZXNwb25zZS5kYXRhLnNlbGY7XG4gICAgcmV0dXJuIHRoaXMuaW52ZW50b3J5U2VydmljZS5jcmVhdGUobW8pO1xuICB9XG5cbiAgdXBkYXRlUmVwb3NpdG9yeUNvbmZpZ0xpc3QoKSB7XG4gICAgdGhpcy5yZXBvc2l0b3J5Q29uZmlnTGlzdFVwZGF0ZWQuZW1pdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBmZXRjaEV4dGVybmFsQmluYXJ5KHVybCkge1xuICAgIGxldCBjb25maWdCaW5hcnk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgIGNvbmZpZ0JpbmFyeSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZ0JpbmFyeTtcbiAgfVxufVxuIl19