import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, Router } from '@angular/router';
import { IManagedObject, InventoryService, IResultList, UserService } from '@c8y/client';
import { AppStateService, getActivatedRoute, gettext, ModalService, Status, TabsService, ViewContext, Widget } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { assign, pick, some, keys, keyBy, has, get, forEach, cloneDeep } from 'lodash-es';
import { from, of } from 'rxjs';
import { catchError, filter, map, mergeAll, mergeMap, tap, toArray, throwIfEmpty } from 'rxjs/operators';
import { ContextDashboardType } from './context-dashboard.model';
var ContextDashboardService = /** @class */ (function () {
    function ContextDashboardService(inventory, tabs, modal, translateService, router, user, appState) {
        this.inventory = inventory;
        this.tabs = tabs;
        this.modal = modal;
        this.translateService = translateService;
        this.router = router;
        this.user = user;
        this.appState = appState;
        this.cache = new Map();
        this.DEFAULT_PAGESIZE = 1000;
        this.FRAGMENT_NAME = 'c8y_Dashboard';
        this.DASHBOARD_ROUTE_PATH = 'dashboard';
        this.INDEX_SPLIT = '!';
        this._formDisabled = true;
    }
    Object.defineProperty(ContextDashboardService.prototype, "formDisabled", {
        get: function () {
            return this._formDisabled;
        },
        set: function (value) {
            this._formDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    ContextDashboardService.prototype.create = function (dashboardCfg, contextOrName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, dashboardType, dashboard, value, fragmentKey, data, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (typeof contextOrName === 'string') {
                            id = contextOrName;
                            dashboardType = ContextDashboardType.Named;
                        }
                        else {
                            id = contextOrName.contextData.id;
                            dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, contextOrName);
                        }
                        dashboard = {};
                        assign(dashboard, { c8y_Dashboard: dashboardCfg });
                        value = dashboardType === ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : id;
                        fragmentKey = this.createFragmentKey(dashboardType, value);
                        dashboard[fragmentKey] = {};
                        if (this.shouldSetGlobal(dashboard)) {
                            assign(dashboard, { c8y_Global: {} });
                        }
                        if (!(dashboardType === ContextDashboardType.Group || dashboardType === ContextDashboardType.Device)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.inventory.childAdditionsCreate(dashboard, id)];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.inventory.create(dashboard)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        data = (_a).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ContextDashboardService.prototype.detail = function (dashboardMO) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.inventory.detail(dashboardMO)];
                    case 1:
                        data = (_a.sent()).data;
                        this.cache.set(dashboardMO.id, data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ContextDashboardService.prototype.update = function (dashboard) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cleanedDashboard, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cleanedDashboard = this.clean(pick(dashboard, [this.FRAGMENT_NAME, 'id']));
                        cleanedDashboard.c8y_Global = this.shouldSetGlobal(dashboard);
                        return [4 /*yield*/, this.inventory.update(cleanedDashboard)];
                    case 1:
                        data = (_a.sent()).data;
                        this.cache.set(dashboard.id, data);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ContextDashboardService.prototype.delete = function (dashboard) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var msg, tabToRemove, ex_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        msg = gettext("You are about to delete the dashboard \"{{ dashboardName }}\". Do you want to proceed?");
                        if (this.isDeviceType(dashboard)) {
                            msg = gettext("You are about to delete the dashboard \"{{ dashboardName }}\" from all devices of the type \"{{ deviceType }}\".\n           Do you want to proceed?");
                        }
                        return [4 /*yield*/, this.modal.confirm(gettext('Delete dashboard'), this.translateService.instant(msg, {
                                dashboardName: dashboard.c8y_Dashboard.name,
                                deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                            }), Status.DANGER, {
                                ok: gettext('Delete'),
                                cancel: gettext('Cancel')
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.inventory.delete(dashboard)];
                    case 2:
                        _a.sent();
                        tabToRemove = Array.from(this.tabs.state).find(function (tab) {
                            return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboard.id);
                        });
                        this.tabs.remove(tabToRemove);
                        this.tabs.refresh();
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ContextDashboardService.prototype.activateDashboards = function (route, types) {
        var dashboardId = route.params.dashboardId;
        if (dashboardId) {
            return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(tap(function (dashboard) {
                route.data = { dashboard: dashboard };
            }), map(function () { return true; }), catchError(function () {
                return of(false);
            }));
        }
        return this.getTabs$(route.data.contextData, types);
    };
    ContextDashboardService.prototype.getNamedDashboardOrCreate = function (name, defaultWidgets) {
        var _this = this;
        var children = this.mapWidgets(defaultWidgets);
        return this.getDashboard$(name, [ContextDashboardType.Named]).pipe(throwIfEmpty(), catchError(function () {
            return from(_this.create({ children: children }, name));
        }));
    };
    ContextDashboardService.prototype.refreshTabs = function (dashboardMO) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tabToUpdate, data, _a, icon, priority, name_1;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this.isNamed(dashboardMO)) return [3 /*break*/, 4];
                        tabToUpdate = Array.from(this.tabs.state).find(function (tab) {
                            return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboardMO.id);
                        });
                        if (!!tabToUpdate) return [3 /*break*/, 1];
                        this.addTab(dashboardMO);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.detail(dashboardMO)];
                    case 2:
                        data = _b.sent();
                        _a = data.c8y_Dashboard, icon = _a.icon, priority = _a.priority, name_1 = _a.name;
                        tabToUpdate.icon = icon;
                        tabToUpdate.priority = priority;
                        tabToUpdate.label = name_1;
                        _b.label = 3;
                    case 3:
                        this.tabs.refresh();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ContextDashboardService.prototype.addTab = function (dashboard) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, _a, icon, priority, name;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.detail(dashboard)];
                    case 1:
                        data = _b.sent();
                        _a = data.c8y_Dashboard, icon = _a.icon, priority = _a.priority, name = _a.name;
                        this.tabs.add({
                            icon: icon,
                            priority: priority,
                            label: name,
                            path: this.currentContextRoute + "/" + this.DASHBOARD_ROUTE_PATH + "/" + data.id
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    ContextDashboardService.prototype.navigateToDashboard = function (dashboardMO) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (/dashboard/.test(this.router.url)) {
                    this.router.navigate(['..', dashboardMO.id], {
                        relativeTo: getActivatedRoute(this.router)
                    });
                }
                else {
                    this.router.navigate(['..', 'dashboard', dashboardMO.id], {
                        relativeTo: getActivatedRoute(this.router)
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    ContextDashboardService.prototype.hasPermission = function () {
        return this.user.hasAnyRole(this.appState.currentUser.value, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_CREATE'
        ]);
    };
    ContextDashboardService.prototype.isNamed = function (dashboard) {
        var _this = this;
        return some(keys(dashboard), function (prop) {
            return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + ContextDashboardType.Named + _this.INDEX_SPLIT).test(prop);
        });
    };
    ContextDashboardService.prototype.isDeviceType = function (dashboard) {
        var _this = this;
        return some(keys(dashboard), function (prop) {
            return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + ContextDashboardType.DeviceType + _this.INDEX_SPLIT).test(prop);
        });
    };
    ContextDashboardService.prototype.getStyling = function (styleList, styleName, defaultValue) {
        var styling = styleList.find(function (style) { return style && new RegExp(styleName, 'i').test(style.class); });
        return styling ? styling.class : defaultValue;
    };
    ContextDashboardService.prototype.mapWidgets = function (widgets) {
        return keyBy(widgets.map(function (widget) {
            widget.id = String(Math.random()).substr(2);
            return widget;
        }), 'id');
    };
    ContextDashboardService.prototype.getDashboard$ = function (dashboardIdOrName, dashboardType, mo) {
        var _this = this;
        var cache = this.cache.get(dashboardIdOrName);
        var dashboards = mo
            ? this.getContextDashboards(mo, dashboardType)
            : [this.getNamedDashboard(dashboardIdOrName)];
        var cacheRefresh = this.getContextDashboards$(dashboards).pipe(tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), filter(function (dashboard) {
            return dashboard.id === dashboardIdOrName ||
                has(dashboard, "" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + ContextDashboardType.Named + _this.INDEX_SPLIT + dashboardIdOrName);
        }));
        return cache ? of(cache) : cacheRefresh;
    };
    ContextDashboardService.prototype.getTabs$ = function (mo, dashboardType) {
        var _this = this;
        var dashboards = this.getContextDashboards(mo, dashboardType);
        this.setBaseContextRoute(mo, dashboardType);
        return this.getContextDashboards$(dashboards).pipe(map(function (dashboard) { return _this.removeDashboardMoProperty(dashboard); }), tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), map(function (dashboard) { return _this.createDashboardTab(dashboard); }), toArray());
    };
    ContextDashboardService.prototype.getContextDashboards$ = function (requests) {
        return from(requests).pipe(mergeAll(), mergeMap(function (response) { return response.data; }));
    };
    ContextDashboardService.prototype.setBaseContextRoute = function (mo, dashboardType) {
        var type = dashboardType.includes(ContextDashboardType.Device)
            ? ContextDashboardType.Device
            : ContextDashboardType.Group;
        this.currentContextRoute = type + "/" + mo.id;
    };
    /**
     * Cleans already corrupted dashboards from dashboardMo property.
     * Added to fix dashboards on the cloud instance (eu-latest).
     * @deprecated This is going to be removed after 1007.7.0.
     */
    ContextDashboardService.prototype.removeDashboardMoProperty = function (dashboard) {
        var dashboardCopy = cloneDeep(dashboard);
        var children = get(dashboardCopy, 'c8y_Dashboard.children');
        var updateDashboard = false;
        forEach(children, function (child) {
            if (get(child, 'componentTransformConfigWithContext')) {
                delete child.componentTransformConfigWithContext;
                updateDashboard = true;
            }
            if (get(child, 'config.dashboardMo')) {
                delete child.config.dashboardMo;
                updateDashboard = true;
            }
        });
        if (updateDashboard) {
            this.update(dashboardCopy);
        }
        return dashboardCopy;
    };
    ContextDashboardService.prototype.cacheDashboard = function (dashboard) {
        this.cache.set(dashboard.id, dashboard);
    };
    ContextDashboardService.prototype.createDashboardTab = function (dashboard) {
        var _dashboard = dashboard.c8y_Dashboard, id = dashboard.id;
        return ({
            icon: _dashboard.icon,
            path: this.DASHBOARD_ROUTE_PATH + "/" + id,
            label: _dashboard.name,
            priority: _dashboard.priority
        });
    };
    ContextDashboardService.prototype.clean = function (dashboard) {
        var jsonString = JSON.stringify(dashboard, function (key, value) {
            if (key === '$$hashKey' || key === 'klasses') {
                return undefined;
            }
            return value;
        });
        return JSON.parse(jsonString);
    };
    ContextDashboardService.prototype.getNamedDashboard = function (name) {
        return this.inventory.list({
            fragmentType: "" + this.FRAGMENT_NAME + this.INDEX_SPLIT + ContextDashboardType.Named + this.INDEX_SPLIT + name,
            pageSize: 1
        });
    };
    ContextDashboardService.prototype.getContextDashboards = function (mo, dashboardType) {
        var _this = this;
        return dashboardType.map(function (type) {
            return _this.inventory.list({
                fragmentType: "" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + type + _this.INDEX_SPLIT + (type === ContextDashboardType.DeviceType ? mo.type : mo.id),
                pageSize: _this.DEFAULT_PAGESIZE
            });
        });
    };
    ContextDashboardService.prototype.getDashboardTypeFromViewContext = function (dashboardCfg, context) {
        var dashboardType;
        if (context.context === ViewContext.Device) {
            dashboardType = dashboardCfg.deviceType
                ? ContextDashboardType.DeviceType
                : ContextDashboardType.Device;
        }
        if (context.context === ViewContext.Group) {
            dashboardType = ContextDashboardType.Group;
        }
        return dashboardType;
    };
    ContextDashboardService.prototype.createFragmentKey = function (contextDashboardType, value) {
        return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
    };
    ContextDashboardService.prototype.shouldSetGlobal = function (dashboard) {
        if (this.isNamed(dashboard) || this.isDeviceType(dashboard)) {
            return {};
        }
        return null;
    };
    ContextDashboardService.ctorParameters = function () { return [
        { type: InventoryService },
        { type: TabsService },
        { type: ModalService },
        { type: TranslateService },
        { type: Router },
        { type: UserService },
        { type: AppStateService }
    ]; };
    ContextDashboardService = tslib_1.__decorate([
        Injectable()
    ], ContextDashboardService);
    return ContextDashboardService;
}());
export { ContextDashboardService };
//# sourceMappingURL=data:application/json;base64,