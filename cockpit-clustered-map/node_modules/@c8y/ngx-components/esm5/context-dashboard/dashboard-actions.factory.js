import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { gettext, ViewContext } from '@c8y/ngx-components';
import { ActivatedRoute, Router } from '@angular/router';
import { ContextDashboardService } from './context-dashboard.service';
import { BsModalService } from 'ngx-bootstrap/modal';
import { DashboardDetailComponent } from './dashboard-detail.component';
var DashboardActionsFactory = /** @class */ (function () {
    function DashboardActionsFactory(router, contextDashboardService, bsModal) {
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.bsModal = bsModal;
    }
    DashboardActionsFactory.prototype.get = function (activatedRoute) {
        var _this = this;
        var context = !activatedRoute.parent || activatedRoute.snapshot.data.context
            ? activatedRoute.snapshot.data
            : activatedRoute.parent.snapshot.data;
        return [
            {
                label: gettext('Add dashboard'),
                priority: 2500,
                action: function () { return _this.addDashboard(context); },
                disabled: !this.isEnabled(context)
            }
        ];
    };
    DashboardActionsFactory.prototype.addDashboard = function (context) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var initialState, modal, dashboardCfg, dashboardMO, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (context.context === ViewContext.Device) {
                            initialState = {
                                deviceType: context.contextData.type
                            };
                        }
                        modal = this.bsModal.show(DashboardDetailComponent, {
                            class: 'modal-lg',
                            initialState: initialState,
                            ignoreBackdropClick: true
                        }).content;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        return [4 /*yield*/, modal.result];
                    case 2:
                        dashboardCfg = _a.sent();
                        return [4 /*yield*/, this.contextDashboardService.create(dashboardCfg, context)];
                    case 3:
                        dashboardMO = _a.sent();
                        return [4 /*yield*/, this.contextDashboardService.navigateToDashboard(dashboardMO)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.contextDashboardService.refreshTabs(dashboardMO)];
                    case 5:
                        _a.sent();
                        modal.close();
                        return [3 /*break*/, 7];
                    case 6:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    DashboardActionsFactory.prototype.isEnabled = function (context) {
        return (this.contextDashboardService.hasPermission() &&
            [ViewContext.Device, ViewContext.Group].includes(context.context));
    };
    DashboardActionsFactory.ctorParameters = function () { return [
        { type: Router },
        { type: ContextDashboardService },
        { type: BsModalService }
    ]; };
    DashboardActionsFactory = tslib_1.__decorate([
        Injectable()
    ], DashboardActionsFactory);
    return DashboardActionsFactory;
}());
export { DashboardActionsFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvY29udGV4dC1kYXNoYm9hcmQvIiwic291cmNlcyI6WyJkYXNoYm9hcmQtYWN0aW9ucy5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBeUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBSXhFO0lBQ0UsaUNBQ1UsTUFBYyxFQUNkLHVCQUFnRCxFQUNoRCxPQUF1QjtRQUZ2QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxZQUFPLEdBQVAsT0FBTyxDQUFnQjtJQUM5QixDQUFDO0lBRUoscUNBQUcsR0FBSCxVQUFJLGNBQThCO1FBQWxDLGlCQWNDO1FBYkMsSUFBTSxPQUFPLEdBQ1gsQ0FBQyxjQUFjLENBQUMsTUFBTSxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDNUQsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSTtZQUM5QixDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRTFDLE9BQU87WUFDTDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztnQkFDL0IsUUFBUSxFQUFFLElBQUk7Z0JBQ2QsTUFBTSxFQUFFLGNBQU0sT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUExQixDQUEwQjtnQkFDeEMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7YUFDbkM7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVLLDhDQUFZLEdBQWxCLFVBQW1CLE9BQU87Ozs7Ozt3QkFHeEIsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFdBQVcsQ0FBQyxNQUFNLEVBQUU7NEJBQzFDLFlBQVksR0FBRztnQ0FDYixVQUFVLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJOzZCQUNyQyxDQUFDO3lCQUNIO3dCQUVLLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRTs0QkFDeEQsS0FBSyxFQUFFLFVBQVU7NEJBQ2pCLFlBQVksY0FBQTs0QkFDWixtQkFBbUIsRUFBRSxJQUFJO3lCQUMxQixDQUFDLENBQUMsT0FBbUMsQ0FBQzs7Ozt3QkFFaEIscUJBQU0sS0FBSyxDQUFDLE1BQU0sRUFBQTs7d0JBQWpDLFlBQVksR0FBRyxTQUFrQjt3QkFDWSxxQkFBTSxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUMxRixZQUFZLEVBQ1osT0FBTyxDQUNSLEVBQUE7O3dCQUhLLFdBQVcsR0FBa0MsU0FHbEQ7d0JBQ0QscUJBQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxFQUFBOzt3QkFBbkUsU0FBbUUsQ0FBQzt3QkFDcEUscUJBQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBQTs7d0JBQTNELFNBQTJELENBQUM7d0JBQzVELEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7Ozs7Ozs7O0tBSWpCO0lBRU8sMkNBQVMsR0FBakIsVUFBa0IsT0FBTztRQUN2QixPQUFPLENBQ0wsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsRUFBRTtZQUM1QyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQ2xFLENBQUM7SUFDSixDQUFDOztnQkF0RGlCLE1BQU07Z0JBQ1csdUJBQXVCO2dCQUN2QyxjQUFjOztJQUp0Qix1QkFBdUI7UUFEbkMsVUFBVSxFQUFFO09BQ0EsdUJBQXVCLENBeURuQztJQUFELDhCQUFDO0NBQUEsQUF6REQsSUF5REM7U0F6RFksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25GYWN0b3J5LCBnZXR0ZXh0LCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkU2VydmljZSB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQuc2VydmljZSc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50IH0gZnJvbSAnLi9kYXNoYm9hcmQtZGV0YWlsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb250ZXh0RGFzaGJvYXJkTWFuYWdlZE9iamVjdCB9IGZyb20gJy4vY29udGV4dC1kYXNoYm9hcmQubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGFzaGJvYXJkQWN0aW9uc0ZhY3RvcnkgaW1wbGVtZW50cyBBY3Rpb25GYWN0b3J5IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIGNvbnRleHREYXNoYm9hcmRTZXJ2aWNlOiBDb250ZXh0RGFzaGJvYXJkU2VydmljZSxcbiAgICBwcml2YXRlIGJzTW9kYWw6IEJzTW9kYWxTZXJ2aWNlXG4gICkge31cblxuICBnZXQoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKTogQWN0aW9uW10ge1xuICAgIGNvbnN0IGNvbnRleHQgPVxuICAgICAgIWFjdGl2YXRlZFJvdXRlLnBhcmVudCB8fCBhY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC5kYXRhLmNvbnRleHRcbiAgICAgICAgPyBhY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC5kYXRhXG4gICAgICAgIDogYWN0aXZhdGVkUm91dGUucGFyZW50LnNuYXBzaG90LmRhdGE7XG5cbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICBsYWJlbDogZ2V0dGV4dCgnQWRkIGRhc2hib2FyZCcpLFxuICAgICAgICBwcmlvcml0eTogMjUwMCxcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB0aGlzLmFkZERhc2hib2FyZChjb250ZXh0KSxcbiAgICAgICAgZGlzYWJsZWQ6ICF0aGlzLmlzRW5hYmxlZChjb250ZXh0KVxuICAgICAgfVxuICAgIF07XG4gIH1cblxuICBhc3luYyBhZGREYXNoYm9hcmQoY29udGV4dCkge1xuICAgIGxldCBpbml0aWFsU3RhdGU6IHsgZGV2aWNlVHlwZTogc3RyaW5nIH07XG5cbiAgICBpZiAoY29udGV4dC5jb250ZXh0ID09PSBWaWV3Q29udGV4dC5EZXZpY2UpIHtcbiAgICAgIGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgICAgZGV2aWNlVHlwZTogY29udGV4dC5jb250ZXh0RGF0YS50eXBlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IG1vZGFsID0gdGhpcy5ic01vZGFsLnNob3coRGFzaGJvYXJkRGV0YWlsQ29tcG9uZW50LCB7XG4gICAgICBjbGFzczogJ21vZGFsLWxnJyxcbiAgICAgIGluaXRpYWxTdGF0ZSxcbiAgICAgIGlnbm9yZUJhY2tkcm9wQ2xpY2s6IHRydWVcbiAgICB9KS5jb250ZW50IGFzIERhc2hib2FyZERldGFpbENvbXBvbmVudDtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGFzaGJvYXJkQ2ZnID0gYXdhaXQgbW9kYWwucmVzdWx0O1xuICAgICAgY29uc3QgZGFzaGJvYXJkTU86IENvbnRleHREYXNoYm9hcmRNYW5hZ2VkT2JqZWN0ID0gYXdhaXQgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5jcmVhdGUoXG4gICAgICAgIGRhc2hib2FyZENmZyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICAgIGF3YWl0IHRoaXMuY29udGV4dERhc2hib2FyZFNlcnZpY2UubmF2aWdhdGVUb0Rhc2hib2FyZChkYXNoYm9hcmRNTyk7XG4gICAgICBhd2FpdCB0aGlzLmNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLnJlZnJlc2hUYWJzKGRhc2hib2FyZE1PKTtcbiAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIC8vIGludGVuZGVkIGVtcHR5XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc0VuYWJsZWQoY29udGV4dCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLmhhc1Blcm1pc3Npb24oKSAmJlxuICAgICAgW1ZpZXdDb250ZXh0LkRldmljZSwgVmlld0NvbnRleHQuR3JvdXBdLmluY2x1ZGVzKGNvbnRleHQuY29udGV4dClcbiAgICApO1xuICB9XG59XG4iXX0=