import * as tslib_1 from "tslib";
import { Component, Input, Optional, Output, EventEmitter, HostListener } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { gettext } from '../i18n/gettext';
import { isEmpty } from 'lodash';
/**
 * C8y modal component.
 * ## Example:
 *
 * Creating custom modal:
 * ```typescript
 *  import { Component } from "@angular/core";
 *  import { Subject } from 'rxjs';
 *
 * @Component({
 *  selector: "my-modal",
 *  template: `
 *    <c8y-modal title="CustomTitle"
 *      (onClose)="onClose($event)"
 *      (onDismiss)="onDismiss($event)"
 *      [labels]="labels"
 *      [disabled]="true" <- will disable ok button
 *      >
 *        <span>I am body of modal</span>
 *        <span>For simple string use body="string"</span>
 *    </c8y-modal>`
 * })
 *
 * export class MyModalComponent {
 *
 *  closeSubject: Subject<boolean> = new Subject();
 *  labels : ILabels = {ok: "customOK", cancel: "customCancel"};
 *
 *  onDismiss(event){
 *    this.closeSubject.next(false);
 *  }
 *
 *  onClose(event) {
 *    this.closeSubject.next(true);
 *  }
 * }
 * ```
 * Showing modal:
 * ```typescript
 * import { BsModalService } from "ngx-bootstrap/modal";
 *
 * constructor(
 *  public bsModalService: BsModalService,
 * ) {}
 *
 * showModal() {
 *  const modalRef = this.bsModalService.show(MyModalComponent);
 *  modalRef.content.closeSubject.subscribe(result => {
 *    console.log('results:', result);
 *  });
 * }
 * ```
 */
var ModalComponent = /** @class */ (function () {
    function ModalComponent(modal) {
        this.modal = modal;
        this.onDismiss = new EventEmitter();
        this.onClose = new EventEmitter();
        this.disabled = false;
        this.customFooter = false;
        this._labels = { ok: gettext('OK'), cancel: gettext('Cancel') };
    }
    Object.defineProperty(ModalComponent.prototype, "labels", {
        get: function () { return this._labels; },
        set: function (_a) {
            var ok = _a.ok, cancel = _a.cancel;
            this._labels = { ok: ok, cancel: cancel };
        },
        enumerable: true,
        configurable: true
    });
    ModalComponent.prototype._dismiss = function () {
        var _this = this;
        var fn = this.dismiss;
        if (!fn && this.modal) {
            fn = function () { return _this.modal.hide(); };
        }
        if (fn) {
            fn();
        }
        this.onDismiss.emit(true);
    };
    ModalComponent.prototype._close = function () {
        var _this = this;
        var fn = this.close;
        if (!fn && this.modal) {
            fn = function () { return _this.modal.hide(); };
        }
        if (fn) {
            fn();
        }
        this.onClose.emit(true);
    };
    ModalComponent.prototype.onEnterKeyDown = function (event) {
        var hasOnlyOneButton = isEmpty(this.labels.ok) !== isEmpty(this.labels.cancel);
        var isCancelClickable = !this.customFooter && this.labels.cancel;
        var isOkClickable = !this.customFooter && !this.disabled && this.labels.ok;
        if (hasOnlyOneButton && isCancelClickable) {
            this._dismiss();
        }
        if (hasOnlyOneButton && isOkClickable) {
            this._close();
        }
    };
    ModalComponent.ctorParameters = function () { return [
        { type: BsModalRef, decorators: [{ type: Optional }] }
    ]; };
    tslib_1.__decorate([
        Output()
    ], ModalComponent.prototype, "onDismiss", void 0);
    tslib_1.__decorate([
        Output()
    ], ModalComponent.prototype, "onClose", void 0);
    tslib_1.__decorate([
        Input()
    ], ModalComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input()
    ], ModalComponent.prototype, "close", void 0);
    tslib_1.__decorate([
        Input()
    ], ModalComponent.prototype, "dismiss", void 0);
    tslib_1.__decorate([
        Input()
    ], ModalComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        Input()
    ], ModalComponent.prototype, "body", void 0);
    tslib_1.__decorate([
        Input()
    ], ModalComponent.prototype, "customFooter", void 0);
    tslib_1.__decorate([
        Input()
    ], ModalComponent.prototype, "labels", null);
    tslib_1.__decorate([
        HostListener('document:keydown.enter', ['$event'])
    ], ModalComponent.prototype, "onEnterKeyDown", null);
    ModalComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-modal',
            template: "<div class=\"modal-header\">\n  <ng-content select=\"[c8y-modal-title]\"></ng-content>\n  <h3 [hidden]=\"!title\">{{title | translate}}</h3>\n</div>\n<div class=\"modal-body\">\n  <p\n    [hidden]=\"!title\"\n    class=\"text-center text-wrap\"\n    style=\"word-wrap:break-word;\"\n  >{{body}}</p>\n  <ng-content></ng-content>\n</div>\n<div class=\"modal-footer\" *ngIf=\"!customFooter\">\n  <ng-content select=\"[c8y-modal-footer]\"></ng-content>\n  <button\n    title=\"{{ labels.cancel | translate }}\" \n    *ngIf=\"labels.cancel\"\n    class=\"btn btn-default\"\n    (click)=\"_dismiss()\"\n  >{{labels.cancel | translate}}</button>\n  <button\n    title=\"{{ labels.ok | translate }}\" \n    *ngIf=\"labels.ok\"\n    class=\"btn btn-primary\"\n    (click)=\"_close()\"\n    [disabled]=\"disabled\"\n  >{{labels.ok | translate}}</button>\n</div>\n"
        }),
        tslib_1.__param(0, Optional())
    ], ModalComponent);
    return ModalComponent;
}());
export { ModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvbW9kYWwvbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0YsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBT2pDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0RHO0FBTUg7SUFpQkUsd0JBQWdDLEtBQWlCO1FBQWpCLFVBQUssR0FBTCxLQUFLLENBQVk7UUFoQnZDLGNBQVMsR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN0RCxZQUFPLEdBQTBCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDckQsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUtqQixpQkFBWSxHQUFZLEtBQUssQ0FBQztRQU8vQixZQUFPLEdBQWEsRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQUV6QixDQUFDO0lBUjVDLHNCQUFJLGtDQUFNO2FBSW5CLGNBQXdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFKckMsVUFBVyxFQUFxQjtnQkFBcEIsVUFBRSxFQUFFLGtCQUFNO1lBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBQyxFQUFFLElBQUEsRUFBRyxNQUFNLFFBQUEsRUFBQyxDQUFDO1FBQy9CLENBQUM7OztPQUFBO0lBUUQsaUNBQVEsR0FBUjtRQUFBLGlCQUtDO1FBSkMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxFQUFFLEdBQUcsY0FBTSxPQUFBLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQWpCLENBQWlCLENBQUM7U0FBRTtRQUN4RCxJQUFJLEVBQUUsRUFBRTtZQUFFLEVBQUUsRUFBRSxDQUFDO1NBQUU7UUFDakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELCtCQUFNLEdBQU47UUFBQSxpQkFLQztRQUpDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsRUFBRSxHQUFHLGNBQU0sT0FBQSxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFqQixDQUFpQixDQUFDO1NBQUU7UUFDeEQsSUFBSSxFQUFFLEVBQUU7WUFBRSxFQUFFLEVBQUUsQ0FBQztTQUFFO1FBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFbUQsdUNBQWMsR0FBZCxVQUFlLEtBQW9CO1FBQ3JGLElBQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakYsSUFBTSxpQkFBaUIsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbkUsSUFBTSxhQUFhLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUM3RSxJQUFJLGdCQUFnQixJQUFLLGlCQUFpQixFQUFFO1lBQzFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQjtRQUNELElBQUksZ0JBQWdCLElBQUssYUFBYSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNmO0lBQ0gsQ0FBQzs7Z0JBMUJzQyxVQUFVLHVCQUFwQyxRQUFROztJQWhCWDtRQUFULE1BQU0sRUFBRTtxREFBdUQ7SUFDdEQ7UUFBVCxNQUFNLEVBQUU7bURBQXFEO0lBQ3JEO1FBQVIsS0FBSyxFQUFFO29EQUFrQjtJQUNqQjtRQUFSLEtBQUssRUFBRTtpREFBbUI7SUFDbEI7UUFBUixLQUFLLEVBQUU7bURBQXFCO0lBQ3BCO1FBQVIsS0FBSyxFQUFFO2lEQUFlO0lBQ2Q7UUFBUixLQUFLLEVBQUU7Z0RBQWM7SUFDYjtRQUFSLEtBQUssRUFBRTt3REFBK0I7SUFDOUI7UUFBUixLQUFLLEVBQUU7Z0RBRVA7SUFzQm1EO1FBQW5ELFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dEQVVsRDtJQTNDVSxjQUFjO1FBTDFCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxXQUFXO1lBQ3JCLGkyQkFBcUM7U0FDdEMsQ0FBQztRQW1CYSxtQkFBQSxRQUFRLEVBQUUsQ0FBQTtPQWpCWixjQUFjLENBNEMxQjtJQUFELHFCQUFDO0NBQUEsQUE1Q0QsSUE0Q0M7U0E1Q1ksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCc01vZGFsUmVmIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IGlzRW1wdHkgfSBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElMYWJlbHMge1xuICBvaz86IHN0cmluZztcbiAgY2FuY2VsPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEM4eSBtb2RhbCBjb21wb25lbnQuXG4gKiAjIyBFeGFtcGxlOlxuICpcbiAqIENyZWF0aW5nIGN1c3RvbSBtb2RhbDpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuICogIGltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBAQ29tcG9uZW50KHtcbiAqICBzZWxlY3RvcjogXCJteS1tb2RhbFwiLFxuICogIHRlbXBsYXRlOiBgXG4gKiAgICA8Yzh5LW1vZGFsIHRpdGxlPVwiQ3VzdG9tVGl0bGVcIlxuICogICAgICAob25DbG9zZSk9XCJvbkNsb3NlKCRldmVudClcIlxuICogICAgICAob25EaXNtaXNzKT1cIm9uRGlzbWlzcygkZXZlbnQpXCJcbiAqICAgICAgW2xhYmVsc109XCJsYWJlbHNcIlxuICogICAgICBbZGlzYWJsZWRdPVwidHJ1ZVwiIDwtIHdpbGwgZGlzYWJsZSBvayBidXR0b25cbiAqICAgICAgPlxuICogICAgICAgIDxzcGFuPkkgYW0gYm9keSBvZiBtb2RhbDwvc3Bhbj5cbiAqICAgICAgICA8c3Bhbj5Gb3Igc2ltcGxlIHN0cmluZyB1c2UgYm9keT1cInN0cmluZ1wiPC9zcGFuPlxuICogICAgPC9jOHktbW9kYWw+YFxuICogfSlcbiAqXG4gKiBleHBvcnQgY2xhc3MgTXlNb2RhbENvbXBvbmVudCB7XG4gKlxuICogIGNsb3NlU3ViamVjdDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7XG4gKiAgbGFiZWxzIDogSUxhYmVscyA9IHtvazogXCJjdXN0b21PS1wiLCBjYW5jZWw6IFwiY3VzdG9tQ2FuY2VsXCJ9O1xuICpcbiAqICBvbkRpc21pc3MoZXZlbnQpe1xuICogICAgdGhpcy5jbG9zZVN1YmplY3QubmV4dChmYWxzZSk7XG4gKiAgfVxuICpcbiAqICBvbkNsb3NlKGV2ZW50KSB7XG4gKiAgICB0aGlzLmNsb3NlU3ViamVjdC5uZXh0KHRydWUpO1xuICogIH1cbiAqIH1cbiAqIGBgYFxuICogU2hvd2luZyBtb2RhbDpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSBcIm5neC1ib290c3RyYXAvbW9kYWxcIjtcbiAqXG4gKiBjb25zdHJ1Y3RvcihcbiAqICBwdWJsaWMgYnNNb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlLFxuICogKSB7fVxuICpcbiAqIHNob3dNb2RhbCgpIHtcbiAqICBjb25zdCBtb2RhbFJlZiA9IHRoaXMuYnNNb2RhbFNlcnZpY2Uuc2hvdyhNeU1vZGFsQ29tcG9uZW50KTtcbiAqICBtb2RhbFJlZi5jb250ZW50LmNsb3NlU3ViamVjdC5zdWJzY3JpYmUocmVzdWx0ID0+IHtcbiAqICAgIGNvbnNvbGUubG9nKCdyZXN1bHRzOicsIHJlc3VsdCk7XG4gKiAgfSk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21vZGFsLmNvbXBvbmVudC5odG1sJyxcbn0pXG5cbmV4cG9ydCBjbGFzcyBNb2RhbENvbXBvbmVudCB7XG4gIEBPdXRwdXQoKSBvbkRpc21pc3M6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcbiAgQElucHV0KCkgY2xvc2U6ICgpID0+IHZvaWQ7XG4gIEBJbnB1dCgpIGRpc21pc3M6ICgpID0+IHZvaWQ7XG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGJvZHk6IHN0cmluZztcbiAgQElucHV0KCkgY3VzdG9tRm9vdGVyOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIHNldCBsYWJlbHMoe29rLCBjYW5jZWx9OiBJTGFiZWxzKSB7XG4gICAgdGhpcy5fbGFiZWxzID0ge29rICwgY2FuY2VsfTtcbiAgfVxuXG4gIGdldCBsYWJlbHMoKTogSUxhYmVscyB7IHJldHVybiB0aGlzLl9sYWJlbHM7IH1cblxuICBwcml2YXRlIF9sYWJlbHM6IElMYWJlbHMgPSAgeyBvazogZ2V0dGV4dCgnT0snKSwgY2FuY2VsOiBnZXR0ZXh0KCdDYW5jZWwnKSB9O1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgbW9kYWw6IEJzTW9kYWxSZWYpIHt9XG5cbiAgX2Rpc21pc3MoKSB7XG4gICAgbGV0IGZuID0gdGhpcy5kaXNtaXNzO1xuICAgIGlmICghZm4gJiYgdGhpcy5tb2RhbCkgeyBmbiA9ICgpID0+IHRoaXMubW9kYWwuaGlkZSgpOyB9XG4gICAgaWYgKGZuKSB7IGZuKCk7IH1cbiAgICB0aGlzLm9uRGlzbWlzcy5lbWl0KHRydWUpO1xuICB9XG5cbiAgX2Nsb3NlKCkge1xuICAgIGxldCBmbiA9IHRoaXMuY2xvc2U7XG4gICAgaWYgKCFmbiAmJiB0aGlzLm1vZGFsKSB7IGZuID0gKCkgPT4gdGhpcy5tb2RhbC5oaWRlKCk7IH1cbiAgICBpZiAoZm4pIHsgZm4oKTsgfVxuICAgIHRoaXMub25DbG9zZS5lbWl0KHRydWUpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6a2V5ZG93bi5lbnRlcicsIFsnJGV2ZW50J10pIG9uRW50ZXJLZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3QgaGFzT25seU9uZUJ1dHRvbiA9IGlzRW1wdHkodGhpcy5sYWJlbHMub2spICE9PSBpc0VtcHR5KHRoaXMubGFiZWxzLmNhbmNlbCk7XG4gICAgY29uc3QgaXNDYW5jZWxDbGlja2FibGUgPSAhdGhpcy5jdXN0b21Gb290ZXIgJiYgdGhpcy5sYWJlbHMuY2FuY2VsO1xuICAgIGNvbnN0IGlzT2tDbGlja2FibGUgPSAhdGhpcy5jdXN0b21Gb290ZXIgJiYgIXRoaXMuZGlzYWJsZWQgJiYgdGhpcy5sYWJlbHMub2s7XG4gICAgaWYgKGhhc09ubHlPbmVCdXR0b24gICYmIGlzQ2FuY2VsQ2xpY2thYmxlKSB7XG4gICAgICB0aGlzLl9kaXNtaXNzKCk7XG4gICAgfVxuICAgIGlmIChoYXNPbmx5T25lQnV0dG9uICAmJiBpc09rQ2xpY2thYmxlKSB7XG4gICAgICB0aGlzLl9jbG9zZSgpO1xuICAgIH1cbiAgfVxufVxuIl19