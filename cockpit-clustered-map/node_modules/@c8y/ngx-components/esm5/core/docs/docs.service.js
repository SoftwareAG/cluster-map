import * as tslib_1 from "tslib";
import { Injectable, Inject, Optional } from '@angular/core';
import { OptionsService } from '../common/options.service';
import { documentationItems } from './defaults.items';
import { AppStateService } from '../common/ui-state.service';
import { gettext } from '../i18n/gettext';
import { HOOK_DOCS } from './docs.models';
import { fromTrigger } from '../common/public-api';
import { Router } from '@angular/router';
import { shareReplay, startWith, first, filter } from 'rxjs/operators';
import { isUndefined } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "../common/options.service";
import * as i2 from "../common/ui-state.service";
import * as i3 from "./docs.models";
import * as i4 from "@angular/router";
var DocsService = /** @class */ (function () {
    function DocsService(options, app, factories, router) {
        if (factories === void 0) { factories = []; }
        this.options = options;
        this.app = app;
        if (!factories) {
            factories = [];
        }
        factories.push(this);
        var refreshTrigger = this.app.map(function (_a) {
            var supportUrl = _a.supportUrl;
            return supportUrl;
        });
        this.items$ = fromTrigger(router, refreshTrigger, factories).pipe(startWith([]), shareReplay(1));
    }
    DocsService.prototype.getBaseUrl = function () {
        return this.options.get('docsBaseUrl', 'https://www.cumulocity.com/guides');
    };
    Object.defineProperty(DocsService.prototype, "templateStr", {
        get: function () {
            return this.options.get('guideHrefTemplate', '${docsBaseUrl}${partialUrl}');
        },
        enumerable: true,
        configurable: true
    });
    DocsService.prototype.getUserGuideLink = function (link) {
        if (/^https?:/.test(link)) {
            return link;
        }
        if (this.getBaseUrl === null) {
            return null;
        }
        return this.getLink(this.templateStr, link);
    };
    DocsService.prototype.list = function () {
        return this.items$
            .pipe(filter(function (i) { return !!i.length; }), first())
            .toPromise();
    };
    DocsService.prototype.refresh = function () {
        // no op
    };
    DocsService.prototype.get = function () {
        var _this = this;
        // use the function as a factory
        var _a = this.options.get('docs', {}), links = _a.links, noDefault = _a.noDefault, _b = _a.excludeDefault, excludeDefault = _b === void 0 ? [] : _b;
        var supportUrl = this.app.state.supportUrl;
        var staticLinks = noDefault
            ? []
            : documentationItems
                .map(function (item) { return (tslib_1.__assign({}, item, { url: _this.getUserGuideLink(item.url) })); })
                .filter(function (_a) {
                var url = _a.url;
                return !excludeDefault.some(function (e) { return new RegExp(e).test(url); });
            });
        if (links) {
            // backwards compatibility
            links.map(function (lnk) {
                if (isUndefined(lnk.type)) {
                    lnk.type = 'doc';
                    return lnk;
                }
            });
            staticLinks = staticLinks.concat(links);
        }
        if (supportUrl) {
            staticLinks.push({
                icon: 'comments',
                label: gettext('Forum support'),
                url: supportUrl,
                type: 'doc'
            });
        }
        return staticLinks;
    };
    DocsService.prototype.getLink = function (templateStr, partialLink) {
        if (!templateStr) {
            return undefined;
        }
        return templateStr
            .replace(/\${docsBaseUrl}/, this.getBaseUrl())
            .replace(/\${partialUrl}/, this.prefixWithSlash(partialLink));
    };
    DocsService.prototype.prefixWithSlash = function (partialLink) {
        if (partialLink === void 0) { partialLink = ''; }
        var shouldPrefix = !(partialLink && /^\//.test(partialLink));
        var prefix = shouldPrefix ? '/' : '';
        return "" + prefix + partialLink;
    };
    DocsService.ctorParameters = function () { return [
        { type: OptionsService },
        { type: AppStateService },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_DOCS,] }] },
        { type: Router }
    ]; };
    DocsService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DocsService_Factory() { return new DocsService(i0.ɵɵinject(i1.OptionsService), i0.ɵɵinject(i2.AppStateService), i0.ɵɵinject(i3.HOOK_DOCS, 8), i0.ɵɵinject(i4.Router)); }, token: DocsService, providedIn: "root" });
    DocsService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(HOOK_DOCS))
    ], DocsService);
    return DocsService;
}());
export { DocsService };
//# sourceMappingURL=data:application/json;base64,