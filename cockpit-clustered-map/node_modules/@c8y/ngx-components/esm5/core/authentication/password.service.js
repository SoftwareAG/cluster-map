import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { PasswordStrength } from '@c8y/client';
import { filter } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import { PasswordConfirmModalComponent } from './password-confirm-modal.component';
import { BsModalService } from 'ngx-bootstrap/modal';
import { take } from 'rxjs/operators';
var PasswordService = /** @class */ (function () {
    function PasswordService(modalService) {
        this.modalService = modalService;
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    PasswordService.prototype.confirmPassword = function () {
        var modalInstance = this.modalService.show(PasswordConfirmModalComponent);
        return modalInstance.content.passwordConfirmedEmitter.pipe(take(1));
    };
    PasswordService.prototype.hasLowerCase = function (password) {
        return (password.search(/[a-z]/) !== -1);
    };
    PasswordService.prototype.hasUpperCase = function (password) {
        return (password.search(/[A-Z]/) !== -1);
    };
    PasswordService.prototype.hasNumbers = function (password) {
        return (password.search(/[0-9]/) !== -1);
    };
    PasswordService.prototype.hasSpecialChars = function (password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    };
    PasswordService.prototype.getStrengthColor = function (password) {
        var passwordStrength = filter([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 2) {
            return this.GREEN;
        }
        else if (passwordStrength >= 2) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    };
    PasswordService.ctorParameters = function () { return [
        { type: BsModalService }
    ]; };
    PasswordService = tslib_1.__decorate([
        Injectable()
    ], PasswordService);
    return PasswordService;
}());
export { PasswordService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbkMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdEM7SUFxQkUseUJBQW9CLFlBQTRCO1FBQTVCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQW5CeEMsVUFBSyxHQUEwQjtZQUNyQyxTQUFTLEVBQUUsT0FBTztZQUNsQixLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLFdBQVcsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQzlCLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLEtBQUs7U0FDekMsQ0FBQztRQUNNLFdBQU0sR0FBMEI7WUFDdEMsU0FBUyxFQUFFLFFBQVE7WUFDbkIsS0FBSyxFQUFFLG1CQUFtQjtZQUMxQixXQUFXLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUM5QixnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNO1NBQzFDLENBQUM7UUFDTSxRQUFHLEdBQTBCO1lBQ25DLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLEtBQUssRUFBRSxpQkFBaUI7WUFDeEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDNUIsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsR0FBRztTQUN2QyxDQUFDO0lBRWlELENBQUM7SUFFcEQseUNBQWUsR0FBZjtRQUNFLElBQU0sYUFBYSxHQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDakYsT0FBTyxhQUFhLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsc0NBQVksR0FBWixVQUFhLFFBQWdCO1FBQzNCLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELHNDQUFZLEdBQVosVUFBYSxRQUFnQjtRQUMzQixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxvQ0FBVSxHQUFWLFVBQVcsUUFBZ0I7UUFDekIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQseUNBQWUsR0FBZixVQUFnQixRQUFnQjtRQUM5QixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCwwQ0FBZ0IsR0FBaEIsVUFBaUIsUUFBZ0I7UUFDL0IsSUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7WUFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7WUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDekIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUM7U0FDL0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVWLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNuQjthQUFNLElBQUksZ0JBQWdCLElBQUksQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNwQjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQzs7Z0JBdENpQyxjQUFjOztJQXJCckMsZUFBZTtRQUQzQixVQUFVLEVBQUU7T0FDQSxlQUFlLENBNEQzQjtJQUFELHNCQUFDO0NBQUEsQUE1REQsSUE0REM7U0E1RFksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGggfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdsb2Rhc2gtZXMnO1xuaW1wb3J0IHsgUGFzc3dvcmRTdHJlbmd0aENvbG9yIH0gZnJvbSAnLi9wYXNzd29yZC5tb2RlbCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IFBhc3N3b3JkQ29uZmlybU1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi9wYXNzd29yZC1jb25maXJtLW1vZGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ25neC1ib290c3RyYXAvbW9kYWwnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBHUkVFTjogUGFzc3dvcmRTdHJlbmd0aENvbG9yID0ge1xuICAgIGNvbG9yTmFtZTogJ2dyZWVuJyxcbiAgICBjb2xvcjogJ3JnYigwLCAxMjgsIDApJyxcbiAgICBkZXNjcmlwdGlvbjogZ2V0dGV4dCgnc3Ryb25nJyksXG4gICAgcGFzc3dvcmRTdHJlbmd0aDogUGFzc3dvcmRTdHJlbmd0aC5HUkVFTlxuICB9O1xuICBwcml2YXRlIFlFTExPVzogUGFzc3dvcmRTdHJlbmd0aENvbG9yID0ge1xuICAgIGNvbG9yTmFtZTogJ3llbGxvdycsXG4gICAgY29sb3I6ICdyZ2IoMjU1LCAyMDQsIDUxKScsXG4gICAgZGVzY3JpcHRpb246IGdldHRleHQoJ21lZGl1bScpLFxuICAgIHBhc3N3b3JkU3RyZW5ndGg6IFBhc3N3b3JkU3RyZW5ndGguWUVMTE9XXG4gIH07XG4gIHByaXZhdGUgUkVEOiBQYXNzd29yZFN0cmVuZ3RoQ29sb3IgPSB7XG4gICAgY29sb3JOYW1lOiAncmVkJyxcbiAgICBjb2xvcjogJ3JnYigxNzAsIDAsIDUxKScsXG4gICAgZGVzY3JpcHRpb246IGdldHRleHQoJ3dlYWsnKSxcbiAgICBwYXNzd29yZFN0cmVuZ3RoOiBQYXNzd29yZFN0cmVuZ3RoLlJFRFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSkge31cblxuICBjb25maXJtUGFzc3dvcmQoKSB7XG4gICAgY29uc3QgbW9kYWxJbnN0YW5jZTogYW55ID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhQYXNzd29yZENvbmZpcm1Nb2RhbENvbXBvbmVudCk7XG4gICAgcmV0dXJuIG1vZGFsSW5zdGFuY2UuY29udGVudC5wYXNzd29yZENvbmZpcm1lZEVtaXR0ZXIucGlwZSh0YWtlKDEpKTtcbiAgfVxuXG4gIGhhc0xvd2VyQ2FzZShwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChwYXNzd29yZC5zZWFyY2goL1thLXpdLykgIT09IC0xKTtcbiAgfVxuXG4gIGhhc1VwcGVyQ2FzZShwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChwYXNzd29yZC5zZWFyY2goL1tBLVpdLykgIT09IC0xKTtcbiAgfVxuXG4gIGhhc051bWJlcnMocGFzc3dvcmQ6IHN0cmluZykge1xuICAgIHJldHVybiAocGFzc3dvcmQuc2VhcmNoKC9bMC05XS8pICE9PSAtMSk7XG4gIH1cblxuICBoYXNTcGVjaWFsQ2hhcnMocGFzc3dvcmQ6IHN0cmluZykge1xuICAgIHJldHVybiAocGFzc3dvcmQuc2VhcmNoKC9bXjAtOWEtekEtWl0rLykgIT09IC0xKTtcbiAgfVxuXG4gIGdldFN0cmVuZ3RoQ29sb3IocGFzc3dvcmQ6IHN0cmluZyk6IFBhc3N3b3JkU3RyZW5ndGhDb2xvciB7XG4gICAgY29uc3QgcGFzc3dvcmRTdHJlbmd0aCA9IGZpbHRlcihbXG4gICAgICB0aGlzLmhhc0xvd2VyQ2FzZShwYXNzd29yZCksXG4gICAgICB0aGlzLmhhc1VwcGVyQ2FzZShwYXNzd29yZCksXG4gICAgICB0aGlzLmhhc051bWJlcnMocGFzc3dvcmQpLFxuICAgICAgdGhpcy5oYXNTcGVjaWFsQ2hhcnMocGFzc3dvcmQpXG4gICAgXSkubGVuZ3RoO1xuXG4gICAgaWYgKHBhc3N3b3JkU3RyZW5ndGggPiAyKSB7XG4gICAgICByZXR1cm4gdGhpcy5HUkVFTjtcbiAgICB9IGVsc2UgaWYgKHBhc3N3b3JkU3RyZW5ndGggPj0gMikge1xuICAgICAgcmV0dXJuIHRoaXMuWUVMTE9XO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5SRUQ7XG4gICAgfVxuICB9XG59XG4iXX0=