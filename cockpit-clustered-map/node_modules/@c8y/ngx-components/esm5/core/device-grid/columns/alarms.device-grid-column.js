import * as tslib_1 from "tslib";
import { BaseDeviceGridColumn } from './base.device-grid-column';
import { AlarmsCellRendererComponent } from './alarms.cell-renderer.component';
import { gettext } from '../../i18n/gettext';
import { map } from 'lodash-es';
var AlarmsDeviceGridColumn = /** @class */ (function (_super) {
    tslib_1.__extends(AlarmsDeviceGridColumn, _super);
    function AlarmsDeviceGridColumn() {
        var _this = _super.call(this) || this;
        _this.name = 'alarms';
        _this.header = gettext('Alarms');
        _this.cellRendererComponent = AlarmsCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    critical: {
                        type: 'boolean'
                    },
                    major: {
                        type: 'boolean'
                    },
                    minor: {
                        type: 'boolean'
                    },
                    warning: {
                        type: 'boolean'
                    },
                    none: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with active') + "</span>:</label>"
                },
                {
                    key: 'critical',
                    title: gettext('Critical alarms')
                },
                {
                    key: 'major',
                    title: gettext('Major alarms')
                },
                {
                    key: 'minor',
                    title: gettext('Minor alarms')
                },
                {
                    key: 'warning',
                    title: gettext('Warnings')
                },
                {
                    key: 'none',
                    title: gettext('No alarms')
                }
            ],
            getFilter: function (model) {
                var filter = {};
                var ors = [];
                if (model.critical) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });
                }
                if (model.major) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });
                }
                if (model.minor) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });
                }
                if (model.warning) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });
                }
                if (model.none) {
                    ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });
                    ors.push({
                        __and: map(['critical', 'major', 'minor', 'warning'], function (sev) {
                            var zero = {};
                            var has = { __not: { __has: undefined } };
                            var key = "c8y_ActiveAlarmsStatus." + sev;
                            zero[key] = 0;
                            has.__not.__has = key;
                            return { __or: [zero, has] };
                        })
                    });
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [
                { path: 'c8y_ActiveAlarmsStatus.critical' },
                { path: 'c8y_ActiveAlarmsStatus.major' },
                { path: 'c8y_ActiveAlarmsStatus.minor' },
                { path: 'c8y_ActiveAlarmsStatus.warning' }
            ]
        };
        return _this;
    }
    return AlarmsDeviceGridColumn;
}(BaseDeviceGridColumn));
export { AlarmsDeviceGridColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxhcm1zLmRldmljZS1ncmlkLWNvbHVtbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2RldmljZS1ncmlkL2NvbHVtbnMvYWxhcm1zLmRldmljZS1ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFaEM7SUFBNEMsa0RBQW9CO0lBQzlEO1FBQUEsWUFDRSxpQkFBTyxTQWtHUjtRQWhHQyxLQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNyQixLQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxLQUFJLENBQUMscUJBQXFCLEdBQUcsMkJBQTJCLENBQUM7UUFFekQsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsS0FBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsVUFBVSxFQUFFO29CQUNWLFFBQVEsRUFBRTt3QkFDUixJQUFJLEVBQUUsU0FBUztxQkFDaEI7b0JBQ0QsS0FBSyxFQUFFO3dCQUNMLElBQUksRUFBRSxTQUFTO3FCQUNoQjtvQkFDRCxLQUFLLEVBQUU7d0JBQ0wsSUFBSSxFQUFFLFNBQVM7cUJBQ2hCO29CQUNELE9BQU8sRUFBRTt3QkFDUCxJQUFJLEVBQUUsU0FBUztxQkFDaEI7b0JBQ0QsSUFBSSxFQUFFO3dCQUNKLElBQUksRUFBRSxTQUFTO3FCQUNoQjtpQkFDRjthQUNGO1lBQ0QsSUFBSSxFQUFFO2dCQUNKO29C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QUMzQyxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRTtnQkFDeEMsRUFBRSxJQUFJLEVBQUUsOEJBQThCLEVBQUU7Z0JBQ3hDLEVBQUUsSUFBSSxFQUFFLGdDQUFnQyxFQUFFO2FBQzNDO1NBQ0YsQ0FBQzs7SUFDSixDQUFDO0lBQ0gsNkJBQUM7QUFBRCxDQUFDLEFBckdELENBQTRDLG9CQUFvQixHQXFHL0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vYmFzZS5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9hbGFybXMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uLy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5leHBvcnQgY2xhc3MgQWxhcm1zRGV2aWNlR3JpZENvbHVtbiBleHRlbmRzIEJhc2VEZXZpY2VHcmlkQ29sdW1uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMubmFtZSA9ICdhbGFybXMnO1xuICAgIHRoaXMuaGVhZGVyID0gZ2V0dGV4dCgnQWxhcm1zJyk7XG4gICAgdGhpcy5jZWxsUmVuZGVyZXJDb21wb25lbnQgPSBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnQ7XG5cbiAgICB0aGlzLmZpbHRlcmFibGUgPSB0cnVlO1xuICAgIHRoaXMuZmlsdGVyaW5nQ29uZmlnID0ge1xuICAgICAgc2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgY3JpdGljYWw6IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbWFqb3I6IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbWlub3I6IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgd2FybmluZzoge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBub25lOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmb3JtOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAndGVtcGxhdGUnLFxuICAgICAgICAgIHRlbXBsYXRlOiBgPGxhYmVsPjxzcGFuIHRyYW5zbGF0ZT4ke2dldHRleHQoJ1Nob3cgZGV2aWNlcyB3aXRoIGFjdGl2ZScpfTwvc3Bhbj46PC9sYWJlbD5gXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdjcml0aWNhbCcsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ0NyaXRpY2FsIGFsYXJtcycpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdtYWpvcicsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ01ham9yIGFsYXJtcycpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdtaW5vcicsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ01pbm9yIGFsYXJtcycpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICd3YXJuaW5nJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnV2FybmluZ3MnKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnbm9uZScsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ05vIGFsYXJtcycpXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBnZXRGaWx0ZXIobW9kZWwpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyOiBhbnkgPSB7fTtcbiAgICAgICAgY29uc3Qgb3JzID0gW107XG4gICAgICAgIGlmIChtb2RlbC5jcml0aWNhbCkge1xuICAgICAgICAgIG9ycy5wdXNoKHsgJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMuY3JpdGljYWwnOiB7IF9fZ3Q6IDAgfSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZWwubWFqb3IpIHtcbiAgICAgICAgICBvcnMucHVzaCh7ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLm1ham9yJzogeyBfX2d0OiAwIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLm1pbm9yKSB7XG4gICAgICAgICAgb3JzLnB1c2goeyAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5taW5vcic6IHsgX19ndDogMCB9IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlbC53YXJuaW5nKSB7XG4gICAgICAgICAgb3JzLnB1c2goeyAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy53YXJuaW5nJzogeyBfX2d0OiAwIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLm5vbmUpIHtcbiAgICAgICAgICBvcnMucHVzaCh7IF9fbm90OiB7IF9faGFzOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cycgfSB9KTtcbiAgICAgICAgICBvcnMucHVzaCh7XG4gICAgICAgICAgICBfX2FuZDogbWFwKFsnY3JpdGljYWwnLCAnbWFqb3InLCAnbWlub3InLCAnd2FybmluZyddLCBzZXYgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB6ZXJvID0ge307XG4gICAgICAgICAgICAgIGNvbnN0IGhhcyA9IHsgX19ub3Q6IHsgX19oYXM6IHVuZGVmaW5lZCB9IH07XG4gICAgICAgICAgICAgIGNvbnN0IGtleSA9IGBjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLiR7c2V2fWA7XG4gICAgICAgICAgICAgIHplcm9ba2V5XSA9IDA7XG4gICAgICAgICAgICAgIGhhcy5fX25vdC5fX2hhcyA9IGtleTtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgX19vcjogW3plcm8sIGhhc10gfTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBmaWx0ZXIuX19vciA9IG9ycztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNvcnRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNvcnRpbmdDb25maWcgPSB7XG4gICAgICBwYXRoU29ydGluZ0NvbmZpZ3M6IFtcbiAgICAgICAgeyBwYXRoOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5jcml0aWNhbCcgfSxcbiAgICAgICAgeyBwYXRoOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5tYWpvcicgfSxcbiAgICAgICAgeyBwYXRoOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5taW5vcicgfSxcbiAgICAgICAgeyBwYXRoOiAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy53YXJuaW5nJyB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19