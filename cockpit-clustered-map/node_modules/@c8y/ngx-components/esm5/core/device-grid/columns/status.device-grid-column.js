import * as tslib_1 from "tslib";
import { BaseDeviceGridColumn } from './base.device-grid-column';
import { StatusCellRendererComponent } from './status.cell-renderer.component';
import { gettext } from '../../i18n/gettext';
var StatusDeviceGridColumn = /** @class */ (function (_super) {
    tslib_1.__extends(StatusDeviceGridColumn, _super);
    function StatusDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var availabilityStatusPath = 'c8y_Availability.status';
        var requiredAvailabilityPath = 'c8y_RequiredAvailability';
        var connectionStatusPath = 'c8y_Connection.status';
        _this.name = 'status';
        _this.header = gettext('Status');
        _this.dataType = "icon" /* Icon */;
        _this.cellRendererComponent = StatusCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    sendOnline: {
                        type: 'boolean'
                    },
                    sendOffline: {
                        type: 'boolean'
                    },
                    sendUnknown: {
                        type: 'boolean'
                    },
                    sendNotMonitored: {
                        type: 'boolean'
                    },
                    pushOnline: {
                        type: 'boolean'
                    },
                    pushOffline: {
                        type: 'boolean'
                    },
                    pushUnknown: {
                        type: 'boolean'
                    },
                    maintenance: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with send status') + "</span>:</label>"
                },
                {
                    key: 'sendOnline',
                    title: gettext('Online')
                },
                {
                    key: 'sendOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'sendUnknown',
                    title: gettext('Unknown')
                },
                {
                    key: 'sendNotMonitored',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with push status') + "</span>:</label>"
                },
                {
                    key: 'pushOnline',
                    title: gettext('Online')
                },
                {
                    key: 'pushOffline',
                    title: gettext('Offline')
                },
                {
                    key: 'pushUnknown',
                    title: gettext('Not monitored')
                },
                {
                    type: 'template',
                    template: "<label><span translate>" + gettext('Show devices with maintenance status') + "</span>:</label>"
                },
                {
                    key: 'maintenance',
                    title: gettext('Under maintenance')
                }
            ],
            getFilter: function (model) {
                var _a, _b;
                var filter = {};
                var ors = [];
                var sendIns = [];
                var pushIns = [];
                if (model) {
                    if (model.sendOnline) {
                        sendIns.push('AVAILABLE');
                    }
                    if (model.maintenance) {
                        sendIns.push('MAINTENANCE');
                    }
                    if (model.sendOffline) {
                        sendIns.push('UNAVAILABLE');
                    }
                    if (model.sendUnknown) {
                        ors.push({
                            __and: [
                                { __not: { __has: availabilityStatusPath } },
                                { __has: requiredAvailabilityPath }
                            ]
                        });
                    }
                    if (model.sendNotMonitored) {
                        ors.push({
                            __and: [
                                { __not: { __has: availabilityStatusPath } },
                                { __not: { __has: requiredAvailabilityPath } }
                            ]
                        });
                    }
                    if (model.pushOnline) {
                        pushIns.push('CONNECTED');
                    }
                    if (model.pushOffline) {
                        pushIns.push('DISCONNECTED');
                    }
                    if (model.pushUnknown) {
                        ors.push({
                            __not: { __has: connectionStatusPath }
                        });
                    }
                    if (sendIns.length) {
                        ors.push((_a = {}, _a[availabilityStatusPath] = { __in: sendIns }, _a));
                    }
                    if (pushIns.length) {
                        ors.push((_b = {}, _b[connectionStatusPath] = { __in: pushIns }, _b));
                    }
                    if (ors.length) {
                        filter.__or = ors;
                    }
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: availabilityStatusPath }]
        };
        return _this;
    }
    return StatusDeviceGridColumn;
}(BaseDeviceGridColumn));
export { StatusDeviceGridColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLmRldmljZS1ncmlkLWNvbHVtbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2RldmljZS1ncmlkL2NvbHVtbnMvc3RhdHVzLmRldmljZS1ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFL0UsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTdDO0lBQTRDLGtEQUFvQjtJQUM5RDtRQUFBLFlBQ0UsaUJBQU8sU0EySlI7UUF6SkMsSUFBTSxzQkFBc0IsR0FBRyx5QkFBeUIsQ0FBQztRQUN6RCxJQUFNLHdCQUF3QixHQUFHLDBCQUEwQixDQUFDO1FBQzVELElBQU0sb0JBQW9CLEdBQUcsdUJBQXVCLENBQUM7UUFFckQsS0FBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDckIsS0FBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsS0FBSSxDQUFDLFFBQVEsb0JBQXNCLENBQUM7UUFDcEMsS0FBSSxDQUFDLHFCQUFxQixHQUFHLDJCQUEyQixDQUFDO1FBRXpELEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLEtBQUksQ0FBQyxlQUFlLEdBQUc7WUFDckIsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxRQUFRO2dCQUNkLFVBQVUsRUFBRTtvQkFDVixVQUFVLEVBQUU7d0JBQ1YsSUFBSSxFQUFFLFNBQVM7cUJBQ2hCO29CQUNELFdBQVcsRUFBRTt3QkFDWCxJQUFJLEVBQUUsU0FBUztxQkFDaEI7b0JBQ0QsV0FBVyxFQUFFO3dCQUNYLElBQUksRUFBRSxTQUFTO3FCQUNoQjtvQkFDRCxnQkFBZ0IsRUFBRTt3QkFDaEIs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QixHQThKL0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vYmFzZS5kZXZpY2UtZ3JpZC1jb2x1bW4nO1xuaW1wb3J0IHsgU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9zdGF0dXMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29sdW1uRGF0YVR5cGUgfSBmcm9tICcuLi8uLi9kYXRhLWdyaWQvZGF0YS1ncmlkLm1vZGVsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi8uLi9pMThuL2dldHRleHQnO1xuXG5leHBvcnQgY2xhc3MgU3RhdHVzRGV2aWNlR3JpZENvbHVtbiBleHRlbmRzIEJhc2VEZXZpY2VHcmlkQ29sdW1uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGNvbnN0IGF2YWlsYWJpbGl0eVN0YXR1c1BhdGggPSAnYzh5X0F2YWlsYWJpbGl0eS5zdGF0dXMnO1xuICAgIGNvbnN0IHJlcXVpcmVkQXZhaWxhYmlsaXR5UGF0aCA9ICdjOHlfUmVxdWlyZWRBdmFpbGFiaWxpdHknO1xuICAgIGNvbnN0IGNvbm5lY3Rpb25TdGF0dXNQYXRoID0gJ2M4eV9Db25uZWN0aW9uLnN0YXR1cyc7XG5cbiAgICB0aGlzLm5hbWUgPSAnc3RhdHVzJztcbiAgICB0aGlzLmhlYWRlciA9IGdldHRleHQoJ1N0YXR1cycpO1xuICAgIHRoaXMuZGF0YVR5cGUgPSBDb2x1bW5EYXRhVHlwZS5JY29uO1xuICAgIHRoaXMuY2VsbFJlbmRlcmVyQ29tcG9uZW50ID0gU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50O1xuXG4gICAgdGhpcy5maWx0ZXJhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmZpbHRlcmluZ0NvbmZpZyA9IHtcbiAgICAgIHNjaGVtYToge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHNlbmRPbmxpbmU6IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VuZE9mZmxpbmU6IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VuZFVua25vd246IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VuZE5vdE1vbml0b3JlZDoge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwdXNoT25saW5lOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIHB1c2hPZmZsaW5lOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIHB1c2hVbmtub3duOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1haW50ZW5hbmNlOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmb3JtOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAndGVtcGxhdGUnLFxuICAgICAgICAgIHRlbXBsYXRlOiBgPGxhYmVsPjxzcGFuIHRyYW5zbGF0ZT4ke2dldHRleHQoXG4gICAgICAgICAgICAnU2hvdyBkZXZpY2VzIHdpdGggc2VuZCBzdGF0dXMnXG4gICAgICAgICAgKX08L3NwYW4+OjwvbGFiZWw+YFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnc2VuZE9ubGluZScsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ09ubGluZScpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdzZW5kT2ZmbGluZScsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ09mZmxpbmUnKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnc2VuZFVua25vd24nLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdVbmtub3duJylcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ3NlbmROb3RNb25pdG9yZWQnLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdOb3QgbW9uaXRvcmVkJylcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICd0ZW1wbGF0ZScsXG4gICAgICAgICAgdGVtcGxhdGU6IGA8bGFiZWw+PHNwYW4gdHJhbnNsYXRlPiR7Z2V0dGV4dChcbiAgICAgICAgICAgICdTaG93IGRldmljZXMgd2l0aCBwdXNoIHN0YXR1cydcbiAgICAgICAgICApfTwvc3Bhbj46PC9sYWJlbD5gXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdwdXNoT25saW5lJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnT25saW5lJylcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ3B1c2hPZmZsaW5lJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnT2ZmbGluZScpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdwdXNoVW5rbm93bicsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ05vdCBtb25pdG9yZWQnKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3RlbXBsYXRlJyxcbiAgICAgICAgICB0ZW1wbGF0ZTogYDxsYWJlbD48c3BhbiB0cmFuc2xhdGU+JHtnZXR0ZXh0KFxuICAgICAgICAgICAgJ1Nob3cgZGV2aWNlcyB3aXRoIG1haW50ZW5hbmNlIHN0YXR1cydcbiAgICAgICAgICApfTwvc3Bhbj46PC9sYWJlbD5gXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdtYWludGVuYW5jZScsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1VuZGVyIG1haW50ZW5hbmNlJylcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGdldEZpbHRlcihtb2RlbCkge1xuICAgICAgICBjb25zdCBmaWx0ZXI6IGFueSA9IHt9O1xuICAgICAgICBjb25zdCBvcnMgPSBbXTtcbiAgICAgICAgY29uc3Qgc2VuZElucyA9IFtdO1xuICAgICAgICBjb25zdCBwdXNoSW5zID0gW107XG4gICAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICAgIGlmIChtb2RlbC5zZW5kT25saW5lKSB7XG4gICAgICAgICAgICBzZW5kSW5zLnB1c2goJ0FWQUlMQUJMRScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobW9kZWwubWFpbnRlbmFuY2UpIHtcbiAgICAgICAgICAgIHNlbmRJbnMucHVzaCgnTUFJTlRFTkFOQ0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGVsLnNlbmRPZmZsaW5lKSB7XG4gICAgICAgICAgICBzZW5kSW5zLnB1c2goJ1VOQVZBSUxBQkxFJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RlbC5zZW5kVW5rbm93bikge1xuICAgICAgICAgICAgb3JzLnB1c2goe1xuICAgICAgICAgICAgICBfX2FuZDogW1xuICAgICAgICAgICAgICAgIHsgX19ub3Q6IHsgX19oYXM6IGF2YWlsYWJpbGl0eVN0YXR1c1BhdGggfSB9LFxuICAgICAgICAgICAgICAgIHsgX19oYXM6IHJlcXVpcmVkQXZhaWxhYmlsaXR5UGF0aCB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobW9kZWwuc2VuZE5vdE1vbml0b3JlZCkge1xuICAgICAgICAgICAgb3JzLnB1c2goe1xuICAgICAgICAgICAgICBfX2FuZDogW1xuICAgICAgICAgICAgICAgIHsgX19ub3Q6IHsgX19oYXM6IGF2YWlsYWJpbGl0eVN0YXR1c1BhdGggfSB9LFxuICAgICAgICAgICAgICAgIHsgX19ub3Q6IHsgX19oYXM6IHJlcXVpcmVkQXZhaWxhYmlsaXR5UGF0aCB9IH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG1vZGVsLnB1c2hPbmxpbmUpIHtcbiAgICAgICAgICAgIHB1c2hJbnMucHVzaCgnQ09OTkVDVEVEJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RlbC5wdXNoT2ZmbGluZSkge1xuICAgICAgICAgICAgcHVzaElucy5wdXNoKCdESVNDT05ORUNURUQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGVsLnB1c2hVbmtub3duKSB7XG4gICAgICAgICAgICBvcnMucHVzaCh7XG4gICAgICAgICAgICAgIF9fbm90OiB7IF9faGFzOiBjb25uZWN0aW9uU3RhdHVzUGF0aCB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlbmRJbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBvcnMucHVzaCh7IFthdmFpbGFiaWxpdHlTdGF0dXNQYXRoXTogeyBfX2luOiBzZW5kSW5zIH0gfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwdXNoSW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgb3JzLnB1c2goeyBbY29ubmVjdGlvblN0YXR1c1BhdGhdOiB7IF9faW46IHB1c2hJbnMgfSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZpbHRlci5fX29yID0gb3JzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnNvcnRhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNvcnRpbmdDb25maWcgPSB7XG4gICAgICBwYXRoU29ydGluZ0NvbmZpZ3M6IFt7IHBhdGg6IGF2YWlsYWJpbGl0eVN0YXR1c1BhdGggfV1cbiAgICB9O1xuICB9XG59XG4iXX0=