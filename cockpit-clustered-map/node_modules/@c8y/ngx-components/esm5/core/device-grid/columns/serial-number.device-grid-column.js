import * as tslib_1 from "tslib";
import { BaseDeviceGridColumn } from './base.device-grid-column';
import { SerialNumberCellRendererComponent } from './serial-number.cell-renderer.component';
import { gettext } from '../../i18n/gettext';
var SerialNumberDeviceGridColumn = /** @class */ (function (_super) {
    tslib_1.__extends(SerialNumberDeviceGridColumn, _super);
    function SerialNumberDeviceGridColumn() {
        var _this = _super.call(this) || this;
        var hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';
        var vendingSerialNumberPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';
        _this.name = 'serialNumber';
        _this.header = gettext('Serial number');
        _this.cellRendererComponent = SerialNumberCellRendererComponent;
        _this.filterable = true;
        _this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    serialNumbers: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            form: [
                {
                    key: 'serialNumbers',
                    title: gettext('Show devices with serial number'),
                    add: gettext('Or'),
                    items: [
                        {
                            key: 'serialNumbers[]',
                            notitle: true,
                            placeholder: gettext('e.g. 54321-123, you can use an asterisk (*) as wildcard character')
                        }
                    ]
                }
            ],
            getFilter: function (model) {
                var _a;
                var filter = {};
                if (model.serialNumbers.length) {
                    filter.__or = (_a = {},
                        _a[hardwareSerialNumberPath] = { __in: model.serialNumbers },
                        _a[vendingSerialNumberPath] = { __in: model.serialNumbers },
                        _a);
                }
                return filter;
            }
        };
        _this.sortable = true;
        _this.sortingConfig = {
            pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]
        };
        return _this;
    }
    return SerialNumberDeviceGridColumn;
}(BaseDeviceGridColumn));
export { SerialNumberDeviceGridColumn };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsLW51bWJlci5kZXZpY2UtZ3JpZC1jb2x1bW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9kZXZpY2UtZ3JpZC9jb2x1bW5zL3NlcmlhbC1udW1iZXIuZGV2aWNlLWdyaWQtY29sdW1uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM1RixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFN0M7SUFBa0Qsd0RBQW9CO0lBQ3BFO1FBQUEsWUFDRSxpQkFBTyxTQXVEUjtRQXJEQyxJQUFNLHdCQUF3QixHQUFHLDJCQUEyQixDQUFDO1FBQzdELElBQU0sdUJBQXVCLEdBQzNCLGlFQUFpRSxDQUFDO1FBRXBFLEtBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDO1FBQzNCLEtBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZDLEtBQUksQ0FBQyxxQkFBcUIsR0FBRyxpQ0FBaUMsQ0FBQztRQUUvRCxLQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixLQUFJLENBQUMsZUFBZSxHQUFHO1lBQ3JCLE1BQU0sRUFBRTtnQkFDTixJQUFJLEVBQUUsUUFBUTtnQkFDZCxVQUFVLEVBQUU7b0JBQ1YsYUFBYSxFQUFFO3dCQUNiLElBQUksRUFBRSxPQUFPO3dCQUNiLEtBQUssRUFBRTs0QkFDTCxJQUFJLEVBQUUsUUFBUTt5QkFDZjtxQkFDRjtpQkFDRjthQUNGO1lBQ0QsSUFBSSxFQUFFO2dCQUNKO29CQUNFLEdBQUcsRUFBRSxlQUFlO29CQUNwQixLQUFLLEVBQUUsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO29CQUNqRCxHQUFHLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQztvQkFDbEIsS0FBSyxFQUFFO3dCQUNMOzRCQUNFLEdBQUcsRUFBRSxpQkFBaUI7NEJBQ3RCLE9BQU8sRUFBRSxJQUFJOzRCQUNiLFdBQVcsRUFBRSxPQUFPLENBQ2xCLG1FQUFtRSxDQUNwRTt5QkFDRjtxQkFDRjtpQkFDRjthQUNGO1lBQ0QsU0FBUyxFQUFULFVBQVUsS0FBVTs7Z0JBQ2xCLElBQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztnQkFDdkIsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtvQkFDOUIsTUFBTSxDQUFDLElBQUk7d0JBQ1QsR0FBQyx3QkFBd0IsSUFBRyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFO3dCQUN6RCxHQUFDLHVCQUF1QixJQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxhQUFhLEVBQUU7MkJBQ3pELENBQUM7aUJBQ0g7Z0JBQ0QsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQztTQUNGLENBQUM7UUFFRixLQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixLQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLGtCQUFrQixFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSx1QkFBdUIsRUFBRSxDQUFDO1NBQzVGLENBQUM7O0lBQ0osQ0FBQztJQUNILG1DQUFDO0FBQUQsQ0FBQyxBQTFERCxDQUFrRCxvQkFBb0IsR0EwRHJFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZURldmljZUdyaWRDb2x1bW4gfSBmcm9tICcuL2Jhc2UuZGV2aWNlLWdyaWQtY29sdW1uJztcbmltcG9ydCB7IFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vc2VyaWFsLW51bWJlci5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vLi4vaTE4bi9nZXR0ZXh0JztcblxuZXhwb3J0IGNsYXNzIFNlcmlhbE51bWJlckRldmljZUdyaWRDb2x1bW4gZXh0ZW5kcyBCYXNlRGV2aWNlR3JpZENvbHVtbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBjb25zdCBoYXJkd2FyZVNlcmlhbE51bWJlclBhdGggPSAnYzh5X0hhcmR3YXJlLnNlcmlhbE51bWJlcic7XG4gICAgY29uc3QgdmVuZGluZ1NlcmlhbE51bWJlclBhdGggPVxuICAgICAgJ2NvbV9uc25fc3RhcnR1cHNfdmVuZG1lX2ZyYWdtZW50c19WZW5kaW5nTWFjaGluZVR5cGVJbmZvLnNlcmlhbCc7XG5cbiAgICB0aGlzLm5hbWUgPSAnc2VyaWFsTnVtYmVyJztcbiAgICB0aGlzLmhlYWRlciA9IGdldHRleHQoJ1NlcmlhbCBudW1iZXInKTtcbiAgICB0aGlzLmNlbGxSZW5kZXJlckNvbXBvbmVudCA9IFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudDtcblxuICAgIHRoaXMuZmlsdGVyYWJsZSA9IHRydWU7XG4gICAgdGhpcy5maWx0ZXJpbmdDb25maWcgPSB7XG4gICAgICBzY2hlbWE6IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBzZXJpYWxOdW1iZXJzOiB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmb3JtOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdzZXJpYWxOdW1iZXJzJyxcbiAgICAgICAgICB0aXRsZTogZ2V0dGV4dCgnU2hvdyBkZXZpY2VzIHdpdGggc2VyaWFsIG51bWJlcicpLFxuICAgICAgICAgIGFkZDogZ2V0dGV4dCgnT3InKSxcbiAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBrZXk6ICdzZXJpYWxOdW1iZXJzW10nLFxuICAgICAgICAgICAgICBub3RpdGxlOiB0cnVlLFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogZ2V0dGV4dChcbiAgICAgICAgICAgICAgICAnZS5nLiA1NDMyMS0xMjMsIHlvdSBjYW4gdXNlIGFuIGFzdGVyaXNrICgqKSBhcyB3aWxkY2FyZCBjaGFyYWN0ZXInXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBnZXRGaWx0ZXIobW9kZWw6IGFueSk6IGFueSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcjogYW55ID0ge307XG4gICAgICAgIGlmIChtb2RlbC5zZXJpYWxOdW1iZXJzLmxlbmd0aCkge1xuICAgICAgICAgIGZpbHRlci5fX29yID0ge1xuICAgICAgICAgICAgW2hhcmR3YXJlU2VyaWFsTnVtYmVyUGF0aF06IHsgX19pbjogbW9kZWwuc2VyaWFsTnVtYmVycyB9LFxuICAgICAgICAgICAgW3ZlbmRpbmdTZXJpYWxOdW1iZXJQYXRoXTogeyBfX2luOiBtb2RlbC5zZXJpYWxOdW1iZXJzIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuc29ydGFibGUgPSB0cnVlO1xuICAgIHRoaXMuc29ydGluZ0NvbmZpZyA9IHtcbiAgICAgIHBhdGhTb3J0aW5nQ29uZmlnczogW3sgcGF0aDogaGFyZHdhcmVTZXJpYWxOdW1iZXJQYXRoIH0sIHsgcGF0aDogdmVuZGluZ1NlcmlhbE51bWJlclBhdGggfV1cbiAgICB9O1xuICB9XG59XG4iXX0=