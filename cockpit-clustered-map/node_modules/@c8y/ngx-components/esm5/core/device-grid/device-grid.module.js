import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '../common/common.module';
import { DeviceGridComponent } from './device-grid.component';
import { DataGridModule } from '../data-grid/data-grid.module';
import { DeviceGridService } from './device-grid.service';
import { DeviceStatusModule } from '../device-status/device-status.module';
import { FilteringFormComponent } from './filtering-form.component';
import { FormsModule } from '../forms/forms.module';
import { StatusCellRendererComponent } from './columns/status.cell-renderer.component';
import { NameCellRendererComponent } from './columns/name.cell-renderer.component';
import { ModelCellRendererComponent } from './columns/model.cell-renderer.component';
import { SerialNumberCellRendererComponent } from './columns/serial-number.cell-renderer.component';
import { GroupCellRendererComponent } from './columns/group.cell-renderer.component';
import { RegistrationDateCellRendererComponent } from './columns/registration-date.cell-renderer.component';
import { AlarmsCellRendererComponent } from './columns/alarms.cell-renderer.component';
var DeviceGridModule = /** @class */ (function () {
    function DeviceGridModule() {
    }
    DeviceGridModule = tslib_1.__decorate([
        NgModule({
            imports: [CommonModule, FormsModule, DeviceStatusModule, DataGridModule],
            declarations: [
                DeviceGridComponent,
                FilteringFormComponent,
                StatusCellRendererComponent,
                NameCellRendererComponent,
                ModelCellRendererComponent,
                SerialNumberCellRendererComponent,
                GroupCellRendererComponent,
                RegistrationDateCellRendererComponent,
                AlarmsCellRendererComponent
            ],
            exports: [
                DeviceGridComponent,
                FilteringFormComponent,
                StatusCellRendererComponent,
                NameCellRendererComponent,
                ModelCellRendererComponent,
                SerialNumberCellRendererComponent,
                GroupCellRendererComponent,
                RegistrationDateCellRendererComponent,
                AlarmsCellRendererComponent
            ],
            entryComponents: [
                DeviceGridComponent,
                FilteringFormComponent,
                StatusCellRendererComponent,
                NameCellRendererComponent,
                ModelCellRendererComponent,
                SerialNumberCellRendererComponent,
                GroupCellRendererComponent,
                RegistrationDateCellRendererComponent,
                AlarmsCellRendererComponent
            ],
            providers: [DeviceGridService]
        })
    ], DeviceGridModule);
    return DeviceGridModule;
}());
export { DeviceGridModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZGV2aWNlLWdyaWQvZGV2aWNlLWdyaWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDM0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXBELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3BHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQzVHLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBdUN2RjtJQUFBO0lBQStCLENBQUM7SUFBbkIsZ0JBQWdCO1FBckM1QixRQUFRLENBQUM7WUFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUFFLGNBQWMsQ0FBQztZQUN4RSxZQUFZLEVBQUU7Z0JBQ1osbUJBQW1CO2dCQUNuQixzQkFBc0I7Z0JBQ3RCLDJCQUEyQjtnQkFDM0IseUJBQXlCO2dCQUN6QiwwQkFBMEI7Z0JBQzFCLGlDQUFpQztnQkFDakMsMEJBQTBCO2dCQUMxQixxQ0FBcUM7Z0JBQ3JDLDJCQUEyQjthQUM1QjtZQUNELE9BQU8sRUFBRTtnQkFDUCxtQkFBbUI7Z0JBQ25CLHNCQUFzQjtnQkFDdEIsMkJBQTJCO2dCQUMzQix5QkFBeUI7Z0JBQ3pCLDBCQUEwQjtnQkFDMUIsaUNBQWlDO2dCQUNqQywwQkFBMEI7Z0JBQzFCLHFDQUFxQztnQkFDckMsMkJBQTJCO2FBQzVCO1lBQ0QsZUFBZSxFQUFFO2dCQUNmLG1CQUFtQjtnQkFDbkIsc0JBQXNCO2dCQUN0QiwyQkFBMkI7Z0JBQzNCLHlCQUF5QjtnQkFDekIsMEJBQTBCO2dCQUMxQixpQ0FBaUM7Z0JBQ2pDLDBCQUEwQjtnQkFDMUIscUNBQXFDO2dCQUNyQywyQkFBMkI7YUFDNUI7WUFDRCxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztTQUMvQixDQUFDO09BQ1csZ0JBQWdCLENBQUc7SUFBRCx1QkFBQztDQUFBLEFBQWhDLElBQWdDO1NBQW5CLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24vY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi9kZXZpY2UtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YUdyaWRNb2R1bGUgfSBmcm9tICcuLi9kYXRhLWdyaWQvZGF0YS1ncmlkLm1vZHVsZSc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkU2VydmljZSB9IGZyb20gJy4vZGV2aWNlLWdyaWQuc2VydmljZSc7XG5pbXBvcnQgeyBEZXZpY2VTdGF0dXNNb2R1bGUgfSBmcm9tICcuLi9kZXZpY2Utc3RhdHVzL2RldmljZS1zdGF0dXMubW9kdWxlJztcbmltcG9ydCB7IEZpbHRlcmluZ0Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2ZpbHRlcmluZy1mb3JtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJy4uL2Zvcm1zL2Zvcm1zLm1vZHVsZSc7XG5cbmltcG9ydCB7IFN0YXR1c0NlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9zdGF0dXMuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9uYW1lLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE1vZGVsQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL21vZGVsLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9zZXJpYWwtbnVtYmVyLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2dyb3VwLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvcmVnaXN0cmF0aW9uLWRhdGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2FsYXJtcy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBEZXZpY2VTdGF0dXNNb2R1bGUsIERhdGFHcmlkTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRGV2aWNlR3JpZENvbXBvbmVudCxcbiAgICBGaWx0ZXJpbmdGb3JtQ29tcG9uZW50LFxuICAgIFN0YXR1c0NlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBOYW1lQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE1vZGVsQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBSZWdpc3RyYXRpb25EYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEFsYXJtc0NlbGxSZW5kZXJlckNvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgRGV2aWNlR3JpZENvbXBvbmVudCxcbiAgICBGaWx0ZXJpbmdGb3JtQ29tcG9uZW50LFxuICAgIFN0YXR1c0NlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBOYW1lQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE1vZGVsQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFNlcmlhbE51bWJlckNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBSZWdpc3RyYXRpb25EYXRlQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEFsYXJtc0NlbGxSZW5kZXJlckNvbXBvbmVudFxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICBEZXZpY2VHcmlkQ29tcG9uZW50LFxuICAgIEZpbHRlcmluZ0Zvcm1Db21wb25lbnQsXG4gICAgU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE5hbWVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTW9kZWxDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU2VyaWFsTnVtYmVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50XG4gIF0sXG4gIHByb3ZpZGVyczogW0RldmljZUdyaWRTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VHcmlkTW9kdWxlIHt9XG4iXX0=