import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { from, of } from 'rxjs';
import { catchError, map, shareReplay, tap } from 'rxjs/operators';
import { ViewContextServices } from './view-context.service';
var ContextRouteGuard = /** @class */ (function () {
    function ContextRouteGuard(injector) {
        this.injector = injector;
        this.caches = new Map();
    }
    ContextRouteGuard.prototype.canActivate = function (route) {
        var id = route.paramMap.get('id');
        var service = this.service(route);
        this.clearDetailCached(service, id);
        return this.detailCached(service, id).pipe(tap(function (contextData) { return route.data = tslib_1.__assign({}, route.data, { contextData: contextData }); }), map(function () { return true; }), catchError(function (ex) { return of(false); }));
    };
    ContextRouteGuard.prototype.service = function (route) {
        var serviceInstance = ViewContextServices.contextToService(route.data.context);
        return this.injector.get(serviceInstance);
    };
    ContextRouteGuard.prototype.detailCached = function (service, id) {
        var cache = this.getCache(service);
        var cached = cache[id];
        if (!cached) {
            cached = from(service.detail(id)).pipe(map(function (_a) {
                var data = _a.data;
                return data;
            }), shareReplay(1));
            cache[id] = cached;
        }
        return cached;
    };
    ContextRouteGuard.prototype.clearDetailCached = function (service, id) {
        var cache = this.getCache(service);
        delete cache[id];
    };
    ContextRouteGuard.prototype.getCache = function (service) {
        var cache = this.caches.get(service);
        if (!cache) {
            cache = {};
            this.caches.set(service, cache);
        }
        return cache;
    };
    ContextRouteGuard.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    ContextRouteGuard = tslib_1.__decorate([
        Injectable()
    ], ContextRouteGuard);
    return ContextRouteGuard;
}());
export { ContextRouteGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1yb3V0ZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3JvdXRlci9jb250ZXh0LXJvdXRlLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFHN0Q7SUFFRSwyQkFDVSxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRnBCLFdBQU0sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBR3hCLENBQUM7SUFFSix1Q0FBVyxHQUFYLFVBQVksS0FBNkI7UUFDdkMsSUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUN4QyxHQUFHLENBQUMsVUFBQyxXQUFXLElBQUssT0FBQSxLQUFLLENBQUMsSUFBSSx3QkFBUSxLQUFLLENBQUMsSUFBSSxJQUFFLFdBQVcsYUFBQSxHQUFFLEVBQTNDLENBQTJDLENBQUMsRUFDakUsR0FBRyxDQUFDLGNBQU0sT0FBQSxJQUFJLEVBQUosQ0FBSSxDQUFDLEVBQ2YsVUFBVSxDQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFULENBQVMsQ0FBQyxDQUM5QixDQUFDO0lBQ0osQ0FBQztJQUVPLG1DQUFPLEdBQWYsVUFBZ0IsS0FBSztRQUNuQixJQUFNLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pGLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLHdDQUFZLEdBQXBCLFVBQXFCLE9BQU8sRUFBRSxFQUFFO1FBQzlCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3BDLEdBQUcsQ0FBQyxVQUFDLEVBQVE7b0JBQU4sY0FBSTtnQkFBTyxPQUFBLElBQUk7WUFBSixDQUFJLENBQUMsRUFDdkIsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7WUFDRixLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVPLDZDQUFpQixHQUF6QixVQUEwQixPQUFPLEVBQUUsRUFBRTtRQUNuQyxJQUFNLEtBQUssR0FBa0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRCxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRU8sb0NBQVEsR0FBaEIsVUFBaUIsT0FBTztRQUN0QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNqQztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Z0JBNUNtQixRQUFROztJQUhqQixpQkFBaUI7UUFEN0IsVUFBVSxFQUFFO09BQ0EsaUJBQWlCLENBZ0Q3QjtJQUFELHdCQUFDO0NBQUEsQUFoREQsSUFnREM7U0FoRFksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZyb20sIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHNoYXJlUmVwbGF5LCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBWaWV3Q29udGV4dFNlcnZpY2VzIH0gZnJvbSAnLi92aWV3LWNvbnRleHQuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb250ZXh0Um91dGVHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgcHJpdmF0ZSBjYWNoZXMgPSBuZXcgTWFwKCk7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXG4gICkge31cblxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICAgIGNvbnN0IGlkID0gcm91dGUucGFyYW1NYXAuZ2V0KCdpZCcpO1xuICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLnNlcnZpY2Uocm91dGUpO1xuICAgIHRoaXMuY2xlYXJEZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpO1xuICAgIHJldHVybiB0aGlzLmRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkucGlwZShcbiAgICAgIHRhcCgoY29udGV4dERhdGEpID0+IHJvdXRlLmRhdGEgPSB7IC4uLnJvdXRlLmRhdGEsIGNvbnRleHREYXRhIH0pLFxuICAgICAgbWFwKCgpID0+IHRydWUpLFxuICAgICAgY2F0Y2hFcnJvcigoZXgpID0+IG9mKGZhbHNlKSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXJ2aWNlKHJvdXRlKSB7XG4gICAgY29uc3Qgc2VydmljZUluc3RhbmNlID0gVmlld0NvbnRleHRTZXJ2aWNlcy5jb250ZXh0VG9TZXJ2aWNlKHJvdXRlLmRhdGEuY29udGV4dCk7XG4gICAgcmV0dXJuIHRoaXMuaW5qZWN0b3IuZ2V0KHNlcnZpY2VJbnN0YW5jZSk7XG4gIH1cblxuICBwcml2YXRlIGRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkge1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5nZXRDYWNoZShzZXJ2aWNlKTtcbiAgICBsZXQgY2FjaGVkID0gY2FjaGVbaWRdO1xuICAgIGlmICghY2FjaGVkKSB7XG4gICAgICBjYWNoZWQgPSBmcm9tKHNlcnZpY2UuZGV0YWlsKGlkKSkucGlwZShcbiAgICAgICAgbWFwKCh7IGRhdGEgfSkgPT4gZGF0YSksXG4gICAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgICApO1xuICAgICAgY2FjaGVbaWRdID0gY2FjaGVkO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhckRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkge1xuICAgIGNvbnN0IGNhY2hlOiBNYXA8YW55LCBhbnk+ID0gdGhpcy5nZXRDYWNoZShzZXJ2aWNlKTtcbiAgICBkZWxldGUgY2FjaGVbaWRdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDYWNoZShzZXJ2aWNlKSB7XG4gICAgbGV0IGNhY2hlID0gdGhpcy5jYWNoZXMuZ2V0KHNlcnZpY2UpO1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgIGNhY2hlID0ge307XG4gICAgICB0aGlzLmNhY2hlcy5zZXQoc2VydmljZSwgY2FjaGUpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cbn1cbiJdfQ==