import * as tslib_1 from "tslib";
import { Injector, Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router';
import { from, isObservable, of } from 'rxjs';
import { every, filter, map, mergeMap, toArray, tap } from 'rxjs/operators';
var RouterTabsResolver = /** @class */ (function () {
    function RouterTabsResolver(injector, router) {
        this.injector = injector;
        this.router = router;
    }
    Object.defineProperty(RouterTabsResolver.prototype, "routerStateSnapshot", {
        get: function () {
            return this.router.routerState.snapshot;
        },
        enumerable: true,
        configurable: true
    });
    RouterTabsResolver.prototype.resolve = function (route) {
        var _this = this;
        return from(route.routeConfig.children || []).pipe(mergeMap(function (child) {
            return from(_this.getGuards(child)).pipe(map(function (guard) { return guard.canActivate(route, _this.routerStateSnapshot); }), mergeMap(function (result) {
                if (isObservable(result)) {
                    return result;
                }
                if (result && typeof result.then === 'function') {
                    return from(result);
                }
                return of(result);
            }), tap(function (result) {
                if (Array.isArray(result)) {
                    child.tabs = result;
                }
            }), every(function (result) { return !!result; }), filter(function (result) { return result; }), mergeMap(function () { return Array.isArray(child.tabs) ? from(child.tabs) : of(child); }), map(function (result) { return result.label
                ? {
                    label: result.label,
                    icon: result.icon,
                    path: route.url.join('/') + "/" + result.path,
                    priority: result.priority
                }
                : undefined; }));
        }), filter(function (tabs) { return !!tabs; }), toArray());
    };
    RouterTabsResolver.prototype.getGuards = function (child) {
        var _this = this;
        var guards = (child.canActivate || []).map(function (guard) {
            return _this.injector.get(guard);
        });
        if (child.data && child.data.showIf) {
            guards.push({ canActivate: child.data.showIf });
        }
        return guards;
    };
    RouterTabsResolver.ctorParameters = function () { return [
        { type: Injector },
        { type: Router }
    ]; };
    RouterTabsResolver = tslib_1.__decorate([
        Injectable()
    ], RouterTabsResolver);
    return RouterTabsResolver;
}());
export { RouterTabsResolver };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLXRhYnMucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9yb3V0ZXIvcm91dGVyLXRhYnMucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUUsT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFPLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBS3ZGO0lBQ0UsNEJBQW9CLFFBQWtCLEVBQVUsTUFBYztRQUExQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFbEUsc0JBQUksbURBQW1CO2FBQXZCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7UUFDMUMsQ0FBQzs7O09BQUE7SUFFRCxvQ0FBTyxHQUFQLFVBQVEsS0FBNkI7UUFBckMsaUJBb0NDO1FBbkNDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDaEQsUUFBUSxDQUFDLFVBQUMsS0FBWTtZQUNwQixPQUFBLElBQUksQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUM5QixHQUFHLENBQUMsVUFBQyxLQUFrQixJQUFLLE9BQUEsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSSxDQUFDLG1CQUFtQixDQUFDLEVBQWxELENBQWtELENBQUMsRUFDL0UsUUFBUSxDQUFDLFVBQUMsTUFBVztnQkFDbkIsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQ3hCLE9BQU8sTUFBTSxDQUFDO2lCQUNmO2dCQUNELElBQUksTUFBTSxJQUFJLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7b0JBQy9DLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUNyQjtnQkFDRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQixDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsVUFBQSxNQUFNO2dCQUNSLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDekIsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7aUJBQ3JCO1lBQ0gsQ0FBQyxDQUFDLEVBQ0YsS0FBSyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsQ0FBQyxDQUFDLE1BQU0sRUFBUixDQUFRLENBQUMsRUFDekIsTUFBTSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxFQUFOLENBQU0sQ0FBQyxFQUN4QixRQUFRLENBQUMsY0FBTSxPQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBWSxDQUFDLEVBQS9ELENBQStELENBQUMsRUFDL0UsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFNLE9BQUEsTUFBTSxDQUFDLEtBQUs7Z0JBQ3pCLENBQUMsQ0FBRTtvQkFDQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7b0JBQ25CLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtvQkFDakIsSUFBSSxFQUFLLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFJLE1BQU0sQ0FBQyxJQUFNO29CQUM3QyxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7aUJBQ2xCO2dCQUNYLENBQUMsQ0FBQyxTQUFTLEVBUEUsQ0FPRixDQUNkLENBQ0Y7UUE1QkQsQ0E0QkMsQ0FDRixFQUNELE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQU4sQ0FBTSxDQUFDLEVBQ3RCLE9BQU8sRUFBRSxDQUNWLENBQUM7SUFDSixDQUFDO0lBRU8sc0NBQVMsR0FBakIsVUFBa0IsS0FBWTtRQUE5QixpQkFRQztRQVBDLElBQU0sTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLO1lBQ2hELE9BQU8sS0FBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDakQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztnQkFwRDZCLFFBQVE7Z0JBQWtCLE1BQU07O0lBRG5ELGtCQUFrQjtRQUQ5QixVQUFVLEVBQUU7T0FDQSxrQkFBa0IsQ0FzRDlCO0lBQUQseUJBQUM7Q0FBQSxBQXRERCxJQXNEQztTQXREWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2FuQWN0aXZhdGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmcm9tLCBpc09ic2VydmFibGUsIG9mLCBpaWYgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGV2ZXJ5LCBmaWx0ZXIsIG1hcCwgbWVyZ2VNYXAsIHRvQXJyYXksIHRhcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVGFiIH0gZnJvbSAnLi4vdGFicy90YWIubW9kZWwnO1xuaW1wb3J0IHsgUm91dGUgfSBmcm9tICcuL3JvdXRlci5tb2RlbHMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUm91dGVyVGFic1Jlc29sdmVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHt9XG5cbiAgZ2V0IHJvdXRlclN0YXRlU25hcHNob3QoKSB7XG4gICAgcmV0dXJuIHRoaXMucm91dGVyLnJvdXRlclN0YXRlLnNuYXBzaG90O1xuICB9XG5cbiAgcmVzb2x2ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICAgIHJldHVybiBmcm9tKHJvdXRlLnJvdXRlQ29uZmlnLmNoaWxkcmVuIHx8IFtdKS5waXBlKFxuICAgICAgbWVyZ2VNYXAoKGNoaWxkOiBSb3V0ZSkgPT5cbiAgICAgICAgZnJvbSh0aGlzLmdldEd1YXJkcyhjaGlsZCkpLnBpcGUoXG4gICAgICAgICAgbWFwKChndWFyZDogQ2FuQWN0aXZhdGUpID0+IGd1YXJkLmNhbkFjdGl2YXRlKHJvdXRlLCB0aGlzLnJvdXRlclN0YXRlU25hcHNob3QpKSxcbiAgICAgICAgICBtZXJnZU1hcCgocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChpc09ic2VydmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZyb20ocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvZihyZXN1bHQpO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIHRhcChyZXN1bHQgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICAgICAgICBjaGlsZC50YWJzID0gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGV2ZXJ5KHJlc3VsdCA9PiAhIXJlc3VsdCksXG4gICAgICAgICAgZmlsdGVyKHJlc3VsdCA9PiByZXN1bHQpLFxuICAgICAgICAgIG1lcmdlTWFwKCgpID0+IEFycmF5LmlzQXJyYXkoY2hpbGQudGFicykgPyBmcm9tKGNoaWxkLnRhYnMpIDogb2YoY2hpbGQgYXMgVGFiKSksXG4gICAgICAgICAgbWFwKChyZXN1bHQpID0+ICByZXN1bHQubGFiZWxcbiAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgbGFiZWw6IHJlc3VsdC5sYWJlbCxcbiAgICAgICAgICAgICAgICAgIGljb246IHJlc3VsdC5pY29uLFxuICAgICAgICAgICAgICAgICAgcGF0aDogYCR7cm91dGUudXJsLmpvaW4oJy8nKX0vJHtyZXN1bHQucGF0aH1gLFxuICAgICAgICAgICAgICAgICAgcHJpb3JpdHk6IHJlc3VsdC5wcmlvcml0eVxuICAgICAgICAgICAgICAgIH0gYXMgVGFiKVxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIGZpbHRlcih0YWJzID0+ICEhdGFicyksXG4gICAgICB0b0FycmF5KClcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRHdWFyZHMoY2hpbGQ6IFJvdXRlKSB7XG4gICAgY29uc3QgZ3VhcmRzID0gKGNoaWxkLmNhbkFjdGl2YXRlIHx8IFtdKS5tYXAoZ3VhcmQgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuaW5qZWN0b3IuZ2V0KGd1YXJkKTtcbiAgICB9KTtcbiAgICBpZiAoY2hpbGQuZGF0YSAmJiBjaGlsZC5kYXRhLnNob3dJZikge1xuICAgICAgZ3VhcmRzLnB1c2goeyBjYW5BY3RpdmF0ZTogY2hpbGQuZGF0YS5zaG93SWYgfSk7XG4gICAgfVxuICAgIHJldHVybiBndWFyZHM7XG4gIH1cbn1cbiJdfQ==