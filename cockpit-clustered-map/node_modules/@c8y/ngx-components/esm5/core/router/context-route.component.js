import * as tslib_1 from "tslib";
import { Component, Injector } from '@angular/core';
import { ActivatedRoute, NavigationEnd, PRIMARY_OUTLET, Router, UrlSegmentGroup, UrlTree } from '@angular/router';
import { ApiService, ApiCall } from '@c8y/ngx-components/api';
import { NEVER, Subject } from 'rxjs';
import { filter, map, merge, switchMap } from 'rxjs/operators';
import { TabsService } from '../tabs/tabs.service';
import { RouterTabsResolver } from './router-tabs.resolver';
import { ViewContextServices } from './view-context.service';
var ContextRouteComponent = /** @class */ (function () {
    function ContextRouteComponent(tabsResolver, tabsService, route, router, apiService, injector) {
        this.tabsResolver = tabsResolver;
        this.tabsService = tabsService;
        this.route = route;
        this.router = router;
        this.apiService = apiService;
        this.injector = injector;
        this.lastAddedTabs = [];
        this.refreshTrigger = new Subject();
    }
    ContextRouteComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.routerSubscription = this.router.events
            .pipe(filter(function (e) { return e instanceof NavigationEnd; }))
            .subscribe(function () { return _this.redirectToFirstTab(); });
        var refreshObservable = this.refreshTrigger.pipe(merge(this.updatedContext()), switchMap(function () { return _this.tabsResolver.resolve(_this.route.snapshot); }));
        this.dataSubscription = this.route.data.pipe(map(function (_a) {
            var tabs = _a.tabs;
            return tabs;
        }), merge(refreshObservable)).subscribe(function (tabs) { return _this.updateTabs(tabs); });
    };
    ContextRouteComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        this.dataSubscription.unsubscribe();
        this.routerSubscription.unsubscribe();
        this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
    };
    ContextRouteComponent.prototype.refreshTabs = function () {
        this.refreshTrigger.next();
    };
    ContextRouteComponent.prototype.updatedContext = function () {
        var data = this.route.snapshot.data;
        var serviceInstance = ViewContextServices.contextToService(data.context);
        if (serviceInstance) {
            var service = this.injector.get(serviceInstance);
            var contextRegex_1 = new RegExp(service.getDetailUrl(data.contextData), 'i');
            var childrenRegex_1 = new RegExp(service.getDetailUrl(data.contextData) + "/child", 'i');
            var filterResponse = function (_a) {
                var url = _a.url, method = _a.method;
                var contextChanged = contextRegex_1.test(url) && method === 'PUT';
                var childrenAffected = childrenRegex_1.test(url) && ['POST', 'DELETE'].includes(method);
                return contextChanged || childrenAffected;
            };
            return this.apiService.hookResponse(filterResponse);
        }
        return NEVER;
    };
    ContextRouteComponent.prototype.updateTabs = function (tabs) {
        var _this = this;
        if (tabs === void 0) { tabs = []; }
        this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
        this.lastAddedTabs = tabs;
        tabs.forEach(function (t) { return _this.tabsService.add(t); });
        this.redirectToFirstTab();
    };
    ContextRouteComponent.prototype.redirectToFirstTab = function () {
        var _this = this;
        if (this.needsRedirect()) {
            this.tabsService.firstTab$.subscribe(function (tab) {
                if (tab) {
                    _this.router.navigateByUrl(tab.path, { replaceUrl: true });
                }
            });
        }
    };
    ContextRouteComponent.prototype.needsRedirect = function () {
        var tree = this.router.parseUrl(this.router.url);
        var groups = tree.root.children[PRIMARY_OUTLET];
        var isContextRoute = groups.segments.length === 2;
        return isContextRoute;
    };
    ContextRouteComponent.ctorParameters = function () { return [
        { type: RouterTabsResolver },
        { type: TabsService },
        { type: ActivatedRoute },
        { type: Router },
        { type: ApiService },
        { type: Injector }
    ]; };
    ContextRouteComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-context-route',
            template: "<router-outlet></router-outlet>\n"
        })
    ], ContextRouteComponent);
    return ContextRouteComponent;
}());
export { ContextRouteComponent };
//# sourceMappingURL=data:application/json;base64,