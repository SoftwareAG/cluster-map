import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { DynamicComponentService } from './dynamic-component.service';
/**
 * C8y dynamic component.
 * ## Example:
 *
 * register component in HOOK in module:
 * ```typescript
 *  import { HOOK_COMPONENT } from '@c8y/ngx-components';
 *
 * @NgModule({
 *  ...,
 *  providers: [{
 *      provide: HOOK_COMPONENT,
 *      multi: true,
 *      useValue: [{
 *          id: 'test-component',
 *          label: 'My test component',
 *          description: 'this is test component',
 *          component: TestComponent
 *      }],
 *  ...
 *  }]
 *
 * ```
 * Showing dynamic component:
 * ```html
 * <c8y-dynamic-component [componentId]="'test-component'" [config]="config"></c8y-dynamic-component>
 * ```
 */
var DynamicComponentComponent = /** @class */ (function () {
    function DynamicComponentComponent(componentFactoryResolver, dynamicComponentService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.dynamicComponentService = dynamicComponentService;
        this.mode = 'component';
        this.notFoundError = true;
        this.expandErrorDetails = false;
    }
    DynamicComponentComponent.prototype.ngOnChanges = function () {
        var _this = this;
        this.dynamicComponentService
            .getById$(this.componentId)
            .subscribe(function (cmp) { return _this.loadComponent(cmp); });
    };
    DynamicComponentComponent.prototype.loadComponent = function (dynamicComponent) {
        try {
            this.error = undefined;
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.mode === 'component' ? dynamicComponent.component : dynamicComponent.configComponent);
            this.host.clear();
            var componentRef = this.host.createComponent(componentFactory);
            componentRef.instance.config = this.config;
        }
        catch (ex) {
            this.error = ex;
        }
    };
    DynamicComponentComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: DynamicComponentService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], DynamicComponentComponent.prototype, "componentId", void 0);
    tslib_1.__decorate([
        Input()
    ], DynamicComponentComponent.prototype, "config", void 0);
    tslib_1.__decorate([
        Input()
    ], DynamicComponentComponent.prototype, "mode", void 0);
    tslib_1.__decorate([
        Input()
    ], DynamicComponentComponent.prototype, "notFoundError", void 0);
    tslib_1.__decorate([
        ViewChild('host', { read: ViewContainerRef, static: true })
    ], DynamicComponentComponent.prototype, "host", void 0);
    DynamicComponentComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-dynamic-component',
            template: "<ng-template #host></ng-template>\n\n<div class=\"alert alert-warning m-8\" role=\"alert\" *ngIf=\"notFoundError && error\">\n  <strong class=\"message\">\n    {{\n      'This widget cannot be rendered because the current application does not support the following component:'\n        | translate\n    }}\n    {{ componentId }}.\n  </strong>\n  <p class=\"text-muted top-m-sm\">\n    <button class=\"btn btn-clean\" (click)=\"expandErrorDetails = !expandErrorDetails\">\n      <i class=\"fa fa-chevron-down\"></i>\n      <span *ngIf=\"!expandErrorDetails\" translate>Show details</span>\n      <span *ngIf=\"expandErrorDetails\" translate>Hide details</span>\n    </button>\n  </p>\n  <div [collapse]=\"!expandErrorDetails\" [isAnimated]=\"true\">\n    <pre>\n      {{ error }}\n    </pre>\n  </div>\n</div>\n"
        })
    ], DynamicComponentComponent);
    return DynamicComponentComponent;
}());
export { DynamicComponentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1jb21wb25lbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZHluYW1pYy1jb21wb25lbnQvZHluYW1pYy1jb21wb25lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxTQUFTLEVBQ1Qsd0JBQXdCLEVBQ3hCLGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkJHO0FBS0g7SUFTRSxtQ0FDVSx3QkFBa0QsRUFDbEQsdUJBQWdEO1FBRGhELDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQVJqRCxTQUFJLEdBQTJCLFdBQVcsQ0FBQztRQUMzQyxrQkFBYSxHQUFHLElBQUksQ0FBQztRQUc5Qix1QkFBa0IsR0FBRyxLQUFLLENBQUM7SUFLeEIsQ0FBQztJQUVKLCtDQUFXLEdBQVg7UUFBQSxpQkFJQztRQUhDLElBQUksQ0FBQyx1QkFBdUI7YUFDekIsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDMUIsU0FBUyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxpREFBYSxHQUFiLFVBQWMsZ0JBQWdCO1FBQzVCLElBQUk7WUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztZQUN2QixJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FDNUUsSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUMxRixDQUFDO1lBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsQixJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2hFLFlBQVksQ0FBQyxRQUE2QixDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ2xFO1FBQUMsT0FBTyxFQUFFLEVBQUU7WUFDWCxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNqQjtJQUNILENBQUM7O2dCQXRCbUMsd0JBQXdCO2dCQUN6Qix1QkFBdUI7O0lBVmpEO1FBQVIsS0FBSyxFQUFFO2tFQUFxQjtJQUNwQjtRQUFSLEtBQUssRUFBRTs2REFBYTtJQUNaO1FBQVIsS0FBSyxFQUFFOzJEQUE0QztJQUMzQztRQUFSLEtBQUssRUFBRTtvRUFBc0I7SUFDK0I7UUFBNUQsU0FBUyxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7MkRBQXdCO0lBTHpFLHlCQUF5QjtRQUpyQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLHN6QkFBaUQ7U0FDbEQsQ0FBQztPQUNXLHlCQUF5QixDQWlDckM7SUFBRCxnQ0FBQztDQUFBLEFBakNELElBaUNDO1NBakNZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIFZpZXdDaGlsZCxcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudCB9IGZyb20gJy4vZHluYW1pYy1jb21wb25lbnQubW9kZWwnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudFNlcnZpY2UgfSBmcm9tICcuL2R5bmFtaWMtY29tcG9uZW50LnNlcnZpY2UnO1xuXG4vKipcbiAqIEM4eSBkeW5hbWljIGNvbXBvbmVudC5cbiAqICMjIEV4YW1wbGU6XG4gKlxuICogcmVnaXN0ZXIgY29tcG9uZW50IGluIEhPT0sgaW4gbW9kdWxlOlxuICogYGBgdHlwZXNjcmlwdFxuICogIGltcG9ydCB7IEhPT0tfQ09NUE9ORU5UIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAuLi4sXG4gKiAgcHJvdmlkZXJzOiBbe1xuICogICAgICBwcm92aWRlOiBIT09LX0NPTVBPTkVOVCxcbiAqICAgICAgbXVsdGk6IHRydWUsXG4gKiAgICAgIHVzZVZhbHVlOiBbe1xuICogICAgICAgICAgaWQ6ICd0ZXN0LWNvbXBvbmVudCcsXG4gKiAgICAgICAgICBsYWJlbDogJ015IHRlc3QgY29tcG9uZW50JyxcbiAqICAgICAgICAgIGRlc2NyaXB0aW9uOiAndGhpcyBpcyB0ZXN0IGNvbXBvbmVudCcsXG4gKiAgICAgICAgICBjb21wb25lbnQ6IFRlc3RDb21wb25lbnRcbiAqICAgICAgfV0sXG4gKiAgLi4uXG4gKiAgfV1cbiAqXG4gKiBgYGBcbiAqIFNob3dpbmcgZHluYW1pYyBjb21wb25lbnQ6XG4gKiBgYGBodG1sXG4gKiA8Yzh5LWR5bmFtaWMtY29tcG9uZW50IFtjb21wb25lbnRJZF09XCIndGVzdC1jb21wb25lbnQnXCIgW2NvbmZpZ109XCJjb25maWdcIj48L2M4eS1keW5hbWljLWNvbXBvbmVudD5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktZHluYW1pYy1jb21wb25lbnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZHluYW1pYy1jb21wb25lbnQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNDb21wb25lbnRDb21wb25lbnQge1xuICBASW5wdXQoKSBjb21wb25lbnRJZDogc3RyaW5nO1xuICBASW5wdXQoKSBjb25maWc6IGFueTtcbiAgQElucHV0KCkgbW9kZTogJ2NvbmZpZycgfCAnY29tcG9uZW50JyA9ICdjb21wb25lbnQnO1xuICBASW5wdXQoKSBub3RGb3VuZEVycm9yID0gdHJ1ZTtcbiAgQFZpZXdDaGlsZCgnaG9zdCcsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiB0cnVlIH0pIGhvc3Q6IFZpZXdDb250YWluZXJSZWY7XG4gIGVycm9yOiBhbnk7XG4gIGV4cGFuZEVycm9yRGV0YWlscyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSBkeW5hbWljQ29tcG9uZW50U2VydmljZTogRHluYW1pY0NvbXBvbmVudFNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgIHRoaXMuZHluYW1pY0NvbXBvbmVudFNlcnZpY2VcbiAgICAgIC5nZXRCeUlkJCh0aGlzLmNvbXBvbmVudElkKVxuICAgICAgLnN1YnNjcmliZShjbXAgPT4gdGhpcy5sb2FkQ29tcG9uZW50KGNtcCkpO1xuICB9XG5cbiAgbG9hZENvbXBvbmVudChkeW5hbWljQ29tcG9uZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICBjb25zdCBjb21wb25lbnRGYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoXG4gICAgICAgIHRoaXMubW9kZSA9PT0gJ2NvbXBvbmVudCcgPyBkeW5hbWljQ29tcG9uZW50LmNvbXBvbmVudCA6IGR5bmFtaWNDb21wb25lbnQuY29uZmlnQ29tcG9uZW50XG4gICAgICApO1xuICAgICAgdGhpcy5ob3N0LmNsZWFyKCk7XG4gICAgICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLmhvc3QuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnkpO1xuICAgICAgKGNvbXBvbmVudFJlZi5pbnN0YW5jZSBhcyBEeW5hbWljQ29tcG9uZW50KS5jb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgdGhpcy5lcnJvciA9IGV4O1xuICAgIH1cbiAgfVxufVxuIl19