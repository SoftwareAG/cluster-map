import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { PhoneValidationDirective } from './phone-validation.directive';
import { DefaultValidationDirective } from './default-validation.directive';
import { MinValidationDirective } from './min-validation.directive';
import { MaxValidationDirective } from './max-validation.directive';
import { CommonModule } from '../common/common.module';
import { FormsModule as NgFormsModule } from '@angular/forms';
import { FormGroupComponent } from './form-group.component';
import { MessageDirective } from './message.directive';
import { MessagesComponent } from './messages.component';
import { InputGroupListComponent } from './input-group-list.component';
import { InputGroupListContainerDirective } from './input-group-list-container.directive';
import { JsonValidationPrettifierDirective } from './json-validation-prettifier.directive';
import { TextAreaRowHeightDirective } from './text-area-row-height.directive';
import { RequiredInputPlaceholderDirective } from './required-input-placeholder.directive';
import { IpRangeInputListComponent } from './ip-range-input-list.component';
import { SchemaFormComponent } from './schema-form.component';
import { FilterInputComponent } from './filter-input.component';
/**
 * @exports FormGroupComponent A component that allows to group an input and can display warnings and errors.
 * @exports PhoneValidationDirective Allows to validate international phone numbers.
 * @exports NewsletterDirective Allows to subscribe to the newsletter.
 * @exports DefaultValidationDirective Allows to validate some predefined patterns.
 * @exports MessageDirective A directive that allows to define messages.
 * @exports MessagesComponent Allows to display error messages.
 * @exports SchemaFormComponent Allows to display forms generated from JSON Schema.
 */
var FormsModule = /** @class */ (function () {
    function FormsModule() {
    }
    FormsModule = tslib_1.__decorate([
        NgModule({
            imports: [CommonModule, NgFormsModule],
            exports: [
                PhoneValidationDirective,
                DefaultValidationDirective,
                MinValidationDirective,
                MaxValidationDirective,
                NgFormsModule,
                FormGroupComponent,
                MessageDirective,
                MessagesComponent,
                InputGroupListComponent,
                InputGroupListContainerDirective,
                JsonValidationPrettifierDirective,
                TextAreaRowHeightDirective,
                RequiredInputPlaceholderDirective,
                IpRangeInputListComponent,
                SchemaFormComponent,
                FilterInputComponent
            ],
            declarations: [
                PhoneValidationDirective,
                DefaultValidationDirective,
                MinValidationDirective,
                MaxValidationDirective,
                FormGroupComponent,
                MessageDirective,
                MessagesComponent,
                InputGroupListComponent,
                InputGroupListContainerDirective,
                JsonValidationPrettifierDirective,
                TextAreaRowHeightDirective,
                RequiredInputPlaceholderDirective,
                IpRangeInputListComponent,
                SchemaFormComponent,
                FilterInputComponent
            ]
        })
    ], FormsModule);
    return FormsModule;
}());
export { FormsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvZm9ybXMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxJQUFJLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzFGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzNGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhFOzs7Ozs7OztHQVFHO0FBdUNIO0lBQUE7SUFBMEIsQ0FBQztJQUFkLFdBQVc7UUF0Q3ZCLFFBQVEsQ0FBQztZQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUM7WUFDdEMsT0FBTyxFQUFFO2dCQUNQLHdCQUF3QjtnQkFDeEIsMEJBQTBCO2dCQUMxQixzQkFBc0I7Z0JBQ3RCLHNCQUFzQjtnQkFDdEIsYUFBYTtnQkFDYixrQkFBa0I7Z0JBQ2xCLGdCQUFnQjtnQkFDaEIsaUJBQWlCO2dCQUNqQix1QkFBdUI7Z0JBQ3ZCLGdDQUFnQztnQkFDaEMsaUNBQWlDO2dCQUNqQywwQkFBMEI7Z0JBQzFCLGlDQUFpQztnQkFDakMseUJBQXlCO2dCQUN6QixtQkFBbUI7Z0JBQ25CLG9CQUFvQjthQUNyQjtZQUNELFlBQVksRUFBRTtnQkFDWix3QkFBd0I7Z0JBQ3hCLDBCQUEwQjtnQkFDMUIsc0JBQXNCO2dCQUN0QixzQkFBc0I7Z0JBQ3RCLGtCQUFrQjtnQkFDbEIsZ0JBQWdCO2dCQUNoQixpQkFBaUI7Z0JBQ2pCLHVCQUF1QjtnQkFDdkIsZ0NBQWdDO2dCQUNoQyxpQ0FBaUM7Z0JBQ2pDLDBCQUEwQjtnQkFDMUIsaUNBQWlDO2dCQUNqQyx5QkFBeUI7Z0JBQ3pCLG1CQUFtQjtnQkFDbkIsb0JBQW9CO2FBQ3JCO1NBQ0YsQ0FBQztPQUNXLFdBQVcsQ0FBRztJQUFELGtCQUFDO0NBQUEsQUFBM0IsSUFBMkI7U0FBZCxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBob25lVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vcGhvbmUtdmFsaWRhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGVmYXVsdFZhbGlkYXRpb25EaXJlY3RpdmUgfSBmcm9tICcuL2RlZmF1bHQtdmFsaWRhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTWluVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vbWluLXZhbGlkYXRpb24uZGlyZWN0aXZlJztcbmltcG9ydCB7IE1heFZhbGlkYXRpb25EaXJlY3RpdmUgfSBmcm9tICcuL21heC12YWxpZGF0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICcuLi9jb21tb24vY29tbW9uLm1vZHVsZSc7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSBhcyBOZ0Zvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybUdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9mb3JtLWdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNZXNzYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi9tZXNzYWdlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBNZXNzYWdlc0NvbXBvbmVudCB9IGZyb20gJy4vbWVzc2FnZXMuY29tcG9uZW50JztcbmltcG9ydCB7IElucHV0R3JvdXBMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9pbnB1dC1ncm91cC1saXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJbnB1dEdyb3VwTGlzdENvbnRhaW5lckRpcmVjdGl2ZSB9IGZyb20gJy4vaW5wdXQtZ3JvdXAtbGlzdC1jb250YWluZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IEpzb25WYWxpZGF0aW9uUHJldHRpZmllckRpcmVjdGl2ZSB9IGZyb20gJy4vanNvbi12YWxpZGF0aW9uLXByZXR0aWZpZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFRleHRBcmVhUm93SGVpZ2h0RGlyZWN0aXZlIH0gZnJvbSAnLi90ZXh0LWFyZWEtcm93LWhlaWdodC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUmVxdWlyZWRJbnB1dFBsYWNlaG9sZGVyRGlyZWN0aXZlIH0gZnJvbSAnLi9yZXF1aXJlZC1pbnB1dC1wbGFjZWhvbGRlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSXBSYW5nZUlucHV0TGlzdENvbXBvbmVudCB9IGZyb20gJy4vaXAtcmFuZ2UtaW5wdXQtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2NoZW1hRm9ybUNvbXBvbmVudCB9IGZyb20gJy4vc2NoZW1hLWZvcm0uY29tcG9uZW50JztcbmltcG9ydCB7IEZpbHRlcklucHV0Q29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItaW5wdXQuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZXhwb3J0cyBGb3JtR3JvdXBDb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBhbGxvd3MgdG8gZ3JvdXAgYW4gaW5wdXQgYW5kIGNhbiBkaXNwbGF5IHdhcm5pbmdzIGFuZCBlcnJvcnMuXG4gKiBAZXhwb3J0cyBQaG9uZVZhbGlkYXRpb25EaXJlY3RpdmUgQWxsb3dzIHRvIHZhbGlkYXRlIGludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVycy5cbiAqIEBleHBvcnRzIE5ld3NsZXR0ZXJEaXJlY3RpdmUgQWxsb3dzIHRvIHN1YnNjcmliZSB0byB0aGUgbmV3c2xldHRlci5cbiAqIEBleHBvcnRzIERlZmF1bHRWYWxpZGF0aW9uRGlyZWN0aXZlIEFsbG93cyB0byB2YWxpZGF0ZSBzb21lIHByZWRlZmluZWQgcGF0dGVybnMuXG4gKiBAZXhwb3J0cyBNZXNzYWdlRGlyZWN0aXZlIEEgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIHRvIGRlZmluZSBtZXNzYWdlcy5cbiAqIEBleHBvcnRzIE1lc3NhZ2VzQ29tcG9uZW50IEFsbG93cyB0byBkaXNwbGF5IGVycm9yIG1lc3NhZ2VzLlxuICogQGV4cG9ydHMgU2NoZW1hRm9ybUNvbXBvbmVudCBBbGxvd3MgdG8gZGlzcGxheSBmb3JtcyBnZW5lcmF0ZWQgZnJvbSBKU09OIFNjaGVtYS5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgTmdGb3Jtc01vZHVsZV0sXG4gIGV4cG9ydHM6IFtcbiAgICBQaG9uZVZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgRGVmYXVsdFZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgTWluVmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgICBNYXhWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICAgIE5nRm9ybXNNb2R1bGUsXG4gICAgRm9ybUdyb3VwQ29tcG9uZW50LFxuICAgIE1lc3NhZ2VEaXJlY3RpdmUsXG4gICAgTWVzc2FnZXNDb21wb25lbnQsXG4gICAgSW5wdXRHcm91cExpc3RDb21wb25lbnQsXG4gICAgSW5wdXRHcm91cExpc3RDb250YWluZXJEaXJlY3RpdmUsXG4gICAgSnNvblZhbGlkYXRpb25QcmV0dGlmaWVyRGlyZWN0aXZlLFxuICAgIFRleHRBcmVhUm93SGVpZ2h0RGlyZWN0aXZlLFxuICAgIFJlcXVpcmVkSW5wdXRQbGFjZWhvbGRlckRpcmVjdGl2ZSxcbiAgICBJcFJhbmdlSW5wdXRMaXN0Q29tcG9uZW50LFxuICAgIFNjaGVtYUZvcm1Db21wb25lbnQsXG4gICAgRmlsdGVySW5wdXRDb21wb25lbnRcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgUGhvbmVWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICAgIERlZmF1bHRWYWxpZGF0aW9uRGlyZWN0aXZlLFxuICAgIE1pblZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgTWF4VmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgICBGb3JtR3JvdXBDb21wb25lbnQsXG4gICAgTWVzc2FnZURpcmVjdGl2ZSxcbiAgICBNZXNzYWdlc0NvbXBvbmVudCxcbiAgICBJbnB1dEdyb3VwTGlzdENvbXBvbmVudCxcbiAgICBJbnB1dEdyb3VwTGlzdENvbnRhaW5lckRpcmVjdGl2ZSxcbiAgICBKc29uVmFsaWRhdGlvblByZXR0aWZpZXJEaXJlY3RpdmUsXG4gICAgVGV4dEFyZWFSb3dIZWlnaHREaXJlY3RpdmUsXG4gICAgUmVxdWlyZWRJbnB1dFBsYWNlaG9sZGVyRGlyZWN0aXZlLFxuICAgIElwUmFuZ2VJbnB1dExpc3RDb21wb25lbnQsXG4gICAgU2NoZW1hRm9ybUNvbXBvbmVudCxcbiAgICBGaWx0ZXJJbnB1dENvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1zTW9kdWxlIHt9XG4iXX0=