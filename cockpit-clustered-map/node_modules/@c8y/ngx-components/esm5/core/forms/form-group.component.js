import * as tslib_1 from "tslib";
import { Component, ContentChild, HostBinding, Input } from '@angular/core';
import { NgModel } from '@angular/forms';
import { timer } from 'rxjs';
import { debounce, filter } from 'rxjs/operators';
import { MessagesComponent } from './messages.component';
/**
 * A form group helps to validate an input of a form element.
 *
 * ## Example:
 *
 * ```html
 *  <c8y-form-group [hasWarning]="user.email.length === 0">
 *   <label translate for="userEmail">Email</label>
 *   <input
 *     id="userEmail"
 *     class="form-control"
 *     type="email"
 *     name="email"
 *     [maxlength]="254"
 *     autocomplete="off"
 *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
 *     [(ngModel)]="user.email"
 *     email
 *     required
 *   >
 *   <c8y-messages>
 *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
 *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
 *   </c8y-messages>
 *  </c8y-form-group>
 * ```
 *
 * @param status The current status could be error, warning or success.
 * @param hasError Set this to true to display a error.
 * @param hasWarning Set this to true to display a warning.
 * @param hasSuccess Set this to true to display a success.
 * @param novalidation Set this to true to disable automatic validation by this component.
 */
var FormGroupComponent = /** @class */ (function () {
    function FormGroupComponent() {
        this.hasError = false;
        this.hasWarning = false;
        this.hasSuccess = false;
        this.novalidation = false;
        this.VALIDATION_DEBOUNCE_MS = 1000;
    }
    Object.defineProperty(FormGroupComponent.prototype, "error", {
        get: function () { return this.status === 'error' || this.hasError; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "warning", {
        get: function () { return this.status === 'warning' || this.hasWarning; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "success", {
        get: function () { return this.status === 'success' || this.hasSuccess; },
        enumerable: true,
        configurable: true
    });
    FormGroupComponent.prototype.ngAfterContentInit = function () {
        this.initNgModel();
    };
    FormGroupComponent.prototype.initNgModel = function () {
        var _this = this;
        if (this.model) {
            this.subscription = this.model.valueChanges.pipe(filter(function () { return _this.model.dirty && !_this.novalidation; }), debounce(function () { return _this.hasError ? timer(10) : timer(_this.VALIDATION_DEBOUNCE_MS); })).subscribe(function () { return _this.update(); });
        }
    };
    FormGroupComponent.prototype.update = function () {
        this.hasError = !this.model.valid;
        if (this.customErrorMessage) {
            this.customErrorMessage.changVisibility(this.model.errors);
        }
        else {
            this.errors = this.model.errors;
        }
    };
    FormGroupComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    tslib_1.__decorate([
        Input()
    ], FormGroupComponent.prototype, "hasError", void 0);
    tslib_1.__decorate([
        Input()
    ], FormGroupComponent.prototype, "hasWarning", void 0);
    tslib_1.__decorate([
        Input()
    ], FormGroupComponent.prototype, "hasSuccess", void 0);
    tslib_1.__decorate([
        Input()
    ], FormGroupComponent.prototype, "novalidation", void 0);
    tslib_1.__decorate([
        Input()
    ], FormGroupComponent.prototype, "status", void 0);
    tslib_1.__decorate([
        HostBinding('class.has-error')
    ], FormGroupComponent.prototype, "error", null);
    tslib_1.__decorate([
        HostBinding('class.has-warning')
    ], FormGroupComponent.prototype, "warning", null);
    tslib_1.__decorate([
        HostBinding('class.has-success')
    ], FormGroupComponent.prototype, "success", null);
    tslib_1.__decorate([
        ContentChild(MessagesComponent, { static: false })
    ], FormGroupComponent.prototype, "customErrorMessage", void 0);
    tslib_1.__decorate([
        ContentChild(NgModel, { static: true })
    ], FormGroupComponent.prototype, "model", void 0);
    FormGroupComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-form-group',
            template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n",
            host: {
                class: 'form-group'
            }
        })
    ], FormGroupComponent);
    return FormGroupComponent;
}());
export { FormGroupComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9mb3Jtcy9mb3JtLWdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFnQixLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQ0c7QUFRSDtJQVBBO1FBUVcsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ25CLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFDbkIsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFVYiwyQkFBc0IsR0FBRyxJQUFJLENBQUM7SUE2QmpELENBQUM7SUFyQ2lDLHNCQUFJLHFDQUFLO2FBQVQsY0FBYyxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUM5RCxzQkFBSSx1Q0FBTzthQUFYLGNBQWdCLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLElBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBQ3ZFLHNCQUFJLHVDQUFPO2FBQVgsY0FBZ0IsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFReEcsK0NBQWtCLEdBQWxCO1FBQ0UsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCx3Q0FBVyxHQUFYO1FBQUEsaUJBT0M7UUFOQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDOUMsTUFBTSxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUksQ0FBQyxZQUFZLEVBQXRDLENBQXNDLENBQUMsRUFDcEQsUUFBUSxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBOUQsQ0FBOEQsQ0FBQyxDQUMvRSxDQUFDLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLE1BQU0sRUFBRSxFQUFiLENBQWEsQ0FBQyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUVELG1DQUFNLEdBQU47UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDbEMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzVEO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELHdDQUFXLEdBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7SUF6Q1E7UUFBUixLQUFLLEVBQUU7d0RBQWtCO0lBQ2pCO1FBQVIsS0FBSyxFQUFFOzBEQUFvQjtJQUNuQjtRQUFSLEtBQUssRUFBRTswREFBb0I7SUFDbkI7UUFBUixLQUFLLEVBQUU7NERBQXNCO0lBQ3JCO1FBQVIsS0FBSyxFQUFFO3NEQUFnQjtJQUNRO1FBQS9CLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQzttREFBaUU7SUFDOUQ7UUFBakMsV0FBVyxDQUFDLG1CQUFtQixDQUFDO3FEQUF3RTtJQUN2RTtRQUFqQyxXQUFXLENBQUMsbUJBQW1CLENBQUM7cURBQXVFO0lBQ3REO1FBQWpELFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsQ0FBQztrRUFBdUM7SUFDakQ7UUFBdEMsWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQztxREFBZ0I7SUFWM0Msa0JBQWtCO1FBUDlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsc0hBQTBDO1lBQzFDLElBQUksRUFBRTtnQkFDSixLQUFLLEVBQUUsWUFBWTthQUNwQjtTQUNGLENBQUM7T0FDVyxrQkFBa0IsQ0EyQzlCO0lBQUQseUJBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTNDWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ01vZGVsIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCB0aW1lciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2UsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE1lc3NhZ2VzQ29tcG9uZW50IH0gZnJvbSAnLi9tZXNzYWdlcy5jb21wb25lbnQnO1xuLyoqXG4gKiBBIGZvcm0gZ3JvdXAgaGVscHMgdG8gdmFsaWRhdGUgYW4gaW5wdXQgb2YgYSBmb3JtIGVsZW1lbnQuXG4gKlxuICogIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBodG1sXG4gKiAgPGM4eS1mb3JtLWdyb3VwIFtoYXNXYXJuaW5nXT1cInVzZXIuZW1haWwubGVuZ3RoID09PSAwXCI+XG4gKiAgIDxsYWJlbCB0cmFuc2xhdGUgZm9yPVwidXNlckVtYWlsXCI+RW1haWw8L2xhYmVsPlxuICogICA8aW5wdXRcbiAqICAgICBpZD1cInVzZXJFbWFpbFwiXG4gKiAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICogICAgIHR5cGU9XCJlbWFpbFwiXG4gKiAgICAgbmFtZT1cImVtYWlsXCJcbiAqICAgICBbbWF4bGVuZ3RoXT1cIjI1NFwiXG4gKiAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAqICAgICBwbGFjZWhvbGRlcj1cInt7J2UuZy4gam9lLmRvZUBleGFtcGxlLmNvbScgfCB0cmFuc2xhdGV9fVwiXG4gKiAgICAgWyhuZ01vZGVsKV09XCJ1c2VyLmVtYWlsXCJcbiAqICAgICBlbWFpbFxuICogICAgIHJlcXVpcmVkXG4gKiAgID5cbiAqICAgPGM4eS1tZXNzYWdlcz5cbiAqICAgICA8Yzh5LW1lc3NhZ2UgKm5nSWY9XCJ1c2VyLmVtYWlsLmxlbmd0aCA9PT0gMFwiIHRyYW5zbGF0ZT48L2M4eS1tZXNzYWdlPlxuICogICAgIDxjOHktbWVzc2FnZSBuYW1lPVwicmVxdWlyZWRcIiB0ZXh0PVwiVGhlIEUtTWFpbCBpcyBTVVBFUiByZXF1aXJlZFwiPjwvYzh5LW1lc3NhZ2U+XG4gKiAgIDwvYzh5LW1lc3NhZ2VzPlxuICogIDwvYzh5LWZvcm0tZ3JvdXA+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc3RhdHVzIFRoZSBjdXJyZW50IHN0YXR1cyBjb3VsZCBiZSBlcnJvciwgd2FybmluZyBvciBzdWNjZXNzLlxuICogQHBhcmFtIGhhc0Vycm9yIFNldCB0aGlzIHRvIHRydWUgdG8gZGlzcGxheSBhIGVycm9yLlxuICogQHBhcmFtIGhhc1dhcm5pbmcgU2V0IHRoaXMgdG8gdHJ1ZSB0byBkaXNwbGF5IGEgd2FybmluZy5cbiAqIEBwYXJhbSBoYXNTdWNjZXNzIFNldCB0aGlzIHRvIHRydWUgdG8gZGlzcGxheSBhIHN1Y2Nlc3MuXG4gKiBAcGFyYW0gbm92YWxpZGF0aW9uIFNldCB0aGlzIHRvIHRydWUgdG8gZGlzYWJsZSBhdXRvbWF0aWMgdmFsaWRhdGlvbiBieSB0aGlzIGNvbXBvbmVudC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWZvcm0tZ3JvdXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1ncm91cC5jb21wb25lbnQuaHRtbCcsXG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ2Zvcm0tZ3JvdXAnXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgRm9ybUdyb3VwQ29tcG9uZW50IHtcbiAgQElucHV0KCkgaGFzRXJyb3IgPSBmYWxzZTtcbiAgQElucHV0KCkgaGFzV2FybmluZyA9IGZhbHNlO1xuICBASW5wdXQoKSBoYXNTdWNjZXNzID0gZmFsc2U7XG4gIEBJbnB1dCgpIG5vdmFsaWRhdGlvbiA9IGZhbHNlO1xuICBASW5wdXQoKSBzdGF0dXM6IHN0cmluZztcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5oYXMtZXJyb3InKSBnZXQgZXJyb3IoKSB7IHJldHVybiB0aGlzLnN0YXR1cyA9PT0gJ2Vycm9yJyB8fCB0aGlzLmhhc0Vycm9yOyB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MuaGFzLXdhcm5pbmcnKSBnZXQgd2FybmluZygpIHsgcmV0dXJuIHRoaXMuc3RhdHVzID09PSAnd2FybmluZycgIHx8IHRoaXMuaGFzV2FybmluZzsgfVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmhhcy1zdWNjZXNzJykgZ2V0IHN1Y2Nlc3MoKSB7IHJldHVybiB0aGlzLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnIHx8IHRoaXMuaGFzU3VjY2VzczsgfVxuICBAQ29udGVudENoaWxkKE1lc3NhZ2VzQ29tcG9uZW50LCB7c3RhdGljOiBmYWxzZX0pIGN1c3RvbUVycm9yTWVzc2FnZTogTWVzc2FnZXNDb21wb25lbnQ7XG4gIEBDb250ZW50Q2hpbGQoTmdNb2RlbCwge3N0YXRpYzogdHJ1ZX0pIG1vZGVsOiBOZ01vZGVsO1xuXG4gIGVycm9yczoge307XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgcmVhZG9ubHkgVkFMSURBVElPTl9ERUJPVU5DRV9NUyA9IDEwMDA7XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaW5pdE5nTW9kZWwoKTtcbiAgfVxuXG4gIGluaXROZ01vZGVsKCkge1xuICAgIGlmICh0aGlzLm1vZGVsKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMubW9kZWwudmFsdWVDaGFuZ2VzLnBpcGUoXG4gICAgICAgIGZpbHRlcigoKSA9PiB0aGlzLm1vZGVsLmRpcnR5ICYmICF0aGlzLm5vdmFsaWRhdGlvbiksXG4gICAgICAgIGRlYm91bmNlKCgpID0+IHRoaXMuaGFzRXJyb3IgPyB0aW1lcigxMCkgOiB0aW1lcih0aGlzLlZBTElEQVRJT05fREVCT1VOQ0VfTVMpKSxcbiAgICAgICkuc3Vic2NyaWJlKCgpID0+IHRoaXMudXBkYXRlKCkpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLmhhc0Vycm9yID0gIXRoaXMubW9kZWwudmFsaWQ7XG4gICAgaWYgKHRoaXMuY3VzdG9tRXJyb3JNZXNzYWdlKSB7XG4gICAgICB0aGlzLmN1c3RvbUVycm9yTWVzc2FnZS5jaGFuZ1Zpc2liaWxpdHkodGhpcy5tb2RlbC5lcnJvcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycm9ycyA9IHRoaXMubW9kZWwuZXJyb3JzO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==