// tslint:disable: max-line-length
import { gettext } from '../i18n/gettext';
// @dynamic
var ValidationPattern = /** @class */ (function () {
    function ValidationPattern() {
    }
    ValidationPattern.get = function (key) {
        var pattern = this.rules[key];
        return pattern;
    };
    ValidationPattern.messages = {
        deviceId: gettext('Device ID must not contain spaces or slashes ("/").'),
        domain: gettext('Only lowercase letters, digits, hyphens and underscores allowed in the first part of the URI. ' +
            'Must start with a letter; hyphens and underscores only allowed in the middle. Must be a valid URI.'),
        email: gettext('Invalid email address.'),
        internationalPhoneNumber: gettext('International phone number required, in the format +49 9 876 543 210.'),
        loginAlias: gettext('Login alias must not contain slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
        max: gettext('Max value: {{ value }}'),
        min: gettext('Min value: {{ value }}'),
        opcuaBrowsePath: gettext('Invalid OPC UA URI.'),
        password: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
        passwordConfirm: gettext('Passwords do not match.'),
        phoneNumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
        required: gettext('This field is required.'),
        tenantId: gettext('May contain lowercase letters, digits, hyphens and underscores. ' +
            'Must start with a letter; hyphens and underscores only allowed in the middle; minimum 2 characters.'),
        urlSegment: gettext('Slash, single or double dots and white space not allowed'),
        user: gettext('Username must not contain spaces nor slashes ("/", "\\") nor ("+"), (":"), ("$") signs.')
    };
    ValidationPattern.rules = {
        deviceId: {
            pattern: /^[^\s/]*$/
        },
        domain: {
            pattern: /^[a-z]+[a-z0-9_-]*[a-z0-9]+\.{1}.+$/
        },
        groupName: {
            maxLength: 254
        },
        hostname: {
            pattern: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/
        },
        ip: {
            pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
        },
        opcuaBrowsePath: {
            pattern: /^(opc.tcp|http|https):\/\/[^ "]+$/
        },
        password: {
            pattern: /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/
        },
        phoneNumber: {
            pattern: /^$|^(\+|0{2})[\d\s/-]{1,30}$/
        },
        tenantId: {
            pattern: /^[a-z]+[a-z0-9_-]*[a-z0-9]+$/
        },
        user: {
            pattern: /^[^\\/\s$:+]*$/
        },
        urlSegment: {
            pattern: /^(([.]{1,2})|([/])+|(([/]*)([.]{1,2})([/]*))|((.*)([/]|[ ]+)(.*))|(\s+))$/
        },
        loginAlias: {
            pattern: /^[^\\/$:+]*$/
        }
    };
    return ValidationPattern;
}());
export { ValidationPattern };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1wYXR0ZXJuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvdmFsaWRhdGlvbi1wYXR0ZXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFTMUMsV0FBVztBQUNYO0lBQUE7SUE4RUEsQ0FBQztJQUpRLHFCQUFHLEdBQVYsVUFBVyxHQUFXO1FBQ3BCLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsT0FBTyxPQUEwQixDQUFDO0lBQ3BDLENBQUM7SUE1RWUsMEJBQVEsR0FBRztRQUN6QixRQUFRLEVBQUUsT0FBTyxDQUFDLHFEQUFxRCxDQUFDO1FBQ3hFLE1BQU0sRUFBRSxPQUFPLENBQ2IsZ0dBQWdHO1lBQzlGLG9HQUFvRyxDQUN2RztRQUNELEtBQUssRUFBRSxPQUFPLENBQUMsd0JBQXdCLENBQUM7UUFDeEMsd0JBQXdCLEVBQUUsT0FBTyxDQUMvQix1RUFBdUUsQ0FDeEU7UUFDRCxVQUFVLEVBQUUsT0FBTyxDQUNqQixpRkFBaUYsQ0FDbEY7UUFDRCxHQUFHLEVBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDO1FBQ3ZDLEdBQUcsRUFBRyxPQUFPLENBQUMsd0JBQXdCLENBQUM7UUFDdkMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztRQUMvQyxRQUFRLEVBQUUsT0FBTyxDQUNmLDhKQUE4SixDQUMvSjtRQUNELGVBQWUsRUFBRSxPQUFPLENBQUMseUJBQXlCLENBQUM7UUFDbkQsV0FBVyxFQUFFLE9BQU8sQ0FDbEIsMkZBQTJGLENBQzVGO1FBQ0QsUUFBUSxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztRQUM1QyxRQUFRLEVBQUUsT0FBTyxDQUNmLGtFQUFrRTtZQUNoRSxxR0FBcUcsQ0FDeEc7UUFDRCxVQUFVLEVBQUUsT0FBTyxDQUFDLDBEQUEwRCxDQUFDO1FBQy9FLElBQUksRUFBRSxPQUFPLENBQ1gseUZBQXlGLENBQzFGO0tBQ0YsQ0FBQztJQUVjLHVCQUFLLEdBQUc7UUFDdEIsUUFBUSxFQUFFO1lBQ1IsT0FBTyxFQUFFLFdBQVc7U0FDckI7UUFDRCxNQUFNLEVBQUU7WUFDTixPQUFPLEVBQUUscUNBQXFDO1NBQy9DO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsU0FBUyxFQUFFLEdBQUc7U0FDZjtRQUNELFFBQVEsRUFBRTtZQUNSLE9BQU8sRUFBRSwyR0FBMkc7U0FDckg7UUFDRCxFQUFFLEVBQUU7WUFDRixPQUFPLEVBQUUsNkZBQTZGO1NBQ3ZHO1FBQ0QsZUFBZSxFQUFFO1lBQ2YsT0FBTyxFQUFFLG1DQUFtQztTQUM3QztRQUNELFFBQVEsRUFBRTtZQUNSLE9BQU8sRUFBRSx3REFBd0Q7U0FDbEU7UUFDRCxXQUFXLEVBQUU7WUFDWCxPQUFPLEVBQUUsOEJBQThCO1NBQ3hDO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsT0FBTyxFQUFFLDhCQUE4QjtTQUN4QztRQUNELElBQUksRUFBRTtZQUNKLE9BQU8sRUFBRSxnQkFBZ0I7U0FDMUI7UUFDRCxVQUFVLEVBQUU7WUFDVixPQUFPLEVBQUUsMkVBQTJFO1NBQ3JGO1FBQ0QsVUFBVSxFQUFFO1lBQ1YsT0FBTyxFQUFFLGNBQWM7U0FDeEI7S0FDRixDQUFDO0lBTUosd0JBQUM7Q0FBQSxBQTlFRCxJQThFQztTQTlFWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTogbWF4LWxpbmUtbGVuZ3RoXG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uUnVsZXMge1xuICBwYXR0ZXJuPzogUmVnRXhwO1xuICBtZXNzYWdlPzogc3RyaW5nO1xuICBtYXhMZW5ndGg/OiBudW1iZXI7XG4gIG1pbkxlbmd0aD86IG51bWJlcjtcbn1cblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uUGF0dGVybiB7XG4gIHN0YXRpYyByZWFkb25seSBtZXNzYWdlcyA9IHtcbiAgICBkZXZpY2VJZDogZ2V0dGV4dCgnRGV2aWNlIElEIG11c3Qgbm90IGNvbnRhaW4gc3BhY2VzIG9yIHNsYXNoZXMgKFwiL1wiKS4nKSxcbiAgICBkb21haW46IGdldHRleHQoXG4gICAgICAnT25seSBsb3dlcmNhc2UgbGV0dGVycywgZGlnaXRzLCBoeXBoZW5zIGFuZCB1bmRlcnNjb3JlcyBhbGxvd2VkIGluIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSBVUkkuICcgK1xuICAgICAgICAnTXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyOyBoeXBoZW5zIGFuZCB1bmRlcnNjb3JlcyBvbmx5IGFsbG93ZWQgaW4gdGhlIG1pZGRsZS4gTXVzdCBiZSBhIHZhbGlkIFVSSS4nXG4gICAgKSxcbiAgICBlbWFpbDogZ2V0dGV4dCgnSW52YWxpZCBlbWFpbCBhZGRyZXNzLicpLFxuICAgIGludGVybmF0aW9uYWxQaG9uZU51bWJlcjogZ2V0dGV4dChcbiAgICAgICdJbnRlcm5hdGlvbmFsIHBob25lIG51bWJlciByZXF1aXJlZCwgaW4gdGhlIGZvcm1hdCArNDkgOSA4NzYgNTQzIDIxMC4nXG4gICAgKSxcbiAgICBsb2dpbkFsaWFzOiBnZXR0ZXh0KFxuICAgICAgJ0xvZ2luIGFsaWFzIG11c3Qgbm90IGNvbnRhaW4gc2xhc2hlcyAoXCIvXCIsIFwiXFxcXFwiKSBub3IgKFwiK1wiKSwgKFwiOlwiKSwgKFwiJFwiKSBzaWducy4nXG4gICAgKSxcbiAgICBtYXggOiBnZXR0ZXh0KCdNYXggdmFsdWU6IHt7IHZhbHVlIH19JyksXG4gICAgbWluIDogZ2V0dGV4dCgnTWluIHZhbHVlOiB7eyB2YWx1ZSB9fScpLFxuICAgIG9wY3VhQnJvd3NlUGF0aDogZ2V0dGV4dCgnSW52YWxpZCBPUEMgVUEgVVJJLicpLFxuICAgIHBhc3N3b3JkOiBnZXR0ZXh0KFxuICAgICAgJ1Bhc3N3b3JkIG11c3QgaGF2ZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMgYW5kIG5vIG1vcmUgdGhhbiAzMiBhbmQgY2FuIG9ubHkgY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzIGFuZCBmb2xsb3dpbmcgc3ltYm9sczogYH4hQCMkJV4mKigpX3wrLT0/OzpcXCdcIiwuPD57fVtdXFxcXC8nXG4gICAgKSxcbiAgICBwYXNzd29yZENvbmZpcm06IGdldHRleHQoJ1Bhc3N3b3JkcyBkbyBub3QgbWF0Y2guJyksXG4gICAgcGhvbmVOdW1iZXI6IGdldHRleHQoXG4gICAgICAnSW52YWxpZCBwaG9uZSBudW1iZXIgZm9ybWF0LiBPbmx5IGRpZ2l0cywgc3BhY2VzLCBzbGFzaGVzIChcIi9cIikgYW5kIGRhc2hlcyAoXCItXCIpIGFsbG93ZWQuJ1xuICAgICksXG4gICAgcmVxdWlyZWQ6IGdldHRleHQoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQuJyksXG4gICAgdGVuYW50SWQ6IGdldHRleHQoXG4gICAgICAnTWF5IGNvbnRhaW4gbG93ZXJjYXNlIGxldHRlcnMsIGRpZ2l0cywgaHlwaGVucyBhbmQgdW5kZXJzY29yZXMuICcgK1xuICAgICAgICAnTXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyOyBoeXBoZW5zIGFuZCB1bmRlcnNjb3JlcyBvbmx5IGFsbG93ZWQgaW4gdGhlIG1pZGRsZTsgbWluaW11bSAyIGNoYXJhY3RlcnMuJ1xuICAgICksXG4gICAgdXJsU2VnbWVudDogZ2V0dGV4dCgnU2xhc2gsIHNpbmdsZSBvciBkb3VibGUgZG90cyBhbmQgd2hpdGUgc3BhY2Ugbm90IGFsbG93ZWQnKSxcbiAgICB1c2VyOiBnZXR0ZXh0KFxuICAgICAgJ1VzZXJuYW1lIG11c3Qgbm90IGNvbnRhaW4gc3BhY2VzIG5vciBzbGFzaGVzIChcIi9cIiwgXCJcXFxcXCIpIG5vciAoXCIrXCIpLCAoXCI6XCIpLCAoXCIkXCIpIHNpZ25zLidcbiAgICApXG4gIH07XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bGVzID0ge1xuICAgIGRldmljZUlkOiB7XG4gICAgICBwYXR0ZXJuOiAvXlteXFxzL10qJC9cbiAgICB9LFxuICAgIGRvbWFpbjoge1xuICAgICAgcGF0dGVybjogL15bYS16XStbYS16MC05Xy1dKlthLXowLTldK1xcLnsxfS4rJC9cbiAgICB9LFxuICAgIGdyb3VwTmFtZToge1xuICAgICAgbWF4TGVuZ3RoOiAyNTRcbiAgICB9LFxuICAgIGhvc3RuYW1lOiB7XG4gICAgICBwYXR0ZXJuOiAvXigoW2EtekEtWjAtOV18W2EtekEtWjAtOV1bYS16QS1aMC05LV0qW2EtekEtWjAtOV0pXFwuKSooW0EtWmEtejAtOV18W0EtWmEtejAtOV1bQS1aYS16MC05LV0qW0EtWmEtejAtOV0pJC9cbiAgICB9LFxuICAgIGlwOiB7XG4gICAgICBwYXR0ZXJuOiAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSQvXG4gICAgfSxcbiAgICBvcGN1YUJyb3dzZVBhdGg6IHtcbiAgICAgIHBhdHRlcm46IC9eKG9wYy50Y3B8aHR0cHxodHRwcyk6XFwvXFwvW14gXCJdKyQvXG4gICAgfSxcbiAgICBwYXNzd29yZDoge1xuICAgICAgcGF0dGVybjogL15bYS16QS1aMC05YH4hQCMkJV4mKigpX3wrXFwtPT87OidcIiwuPD57fVtcXF1cXFxcL117OCwzMn0kL1xuICAgIH0sXG4gICAgcGhvbmVOdW1iZXI6IHtcbiAgICAgIHBhdHRlcm46IC9eJHxeKFxcK3wwezJ9KVtcXGRcXHMvLV17MSwzMH0kL1xuICAgIH0sXG4gICAgdGVuYW50SWQ6IHtcbiAgICAgIHBhdHRlcm46IC9eW2Etel0rW2EtejAtOV8tXSpbYS16MC05XSskL1xuICAgIH0sXG4gICAgdXNlcjoge1xuICAgICAgcGF0dGVybjogL15bXlxcXFwvXFxzJDorXSokL1xuICAgIH0sXG4gICAgdXJsU2VnbWVudDoge1xuICAgICAgcGF0dGVybjogL14oKFsuXXsxLDJ9KXwoWy9dKSt8KChbL10qKShbLl17MSwyfSkoWy9dKikpfCgoLiopKFsvXXxbIF0rKSguKikpfChcXHMrKSkkL1xuICAgIH0sXG4gICAgbG9naW5BbGlhczoge1xuICAgICAgcGF0dGVybjogL15bXlxcXFwvJDorXSokL1xuICAgIH1cbiAgfTtcblxuICBzdGF0aWMgZ2V0KGtleTogc3RyaW5nKSB7XG4gICAgY29uc3QgcGF0dGVybiA9IHRoaXMucnVsZXNba2V5XTtcbiAgICByZXR1cm4gcGF0dGVybiBhcyBWYWxpZGF0aW9uUnVsZXM7XG4gIH1cbn1cbiJdfQ==