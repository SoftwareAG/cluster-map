import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, AfterContentChecked } from '@angular/core';
import { gettext } from '../i18n/gettext';
import { isUndefined, compact } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';
var RequiredInputPlaceholderDirective = /** @class */ (function () {
    function RequiredInputPlaceholderDirective(el, renderer, translationService) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
    }
    RequiredInputPlaceholderDirective.prototype.ngAfterContentChecked = function () {
        this.required = this.el.nativeElement.required;
        this.placeholder = this.el.nativeElement.placeholder;
        var requiredText = "(" + this.translationService.instant(gettext('required')) + ")";
        this.setPlaceholder(requiredText);
    };
    RequiredInputPlaceholderDirective.prototype.setPlaceholder = function (requiredText) {
        if (isUndefined(this.placeholder) && !this.required) {
            this.renderer.removeAttribute(this.el.nativeElement, 'placeholder');
        }
        else if (this.placeholder.indexOf(requiredText) < 0) {
            var parts = compact([
                this.placeholder,
                "" + (this.required && !this.shouldSkipRequiredHint() ? "" + requiredText : '')
            ]);
            var placeholder = parts.includes(requiredText)
                ? parts.join(' ').trim()
                : parts.join('').trim();
            this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        }
    };
    RequiredInputPlaceholderDirective.prototype.shouldSkipRequiredHint = function () {
        var closestAncestor = this.el.nativeElement.closest('[placeholder-no-required-hint]');
        return !!closestAncestor;
    };
    RequiredInputPlaceholderDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: TranslateService }
    ]; };
    RequiredInputPlaceholderDirective = tslib_1.__decorate([
        Directive({
            selector: 'input[required]'
        })
    ], RequiredInputPlaceholderDirective);
    return RequiredInputPlaceholderDirective;
}());
export { RequiredInputPlaceholderDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvcmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBS3ZEO0lBR0UsMkNBQ1UsRUFBYyxFQUNkLFFBQW1CLEVBQ25CLGtCQUFvQztRQUZwQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWtCO0lBQ3pDLENBQUM7SUFFTixpRUFBcUIsR0FBckI7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztRQUNyRCxJQUFNLFlBQVksR0FBRyxNQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQUcsQ0FBQztRQUNqRixJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCwwREFBYyxHQUFkLFVBQWUsWUFBWTtRQUN6QixJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ25ELElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ3JFO2FBQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckQsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO2dCQUNwQixJQUFJLENBQUMsV0FBVztnQkFDaEIsTUFBRyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUcsWUFBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUU7YUFDOUUsQ0FBQyxDQUFDO1lBQ0gsSUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7Z0JBQzlDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDeEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQy9FO0lBQ0gsQ0FBQztJQUVELGtFQUFzQixHQUF0QjtRQUNFLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3hGLE9BQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQztJQUMzQixDQUFDOztnQkEvQmEsVUFBVTtnQkFDSixTQUFTO2dCQUNDLGdCQUFnQjs7SUFObkMsaUNBQWlDO1FBSDdDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxpQkFBaUI7U0FDNUIsQ0FBQztPQUNXLGlDQUFpQyxDQW9DN0M7SUFBRCx3Q0FBQztDQUFBLEFBcENELElBb0NDO1NBcENZLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlckNvbnRlbnRDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcbmltcG9ydCB7IGlzVW5kZWZpbmVkLCBjb21wYWN0IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbcmVxdWlyZWRdJ1xufSlcbmV4cG9ydCBjbGFzcyBSZXF1aXJlZElucHV0UGxhY2Vob2xkZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRDaGVja2VkIHtcbiAgcHJpdmF0ZSBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICBwcml2YXRlIHJlcXVpcmVkOiBib29sZWFuO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIHRyYW5zbGF0aW9uU2VydmljZTogVHJhbnNsYXRlU2VydmljZVxuICAgICkge31cblxuICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZCB7XG4gICAgdGhpcy5yZXF1aXJlZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5yZXF1aXJlZDtcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBsYWNlaG9sZGVyO1xuICAgIGNvbnN0IHJlcXVpcmVkVGV4dCA9IGAoJHt0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KGdldHRleHQoJ3JlcXVpcmVkJykpfSlgO1xuICAgIHRoaXMuc2V0UGxhY2Vob2xkZXIocmVxdWlyZWRUZXh0KTtcbiAgfVxuXG4gIHNldFBsYWNlaG9sZGVyKHJlcXVpcmVkVGV4dCkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh0aGlzLnBsYWNlaG9sZGVyKSAmJiAhdGhpcy5yZXF1aXJlZCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAncGxhY2Vob2xkZXInKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucGxhY2Vob2xkZXIuaW5kZXhPZihyZXF1aXJlZFRleHQpIDwgMCkge1xuICAgICAgY29uc3QgcGFydHMgPSBjb21wYWN0KFtcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlcixcbiAgICAgICAgYCR7dGhpcy5yZXF1aXJlZCAmJiAhdGhpcy5zaG91bGRTa2lwUmVxdWlyZWRIaW50KCkgPyBgJHtyZXF1aXJlZFRleHR9YCA6ICcnfWBcbiAgICAgIF0pO1xuICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBwYXJ0cy5pbmNsdWRlcyhyZXF1aXJlZFRleHQpXG4gICAgICAgID8gcGFydHMuam9pbignICcpLnRyaW0oKVxuICAgICAgICA6IHBhcnRzLmpvaW4oJycpLnRyaW0oKTtcblxuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAncGxhY2Vob2xkZXInLCBwbGFjZWhvbGRlcik7XG4gICAgfVxuICB9XG5cbiAgc2hvdWxkU2tpcFJlcXVpcmVkSGludCgpIHtcbiAgICBjb25zdCBjbG9zZXN0QW5jZXN0b3IgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xvc2VzdCgnW3BsYWNlaG9sZGVyLW5vLXJlcXVpcmVkLWhpbnRdJyk7XG4gICAgcmV0dXJuICEhY2xvc2VzdEFuY2VzdG9yO1xuICB9XG59XG4iXX0=