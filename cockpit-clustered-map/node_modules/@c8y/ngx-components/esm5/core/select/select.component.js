import * as tslib_1 from "tslib";
import { BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { Component, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
var SelectComponent = /** @class */ (function () {
    function SelectComponent() {
        this.placeholder = 'Select item';
        this.applyLabel = 'Apply';
        this.onChange = new EventEmitter();
        this.textFilter = '';
        this.labelText = '';
        this.isOpen = false;
        this.filteredItems = [];
        this.sizeToShowFilter = 5;
        this.itemsSelected = new Set();
        this.stopClicks = false;
    }
    SelectComponent.prototype.preventClick = function (evt) {
        if (this.stopClicks) {
            evt.stopPropagation();
        }
        this.stopClicks = this.isOpen;
    };
    SelectComponent.prototype.isOpenChange = function (isOpen) {
        this.isOpen = isOpen;
        if (isOpen) {
            this.updateSelected();
        }
        else {
            this.stopClicks = false;
        }
    };
    SelectComponent.prototype.outterSelected = function (item) {
        var _a = this, selected = _a.selected, itemsSelected = _a.itemsSelected, items = _a.items;
        var isSelected = function () { return false; };
        if (typeof selected === 'function') {
            isSelected = selected;
        }
        else if (Array.isArray(selected)) {
            isSelected = function (i) { return selected.indexOf(i) > -1; };
        }
        return isSelected(item);
    };
    SelectComponent.prototype.isSelected = function (item) {
        return this.itemsSelected.has(item);
    };
    SelectComponent.prototype.applyChanges = function () {
        var selected = Array.from(this.itemsSelected.values());
        this.onChange.emit(selected);
        this.dropdown.hide();
    };
    SelectComponent.prototype.selectAll = function (checked) {
        var _this = this;
        this.filteredItems.forEach(function (item) { return _this.onChangeItem(checked, item); });
    };
    SelectComponent.prototype.allSelected = function () {
        return this.filteredItems.length === this.itemsSelected.size;
    };
    SelectComponent.prototype.onChangeItem = function (checked, item) {
        if (checked) {
            this.itemsSelected.add(item);
        }
        else {
            this.itemsSelected.delete(item);
        }
    };
    SelectComponent.prototype.updateFiltered = function (term) {
        if (term) {
            var search_1 = new RegExp(term, 'i');
            this.filteredItems = this.items.filter(function (_a) {
                var name = _a.name;
                return search_1.test(name);
            });
        }
        else {
            this.filteredItems = this.items;
        }
    };
    SelectComponent.prototype.ngOnChanges = function (changes) {
        if (this.isOpen) {
            return;
        }
        if (changes.items || changes.selected || changes.applyLabel) {
            this.updateSelected();
            this.updateLabel();
        }
    };
    SelectComponent.prototype.updateLabel = function () {
        var _this = this;
        var outterSelected = this.items.filter(function (i) { return _this.outterSelected(i); });
        if (typeof this.selectedLabel === 'string') {
            this.labelText = this.selectedLabel;
        }
        else if (typeof this.selectedLabel === 'function') {
            this.labelText = this.selectedLabel(outterSelected);
        }
        else {
            this.labelText = outterSelected.map(function (_a) {
                var name = _a.name;
                return name;
            }).join(', ');
        }
    };
    SelectComponent.prototype.updateSelected = function () {
        var _this = this;
        var _a = this, itemsSelected = _a.itemsSelected, items = _a.items;
        itemsSelected.clear();
        items.forEach(function (item) {
            if (_this.outterSelected(item)) {
                itemsSelected.add(item);
            }
        });
        this.filteredItems = items;
    };
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "selectedLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "applyLabel", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input()
    ], SelectComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Output()
    ], SelectComponent.prototype, "onChange", void 0);
    tslib_1.__decorate([
        ViewChild(BsDropdownDirective, { static: false })
    ], SelectComponent.prototype, "dropdown", void 0);
    tslib_1.__decorate([
        HostListener('click', ['$event'])
    ], SelectComponent.prototype, "preventClick", null);
    SelectComponent = tslib_1.__decorate([
        Component({
            selector: 'c8y-select',
            template: "<div\n  class=\"c8y-child-assets-selector  dropdown fit-h\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">{{ labelText | translate }}</span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">{{ placeholder | translate }}</span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          placeholder=\"{{ 'Filter' | translate }}&hellip;\"\n          (keyup)=\"updateFiltered($event.target.value)\"\n        />\n        <span class=\"input-group-addon\">\n          <i class=\"fa fa-search\" *ngIf=\"!textFilter\"></i>\n          <i class=\"fa fa-times text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n        </span>\n      </div>\n    </li>\n\n    <li class=\"multiselect-item\">\n      <label\n        title=\"{{ 'All' | translate }}\"\n        class=\"c8y-checkbox input-sm\"\n        ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n      >\n        <input\n          type=\"checkbox\"\n          [checked]=\"allSelected()\"\n          (change)=\"selectAll($event.target.checked)\"\n          style=\"margin-top:0;\"\n        /><span></span> &nbsp;<span span class=\"label-text \" translate>All</span>\n      </label>\n    </li>\n\n    <li class=\"multiselect-item-container\">\n      <ul class=\"list-unstyled\">\n        <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n          <label class=\"c8y-checkbox input-sm text-truncate\">\n            <input\n              type=\"checkbox\"\n              [checked]=\"isSelected(item)\"\n              (change)=\"onChangeItem($event.target.checked, item)\"\n              style=\"margin-top:0\"\n            />\n            <span></span>\n            &nbsp;<span class=\"label-text \" title=\"{{ item.name | translate }}\">{{\n              item.name | translate\n            }}</span>\n          </label>\n        </li>\n      </ul>\n    </li>\n    <li class=\"divider\"></li>\n    <li>\n      <button\n        title=\"{{ applyLabel | translate }}\"\n        class=\"btn btn-primary btn-block\"\n        (click)=\"applyChanges()\"\n      >\n        {{ applyLabel | translate }}\n      </button>\n    </li>\n  </ul>\n</div>\n"
        })
    ], SelectComponent);
    return SelectComponent;
}());
export { SelectComponent };
//# sourceMappingURL=data:application/json;base64,