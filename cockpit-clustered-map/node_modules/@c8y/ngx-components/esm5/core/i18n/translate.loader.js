import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { Inject, Injectable } from '@angular/core';
import { LOCALE_PATH } from './locale.path';
import { LANGUAGES } from './languages';
var TranslateCustomLoader = /** @class */ (function () {
    function TranslateCustomLoader(http, path, languages) {
        if (path === void 0) { path = null; }
        if (languages === void 0) { languages = null; }
        this.http = http;
        this.path = path;
        this.languages = languages;
    }
    TranslateCustomLoader.prototype.getTranslation = function (lang) {
        var path = this.path || '';
        var url = "" + path + lang + ".json";
        if (this.languages && this.languages[lang] && this.languages[lang].url) {
            url = this.languages[lang].url;
        }
        return this.http.get(url).pipe(map(function (d) { return d[lang]; }), catchError(function () { return of({}); }));
    };
    TranslateCustomLoader.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_PATH,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LANGUAGES,] }] }
    ]; };
    TranslateCustomLoader = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(1, Inject(LOCALE_PATH)),
        tslib_1.__param(2, Inject(LANGUAGES))
    ], TranslateCustomLoader);
    return TranslateCustomLoader;
}());
export { TranslateCustomLoader };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLmxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2kxOG4vdHJhbnNsYXRlLmxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQVksTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHeEM7SUFDRSwrQkFDVSxJQUFnQixFQUNLLElBQW1CLEVBQ3JCLFNBQXFCO1FBRG5CLHFCQUFBLEVBQUEsV0FBbUI7UUFDckIsMEJBQUEsRUFBQSxnQkFBcUI7UUFGeEMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNLLFNBQUksR0FBSixJQUFJLENBQWU7UUFDckIsY0FBUyxHQUFULFNBQVMsQ0FBWTtJQUMvQyxDQUFDO0lBRUosOENBQWMsR0FBZCxVQUFlLElBQVk7UUFDekIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7UUFDN0IsSUFBSSxHQUFHLEdBQUcsS0FBRyxJQUFJLEdBQUcsSUFBSSxVQUFPLENBQUM7UUFDaEMsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUU7WUFDdEUsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQzVCLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBUCxDQUFPLENBQUMsRUFDbkIsVUFBVSxDQUFDLGNBQU0sT0FBQSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQU4sQ0FBTSxDQUFDLENBQ3pCLENBQUM7SUFDSixDQUFDOztnQkFmZSxVQUFVOzZDQUN2QixNQUFNLFNBQUMsV0FBVztnREFDbEIsTUFBTSxTQUFDLFNBQVM7O0lBSlIscUJBQXFCO1FBRGpDLFVBQVUsRUFBRTtRQUlSLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUNuQixtQkFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7T0FKVCxxQkFBcUIsQ0FrQmpDO0lBQUQsNEJBQUM7Q0FBQSxBQWxCRCxJQWtCQztTQWxCWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgVHJhbnNsYXRlTG9hZGVyIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT3B0aW9uYWwsIEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTE9DQUxFX1BBVEggfSBmcm9tICcuL2xvY2FsZS5wYXRoJztcbmltcG9ydCB7IExBTkdVQUdFUyB9IGZyb20gJy4vbGFuZ3VhZ2VzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0ZUN1c3RvbUxvYWRlciBpbXBsZW1lbnRzIFRyYW5zbGF0ZUxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICBASW5qZWN0KExPQ0FMRV9QQVRIKSBwcml2YXRlIHBhdGg6IHN0cmluZyA9IG51bGwsXG4gICAgQEluamVjdChMQU5HVUFHRVMpIHByaXZhdGUgbGFuZ3VhZ2VzOiBhbnkgPSBudWxsXG4gICkge31cblxuICBnZXRUcmFuc2xhdGlvbihsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLnBhdGggfHwgJyc7XG4gICAgbGV0IHVybCA9IGAke3BhdGh9JHtsYW5nfS5qc29uYDtcbiAgICBpZiAodGhpcy5sYW5ndWFnZXMgJiYgdGhpcy5sYW5ndWFnZXNbbGFuZ10gJiYgdGhpcy5sYW5ndWFnZXNbbGFuZ10udXJsKSB7XG4gICAgICB1cmwgPSB0aGlzLmxhbmd1YWdlc1tsYW5nXS51cmw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCkucGlwZShcbiAgICAgIG1hcCgoZCkgPT4gZFtsYW5nXSksXG4gICAgICBjYXRjaEVycm9yKCgpID0+IG9mKHt9KSlcbiAgICApO1xuICB9XG59XG4iXX0=