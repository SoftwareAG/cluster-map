import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { deviceAvailabilityIconMap, PushStatusLabels, SendStatusLabels, tooltips } from './device-availability';
import { TranslateService } from '@ngx-translate/core';
import { get } from 'lodash-es';
var DeviceStatusComponent = /** @class */ (function () {
    function DeviceStatusComponent(translateService) {
        this.translateService = translateService;
    }
    Object.defineProperty(DeviceStatusComponent.prototype, "node", {
        set: function (value) {
            this._mo = value.mo || value;
        },
        enumerable: true,
        configurable: true
    });
    DeviceStatusComponent.prototype.get = function () {
        return this._mo;
    };
    DeviceStatusComponent.prototype.ngAfterContentInit = function () {
        this.requiredAvailability = get(this._mo, 'c8y_RequiredAvailability');
        this.availabilityStatus = get(this._mo, 'c8y_Availability.status');
        this.pushStatus = get(this._mo, 'c8y_Connection.status') || 'UNKNOWN';
        this.sendStatus = this.availabilityStatus || (this.requiredAvailability ? ('UNKNOWN') : ('NOT_MONITORED'));
    };
    DeviceStatusComponent.prototype.status = function () {
        var statuses;
        if (this.availabilityStatus === 'MAINTENANCE' || this.pushStatus === 'MAINTENANCE') {
            statuses = this.getMaintenanceStatus();
        }
        else {
            statuses = this.getSendPushStatus();
        }
        return statuses;
    };
    DeviceStatusComponent.prototype.getMaintenanceStatus = function () {
        return ({
            sendStatus: false,
            pushStatus: false,
            maintenanceStatus: {
                icon: deviceAvailabilityIconMap.device.MAINTENANCE.icon,
                class: deviceAvailabilityIconMap.device.MAINTENANCE.class,
                tooltip: tooltips.maintenance
            }
        });
    };
    DeviceStatusComponent.prototype.getSendPushStatus = function () {
        return ({
            sendStatus: {
                icon: deviceAvailabilityIconMap.sendData[this.sendStatus].icon,
                class: deviceAvailabilityIconMap.sendData[this.sendStatus].class,
                status: this.sendStatus,
                label: SendStatusLabels[this.sendStatus],
                tooltip: this.getSendStatusTooltip(this._mo)
            },
            pushStatus: {
                icon: deviceAvailabilityIconMap.push[this.pushStatus].icon,
                class: deviceAvailabilityIconMap.push[this.pushStatus].class,
                status: this.pushStatus,
                label: PushStatusLabels[this.pushStatus],
                tooltip: this.getPushStatusTooltip(this.pushStatus === 'CONNECTED')
            },
            maintenanceStatus: false
        });
    };
    DeviceStatusComponent.prototype.getSendStatusTooltip = function (device) {
        var availability = device && device.c8y_Availability;
        var lastMessage = availability && availability.lastMessage;
        if (lastMessage) {
            return tooltips.sendStatusConnected(lastMessage, this.translateService);
        }
        return tooltips.sendStatusDisconnected;
    };
    DeviceStatusComponent.prototype.getPushStatusTooltip = function (isActive) {
        return isActive ? tooltips.pushStatusConnected : tooltips.pushStatusDisconnected;
    };
    DeviceStatusComponent.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    tslib_1.__decorate([
        Input('mo')
    ], DeviceStatusComponent.prototype, "node", null);
    DeviceStatusComponent = tslib_1.__decorate([
        Component({
            selector: 'device-status',
            template: "<!-- ATTENTION: keep text format in `tooltip` attribute -->\n<div class=\"statusContainer\"\n    tooltip=\"{{status().sendStatus.tooltip | translate}}\n{{status().pushStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"left\"\n   >\n    <div\n    *ngIf=\"!!status().sendStatus\"\n    class=\"sendStatus\"\n    [c8yIcon]=\"status().sendStatus.icon\"\n    [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n    *ngIf=\"!!status().pushStatus\"\n    class=\"pushStatus\"\n    [c8yIcon]=\"status().pushStatus.icon\"\n    [ngClass]=\"status().pushStatus.class\"\n    >\n    </div>\n\n  <div *ngIf=\"!!status().maintenanceStatus\"\n    class=\"maintenanceStatus\"\n    tooltip=\"{{status().maintenanceStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"auto\"\n    [c8yIcon]=\"status().maintenanceStatus.icon\"\n    [ngClass]=\"status().maintenanceStatus.class\"></div>\n</div>\n"
        })
    ], DeviceStatusComponent);
    return DeviceStatusComponent;
}());
export { DeviceStatusComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXN0YXR1cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9kZXZpY2Utc3RhdHVzL2RldmljZS1zdGF0dXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQU1oQztJQVdFLCtCQUNVLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQ3pDLENBQUM7SUFaUyxzQkFBSSx1Q0FBSTthQUFSLFVBQVMsS0FBSztZQUN6QixJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDO1FBQy9CLENBQUM7OztPQUFBO0lBWUQsbUNBQUcsR0FBSDtRQUNFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBRUQsa0RBQWtCLEdBQWxCO1FBQ0UsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLHlCQUF5QixDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQyxJQUFJLFNBQVMsQ0FBQztRQUN0RSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUks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RUFBRSxlQUFlO1lBQ3pCLHk2QkFBNkM7U0FDOUMsQ0FBQztPQUNXLHFCQUFxQixDQW1GakM7SUFBRCw0QkFBQztDQUFBLEFBbkZELElBbUZDO1NBbkZZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAsIFB1c2hTdGF0dXNMYWJlbHMsIFNlbmRTdGF0dXNMYWJlbHMsIHRvb2x0aXBzIH0gZnJvbSAnLi9kZXZpY2UtYXZhaWxhYmlsaXR5JztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcbmltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RldmljZS1zdGF0dXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGV2aWNlLXN0YXR1cy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGV2aWNlU3RhdHVzQ29tcG9uZW50IHtcbiAgQElucHV0KCdtbycpIHNldCBub2RlKHZhbHVlKSB7XG4gICAgdGhpcy5fbW8gPSB2YWx1ZS5tbyB8fCB2YWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgX21vO1xuICBwcml2YXRlIHJlcXVpcmVkQXZhaWxhYmlsaXR5O1xuICBwcml2YXRlIGF2YWlsYWJpbGl0eVN0YXR1cztcbiAgcHJpdmF0ZSBwdXNoU3RhdHVzO1xuICBwcml2YXRlIHNlbmRTdGF0dXM7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlXG4gICkge31cblxuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMucmVxdWlyZWRBdmFpbGFiaWxpdHkgPSBnZXQodGhpcy5fbW8sICdjOHlfUmVxdWlyZWRBdmFpbGFiaWxpdHknKTtcbiAgICB0aGlzLmF2YWlsYWJpbGl0eVN0YXR1cyA9IGdldCh0aGlzLl9tbywgJ2M4eV9BdmFpbGFiaWxpdHkuc3RhdHVzJyk7XG5cbiAgICB0aGlzLnB1c2hTdGF0dXMgPSBnZXQodGhpcy5fbW8sICdjOHlfQ29ubmVjdGlvbi5zdGF0dXMnKSB8fCAnVU5LTk9XTic7XG4gICAgdGhpcy5zZW5kU3RhdHVzID0gdGhpcy5hdmFpbGFiaWxpdHlTdGF0dXMgfHwgKHRoaXMucmVxdWlyZWRBdmFpbGFiaWxpdHkgPyAoJ1VOS05PV04nKSA6ICgnTk9UX01PTklUT1JFRCcpKTtcbiAgfVxuXG4gIHN0YXR1cygpIHtcbiAgICBsZXQgc3RhdHVzZXM7XG5cbiAgICBpZiAodGhpcy5hdmFpbGFiaWxpdHlTdGF0dXMgPT09ICdNQUlOVEVOQU5DRScgfHwgdGhpcy5wdXNoU3RhdHVzID09PSAnTUFJTlRFTkFOQ0UnKSB7XG4gICAgICBzdGF0dXNlcyA9IHRoaXMuZ2V0TWFpbnRlbmFuY2VTdGF0dXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdHVzZXMgPSB0aGlzLmdldFNlbmRQdXNoU3RhdHVzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXR1c2VzO1xuICB9XG5cbiAgZ2V0TWFpbnRlbmFuY2VTdGF0dXMoKSB7XG4gICAgcmV0dXJuICh7XG4gICAgICBzZW5kU3RhdHVzOiBmYWxzZSxcbiAgICAgIHB1c2hTdGF0dXM6IGZhbHNlLFxuICAgICAgbWFpbnRlbmFuY2VTdGF0dXM6IHtcbiAgICAgICAgaWNvbjogZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcC5kZXZpY2UuTUFJTlRFTkFOQ0UuaWNvbixcbiAgICAgICAgY2xhc3M6IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAuZGV2aWNlLk1BSU5URU5BTkNFLmNsYXNzLFxuICAgICAgICB0b29sdGlwOiB0b29sdGlwcy5tYWludGVuYW5jZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTZW5kUHVzaFN0YXR1cygpIHtcbiAgICByZXR1cm4gKHtcbiAgICAgIHNlbmRTdGF0dXM6IHtcbiAgICAgICAgaWNvbjogZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcC5zZW5kRGF0YVt0aGlzLnNlbmRTdGF0dXNdLmljb24sXG4gICAgICAgIGNsYXNzOiBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwLnNlbmREYXRhW3RoaXMuc2VuZFN0YXR1c10uY2xhc3MsXG4gICAgICAgIHN0YXR1czogdGhpcy5zZW5kU3RhdHVzLFxuICAgICAgICBsYWJlbDogU2VuZFN0YXR1c0xhYmVsc1t0aGlzLnNlbmRTdGF0dXNdLFxuICAgICAgICB0b29sdGlwOiB0aGlzLmdldFNlbmRTdGF0dXNUb29sdGlwKHRoaXMuX21vKVxuICAgICAgfSxcbiAgICAgIHB1c2hTdGF0dXM6IHtcbiAgICAgICAgaWNvbjogZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcC5wdXNoW3RoaXMucHVzaFN0YXR1c10uaWNvbixcbiAgICAgICAgY2xhc3M6IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAucHVzaFt0aGlzLnB1c2hTdGF0dXNdLmNsYXNzLFxuICAgICAgICBzdGF0dXM6IHRoaXMucHVzaFN0YXR1cyxcbiAgICAgICAgbGFiZWw6IFB1c2hTdGF0dXNMYWJlbHNbdGhpcy5wdXNoU3RhdHVzXSxcbiAgICAgICAgdG9vbHRpcDogdGhpcy5nZXRQdXNoU3RhdHVzVG9vbHRpcCh0aGlzLnB1c2hTdGF0dXMgPT09ICdDT05ORUNURUQnKVxuICAgICAgfSxcbiAgICAgIG1haW50ZW5hbmNlU3RhdHVzOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTZW5kU3RhdHVzVG9vbHRpcChkZXZpY2UpIHtcbiAgICBjb25zdCBhdmFpbGFiaWxpdHkgPSBkZXZpY2UgJiYgZGV2aWNlLmM4eV9BdmFpbGFiaWxpdHk7XG4gICAgY29uc3QgbGFzdE1lc3NhZ2UgPSBhdmFpbGFiaWxpdHkgJiYgYXZhaWxhYmlsaXR5Lmxhc3RNZXNzYWdlO1xuICAgIGlmIChsYXN0TWVzc2FnZSkge1xuICAgICAgcmV0dXJuIHRvb2x0aXBzLnNlbmRTdGF0dXNDb25uZWN0ZWQobGFzdE1lc3NhZ2UsIHRoaXMudHJhbnNsYXRlU2VydmljZSk7XG4gICAgfVxuICAgIHJldHVybiB0b29sdGlwcy5zZW5kU3RhdHVzRGlzY29ubmVjdGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRQdXNoU3RhdHVzVG9vbHRpcChpc0FjdGl2ZSkge1xuICAgIHJldHVybiBpc0FjdGl2ZSA/IHRvb2x0aXBzLnB1c2hTdGF0dXNDb25uZWN0ZWQgOiB0b29sdGlwcy5wdXNoU3RhdHVzRGlzY29ubmVjdGVkO1xuICB9XG59XG4iXX0=