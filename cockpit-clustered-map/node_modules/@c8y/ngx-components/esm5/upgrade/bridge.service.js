import * as tslib_1 from "tslib";
import { ActionService, AppStateService, EmptyComponent, RouterService, ViewContext, gettext } from '@c8y/ngx-components';
import { BehaviorSubject, combineLatest, from, fromEventPattern, of } from 'rxjs';
import { debounceTime, filter, map, merge, startWith, switchMap } from 'rxjs/operators';
import { ActivationEnd } from '@angular/router';
import { FetchClient } from '@c8y/client';
import { NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { ViewContextLegacyParameter } from './ng1/views.provider';
var BridgeService = /** @class */ (function () {
    function BridgeService(injector, appState, fetchClient, router, ngZone, routerService, actionService) {
        this.injector = injector;
        this.appState = appState;
        this.fetchClient = fetchClient;
        this.router = router;
        this.ngZone = ngZone;
        this.routerService = routerService;
        this.actionService = actionService;
        this.$liveTabs = new BehaviorSubject([]);
        this.fixE2eIssues();
        this.$ng1RouteChangeSuccess = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeSuccess');
        this.$ng1RouteChangeStart = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeStart');
        this.hookAuth();
        this.hookLanguage();
        this.hookTabs();
        this.hookNavigator();
        this.hookUserMenu();
        this.hookViewProvider();
        this.router.initialNavigation();
        this.ng1Routes();
    }
    BridgeService.prototype.hookViewProvider = function () {
        var _this = this;
        var c8yViews = this.injector.get('c8yViews');
        c8yViews.contextViews.subscribe(function (cfg) { return _this.addRoute(cfg); });
    };
    BridgeService.prototype.addRoute = function (cfg) {
        var _this = this;
        this.routerService.addRoute({
            label: cfg.label || cfg.name,
            path: cfg.path,
            icon: cfg.icon,
            context: ViewContext[cfg.contextKey],
            priority: cfg.priority,
            component: EmptyComponent,
            data: {
                showIf: cfg.showIf
                    ? function (ngxRoute) {
                        var _a;
                        var params = tslib_1.__assign({}, ngxRoute.params, (_a = {}, _a[ViewContextLegacyParameter[cfg.contextKey]] = ngxRoute.params.id, _a));
                        var showIfResult = _this.injector.invoke(cfg.showIf, undefined, {
                            $routeParams: params
                        });
                        // make sure showIf result is a promise with boolean result:
                        return _this.injector
                            .get('$q')
                            .when(showIfResult)
                            .then(Boolean);
                    }
                    : undefined
            }
        });
        if (cfg.runPhase) {
            this.router.navigateByUrl(this.router.url);
        }
    };
    BridgeService.prototype.ng1Routes = function () {
        var template = '';
        var fallbackRoutes = [];
        // tslint:disable-next-line: forin
        for (var context in ViewContext) {
            var path = ViewContext[context].match(/(\w+)\//)[1];
            var regexp = new RegExp("^/" + path + "/(?:([^/]+)).*$");
            fallbackRoutes.push({
                keys: [{ name: ViewContextLegacyParameter[context], optional: false }],
                regexp: regexp,
                template: template
            });
        }
        /**
         * When asset detail routes (/device/:id,  /group/:id) are matched in Angular Router, ngRoute in
         * angular.js must also have matching generic routes so that the ids can be extracted from the paths and
         * injected in multiple calls (showIf, c8yActions, etc) as properties of $routeParams.
         *
         * The function in src/ngRoute/route.js (angular.js) where the routes are matched is called parseRoute(). This
         * function calls angular.forEach and in turn this function checks for the presence of a forEach method before
         * trying object key iteration.
         * By attaching a non enumerable forEach method to the routes object we guarantee that the fallback generic routes
         * are only matched after any other registered through $routeProvider.when.
         */
        var $route = this.injector.get('$route');
        Object.defineProperty($route.routes, 'forEach', {
            // make non enumerable
            value: function forEach(iterator, context) {
                // tslint:disable-next-line: forin
                for (var key in this) {
                    iterator.call(context, this[key], key, this);
                }
                fallbackRoutes.forEach(function (r) { return iterator.call(context, r); });
            }
        });
        /**
         * Some functions use the current context. As some parts are upgraded and some not, the following updates the
         * angularjs getContext function to resolve always the right context.
         */
        var c8yUiUtil = this.injector.get('c8yUiUtil');
        var _getContext = c8yUiUtil.getContext;
        this.router.events
            .pipe(filter(function (event) { return event instanceof ActivationEnd; }))
            .subscribe(function (event) {
            if (event.snapshot.routeConfig.path === '**') {
                c8yUiUtil.getContext = _getContext;
            }
            else if (event.snapshot.data && event.snapshot.data.context) {
                c8yUiUtil.getContext = function () {
                    return {
                        context: event.snapshot.data.context.replace('/:id', ''),
                        id: event.snapshot.data.contextData.id
                    };
                };
            }
            else {
                c8yUiUtil.getContext = function () { return ({ context: null, id: null }); };
            }
        });
    };
    BridgeService.prototype.fixE2eIssues = function () {
        try {
            var ngZone_1 = this.ngZone;
            var Utils_1 = window.org.cometd.Utils;
            var timeoutFn_1 = Utils_1.setTimeout;
            // tslint:disable-next-line:only-arrow-functions
            Utils_1.setTimeout = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return ngZone_1.runOutsideAngular(function () { return timeoutFn_1.apply(Utils_1, args); });
            };
        }
        catch (e) {
            // do nothing
        }
        try {
            var ace_1 = window.ace;
            var editFn_1 = ace_1.edit;
            var ngZone_2 = this.ngZone;
            // tslint:disable-next-line:only-arrow-functions
            ace_1.edit = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return ngZone_2.runOutsideAngular(function () { return editFn_1.apply(ace_1, args); });
            };
        }
        catch (e) {
            // do nothing
        }
    };
    BridgeService.prototype.setToken = function (token, tfa, type) {
        if (type === void 0) { type = 'Basic'; }
        var c8yAuth = this.injector.get('c8yAuth');
        if (type === 'Basic') {
            c8yAuth.onSetToken({ token: token, type: type });
            if (tfa) {
                c8yAuth.setTFAToken(tfa);
            }
        }
        else {
            c8yAuth.authReady();
        }
    };
    BridgeService.prototype.hookAuth = function () {
        var _this = this;
        this.appState.currentUser.subscribe(function (u) {
            if (u) {
                var headers = _this.fetchClient.getFetchOptions({}).headers;
                _this.injector.get('c8yAuth').headers = function () { return _this.fetchClient.getFetchOptions({}).headers; };
                if (headers.Authorization) {
                    var token = headers.Authorization.match(/basic\s(.*)$/i)[1];
                    if (token) {
                        _this.setToken(token, headers.tfatoken);
                    }
                }
                else {
                    _this.setToken(undefined, headers.tfatoken, 'Oauth');
                }
                _this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: true });
            }
            else {
                _this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: false });
            }
        });
    };
    BridgeService.prototype.hookLanguage = function () {
        var _this = this;
        var first = true;
        this.appState
            .map(function (store) { return store.lang; })
            .subscribe(function (lang) {
            _this.injector.get('c8yLocales').switchToLanguage(lang);
            if (!first) {
                _this.injector.get('$rootScope').$apply();
            }
            first = false;
        });
    };
    BridgeService.prototype.hookTabs = function () {
        var _this = this;
        // Just for instantiation of the c8yAction service
        this.injector.get('c8yActions');
        var $location = this.injector.get('$location');
        var c8yTabs = this.injector.get('c8yTabs');
        var liveTabs = [];
        c8yTabs.addTab = function (tab) {
            liveTabs.push(tslib_1.__assign({}, tab, { label: tab.label || tab.name, path: decodeURIComponent(tab.path) }));
            _this.$liveTabs.next(liveTabs);
        };
        this.$ng1RouteChangeStart.subscribe(function (e) {
            liveTabs = [];
            _this.$liveTabs.next(liveTabs);
        });
        this.$ng1RouteChangeSuccess
            .subscribe(function (e) {
            var path = $location.path();
            if (_this.router.url !== path) {
                _this.router.navigate(path.split('/'), {
                    queryParams: $location.search(),
                    skipLocationChange: true
                });
            }
            if (_this.actionService) {
                _this.actionService.refresh();
            }
        });
        this.$routeChanges = this.$ng1RouteChangeSuccess.pipe(merge(this.fromNg1Event(c8yTabs, c8yTabs.EVENT_UPDATE), of(1)), debounceTime(100));
    };
    BridgeService.prototype.hookNavigator = function () {
        this.navigationNodes$ = this.injector.get('c8yNavigator').rootNodes$;
    };
    BridgeService.prototype.getTabs = function () {
        var _this = this;
        var onlyVisible = function (_a) {
            var show = _a.show;
            return show;
        };
        var upgradeTab = function (tab) { return (tslib_1.__assign({}, tab, { label: tab.label || tab.name, path: decodeURIComponent(tab.path) })); };
        var routeTabs = this.$routeChanges.pipe(switchMap(function () {
            var routes = _this.injector.get('c8yTabs').routeTabs;
            var visibilityPromise = Promise.all(routes.map(function (_a) {
                var checkingVisibility = _a.checkingVisibility;
                return checkingVisibility;
            }));
            return visibilityPromise.then(function () { return routes.filter(onlyVisible).map(upgradeTab); });
        }), startWith([]));
        return combineLatest(routeTabs, this.$liveTabs).pipe(map(function (_a) {
            var _b = tslib_1.__read(_a, 2), route = _b[0], live = _b[1];
            return route.concat(live);
        }));
    };
    BridgeService.prototype.getQuickLinks = function () {
        var c8yQuickLinks = this.injector.get('c8yQuickLinks');
        return c8yQuickLinks.list();
    };
    BridgeService.prototype.getActionBarItems = function () {
        var c8yActionBar = this.injector.get('c8yActionBar');
        var $rootScope = this.injector.get('$rootScope');
        var getActionBarElements = function () {
            return c8yActionBar.elements.map(function (element) { return ({
                priority: element.getAttribute('action-bar-priority') || 0,
                template: element,
                placement: element.getAttribute('action-bar-position') || 'right'
            }); });
        };
        return this.fromNg1Event($rootScope, 'c8yActionBarChanged').pipe(startWith(1), map(getActionBarElements));
    };
    BridgeService.prototype.getBreadcrumbs = function () {
        var $location = this.injector.get('$location');
        var path = $location.path();
        var c8yBreadcrumbs = this.injector.get('c8yBreadcrumbs');
        var breadcrumbs = c8yBreadcrumbs.get(path) || {};
        var breadcrumbsData = breadcrumbs.data ? this.injector.invoke(breadcrumbs.data) : of([]);
        return from(breadcrumbsData).pipe(map(function (value) {
            value = value.concat(c8yBreadcrumbs.getLiveBreadcrumbs());
            return value.map(function (items) { return ({ items: items.slice(0, items.length - 1) }); });
        }));
    };
    BridgeService.prototype.getSearch = function () {
        var c8ySearch = this.injector.get('c8ySearch');
        return c8ySearch.list().map(function (item) {
            return {
                icon: 'search',
                name: item.name,
                term: '',
                onSearch: function () {
                    if (this.term) {
                        c8ySearch.search(this.term);
                    }
                }
            };
        });
    };
    BridgeService.prototype.getActions = function () {
        var _this = this;
        var registeredActions = this.injector.get('c8yActions').registeredActions;
        return of(registeredActions
            .filter(function (action) { return !action.hidden; })
            .map(function (action) { return ({
            // The priority was reversed: Aligned it to dashboard, high first, low last.
            priority: (action.priority || 0) * -1,
            label: action.text,
            icon: action.icon,
            disabled: action.disabled,
            action: function () {
                _this.injector.invoke(action.action, action);
            }
        }); }));
    };
    BridgeService.prototype.fromNg1Event = function (obj, evt) {
        var stopListening;
        function add(handler) {
            stopListening = obj.$on(evt, handler);
        }
        return fromEventPattern(add, function () { return stopListening(); });
    };
    BridgeService.prototype.hookUserMenu = function () {
        var userMenuService = this.injector.get('c8yUserMenuService');
        var c8yAccessDenied = this.injector.get('c8yAccessDenied');
        userMenuService.add({
            icon: 'exclamation-triangle',
            priority: 10,
            label: gettext('Access denied requests'),
            click: c8yAccessDenied.showAccessDeniedRequestsList
        });
    };
    return BridgeService;
}());
export { BridgeService };
export function bridgeServiceFactory(injector, appState, fetchClient, router, ngZone, routerService, actionService) {
    return new BridgeService(injector, appState, fetchClient, router, ngZone, routerService, actionService);
}
export var bridgeServiceProvider = {
    provide: BridgeService,
    useFactory: bridgeServiceFactory,
    deps: ['$injector', AppStateService, FetchClient, Router, NgZone, RouterService, ActionService]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpZGdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJicmlkZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUdMLGFBQWEsRUFDYixlQUFlLEVBR2YsY0FBYyxFQUNkLGFBQWEsRUFHYixXQUFXLEVBQ1gsT0FBTyxFQUVSLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUNMLGVBQWUsRUFHZixhQUFhLEVBQ2IsSUFBSSxFQUNKLGdCQUFnQixFQUNoQixFQUFFLEVBQ0gsTUFBTSxNQUFNLENBQUM7QUFDZCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFRLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRTtJQU1FLHVCQUNTLFFBQWEsRUFDWixRQUF5QixFQUN6QixXQUF3QixFQUN6QixNQUFjLEVBQ2IsTUFBYyxFQUNkLGFBQTRCLEVBQzVCLGFBQTRCO1FBTjdCLGFBQVEsR0FBUixRQUFRLENBQUs7UUFDWixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN6QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FB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SyxFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztZQUN4QyxLQUFLLEVBQUUsZUFBZSxDQUFDLDRCQUE0QjtTQUNwRCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBbldELElBbVdDOztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FDbEMsUUFBYSxFQUNiLFFBQXlCLEVBQ3pCLFdBQXdCLEVBQ3hCLE1BQWMsRUFDZCxNQUFjLEVBQ2QsYUFBNEIsRUFDNUIsYUFBNEI7SUFFNUIsT0FBTyxJQUFJLGFBQWEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUMxRyxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0scUJBQXFCLEdBQUc7SUFDbkMsT0FBTyxFQUFFLGFBQWE7SUFDdEIsVUFBVSxFQUFFLG9CQUFvQjtJQUNoQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUM7Q0FDaEcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFjdGlvbixcbiAgQWN0aW9uQmFySXRlbSxcbiAgQWN0aW9uU2VydmljZSxcbiAgQXBwU3RhdGVTZXJ2aWNlLFxuICBCcmVhZGNydW1iLFxuICBCcmVhZGNydW1iSXRlbSxcbiAgRW1wdHlDb21wb25lbnQsXG4gIFJvdXRlclNlcnZpY2UsXG4gIFNlYXJjaCxcbiAgVGFiLFxuICBWaWV3Q29udGV4dCxcbiAgZ2V0dGV4dCxcbiAgRG9jTGlua1xufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7XG4gIEJlaGF2aW9yU3ViamVjdCxcbiAgT2JzZXJ2YWJsZSxcbiAgU3ViamVjdCxcbiAgY29tYmluZUxhdGVzdCxcbiAgZnJvbSxcbiAgZnJvbUV2ZW50UGF0dGVybixcbiAgb2Zcbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGZpbHRlciwgbWFwLCBtZXJnZSwgc2tpcCwgc3RhcnRXaXRoLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEFjdGl2YXRpb25FbmQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRmV0Y2hDbGllbnQgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBWaWV3Q29udGV4dExlZ2FjeVBhcmFtZXRlciB9IGZyb20gJy4vbmcxL3ZpZXdzLnByb3ZpZGVyJztcblxuZXhwb3J0IGNsYXNzIEJyaWRnZVNlcnZpY2Uge1xuICAkcm91dGVDaGFuZ2VzOiBPYnNlcnZhYmxlPGFueT47XG4gICRuZzFSb3V0ZUNoYW5nZVN1Y2Nlc3M6IE9ic2VydmFibGU8YW55PjtcbiAgJG5nMVJvdXRlQ2hhbmdlU3RhcnQ6IE9ic2VydmFibGU8YW55PjtcbiAgJGxpdmVUYWJzOiBTdWJqZWN0PFRhYltdPiA9IG5ldyBCZWhhdmlvclN1YmplY3QoW10pO1xuICBuYXZpZ2F0aW9uTm9kZXMkOiBPYnNlcnZhYmxlPGFueT47XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBpbmplY3RvcjogYW55LFxuICAgIHByaXZhdGUgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGZldGNoQ2xpZW50OiBGZXRjaENsaWVudCxcbiAgICBwdWJsaWMgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICBwcml2YXRlIHJvdXRlclNlcnZpY2U6IFJvdXRlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBhY3Rpb25TZXJ2aWNlOiBBY3Rpb25TZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuZml4RTJlSXNzdWVzKCk7XG4gICAgdGhpcy4kbmcxUm91dGVDaGFuZ2VTdWNjZXNzID0gdGhpcy5mcm9tTmcxRXZlbnQoXG4gICAgICB0aGlzLmluamVjdG9yLmdldCgnJHJvb3RTY29wZScpLFxuICAgICAgJyRyb3V0ZUNoYW5nZVN1Y2Nlc3MnXG4gICAgKTtcbiAgICB0aGlzLiRuZzFSb3V0ZUNoYW5nZVN0YXJ0ID0gdGhpcy5mcm9tTmcxRXZlbnQoXG4gICAgICB0aGlzLmluamVjdG9yLmdldCgnJHJvb3RTY29wZScpLFxuICAgICAgJyRyb3V0ZUNoYW5nZVN0YXJ0J1xuICAgICk7XG4gICAgdGhpcy5ob29rQXV0aCgpO1xuICAgIHRoaXMuaG9va0xhbmd1YWdlKCk7XG4gICAgdGhpcy5ob29rVGFicygpO1xuICAgIHRoaXMuaG9va05hdmlnYXRvcigpO1xuICAgIHRoaXMuaG9va1VzZXJNZW51KCk7XG4gICAgdGhpcy5ob29rVmlld1Byb3ZpZGVyKCk7XG4gICAgdGhpcy5yb3V0ZXIuaW5pdGlhbE5hdmlnYXRpb24oKTtcbiAgICB0aGlzLm5nMVJvdXRlcygpO1xuICB9XG5cbiAgaG9va1ZpZXdQcm92aWRlcigpIHtcbiAgICBjb25zdCBjOHlWaWV3cyA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlWaWV3cycpO1xuICAgIGM4eVZpZXdzLmNvbnRleHRWaWV3cy5zdWJzY3JpYmUoY2ZnID0+IHRoaXMuYWRkUm91dGUoY2ZnKSk7XG4gIH1cblxuICBhZGRSb3V0ZShjZmcpIHtcbiAgICB0aGlzLnJvdXRlclNlcnZpY2UuYWRkUm91dGUoe1xuICAgICAgbGFiZWw6IGNmZy5sYWJlbCB8fCBjZmcubmFtZSxcbiAgICAgIHBhdGg6IGNmZy5wYXRoLFxuICAgICAgaWNvbjogY2ZnLmljb24sXG4gICAgICBjb250ZXh0OiBWaWV3Q29udGV4dFtjZmcuY29udGV4dEtleV0gYXMgVmlld0NvbnRleHQsXG4gICAgICBwcmlvcml0eTogY2ZnLnByaW9yaXR5LFxuICAgICAgY29tcG9uZW50OiBFbXB0eUNvbXBvbmVudCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc2hvd0lmOiBjZmcuc2hvd0lmXG4gICAgICAgICAgPyBuZ3hSb3V0ZSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAuLi5uZ3hSb3V0ZS5wYXJhbXMsXG4gICAgICAgICAgICAgICAgW1ZpZXdDb250ZXh0TGVnYWN5UGFyYW1ldGVyW2NmZy5jb250ZXh0S2V5XV06IG5neFJvdXRlLnBhcmFtcy5pZFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBjb25zdCBzaG93SWZSZXN1bHQgPSB0aGlzLmluamVjdG9yLmludm9rZShjZmcuc2hvd0lmLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICAkcm91dGVQYXJhbXM6IHBhcmFtc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHNob3dJZiByZXN1bHQgaXMgYSBwcm9taXNlIHdpdGggYm9vbGVhbiByZXN1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmluamVjdG9yXG4gICAgICAgICAgICAgICAgLmdldCgnJHEnKVxuICAgICAgICAgICAgICAgIC53aGVuKHNob3dJZlJlc3VsdClcbiAgICAgICAgICAgICAgICAudGhlbihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChjZmcucnVuUGhhc2UpIHtcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwodGhpcy5yb3V0ZXIudXJsKTtcbiAgICB9XG4gIH1cblxuICBuZzFSb3V0ZXMoKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSAnJztcbiAgICBjb25zdCBmYWxsYmFja1JvdXRlcyA9IFtdO1xuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBmb3JpblxuICAgIGZvciAoY29uc3QgY29udGV4dCBpbiBWaWV3Q29udGV4dCkge1xuICAgICAgY29uc3QgcGF0aCA9IFZpZXdDb250ZXh0W2NvbnRleHRdLm1hdGNoKC8oXFx3KylcXC8vKVsxXTtcbiAgICAgIGNvbnN0IHJlZ2V4cCA9IG5ldyBSZWdFeHAoYF4vJHtwYXRofS8oPzooW14vXSspKS4qJGApO1xuICAgICAgZmFsbGJhY2tSb3V0ZXMucHVzaCh7XG4gICAgICAgIGtleXM6IFt7IG5hbWU6IFZpZXdDb250ZXh0TGVnYWN5UGFyYW1ldGVyW2NvbnRleHRdLCBvcHRpb25hbDogZmFsc2UgfV0sXG4gICAgICAgIHJlZ2V4cCxcbiAgICAgICAgdGVtcGxhdGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gYXNzZXQgZGV0YWlsIHJvdXRlcyAoL2RldmljZS86aWQsICAvZ3JvdXAvOmlkKSBhcmUgbWF0Y2hlZCBpbiBBbmd1bGFyIFJvdXRlciwgbmdSb3V0ZSBpblxuICAgICAqIGFuZ3VsYXIuanMgbXVzdCBhbHNvIGhhdmUgbWF0Y2hpbmcgZ2VuZXJpYyByb3V0ZXMgc28gdGhhdCB0aGUgaWRzIGNhbiBiZSBleHRyYWN0ZWQgZnJvbSB0aGUgcGF0aHMgYW5kXG4gICAgICogaW5qZWN0ZWQgaW4gbXVsdGlwbGUgY2FsbHMgKHNob3dJZiwgYzh5QWN0aW9ucywgZXRjKSBhcyBwcm9wZXJ0aWVzIG9mICRyb3V0ZVBhcmFtcy5cbiAgICAgKlxuICAgICAqIFRoZSBmdW5jdGlvbiBpbiBzcmMvbmdSb3V0ZS9yb3V0ZS5qcyAoYW5ndWxhci5qcykgd2hlcmUgdGhlIHJvdXRlcyBhcmUgbWF0Y2hlZCBpcyBjYWxsZWQgcGFyc2VSb3V0ZSgpLiBUaGlzXG4gICAgICogZnVuY3Rpb24gY2FsbHMgYW5ndWxhci5mb3JFYWNoIGFuZCBpbiB0dXJuIHRoaXMgZnVuY3Rpb24gY2hlY2tzIGZvciB0aGUgcHJlc2VuY2Ugb2YgYSBmb3JFYWNoIG1ldGhvZCBiZWZvcmVcbiAgICAgKiB0cnlpbmcgb2JqZWN0IGtleSBpdGVyYXRpb24uXG4gICAgICogQnkgYXR0YWNoaW5nIGEgbm9uIGVudW1lcmFibGUgZm9yRWFjaCBtZXRob2QgdG8gdGhlIHJvdXRlcyBvYmplY3Qgd2UgZ3VhcmFudGVlIHRoYXQgdGhlIGZhbGxiYWNrIGdlbmVyaWMgcm91dGVzXG4gICAgICogYXJlIG9ubHkgbWF0Y2hlZCBhZnRlciBhbnkgb3RoZXIgcmVnaXN0ZXJlZCB0aHJvdWdoICRyb3V0ZVByb3ZpZGVyLndoZW4uXG4gICAgICovXG4gICAgY29uc3QgJHJvdXRlID0gdGhpcy5pbmplY3Rvci5nZXQoJyRyb3V0ZScpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSgkcm91dGUucm91dGVzLCAnZm9yRWFjaCcsIHtcbiAgICAgIC8vIG1ha2Ugbm9uIGVudW1lcmFibGVcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZm9yaW5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcykge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdGhpc1trZXldLCBrZXksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGZhbGxiYWNrUm91dGVzLmZvckVhY2gociA9PiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHIpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNvbWUgZnVuY3Rpb25zIHVzZSB0aGUgY3VycmVudCBjb250ZXh0LiBBcyBzb21lIHBhcnRzIGFyZSB1cGdyYWRlZCBhbmQgc29tZSBub3QsIHRoZSBmb2xsb3dpbmcgdXBkYXRlcyB0aGVcbiAgICAgKiBhbmd1bGFyanMgZ2V0Q29udGV4dCBmdW5jdGlvbiB0byByZXNvbHZlIGFsd2F5cyB0aGUgcmlnaHQgY29udGV4dC5cbiAgICAgKi9cbiAgICBjb25zdCBjOHlVaVV0aWwgPSB0aGlzLmluamVjdG9yLmdldCgnYzh5VWlVdGlsJyk7XG4gICAgY29uc3QgX2dldENvbnRleHQgPSBjOHlVaVV0aWwuZ2V0Q29udGV4dDtcbiAgICB0aGlzLnJvdXRlci5ldmVudHNcbiAgICAgIC5waXBlKGZpbHRlcihldmVudCA9PiBldmVudCBpbnN0YW5jZW9mIEFjdGl2YXRpb25FbmQpKVxuICAgICAgLnN1YnNjcmliZSgoZXZlbnQ6IEFjdGl2YXRpb25FbmQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnNuYXBzaG90LnJvdXRlQ29uZmlnLnBhdGggPT09ICcqKicpIHtcbiAgICAgICAgICBjOHlVaVV0aWwuZ2V0Q29udGV4dCA9IF9nZXRDb250ZXh0O1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnNuYXBzaG90LmRhdGEgJiYgZXZlbnQuc25hcHNob3QuZGF0YS5jb250ZXh0KSB7XG4gICAgICAgICAgYzh5VWlVdGlsLmdldENvbnRleHQgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBjb250ZXh0OiBldmVudC5zbmFwc2hvdC5kYXRhLmNvbnRleHQucmVwbGFjZSgnLzppZCcsICcnKSxcbiAgICAgICAgICAgICAgaWQ6IGV2ZW50LnNuYXBzaG90LmRhdGEuY29udGV4dERhdGEuaWRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjOHlVaVV0aWwuZ2V0Q29udGV4dCA9ICgpID0+ICh7IGNvbnRleHQ6IG51bGwsIGlkOiBudWxsIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGZpeEUyZUlzc3VlcygpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBuZ1pvbmUgfSA9IHRoaXM7XG4gICAgICBjb25zdCB7IFV0aWxzIH0gPSAod2luZG93IGFzIGFueSkub3JnLmNvbWV0ZDtcbiAgICAgIGNvbnN0IHRpbWVvdXRGbiA9IFV0aWxzLnNldFRpbWVvdXQ7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6b25seS1hcnJvdy1mdW5jdGlvbnNcbiAgICAgIFV0aWxzLnNldFRpbWVvdXQgPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBuZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGltZW91dEZuLmFwcGx5KFV0aWxzLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBhY2UgfSA9IHdpbmRvdyBhcyBhbnk7XG4gICAgICBjb25zdCBlZGl0Rm4gPSBhY2UuZWRpdDtcbiAgICAgIGNvbnN0IHsgbmdab25lIH0gPSB0aGlzO1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9ubHktYXJyb3ctZnVuY3Rpb25zXG4gICAgICBhY2UuZWRpdCA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBlZGl0Rm4uYXBwbHkoYWNlLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG4gIH1cblxuICBzZXRUb2tlbih0b2tlbj86IHN0cmluZywgdGZhPzogc3RyaW5nLCB0eXBlID0gJ0Jhc2ljJykge1xuICAgIGNvbnN0IGM4eUF1dGggPSB0aGlzLmluamVjdG9yLmdldCgnYzh5QXV0aCcpO1xuICAgIGlmICh0eXBlID09PSAnQmFzaWMnKSB7XG4gICAgICBjOHlBdXRoLm9uU2V0VG9rZW4oeyB0b2tlbiwgdHlwZSB9KTtcbiAgICAgIGlmICh0ZmEpIHtcbiAgICAgICAgYzh5QXV0aC5zZXRURkFUb2tlbih0ZmEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjOHlBdXRoLmF1dGhSZWFkeSgpO1xuICAgIH1cbiAgfVxuXG4gIGhvb2tBdXRoKCkge1xuICAgIHRoaXMuYXBwU3RhdGUuY3VycmVudFVzZXIuc3Vic2NyaWJlKHUgPT4ge1xuICAgICAgaWYgKHUpIHtcbiAgICAgICAgY29uc3QgeyBoZWFkZXJzIH0gPSB0aGlzLmZldGNoQ2xpZW50LmdldEZldGNoT3B0aW9ucyh7fSk7XG4gICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlBdXRoJykuaGVhZGVycyA9ICgpID0+IHRoaXMuZmV0Y2hDbGllbnQuZ2V0RmV0Y2hPcHRpb25zKHt9KS5oZWFkZXJzO1xuICAgICAgICBpZiAoaGVhZGVycy5BdXRob3JpemF0aW9uKSB7XG4gICAgICAgICAgY29uc3QgdG9rZW4gPSBoZWFkZXJzLkF1dGhvcml6YXRpb24ubWF0Y2goL2Jhc2ljXFxzKC4qKSQvaSlbMV07XG4gICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnNldFRva2VuKHRva2VuLCBoZWFkZXJzLnRmYXRva2VuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRUb2tlbih1bmRlZmluZWQsIGhlYWRlcnMudGZhdG9rZW4sICdPYXV0aCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KCckcm9vdFNjb3BlJykuJGVtaXQoJ2F1dGhTdGF0ZUNoYW5nZScsIHsgaGFzQXV0aDogdHJ1ZSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KCckcm9vdFNjb3BlJykuJGVtaXQoJ2F1dGhTdGF0ZUNoYW5nZScsIHsgaGFzQXV0aDogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBob29rTGFuZ3VhZ2UoKSB7XG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICB0aGlzLmFwcFN0YXRlXG4gICAgICAubWFwKHN0b3JlID0+IHN0b3JlLmxhbmcpXG4gICAgICAuc3Vic2NyaWJlKGxhbmcgPT4ge1xuICAgICAgICB0aGlzLmluamVjdG9yLmdldCgnYzh5TG9jYWxlcycpLnN3aXRjaFRvTGFuZ3VhZ2UobGFuZyk7XG4gICAgICAgIGlmICghZmlyc3QpIHtcbiAgICAgICAgICB0aGlzLmluamVjdG9yLmdldCgnJHJvb3RTY29wZScpLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICB9KTtcbiAgfVxuXG4gIGhvb2tUYWJzKCkge1xuICAgIC8vIEp1c3QgZm9yIGluc3RhbnRpYXRpb24gb2YgdGhlIGM4eUFjdGlvbiBzZXJ2aWNlXG4gICAgdGhpcy5pbmplY3Rvci5nZXQoJ2M4eUFjdGlvbnMnKTtcbiAgICBjb25zdCAkbG9jYXRpb24gPSB0aGlzLmluamVjdG9yLmdldCgnJGxvY2F0aW9uJyk7XG4gICAgY29uc3QgYzh5VGFicyA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlUYWJzJyk7XG4gICAgbGV0IGxpdmVUYWJzID0gW107XG4gICAgYzh5VGFicy5hZGRUYWIgPSB0YWIgPT4ge1xuICAgICAgbGl2ZVRhYnMucHVzaCh7XG4gICAgICAgIC4uLnRhYixcbiAgICAgICAgbGFiZWw6IHRhYi5sYWJlbCB8fCB0YWIubmFtZSxcbiAgICAgICAgcGF0aDogZGVjb2RlVVJJQ29tcG9uZW50KHRhYi5wYXRoKVxuICAgICAgfSk7XG4gICAgICB0aGlzLiRsaXZlVGFicy5uZXh0KGxpdmVUYWJzKTtcbiAgICB9O1xuICAgIHRoaXMuJG5nMVJvdXRlQ2hhbmdlU3RhcnQuc3Vic2NyaWJlKGUgPT4ge1xuICAgICAgbGl2ZVRhYnMgPSBbXTtcbiAgICAgIHRoaXMuJGxpdmVUYWJzLm5leHQobGl2ZVRhYnMpO1xuICAgIH0pO1xuICAgIHRoaXMuJG5nMVJvdXRlQ2hhbmdlU3VjY2Vzc1xuICAgICAgLnN1YnNjcmliZShlID0+IHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICRsb2NhdGlvbi5wYXRoKCk7XG4gICAgICAgIGlmICh0aGlzLnJvdXRlci51cmwgIT09IHBhdGgpIHtcbiAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShwYXRoLnNwbGl0KCcvJyksIHtcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zOiAkbG9jYXRpb24uc2VhcmNoKCksXG4gICAgICAgICAgICBza2lwTG9jYXRpb25DaGFuZ2U6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hY3Rpb25TZXJ2aWNlKSB7XG4gICAgICAgICAgdGhpcy5hY3Rpb25TZXJ2aWNlLnJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgdGhpcy4kcm91dGVDaGFuZ2VzID0gdGhpcy4kbmcxUm91dGVDaGFuZ2VTdWNjZXNzLnBpcGUoXG4gICAgICBtZXJnZSh0aGlzLmZyb21OZzFFdmVudChjOHlUYWJzLCBjOHlUYWJzLkVWRU5UX1VQREFURSksIG9mKDEpKSxcbiAgICAgIGRlYm91bmNlVGltZSgxMDApXG4gICAgKTtcbiAgfVxuXG4gIGhvb2tOYXZpZ2F0b3IoKSB7XG4gICAgdGhpcy5uYXZpZ2F0aW9uTm9kZXMkID0gdGhpcy5pbmplY3Rvci5nZXQoJ2M4eU5hdmlnYXRvcicpLnJvb3ROb2RlcyQ7XG4gIH1cblxuICBnZXRUYWJzKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3Qgb25seVZpc2libGUgPSAoeyBzaG93IH0pID0+IHNob3c7XG4gICAgY29uc3QgdXBncmFkZVRhYiA9IHRhYiA9PiAoe1xuICAgICAgLi4udGFiLFxuICAgICAgbGFiZWw6IHRhYi5sYWJlbCB8fCB0YWIubmFtZSxcbiAgICAgIHBhdGg6IGRlY29kZVVSSUNvbXBvbmVudCh0YWIucGF0aClcbiAgICB9KTtcbiAgICBjb25zdCByb3V0ZVRhYnMgPSB0aGlzLiRyb3V0ZUNoYW5nZXMucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJvdXRlcyA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlUYWJzJykucm91dGVUYWJzO1xuICAgICAgICBjb25zdCB2aXNpYmlsaXR5UHJvbWlzZSA9IFByb21pc2UuYWxsKFxuICAgICAgICAgIHJvdXRlcy5tYXAoKHsgY2hlY2tpbmdWaXNpYmlsaXR5IH0pID0+IGNoZWNraW5nVmlzaWJpbGl0eSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHZpc2liaWxpdHlQcm9taXNlLnRoZW4oKCkgPT4gcm91dGVzLmZpbHRlcihvbmx5VmlzaWJsZSkubWFwKHVwZ3JhZGVUYWIpKTtcbiAgICAgIH0pLFxuICAgICAgc3RhcnRXaXRoKFtdKVxuICAgICk7XG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3Qocm91dGVUYWJzLCB0aGlzLiRsaXZlVGFicykucGlwZShcbiAgICAgIG1hcCgoW3JvdXRlLCBsaXZlXSkgPT4gcm91dGUuY29uY2F0KGxpdmUpKVxuICAgICk7XG4gIH1cblxuICBnZXRRdWlja0xpbmtzKCk6IFByb21pc2U8RG9jTGlua1tdPiB7XG4gICAgY29uc3QgYzh5UXVpY2tMaW5rcyA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlRdWlja0xpbmtzJyk7XG4gICAgcmV0dXJuIGM4eVF1aWNrTGlua3MubGlzdCgpO1xuICB9XG5cbiAgZ2V0QWN0aW9uQmFySXRlbXMoKTogT2JzZXJ2YWJsZTxBY3Rpb25CYXJJdGVtPiB7XG4gICAgY29uc3QgYzh5QWN0aW9uQmFyID0gdGhpcy5pbmplY3Rvci5nZXQoJ2M4eUFjdGlvbkJhcicpO1xuICAgIGNvbnN0ICRyb290U2NvcGUgPSB0aGlzLmluamVjdG9yLmdldCgnJHJvb3RTY29wZScpO1xuICAgIGNvbnN0IGdldEFjdGlvbkJhckVsZW1lbnRzID0gKCkgPT5cbiAgICAgIGM4eUFjdGlvbkJhci5lbGVtZW50cy5tYXAoZWxlbWVudCA9PiAoe1xuICAgICAgICBwcmlvcml0eTogZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FjdGlvbi1iYXItcHJpb3JpdHknKSB8fCAwLFxuICAgICAgICB0ZW1wbGF0ZTogZWxlbWVudCxcbiAgICAgICAgcGxhY2VtZW50OiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYWN0aW9uLWJhci1wb3NpdGlvbicpIHx8ICdyaWdodCdcbiAgICAgIH0pKTtcbiAgICByZXR1cm4gdGhpcy5mcm9tTmcxRXZlbnQoJHJvb3RTY29wZSwgJ2M4eUFjdGlvbkJhckNoYW5nZWQnKS5waXBlKFxuICAgICAgc3RhcnRXaXRoKDEpLFxuICAgICAgbWFwKGdldEFjdGlvbkJhckVsZW1lbnRzKVxuICAgICk7XG4gIH1cblxuICBnZXRCcmVhZGNydW1icygpOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT4ge1xuICAgIGNvbnN0ICRsb2NhdGlvbiA9IHRoaXMuaW5qZWN0b3IuZ2V0KCckbG9jYXRpb24nKTtcbiAgICBjb25zdCBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcbiAgICBjb25zdCBjOHlCcmVhZGNydW1icyA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlCcmVhZGNydW1icycpO1xuICAgIGNvbnN0IGJyZWFkY3J1bWJzID0gYzh5QnJlYWRjcnVtYnMuZ2V0KHBhdGgpIHx8IHt9O1xuICAgIGNvbnN0IGJyZWFkY3J1bWJzRGF0YSA9IGJyZWFkY3J1bWJzLmRhdGEgPyB0aGlzLmluamVjdG9yLmludm9rZShicmVhZGNydW1icy5kYXRhKSA6IG9mKFtdKTtcbiAgICByZXR1cm4gZnJvbShicmVhZGNydW1ic0RhdGEpLnBpcGUoXG4gICAgICBtYXAoKHZhbHVlOiBhbnlbXSkgPT4ge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmNvbmNhdChjOHlCcmVhZGNydW1icy5nZXRMaXZlQnJlYWRjcnVtYnMoKSk7XG4gICAgICAgIHJldHVybiB2YWx1ZS5tYXAoXG4gICAgICAgICAgaXRlbXMgPT4gKHsgaXRlbXM6IGl0ZW1zLnNsaWNlKDAsIGl0ZW1zLmxlbmd0aCAtIDEpIGFzIEJyZWFkY3J1bWJJdGVtW10gfSBhcyBCcmVhZGNydW1iKVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgZ2V0U2VhcmNoKCk6IFNlYXJjaFtdIHtcbiAgICBjb25zdCBjOHlTZWFyY2ggPSB0aGlzLmluamVjdG9yLmdldCgnYzh5U2VhcmNoJyk7XG4gICAgcmV0dXJuIGM4eVNlYXJjaC5saXN0KCkubWFwKGl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWNvbjogJ3NlYXJjaCcsXG4gICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgdGVybTogJycsXG4gICAgICAgIG9uU2VhcmNoKCkge1xuICAgICAgICAgIGlmICh0aGlzLnRlcm0pIHtcbiAgICAgICAgICAgIGM4eVNlYXJjaC5zZWFyY2godGhpcy50ZXJtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gYXMgU2VhcmNoO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0QWN0aW9ucygpOiBPYnNlcnZhYmxlPEFjdGlvbj4ge1xuICAgIGNvbnN0IHJlZ2lzdGVyZWRBY3Rpb25zID0gdGhpcy5pbmplY3Rvci5nZXQoJ2M4eUFjdGlvbnMnKS5yZWdpc3RlcmVkQWN0aW9ucztcbiAgICByZXR1cm4gb2YoXG4gICAgICByZWdpc3RlcmVkQWN0aW9uc1xuICAgICAgICAuZmlsdGVyKGFjdGlvbiA9PiAhYWN0aW9uLmhpZGRlbilcbiAgICAgICAgLm1hcChhY3Rpb24gPT4gKHtcbiAgICAgICAgICAvLyBUaGUgcHJpb3JpdHkgd2FzIHJldmVyc2VkOiBBbGlnbmVkIGl0IHRvIGRhc2hib2FyZCwgaGlnaCBmaXJzdCwgbG93IGxhc3QuXG4gICAgICAgICAgcHJpb3JpdHk6IChhY3Rpb24ucHJpb3JpdHkgfHwgMCkgKiAtMSxcbiAgICAgICAgICBsYWJlbDogYWN0aW9uLnRleHQsXG4gICAgICAgICAgaWNvbjogYWN0aW9uLmljb24sXG4gICAgICAgICAgZGlzYWJsZWQ6IGFjdGlvbi5kaXNhYmxlZCxcbiAgICAgICAgICBhY3Rpb246ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5qZWN0b3IuaW52b2tlKGFjdGlvbi5hY3Rpb24sIGFjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KSlcbiAgICApO1xuICB9XG5cbiAgZnJvbU5nMUV2ZW50KG9iaiwgZXZ0KSB7XG4gICAgbGV0IHN0b3BMaXN0ZW5pbmc7XG4gICAgZnVuY3Rpb24gYWRkKGhhbmRsZXIpIHtcbiAgICAgIHN0b3BMaXN0ZW5pbmcgPSBvYmouJG9uKGV2dCwgaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuKGFkZCwgKCkgPT4gc3RvcExpc3RlbmluZygpKTtcbiAgfVxuXG4gIHByaXZhdGUgaG9va1VzZXJNZW51KCkge1xuICAgIGNvbnN0IHVzZXJNZW51U2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlVc2VyTWVudVNlcnZpY2UnKTtcbiAgICBjb25zdCBjOHlBY2Nlc3NEZW5pZWQgPSB0aGlzLmluamVjdG9yLmdldCgnYzh5QWNjZXNzRGVuaWVkJyk7XG4gICAgdXNlck1lbnVTZXJ2aWNlLmFkZCh7XG4gICAgICBpY29uOiAnZXhjbGFtYXRpb24tdHJpYW5nbGUnLFxuICAgICAgcHJpb3JpdHk6IDEwLFxuICAgICAgbGFiZWw6IGdldHRleHQoJ0FjY2VzcyBkZW5pZWQgcmVxdWVzdHMnKSxcbiAgICAgIGNsaWNrOiBjOHlBY2Nlc3NEZW5pZWQuc2hvd0FjY2Vzc0RlbmllZFJlcXVlc3RzTGlzdFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicmlkZ2VTZXJ2aWNlRmFjdG9yeShcbiAgaW5qZWN0b3I6IGFueSxcbiAgYXBwU3RhdGU6IEFwcFN0YXRlU2VydmljZSxcbiAgZmV0Y2hDbGllbnQ6IEZldGNoQ2xpZW50LFxuICByb3V0ZXI6IFJvdXRlcixcbiAgbmdab25lOiBOZ1pvbmUsXG4gIHJvdXRlclNlcnZpY2U6IFJvdXRlclNlcnZpY2UsXG4gIGFjdGlvblNlcnZpY2U6IEFjdGlvblNlcnZpY2Vcbikge1xuICByZXR1cm4gbmV3IEJyaWRnZVNlcnZpY2UoaW5qZWN0b3IsIGFwcFN0YXRlLCBmZXRjaENsaWVudCwgcm91dGVyLCBuZ1pvbmUsIHJvdXRlclNlcnZpY2UsIGFjdGlvblNlcnZpY2UpO1xufVxuXG5leHBvcnQgY29uc3QgYnJpZGdlU2VydmljZVByb3ZpZGVyID0ge1xuICBwcm92aWRlOiBCcmlkZ2VTZXJ2aWNlLFxuICB1c2VGYWN0b3J5OiBicmlkZ2VTZXJ2aWNlRmFjdG9yeSxcbiAgZGVwczogWyckaW5qZWN0b3InLCBBcHBTdGF0ZVNlcnZpY2UsIEZldGNoQ2xpZW50LCBSb3V0ZXIsIE5nWm9uZSwgUm91dGVyU2VydmljZSwgQWN0aW9uU2VydmljZV1cbn07XG4iXX0=