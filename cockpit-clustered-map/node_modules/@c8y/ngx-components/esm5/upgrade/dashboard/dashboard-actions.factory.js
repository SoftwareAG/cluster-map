import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ViewContext } from '@c8y/ngx-components';
import { CopyActionComponent } from './copy-action.component';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { PasteActionComponent } from './paste-action.component';
var Ng1DashboardActionFactoryService = /** @class */ (function () {
    function Ng1DashboardActionFactoryService(dashboardBridgeService) {
        this.dashboardBridgeService = dashboardBridgeService;
    }
    Ng1DashboardActionFactoryService.prototype.get = function (activeRoute) {
        var actions = [];
        var data = !activeRoute.parent || activeRoute.snapshot.data.context
            ? activeRoute.snapshot.data
            : activeRoute.parent.snapshot.data;
        var contextData = data.contextData;
        var isDashboard = contextData && activeRoute.snapshot.data.dashboard;
        var canPaste = contextData &&
            [ViewContext.Device, ViewContext.Group].includes(data.context) &&
            this.dashboardBridgeService.dashboardClipboard;
        if (isDashboard) {
            actions.push({
                priority: -20,
                placement: 'more',
                template: CopyActionComponent
            });
        }
        if (canPaste) {
            actions.push({
                priority: -10,
                placement: 'more',
                template: PasteActionComponent
            });
        }
        return actions;
    };
    Ng1DashboardActionFactoryService.ctorParameters = function () { return [
        { type: DashboardBridgeService }
    ]; };
    Ng1DashboardActionFactoryService = tslib_1.__decorate([
        Injectable()
    ], Ng1DashboardActionFactoryService);
    return Ng1DashboardActionFactoryService;
}());
export { Ng1DashboardActionFactoryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvdXBncmFkZS8iLCJzb3VyY2VzIjpbImRhc2hib2FyZC9kYXNoYm9hcmQtYWN0aW9ucy5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBbUMsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHaEU7SUFDRSwwQ0FBb0Isc0JBQThDO1FBQTlDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7SUFBRyxDQUFDO0lBRXRFLDhDQUFHLEdBQUgsVUFBSSxXQUE0QjtRQUM5QixJQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBTSxJQUFJLEdBQ1IsQ0FBQyxXQUFXLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDdEQsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSTtZQUMzQixDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUEsOEJBQVcsQ0FBVTtRQUM3QixJQUFNLFdBQVcsR0FBRyxXQUFXLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3ZFLElBQU0sUUFBUSxHQUNaLFdBQVc7WUFDWCxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzlELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQztRQUVqRCxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsUUFBUSxFQUFFLENBQUMsRUFBRTtnQkFDYixTQUFTLEVBQUUsTUFBTTtnQkFDakIsUUFBUSxFQUFFLG1CQUFtQjthQUNiLENBQUMsQ0FBQztTQUNyQjtRQUVELElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDWCxRQUFRLEVBQUUsQ0FBQyxFQUFFO2dCQUNiLFNBQVMsRUFBRSxNQUFNO2dCQUNqQixRQUFRLEVBQUUsb0JBQW9CO2FBQ2QsQ0FBQyxDQUFDO1NBQ3JCO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7Z0JBaEMyQyxzQkFBc0I7O0lBRHZELGdDQUFnQztRQUQ1QyxVQUFVLEVBQUU7T0FDQSxnQ0FBZ0MsQ0FrQzVDO0lBQUQsdUNBQUM7Q0FBQSxBQWxDRCxJQWtDQztTQWxDWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBY3Rpb25CYXJGYWN0b3J5LCBBY3Rpb25CYXJJdGVtLCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQ29weUFjdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vY29weS1hY3Rpb24uY29tcG9uZW50JztcbmltcG9ydCB7IERhc2hib2FyZEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBQYXN0ZUFjdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vcGFzdGUtYWN0aW9uLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZzFEYXNoYm9hcmRBY3Rpb25GYWN0b3J5U2VydmljZSBpbXBsZW1lbnRzIEFjdGlvbkJhckZhY3Rvcnkge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhc2hib2FyZEJyaWRnZVNlcnZpY2U6IERhc2hib2FyZEJyaWRnZVNlcnZpY2UpIHt9XG5cbiAgZ2V0KGFjdGl2ZVJvdXRlPzogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBjb25zdCBhY3Rpb25zID0gW107XG4gICAgY29uc3QgZGF0YSA9XG4gICAgICAhYWN0aXZlUm91dGUucGFyZW50IHx8IGFjdGl2ZVJvdXRlLnNuYXBzaG90LmRhdGEuY29udGV4dFxuICAgICAgICA/IGFjdGl2ZVJvdXRlLnNuYXBzaG90LmRhdGFcbiAgICAgICAgOiBhY3RpdmVSb3V0ZS5wYXJlbnQuc25hcHNob3QuZGF0YTtcbiAgICBjb25zdCB7IGNvbnRleHREYXRhIH0gPSBkYXRhO1xuICAgIGNvbnN0IGlzRGFzaGJvYXJkID0gY29udGV4dERhdGEgJiYgYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YS5kYXNoYm9hcmQ7XG4gICAgY29uc3QgY2FuUGFzdGUgPVxuICAgICAgY29udGV4dERhdGEgJiZcbiAgICAgIFtWaWV3Q29udGV4dC5EZXZpY2UsIFZpZXdDb250ZXh0Lkdyb3VwXS5pbmNsdWRlcyhkYXRhLmNvbnRleHQpICYmXG4gICAgICB0aGlzLmRhc2hib2FyZEJyaWRnZVNlcnZpY2UuZGFzaGJvYXJkQ2xpcGJvYXJkO1xuXG4gICAgaWYgKGlzRGFzaGJvYXJkKSB7XG4gICAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogLTIwLFxuICAgICAgICBwbGFjZW1lbnQ6ICdtb3JlJyxcbiAgICAgICAgdGVtcGxhdGU6IENvcHlBY3Rpb25Db21wb25lbnRcbiAgICAgIH0gYXMgQWN0aW9uQmFySXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKGNhblBhc3RlKSB7XG4gICAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogLTEwLFxuICAgICAgICBwbGFjZW1lbnQ6ICdtb3JlJyxcbiAgICAgICAgdGVtcGxhdGU6IFBhc3RlQWN0aW9uQ29tcG9uZW50XG4gICAgICB9IGFzIEFjdGlvbkJhckl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb25zO1xuICB9XG59XG4iXX0=