import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { getActivatedRoute } from '@c8y/ngx-components';
import { ContextDashboardService, ContextDashboardManagedObject, ContextWidgetConfig } from '@c8y/ngx-components/context-dashboard';
import { gettext } from '@c8y/ngx-components';
import { get } from 'lodash-es';
var DashboardBridgeService = /** @class */ (function () {
    function DashboardBridgeService(ng1Injector, zone, router, contextDashboardService) {
        this.ng1Injector = ng1Injector;
        this.zone = zone;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.dashboardSvc = ng1Injector.get('dashboardSvc');
        this.compile = ng1Injector.get('$compile');
    }
    Object.defineProperty(DashboardBridgeService.prototype, "ng1Components", {
        get: function () {
            return this.ng1Injector.get('c8yComponents');
        },
        enumerable: true,
        configurable: true
    });
    DashboardBridgeService.prototype.instantiateComponent = function (widget, element) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var dashboard, context, child, transformedChild_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dashboard = widget.dashboard, context = widget.context, child = widget.child;
                        if (!dashboard) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.dashboardSvc.transformChildWithContext(this.dashboardSvc.forcedContext || context, dashboard, child)];
                    case 1:
                        transformedChild_1 = _a.sent();
                        if (!(this.dashboardSvc.forcedContext || dashboard.deviceType)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.dashboardSvc.updateConfigTargetsWithContext(this.dashboardSvc.forcedContext || context, transformedChild_1.config)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, this.zone.runOutsideAngular(function () {
                            return _this.loadTemplate(transformedChild_1, child, element, context);
                        })];
                    case 4: return [2 /*return*/, this.loadConfigTemplate(element, widget)];
                }
            });
        });
    };
    DashboardBridgeService.prototype.editDashboard = function (dashboard) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.dashboardSvc.editCurrentDashboard({ dashboardId: dashboard.id })];
            });
        });
    };
    DashboardBridgeService.prototype.copyDashboard = function () {
        var dashboard = this.getDashboard();
        var couldCopy = this.dashboardSvc.copyDashboard(dashboard.c8y_Dashboard);
        if (couldCopy) {
            this.dashboardClipboard = dashboard;
            return dashboard;
        }
    };
    DashboardBridgeService.prototype.pasteDashboard = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var newDashboard, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.dashboardSvc.pasteDashboard()];
                    case 1:
                        newDashboard = _a.sent();
                        return [4 /*yield*/, this.contextDashboardService.addTab(newDashboard)];
                    case 2:
                        _a.sent();
                        this.navigateToDashboard(newDashboard);
                        this.dashboardClipboard = undefined;
                        return [3 /*break*/, 4];
                    case 3:
                        ex_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    DashboardBridgeService.prototype.instantiateDeviceSelector = function (element, widgetConfig) {
        return this.loadConfigTemplate(element, widgetConfig, true);
    };
    DashboardBridgeService.prototype.loadTemplate = function (transformedChild, child, element, context) {
        var scope = this.ng1Injector.get('$rootScope').$new(true);
        scope.child = transformedChild;
        scope.dashboardContext = context;
        if (child.widgetComponent) {
            element.innerHTML = "<c8y-ui-component component-name=\"'" + child.widgetComponent + "'\" config=\"child.config\" context=\"dashboardContext\"></c8y-ui-component>";
        }
        else if (child.templateUrl) {
            element.innerHTML = "<ng-include src=\"'" + child.templateUrl + "'\"></ng-include>";
        }
        this.compile(element)(scope);
        return scope;
    };
    DashboardBridgeService.prototype.navigateToDashboard = function (dashboard) {
        if (/dashboard/.test(this.router.url)) {
            this.router.navigate(['..', dashboard.id], {
                relativeTo: getActivatedRoute(this.router)
            });
        }
        else {
            this.router.navigate(['..', 'dashboard', dashboard.id], {
                relativeTo: getActivatedRoute(this.router)
            });
        }
    };
    DashboardBridgeService.prototype.getDashboard = function () {
        return getActivatedRoute(this.router).snapshot.data.dashboard;
    };
    DashboardBridgeService.prototype.loadConfigTemplate = function (element, widgetConfig, onlyDeviceSelector) {
        var _this = this;
        if (onlyDeviceSelector === void 0) { onlyDeviceSelector = false; }
        var settings = widgetConfig.settings;
        var scope = this.ng1Injector.get('$rootScope').$new(true);
        scope.settings = tslib_1.__assign({}, settings, settings.ng1);
        scope.options = widgetConfig.options;
        scope.config = widgetConfig;
        scope.forms = {};
        scope.rootId = settings.context.id;
        scope.dashboard = get(widgetConfig, 'settings.dashboardMo');
        var configCmp = '';
        if (!onlyDeviceSelector) {
            if (widgetConfig.settings.configComponent) {
                configCmp = "<c8y-ui-component component-name=\"'" + widgetConfig.settings.configComponent + "'\" config=\"config\"></c8y-ui-component>";
            }
            else if (widgetConfig.settings.configTemplateUrl) {
                configCmp = "<ng-include src=\"'" + widgetConfig.settings.configTemplateUrl + "'\"></ng-include>";
            }
        }
        element.innerHTML = "\n    <ng-form name=\"forms.componentForm\">\n      <div class=\"form-group\"\n        ng-if=\"!settings.noDeviceTarget\"\n        ng-style=\"{height: settings.hideTarget && '0', overflow: 'hidden'}\"\n      >\n        <label translate>" + gettext('Target assets or devices') + "</label>\n        <c8y-device-selector-combo parent=\"rootId\"\n          selected-child-device=\"config.device\"\n          groups-selectable=\"settings.groupsSelectable\"\n        ></c8y-device-selector-combo>\n      </div>\n      " + configCmp + "\n    </ng-form>";
        scope.$watch('forms.componentForm.$invalid', function (formStatus) {
            _this.contextDashboardService.formDisabled = formStatus;
        });
        this.compile(element)(scope);
        this.contextDashboardService.formDisabled = scope.forms.componentForm.$invalid;
        return scope;
    };
    DashboardBridgeService.ctorParameters = function () { return [
        { type: undefined },
        { type: NgZone },
        { type: Router },
        { type: ContextDashboardService }
    ]; };
    DashboardBridgeService = tslib_1.__decorate([
        Injectable()
    ], DashboardBridgeService);
    return DashboardBridgeService;
}());
export { DashboardBridgeService };
//# sourceMappingURL=data:application/json;base64,