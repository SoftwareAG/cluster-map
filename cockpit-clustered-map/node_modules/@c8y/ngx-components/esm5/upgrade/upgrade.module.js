import * as tslib_1 from "tslib";
import { bridgeServiceProvider } from './bridge.service';
import { HOOK_ACTION, HOOK_ACTION_BAR, HOOK_BREADCRUMB, HOOK_NAVIGATOR_NODES, HOOK_SEARCH, HOOK_TABS, HOOK_DOCS, RouterModule } from '@c8y/ngx-components';
import { Ng1ActionBarFactoryService } from './action-bar.factory';
import { Ng1ActionFactoryService } from './action.factory';
import { Ng1BreadcrumbFactoryService } from './breadcrumb.factory';
import { Ng1NodesFactoryService } from './nodes.factory';
import { Ng1SearchFactoryService } from './search.factory';
import { Ng1TabsFactoryService } from './tabs.factory';
import { NgModule } from '@angular/core';
import { Ng1DocsFactoryService } from './docs.factory';
var UpgradeModule = /** @class */ (function () {
    function UpgradeModule() {
    }
    UpgradeModule = tslib_1.__decorate([
        NgModule({
            imports: [RouterModule],
            exports: [],
            providers: [
                bridgeServiceProvider,
                { provide: HOOK_NAVIGATOR_NODES, useClass: Ng1NodesFactoryService, multi: true },
                { provide: HOOK_TABS, useClass: Ng1TabsFactoryService, multi: true },
                { provide: HOOK_ACTION_BAR, useClass: Ng1ActionBarFactoryService, multi: true },
                { provide: HOOK_ACTION, useClass: Ng1ActionFactoryService, multi: true },
                { provide: HOOK_BREADCRUMB, useClass: Ng1BreadcrumbFactoryService, multi: true },
                { provide: HOOK_SEARCH, useClass: Ng1SearchFactoryService, multi: true },
                { provide: HOOK_DOCS, useClass: Ng1DocsFactoryService, multi: true }
            ]
        })
    ], UpgradeModule);
    return UpgradeModule;
}());
export { UpgradeModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJ1cGdyYWRlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekQsT0FBTyxFQUNMLFdBQVcsRUFDWCxlQUFlLEVBQ2YsZUFBZSxFQUNmLG9CQUFvQixFQUNwQixXQUFXLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxZQUFZLEVBQ2IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBZ0J2RDtJQUFBO0lBQTRCLENBQUM7SUFBaEIsYUFBYTtRQWR6QixRQUFRLENBQUM7WUFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7WUFDdkIsT0FBTyxFQUFFLEVBQUU7WUFDWCxTQUFTLEVBQUU7Z0JBQ1QscUJBQXFCO2dCQUNyQixFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDaEYsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2dCQUNwRSxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7Z0JBQy9FLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDeEUsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2dCQUNoRixFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7Z0JBQ3hFLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTthQUNyRTtTQUNGLENBQUM7T0FDVyxhQUFhLENBQUc7SUFBRCxvQkFBQztDQUFBLEFBQTdCLElBQTZCO1NBQWhCLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBicmlkZ2VTZXJ2aWNlUHJvdmlkZXIgfSBmcm9tICcuL2JyaWRnZS5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIEhPT0tfQUNUSU9OLFxuICBIT09LX0FDVElPTl9CQVIsXG4gIEhPT0tfQlJFQURDUlVNQixcbiAgSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gIEhPT0tfU0VBUkNILFxuICBIT09LX1RBQlMsXG4gIEhPT0tfRE9DUyxcbiAgUm91dGVyTW9kdWxlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgTmcxQWN0aW9uQmFyRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2FjdGlvbi1iYXIuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFBY3Rpb25GYWN0b3J5U2VydmljZSB9IGZyb20gJy4vYWN0aW9uLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxQnJlYWRjcnVtYkZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9icmVhZGNydW1iLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxTm9kZXNGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vbm9kZXMuZmFjdG9yeSc7XG5pbXBvcnQgeyBOZzFTZWFyY2hGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vc2VhcmNoLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxVGFic0ZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi90YWJzLmZhY3RvcnknO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nMURvY3NGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vZG9jcy5mYWN0b3J5JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1JvdXRlck1vZHVsZV0sXG4gIGV4cG9ydHM6IFtdLFxuICBwcm92aWRlcnM6IFtcbiAgICBicmlkZ2VTZXJ2aWNlUHJvdmlkZXIsXG4gICAgeyBwcm92aWRlOiBIT09LX05BVklHQVRPUl9OT0RFUywgdXNlQ2xhc3M6IE5nMU5vZGVzRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX1RBQlMsIHVzZUNsYXNzOiBOZzFUYWJzRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0FDVElPTl9CQVIsIHVzZUNsYXNzOiBOZzFBY3Rpb25CYXJGYWN0b3J5U2VydmljZSwgbXVsdGk6IHRydWUgfSxcbiAgICB7IHByb3ZpZGU6IEhPT0tfQUNUSU9OLCB1c2VDbGFzczogTmcxQWN0aW9uRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX0JSRUFEQ1JVTUIsIHVzZUNsYXNzOiBOZzFCcmVhZGNydW1iRmFjdG9yeVNlcnZpY2UsIG11bHRpOiB0cnVlIH0sXG4gICAgeyBwcm92aWRlOiBIT09LX1NFQVJDSCwgdXNlQ2xhc3M6IE5nMVNlYXJjaEZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9LFxuICAgIHsgcHJvdmlkZTogSE9PS19ET0NTLCB1c2VDbGFzczogTmcxRG9jc0ZhY3RvcnlTZXJ2aWNlLCBtdWx0aTogdHJ1ZSB9XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVXBncmFkZU1vZHVsZSB7fVxuIl19