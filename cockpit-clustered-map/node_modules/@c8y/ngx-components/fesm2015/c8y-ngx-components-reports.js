import { __awaiter, __decorate } from 'tslib';
import { Injectable, EventEmitter, Output, Component, Input, NgModule } from '@angular/core';
import { gettext, AlertService, Status, ConfirmModalComponent, CoreModule, FormsModule } from '@c8y/ngx-components';
import { orderBy, remove, some, isEqual, cloneDeep as cloneDeep$1 } from 'lodash-es';
import { InventoryService, FetchClient, UserService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { formatDate } from '@angular/common';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { cloneDeep } from 'lodash';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { module } from 'angular';
import { registerNgModule } from '@c8y/ng1-modules/core/bootstrap';
import { downgradeComponent } from '@angular/upgrade/static';

let ReportsService = class ReportsService {
    constructor(alertService, inventoryService, client) {
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.client = client;
        this.ERROR_MESSAGES = {
            pattern_multiEmail: gettext('Invalid email addresses.'),
            pattern_singleEmail: gettext('Invalid email address.')
        };
        this.microserviceUrl = '/service/reporting/schedule';
        this.headers = { 'Content-Type': 'application/json' };
    }
    getExport(exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            let exp;
            const exportDetail = yield this.inventoryService.detail(exportId);
            const { data, res } = exportDetail;
            if (res.status !== 200) {
                this.alertService.addServerFailure({ data, res });
            }
            else {
                exp = data ? data : {};
            }
            return exp;
        });
    }
    getScheduleList(exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const exp = yield this.getExport(exportId);
            return this.extractScheduleListFromExport(exp);
        });
    }
    extractScheduleListFromExport(exp) {
        let scheduleList;
        if (exp) {
            scheduleList = exp.c8y_ScheduleConfiguration ? exp.c8y_ScheduleConfiguration : [];
        }
        return orderBy(scheduleList, ['timestamp'], ['desc']);
    }
    addSchedule(schedule, exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [], [schedule]);
        });
    }
    updateSchedule(oldSchedule, schedule, exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [oldSchedule], [schedule]);
        });
    }
    updateSchedules(exportId, schedulesToRemove = [], schedulesToAdd = []) {
        return __awaiter(this, void 0, void 0, function* () {
            let success = false;
            const exp = yield this.getExport(exportId);
            const schedules = this.extractScheduleListFromExport(exp);
            remove(schedules, (schedule) => some(schedulesToRemove, (scheduleToRemove) => isEqual(schedule, scheduleToRemove)));
            schedules.push.apply(schedules, schedulesToAdd);
            exp.c8y_ScheduleConfiguration = schedules;
            const { data, res } = yield this.inventoryService.update(exp);
            if (res.status === 200) {
                success = yield this.reschedule(exportId);
            }
            else {
                this.alertService.addServerFailure({ data, res });
            }
            return success;
        });
    }
    reschedule(exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'PUT',
                headers: this.headers
            };
            const rescheduling = yield this.client.fetch(`${this.microserviceUrl}/${exportId}`, options);
            return rescheduling.status === 200;
        });
    }
    deleteSchedule(schedule, exportId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.updateSchedules(exportId, [schedule], []);
        });
    }
};
ReportsService.ctorParameters = () => [
    { type: AlertService },
    { type: InventoryService },
    { type: FetchClient }
];
ReportsService = __decorate([
    Injectable()
], ReportsService);

var ActionType;
(function (ActionType) {
    ActionType["CREATE"] = "create";
    ActionType["EDIT"] = "edit";
    ActionType["DUPLICATE"] = "duplicate";
})(ActionType || (ActionType = {}));
var Base;
(function (Base) {
    Base[Base["Initial"] = 1] = "Initial";
    Base[Base["Hour"] = 2] = "Hour";
    Base[Base["Day"] = 3] = "Day";
    Base[Base["Week"] = 4] = "Week";
    Base[Base["Month"] = 5] = "Month";
    Base[Base["Year"] = 6] = "Year";
})(Base || (Base = {}));

let CronService = class CronService {
    constructor(translateService) {
        this.translateService = translateService;
        this.daysOfWeekPosix = [];
        this.daysOfMonth = [
            { value: '1', label: '1.' },
            { value: '2', label: '2.' },
            { value: '3', label: '3.' },
            { value: '4', label: '4.' },
            { value: '5', label: '5.' },
            { value: '6', label: '6.' },
            { value: '7', label: '7.' },
            { value: '8', label: '8.' },
            { value: '9', label: '9.' },
            { value: '10', label: '10.' },
            { value: '11', label: '11.' },
            { value: '12', label: '12.' },
            { value: '13', label: '13.' },
            { value: '14', label: '14.' },
            { value: '15', label: '15.' },
            { value: '16', label: '16.' },
            { value: '17', label: '17.' },
            { value: '18', label: '18.' },
            { value: '19', label: '19.' },
            { value: '20', label: '20.' },
            { value: '21', label: '21.' },
            { value: '22', label: '22.' },
            { value: '23', label: '23.' },
            { value: '24', label: '24.' },
            { value: '25', label: '25.' },
            { value: '26', label: '26.' },
            { value: '27', label: '27.' },
            { value: '28', label: '28.' },
            { value: '29', label: '29.' },
            { value: '30', label: '30.' },
            { value: '31', label: '31.' }
        ];
        this.months = [];
        this.hours = [];
        this.minutes = [];
        this.intervals = [
            { value: 2, label: gettext('Hour') },
            { value: 3, label: gettext('Day') },
            { value: 4, label: gettext('Week') },
            { value: 5, label: gettext('Month') },
            { value: 6, label: gettext('Year') }
        ];
        for (let x = 0; x < 24; x++) {
            this.hours.push({ value: x.toString(), label: `${x}` });
        }
        for (let x = 0; x < 60; x = x + 5) {
            this.minutes.push({ value: x.toString(), label: `${x}` });
        }
        for (let x = 0; x < 7; x++) {
            this.daysOfWeekPosix.push({
                value: x.toString(),
                label: this.getWeekDayName({ weekday: x })
            });
        }
        for (let x = 1; x < 13; x++) {
            this.months.push({
                value: x.toString(),
                label: this.getMonthName({ month: x })
            });
        }
    }
    generateCron(cronConfig) {
        let cron = '';
        cron = cronConfig.minute ? `${cronConfig.minute}` : '*';
        cron += cronConfig.hour ? ` ${cronConfig.hour}` : ' *';
        cron += cronConfig.day ? ` ${cronConfig.day}` : ' *';
        cron += cronConfig.month ? ` ${cronConfig.month}` : ' *';
        cron += cronConfig.weekday ? ` ${cronConfig.weekday}` : ' *';
        return cron;
    }
    generateCronConfig(cron) {
        const parts = cron.split(/\s+/);
        const cronConfig = {
            minute: parts[0],
            hour: parts[1],
            day: parts[2],
            month: parts[3],
            weekday: parts[4]
        };
        return cronConfig;
    }
    getBase(cronConfig) {
        let base = Base.Initial;
        if (cronConfig.minute !== '*' &&
            cronConfig.hour === '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Hour;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Day;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day === '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday !== '*') {
            base = Base.Week;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month === '*' &&
            cronConfig.weekday === '*') {
            base = Base.Month;
        }
        else if (cronConfig.minute !== '*' &&
            cronConfig.hour !== '*' &&
            cronConfig.day !== '*' &&
            cronConfig.month !== '*' &&
            cronConfig.weekday === '*') {
            base = Base.Year;
        }
        else {
            // cronConfig invalid
        }
        return base;
    }
    validateModels(base, cronConfig) {
        let valid;
        switch (base) {
            case Base.Initial: // Please select
                valid = false;
                break;
            case Base.Hour:
                if (cronConfig.minute !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Day:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Week:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.weekday !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Month:
                if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.day !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            case Base.Year:
                if (cronConfig.minute !== '*' &&
                    cronConfig.hour !== '*' &&
                    cronConfig.day !== '*' &&
                    cronConfig.month !== '*') {
                    valid = true;
                }
                else {
                    valid = false;
                }
                break;
            default:
                valid = false;
        }
        return valid;
    }
    clearNextModels(base, cronConfig) {
        if (base === Base.Initial) {
            // please select, delete all
            // cron expression: every minute at second 0
            cronConfig.weekday = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.hour = '*';
            cronConfig.minute = '*';
        }
        else if (base === Base.Hour) {
            // hour, don't delete minutes
            // cron expression: every hour, at whatever minute, at second 0
            cronConfig.weekday = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
            cronConfig.hour = '*';
        }
        else if (base === Base.Day) {
            // day, don't delete minutes and hours
            // cron expression: every day of every month, at whatever hour and minute, at second 0
            cronConfig.weekday = '*';
            cronConfig.day = '*';
            cronConfig.month = '*';
        }
        else if (base === Base.Week) {
            // week, delete month and day
            // cron expression: every month, at whatever weekday, hour and minute, at second 0
            cronConfig.day = '*';
            cronConfig.month = '*';
        }
        else if (base === Base.Month) {
            // month, delete month and weekday
            // cron expression: every month, at whatever day of month, hour and minute, at second 0
            cronConfig.weekday = '*';
            cronConfig.month = '*';
        }
        else if (base === Base.Year) {
            // year, delete weekday
            // cron expression: every year, at whatever month, day of month, hour and minute, at second 0
            cronConfig.weekday = '*';
        }
    }
    getWeekDayName(cronConfig) {
        const date = new Date(0);
        const firstSundayDate = date.getDate() + 3; // because we know date 0 was on Thursday...
        date.setDate(firstSundayDate + parseInt(cronConfig.weekday, 10));
        return formatDate(date, 'EEEE', this.translateService.currentLang);
    }
    getMonthDayName(cronConfig) {
        let name = '';
        this.daysOfMonth.forEach(item => {
            if (item.value === cronConfig.day) {
                name = item.label;
            }
        });
        return name;
    }
    getMonthName(cronConfig) {
        const date = new Date(0);
        date.setMonth(parseInt(cronConfig.month, 10) - 1);
        return formatDate(date, 'LLLL', this.translateService.currentLang);
    }
};
CronService.ctorParameters = () => [
    { type: TranslateService }
];
CronService = __decorate([
    Injectable()
], CronService);

let ScheduleModalComponent = class ScheduleModalComponent {
    constructor(modalRef, reportsService, cronService) {
        this.modalRef = modalRef;
        this.reportsService = reportsService;
        this.cronService = cronService;
        this.emitter = new EventEmitter();
        this.ActionType = ActionType;
        this.multiEmailPattern = /^([a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*,?)*$/i;
        this.singleEmailPattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/;
        this.cronExpression = '* * * * *';
        this.validCron = false;
        this.emitterPayload = {
            success: false,
            message: ''
        };
        this.placeholdersInfo = gettext('Available placeholders: {tenant-domain}, {host}, {binaryId}. Whole link to downloadable file is: {tenant-domain}/inventory/binaries/{binaryId}.');
        this.savingStatus = {
            inProgress: false,
            done: false,
            error: false
        };
    }
    ngOnInit() {
        this.oldSchedule = cloneDeep(this.schedule);
        this.populateEmailFieldsFromSchedule(this.schedule);
        this.cronExpression = this.cronService.generateCron(this.schedule.cronConfig);
        this.validCron = this.cronService.validateModels(this.cronService.getBase(this.schedule.cronConfig), this.schedule.cronConfig);
    }
    populateEmailFieldsFromSchedule(schedule) {
        if (schedule.emailConfig.to && schedule.emailConfig.to.length) {
            this.emailTo = schedule.emailConfig.to.toString();
        }
        if (schedule.emailConfig.cc && schedule.emailConfig.cc.length) {
            this.emailCc = schedule.emailConfig.cc.toString();
        }
        if (schedule.emailConfig.bcc && schedule.emailConfig.bcc.length) {
            this.emailBcc = schedule.emailConfig.bcc.toString();
        }
        if (schedule.emailConfig.replyTo) {
            this.emailReplyTo = schedule.emailConfig.replyTo;
        }
        if (schedule.emailConfig.subject) {
            this.emailSubject = schedule.emailConfig.subject;
        }
        if (schedule.emailConfig.text) {
            this.emailText = schedule.emailConfig.text;
        }
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            this.populateScheduleFromCronExpression();
            this.populateScheduleFromEmailFields();
            this.savingStatus.inProgress = true;
            let success = false;
            if (this.actionType === ActionType.EDIT) {
                success = yield this.reportsService.updateSchedule(this.oldSchedule, this.schedule, this.exportId);
            }
            else {
                const date = new Date();
                const timestamp = date.getTime();
                this.schedule.timestamp = timestamp;
                success = yield this.reportsService.addSchedule(this.schedule, this.exportId);
            }
            if (success) {
                this.modalRef.hide();
                // signal to the parent component to update list
                this.emitterPayload.success = true;
                this.emitter.emit(this.emitterPayload);
            }
            this.savingStatus.inProgress = false;
        });
    }
    cancel() {
        this.modalRef.hide();
    }
    getCron(cron) {
        this.validCron = cron.valid;
        if (cron.valid) {
            this.cronExpression = cron.cron;
        }
    }
    populateScheduleFromCronExpression() {
        this.schedule.cronConfig = this.cronService.generateCronConfig(this.cronExpression);
    }
    convertStringOfEmailsToArray(stringOfEmails) {
        const arr = [];
        if (stringOfEmails) {
            const parts = stringOfEmails.split(',');
            parts.forEach(item => {
                if (item) {
                    arr.push(item);
                }
            });
        }
        return arr;
    }
    populateScheduleFromEmailFields() {
        this.schedule.emailConfig.to = this.emailTo
            ? this.convertStringOfEmailsToArray(this.emailTo)
            : null;
        this.schedule.emailConfig.cc = this.emailCc
            ? this.convertStringOfEmailsToArray(this.emailCc)
            : null;
        this.schedule.emailConfig.bcc = this.emailBcc
            ? this.convertStringOfEmailsToArray(this.emailBcc)
            : null;
        this.schedule.emailConfig.replyTo = this.emailReplyTo;
        this.schedule.emailConfig.subject = this.emailSubject;
        this.schedule.emailConfig.text = this.emailText;
    }
};
ScheduleModalComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: ReportsService },
    { type: CronService }
];
__decorate([
    Output()
], ScheduleModalComponent.prototype, "emitter", void 0);
ScheduleModalComponent = __decorate([
    Component({
        selector: 'schedule-modal',
        template: "<div class=\"modal-header text-center bg-primary\">\n  <header class=\"text-white\">\n    <div style=\"font-size: 62px;\">\n      <span c8yIcon=\"c8y-report\"></span>\n    </div>\n    <h4 class=\"text-uppercase\" style=\"margin:0; letter-spacing: 0.15em;\">\n      <span *ngIf=\"actionType === ActionType.CREATE\" translate>New export schedule</span>\n      <span *ngIf=\"actionType === ActionType.EDIT\" translate>Edit export schedule</span>\n      <span *ngIf=\"actionType === ActionType.DUPLICATE\" translate>Duplicate export schedule</span>\n    </h4>\n  </header>\n</div>\n\n<div class=\"modal-body\">\n  <p class=\"lead text-center p-t-24\" style=\"margin-bottom: 0;\" translate>\n    On schedule send export via email\n  </p>\n</div>\n<div class=\"modal-inner-scroll smart-rule-control\">\n  <form #scheduleForm=\"ngForm\" class=\"edit-smart-rule-details\">\n    <div class=\"list-group\">\n      <div class=\"list-group-item bg-gray-white\">\n        <div class=\"smart-list-icon-label\">\n          <span class=\"dot bg-primary-light\">1</span\n          ><strong class=\"p-l-4\" translate>Frequency</strong>\n        </div>\n        <div class=\"p-t-4\">\n          <div class=\"form-group\">\n            <cron [cronIn]=\"cronExpression\" (emitter)=\"getCron($event)\" name=\"cron\"></cron>\n          </div>\n        </div>\n      </div>\n      <div class=\"list-group-item\">\n        <div class=\"smart-list-icon-label\">\n          <span class=\"dot bg-primary-light\">2</span>&nbsp;<strong translate>Send email</strong>\n        </div>\n        <div class=\"form-horizontal p-t-16\">\n          <div class=\"form-group\">\n            <div class=\"text-muted col-sm-12 p-b-4\" style=\"display: flex; align-items: baseline;\">\n              <i [c8yIcon]=\"'info-circle'\" class=\"text-info m-r-8\"></i>\n              <em translate>Enter one or more valid email addresses, separated with a comma.</em>\n            </div>\n            <label class=\"control-label col-sm-3\" translate>Send to</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  name=\"to\"\n                  [(ngModel)]=\"emailTo\"\n                  placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                  required\n                  [pattern]=\"multiEmailPattern\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    [text]=\"reportsService.ERROR_MESSAGES.pattern_multiEmail\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"text-muted col-sm-12 p-b-4\" style=\"display: flex; align-items: baseline;\">\n              <i [c8yIcon]=\"'info-circle'\" class=\"text-info m-r-8\"></i>\n              <em translate>Enter one or more valid email addresses, separated with a comma.</em>\n            </div>\n            <label class=\"control-label col-sm-3\" translate>CC</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control span\"\n                  name=\"cc\"\n                  placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                  [(ngModel)]=\"emailCc\"\n                  [pattern]=\"multiEmailPattern\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    [text]=\"reportsService.ERROR_MESSAGES.pattern_multiEmail\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"text-muted col-sm-12 p-b-4\" style=\"display: flex; align-items: baseline;\">\n              <i [c8yIcon]=\"'info-circle'\" class=\"text-info m-r-8\"></i>\n              <em translate>Enter one or more valid email addresses, separated with a comma.</em>\n            </div>\n            <label class=\"control-label col-sm-3\" translate>BCC</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control span\"\n                  name=\"bcc\"\n                  placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                  [(ngModel)]=\"emailBcc\"\n                  [pattern]=\"multiEmailPattern\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    [text]=\"reportsService.ERROR_MESSAGES.pattern_multiEmail\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label col-sm-3\" translate>Reply to</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control span\"\n                  name=\"replyTo\"\n                  placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                  [(ngModel)]=\"emailReplyTo\"\n                  [pattern]=\"singleEmailPattern\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    [text]=\"reportsService.ERROR_MESSAGES.pattern_singleEmail\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label col-sm-3\" translate>Subject</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control span\"\n                  name=\"subject\"\n                  [(ngModel)]=\"emailSubject\"\n                  placeholder=\"{{ 'e.g. Daily report' | translate }}\"\n                  required\n                />\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"text-muted col-sm-12 p-b-4\" style=\"display: flex; align-items: baseline;\">\n              <i [c8yIcon]=\"'info-circle'\" class=\"text-info m-r-8\"></i>\n              <em>{{ placeholdersInfo | translate }}</em>\n            </div>\n            <label class=\"col-sm-3 control-label\" translate>Message</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <textarea\n                  class=\"form-control\"\n                  name=\"text\"\n                  [(ngModel)]=\"emailText\"\n                  placeholder=\"{{ 'Message' | translate }}\"\n                  required\n                ></textarea>\n              </c8y-form-group>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button class=\"btn btn-default\" (click)=\"cancel()\" title=\"{{ 'Cancel' | translate }}\" translate>\n    Cancel\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [ngClass]=\"{ ' btn-pending ': savingStatus.inProgress }\"\n    [disabled]=\"!validCron || !scheduleForm.form.valid\"\n  >\n    <span *ngIf=\"!savingStatus.inProgress\">\n      <span *ngIf=\"actionType === ActionType.CREATE\" title=\"{{ 'Create' | translate }}\" translate\n        >Create</span\n      >\n      <span *ngIf=\"actionType === ActionType.EDIT\" title=\"{{ 'Save' | translate }}\" translate\n        >Save</span\n      >\n      <span\n        *ngIf=\"actionType === ActionType.DUPLICATE\"\n        title=\"{{ 'Duplicate' | translate }}\"\n        translate\n        >Duplicate</span\n      >\n    </span>\n    <span *ngIf=\"savingStatus.inProgress\" title=\"{{ 'Saving' | translate }}\u2026\"\n      >{{ 'Saving' | translate }}\u2026</span\n    >\n  </button>\n</div>\n"
    })
], ScheduleModalComponent);

let ExportSchedulesComponent = class ExportSchedulesComponent {
    constructor(reportsService, bsModalService, cronService, translateService, userService) {
        this.reportsService = reportsService;
        this.bsModalService = bsModalService;
        this.cronService = cronService;
        this.translateService = translateService;
        this.userService = userService;
        this.scheduleList = [];
        this.initialSchedule = {
            timestamp: null,
            emailConfig: {
                to: [],
                cc: [],
                bcc: [],
                replyTo: '',
                text: this.translateService.instant(gettext('File with exported data can be downloaded from {tenant-domain}/inventory/binaries/{binaryId}.')),
                subject: ''
            },
            cronConfig: {
                minute: '0',
                hour: '0',
                day: '1',
                month: '1',
                weekday: '?'
            }
        };
        this.listClass = 'interact-list';
        this.sortReverse = false;
        this.isOpen = {};
        this.isEditMenuOpen = false;
        this.currentUserEmail = '';
        this.loadingStatus = {
            inProgress: false,
            done: false,
            error: false
        };
    }
    set exportId(exportId) {
        this._exportId = exportId;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.getScheduleList(true);
            const currentUserEmail = yield this.getCurrentUserEmail();
            this.initialSchedule.emailConfig.to = currentUserEmail;
            this.exp = yield this.reportsService.getExport(this._exportId);
            this.initialSchedule.emailConfig.subject = this.translateService.instant(gettext('Export of "{{expName}}"'), { expName: this.exp.name });
        });
    }
    getCurrentUserEmail() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.userService.current();
            return data && data.email ? [data.email] : [];
        });
    }
    getScheduleList(withProgress) {
        return __awaiter(this, void 0, void 0, function* () {
            if (withProgress) {
                this.loadingStatus.inProgress = true;
            }
            this.scheduleList = yield this.reportsService.getScheduleList(this._exportId);
            if (withProgress) {
                this.loadingStatus.inProgress = false;
            }
        });
    }
    addSchedule() {
        this.openAddEditModal(this._exportId, this.initialSchedule, ActionType.CREATE);
    }
    editSchedule(schedule, event) {
        event.preventDefault();
        this.openAddEditModal(this._exportId, schedule, ActionType.EDIT);
    }
    duplicateSchedule(schedule, event) {
        event.preventDefault();
        this.openAddEditModal(this._exportId, schedule, ActionType.DUPLICATE);
    }
    openAddEditModal(exportId, schedule, actionType) {
        const payload = { actionType, exportId, schedule: cloneDeep$1(schedule) };
        const modalOptions = { class: 'modal-sm', initialState: payload };
        this.modalRef = this.bsModalService.show(ScheduleModalComponent, modalOptions);
        this.modalRef.content.emitter.subscribe((load) => this.getMessageFromModal(load));
    }
    getMessageFromModal(payload) {
        if (payload.success) {
            // refresh schedule list
            this.getScheduleList(false);
        }
    }
    removeSchedule(schedule, event) {
        return __awaiter(this, void 0, void 0, function* () {
            event.preventDefault();
            const subject = schedule.emailConfig.subject;
            const payload = {
                status: Status.DANGER,
                title: gettext('Delete schedule'),
                labels: { ok: gettext('Delete') },
                body: this.translateService.instant(gettext('You are about to delete the schedule "{{subject}}". Do you want to proceed?'), { subject })
            };
            const modalOptions = { initialState: payload };
            this.modalRef = this.bsModalService.show(ConfirmModalComponent, modalOptions);
            const confirm = yield this.modalRef.content.result;
            if (confirm) {
                const success = yield this.reportsService.deleteSchedule(schedule, this._exportId);
                if (success) {
                    // refresh schedule list
                    this.getScheduleList(false);
                }
            }
        });
    }
};
ExportSchedulesComponent.ctorParameters = () => [
    { type: ReportsService },
    { type: BsModalService },
    { type: CronService },
    { type: TranslateService },
    { type: UserService }
];
__decorate([
    Input()
], ExportSchedulesComponent.prototype, "exportId", null);
ExportSchedulesComponent = __decorate([
    Component({
        selector: 'export-schedules',
        template: "<div>\n  <div *ngIf=\"loadingStatus.inProgress\" class=\"flex-row\">\n    <div style=\"position: relative; min-height: 40px;min-width: 55px;\">\n      <div class=\"spinner\">\n        <div class=\"rect1\"></div>\n        <div class=\"rect2\"></div>\n        <div class=\"rect3\"></div>\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"></div>\n      </div>\n    </div>\n    <span translate>Retrieving schedules\u2026</span>\n  </div>\n\n  <div *ngIf=\"!loadingStatus.inProgress && loadingStatus.done && loadingStatus.error\">\n    <div class=\"alert alert-warning\" translate>\n      Could not load schedules list.\n    </div>\n  </div>\n\n  <div *ngIf=\"!loadingStatus.inProgress && !loadingStatus.done && !loadingStatus.error\">\n    <div class=\"c8y-empty-state text-center\" *ngIf=\"!scheduleList.length\">\n      <h1 c8yIcon=\"c8y-report\" class=\"c8y-icon-duocolor\"></h1>\n      <h3 translate>No export schedules defined.</h3>\n    </div>\n\n    <div class=\"list-group\" *ngIf=\"scheduleList.length\">\n      <div\n        class=\"list-group-item flex-row pointer\"\n        *ngFor=\"let schedule of scheduleList\"\n        (click)=\"editSchedule(schedule, $event)\"\n      >\n        <div class=\"list-item-actions\" (click)=\"$event.stopPropagation()\">\n          <div class=\"settings dropdown\" dropdown>\n            <button\n              class=\"dropdown-toggle c8y-dropdown\"\n              dropdownToggle\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n              title=\"{{ 'Actions' | translate }}\"\n            >\n              <i [c8yIcon]=\"'ellipsis-v'\"></i>\n            </button>\n            <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n              <li role=\"menuitem\">\n                <a\n                  href=\"\"\n                  title=\"{{ 'Edit schedule' | translate }}\"\n                  (click)=\"editSchedule(schedule, $event)\"\n                >\n                  <i [c8yIcon]=\"'pencil'\"></i> {{ 'Edit' | translate }}\n                </a>\n              </li>\n              <li role=\"menuitem\">\n                <a\n                  href=\"\"\n                  title=\"{{ 'Duplicate schedule' | translate }}\"\n                  (click)=\"duplicateSchedule(schedule, $event)\"\n                >\n                  <i [c8yIcon]=\"'copy'\"></i> {{ 'Duplicate' | translate }}\n                </a>\n              </li>\n              <li role=\"menuitem\">\n                <a\n                  href=\"\"\n                  title=\"{{ 'Delete schedule' | translate }}\"\n                  (click)=\"removeSchedule(schedule, $event)\"\n                >\n                  <i [c8yIcon]=\"'trash'\"></i> {{ 'Delete' | translate }}\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"list-item-icon\">\n          <i c8yIcon=\"c8y-report\" class=\"c8y-icon-duocolor\"></i>\n        </div>\n        <div class=\"list-item-body flex-row\">\n          <div class=\"col-sm-6\">\n            <div class=\"text-truncate\" title=\"{{ schedule.emailConfig.subject }}\">\n              {{ schedule.emailConfig.subject }}\n            </div>\n          </div>\n          <div class=\"col-sm-6\">\n            <div class=\"flex-row\" style=\"align-items: baseline;\">\n              <i c8yIcon=\"calendar\" class=\"text-muted m-r-4\"></i>\n              <small class=\"smart-rule-information text-muted\">\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 2\" translate>\n                  Hourly: {{ schedule.cronConfig.minute | number: '2.0-0' }} minute(s) past the\n                  hour.\n                </span>\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 3\" translate>\n                  Daily: at {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                    schedule.cronConfig.minute | number: '2.0-0'\n                  }}.\n                </span>\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 4\" translate>\n                  Weekly: {{ cronService.getWeekDayName(schedule.cronConfig) }}, at\n                  {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                    schedule.cronConfig.minute | number: '2.0-0'\n                  }}.\n                </span>\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 5\" translate>\n                  Monthly: {{ cronService.getMonthDayName(schedule.cronConfig) }} day of the month,\n                  at {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                    schedule.cronConfig.minute | number: '2.0-0'\n                  }}.\n                </span>\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 6\" translate>\n                  Yearly: {{ cronService.getMonthName(schedule.cronConfig) }},\n                  {{ cronService.getMonthDayName(schedule.cronConfig) }} day of the month, at\n                  {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                    schedule.cronConfig.minute | number: '2.0-0'\n                  }}.\n                </span>\n              </small>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <button\n    type=\"button\"\n    class=\"btn-add-block m-t-16\"\n    title=\"{{ 'Add schedule' | translate }}\"\n    (click)=\"addSchedule()\"\n  >\n    <i [c8yIcon]=\"'plus-square'\"></i> {{ 'Add schedule' | translate }}\n  </button>\n</div>\n"
    })
], ExportSchedulesComponent);

let CronComponent = class CronComponent {
    constructor(cronService) {
        this.cronService = cronService;
        this.emitter = new EventEmitter();
        this.emittedCron = {
            valid: false,
            cron: ''
        };
        this.base = Base.Initial;
        //
    }
    ngOnInit() {
        this.daysOfWeekPosix = this.cronService.daysOfWeekPosix;
        this.daysOfMonth = this.cronService.daysOfMonth;
        this.months = this.cronService.months;
        this.hours = this.cronService.hours;
        this.minutes = this.cronService.minutes;
        this.intervals = this.cronService.intervals;
        this.cronConfig = this.cronService.generateCronConfig(this.cronIn);
        this.base = this.cronService.getBase(this.cronConfig);
    }
    onChangeSelect() {
        this.cronService.clearNextModels(this.base, this.cronConfig);
        this.emittedCron.valid = this.cronService.validateModels(this.base, this.cronConfig);
        this.emittedCron.cron = this.cronService.generateCron(this.cronConfig);
        this.emitter.emit(this.emittedCron);
    }
};
CronComponent.ctorParameters = () => [
    { type: CronService }
];
__decorate([
    Input()
], CronComponent.prototype, "cronIn", void 0);
__decorate([
    Output()
], CronComponent.prototype, "emitter", void 0);
CronComponent = __decorate([
    Component({
        selector: 'cron',
        template: "<div class=\"cron-wrap form-horizontal\">\n  <div class=\"form-group smart-cron-job-every\">\n    <label for=\"smart-cron-job-every\" \n      class=\"col-sm-3 control-label\"\n      translate>\n      Interval\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"smart-cron-job-every\"\n          class=\"cron-select form-control\"\n          [(ngModel)]=\"base\"\n          required=\"true\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngIf=\"base === 1\" value=\"1\" translate>Select...</option>\n          <option *ngFor=\"let baseInterval of intervals\" [ngValue]=\"baseInterval.value\">\n            {{ baseInterval.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-on\" *ngIf=\"base == 4\">\n    <label for=\"smart-cron-job-on\" class=\"col-sm-3 control-label\" translate>\n      Day\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"smart-cron-job-on\"\n          class=\"cron-select form-control day-value\"\n          [(ngModel)]=\"cronConfig.weekday\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngFor=\"let dayOfWeek of daysOfWeekPosix\" [ngValue]=\"dayOfWeek.value\">\n            {{ dayOfWeek.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-of\" *ngIf=\"base == 6\">\n    <label for=\"smart-cron-job-of\" class=\"col-sm-3 control-label\" translate>\n      Month\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"smart-cron-job-of\"\n          class=\"cron-select form-control month-value\"\n          [(ngModel)]=\"cronConfig.month\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngFor=\"let month of months\" [ngValue]=\"month.value\">\n            {{ month.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-on-the\" *ngIf=\"base >= 5\">\n    <label for=\"smart-cron-job-on-the\" class=\"col-sm-3 control-label\" translate>\n      Day\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"smart-cron-job-on-the\"\n          class=\"cron-select form-control day-of-month-value\"\n          [(ngModel)]=\"cronConfig.day\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngFor=\"let dayOfMonth of daysOfMonth\" [ngValue]=\"dayOfMonth.value\">\n            {{ dayOfMonth.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-at\" *ngIf=\"base >= 2\">\n    <label for=\"smart-cron-job-at-hour\" class=\"col-sm-3 control-label\">\n      <span *ngIf=\"base >= 3\" translate>Time</span>\n      <span *ngIf=\"base < 3\" translate>Minutes</span>\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"form-inline\">\n        <div class=\"c8y-select-wrapper\" *ngIf=\"base >= 3\">\n          <select\n            id=\"smart-cron-job-at-hour\"\n            class=\"cron-select form-control hour-value\"\n            [(ngModel)]=\"cronConfig.hour\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let hour of hours\" [ngValue]=\"hour.value\">\n              {{ hour.value | number: '2.0-0'  }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n        <span *ngIf=\"base >= 3\"> : </span>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            id=\"smart-cron-job-at-minute\"\n            class=\"cron-select form-control minute-value\"\n            [(ngModel)]=\"cronConfig.minute\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let minute of minutes\" [ngValue]=\"minute.value\">\n              {{ minute.value | number: '2.0-0' }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
    })
], CronComponent);

/**
 * The angular module definition for reports.
 * @exports ExportSchedulesComponent
 * @exports ScheduleModalComponent
 * @exports CronComponent
 */
let ReportsModule = class ReportsModule {
};
ReportsModule = __decorate([
    NgModule({
        declarations: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent],
        imports: [CoreModule, FormsModule, BsDropdownModule, TooltipModule],
        entryComponents: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent],
        providers: [ReportsService, CronService],
        exports: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent]
    })
], ReportsModule);

const exportSchedulesComponent = downgradeComponent({
    component: ExportSchedulesComponent
});

const NAME = 'c8y.upgrade.reports';
const angularJsModule = module(NAME, [])
    .directive('c8yExportSchedules', exportSchedulesComponent);
const ng1Modules = [NAME];
registerNgModule(ng1Modules);

/**
 * Generated bundle index. Do not edit.
 */

export { ExportSchedulesComponent, ReportsModule, ng1Modules, ReportsService as ɵa, CronService as ɵb, ScheduleModalComponent as ɵc, CronComponent as ɵd };
//# sourceMappingURL=c8y-ngx-components-reports.js.map
