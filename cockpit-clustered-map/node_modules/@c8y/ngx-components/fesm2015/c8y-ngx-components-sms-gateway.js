import { __awaiter, __decorate } from 'tslib';
import { Injectable, Component, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { gettext, Status, ModalService, AlertService, NavigatorNode, HOOK_NAVIGATOR_NODES, CoreModule, CommonModule, FormsModule } from '@c8y/ngx-components';
import { UpgradeModule } from '@c8y/ngx-components/upgrade';
import { FetchClient, TenantOptionsService } from '@c8y/client';
import { pick } from 'lodash-es';

let SmsGatewayService = class SmsGatewayService {
    constructor(client, tenantOptionsService) {
        this.client = client;
        this.tenantOptionsService = tenantOptionsService;
        this.category = 'messaging';
        this.basePath = 'service/register/messaging';
        this.providerTemplates = {
            cepConfig: {
                'sms.senderAddress': 'cumulocity',
                'sms.senderName': 'cumulocity'
            },
            openit: {
                provider: 'openit',
                'openit.baseUrl': 'https://sms.plusserver.com/put.php'
            },
            sms77: {
                provider: 'sms77',
                'sms77.url': 'https://gateway.sms77.io/api/sms'
            }
        };
    }
    getProviderConfig() {
        return this.tenantOptionsService.detail({ category: this.category, key: '' });
    }
    saveProviderConfig(newConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const providerTemplate = this.providerTemplates[newConfig.provider];
            const { cepConfig } = this.providerTemplates;
            Object.assign(newConfig, providerTemplate, cepConfig);
            const config = {
                method: 'PUT',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify(newConfig)
            };
            return this.client.fetch(this.basePath, config);
        });
    }
    deleteProviderConfig(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const providerTemplate = this.providerTemplates[config.provider];
            Object.assign(config, providerTemplate);
            return this.deleteProviderOptions(config);
        });
    }
    deleteProviderOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const optionKey of Object.keys(options)) {
                yield this.tenantOptionsService.delete({ category: this.category, key: optionKey });
            }
        });
    }
};
SmsGatewayService.ctorParameters = () => [
    { type: FetchClient },
    { type: TenantOptionsService }
];
SmsGatewayService = __decorate([
    Injectable()
], SmsGatewayService);

let SmsGatewayComponent = class SmsGatewayComponent {
    constructor(modalService, alertService, smsGatewayService) {
        this.modalService = modalService;
        this.alertService = alertService;
        this.smsGatewayService = smsGatewayService;
        this.smsProviders = [
            { id: 'openit', name: 'OpenIT' },
            { id: 'sms77', name: 'sms77' }
        ];
        this.supportedConfigOptions = [
            'provider',
            'openit.username',
            'credentials.openit.password',
            'credentials.sms77.api.key'
        ];
        this.pageTitle = gettext('SMS provider');
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.smsConfig = this.getEmptyConfig();
            this.oldConfig = this.getEmptyConfig();
            const res = yield this.smsGatewayService.getProviderConfig();
            if (this.isSupportedProvider(res.data)) {
                this.smsConfig = this.getConfigurableProperties(res.data);
                this.oldConfig = this.smsConfig;
            }
        });
    }
    getConfigurableProperties(config) {
        return pick(config, this.supportedConfigOptions);
    }
    isSupportedProvider(config) {
        return this.smsProviders.some(prov => prov.id === config.provider);
    }
    saveSMSGatewayConfiguration(form) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.smsGatewayService.saveProviderConfig(this.smsConfig);
            if (res && res.status !== 200) {
                const data = res.json ? yield res.json() : undefined;
                this.alertService.addServerFailure({ data, res });
            }
            else {
                this.alertService.success(gettext('Credentials updated.'));
                Object.assign(this.oldConfig, this.smsConfig);
                form.pristine = true;
            }
        });
    }
    deleteSMSGatewayConfiguration() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.modalService.confirm(gettext('Delete credentials'), gettext(`You are about to delete SMS provider credentials. Deleting credentials will lock out any users with
      SMS-based two-factor authentication and deactivate the SMS-based smart rules and device communication.
      Do you want to proceed?`), Status.DANGER, { ok: gettext('Delete') });
            yield this.smsGatewayService.deleteProviderConfig(this.oldConfig);
            this.alertService.success(gettext('Credentials deleted.'));
            this.smsConfig = this.getEmptyConfig();
            this.oldConfig = this.getEmptyConfig();
        });
    }
    getEmptyConfig() {
        return {
            provider: undefined
        };
    }
};
SmsGatewayComponent.ctorParameters = () => [
    { type: ModalService },
    { type: AlertService },
    { type: SmsGatewayService }
];
SmsGatewayComponent = __decorate([
    Component({
        selector: 'c8y-sms-gateway',
        template: "<c8y-title>{{ pageTitle | translate }}</c8y-title>\n<div class=\"row\">\n  <div class=\"col-xs-12 col-sm-10 col-md-8 col-lg-6\">\n    <form\n      class=\"card\"\n      #smsGatewayForm=\"ngForm\"\n      (ngSubmit)=\"smsGatewayForm.form.valid && saveSMSGatewayConfiguration(smsGatewayForm.form)\"\n    >\n      <div class=\"card-header\">\n        <h4 class=\"card-title\" translate>Credentials</h4>\n      </div>\n      <div class=\"card-block\">\n        <p class=\"bottom-m\" translate>\n          Enter your credentials from your SMS provider. This enables platform features that utilize\n          SMS services (e.g. two-factor authentication and user notifications).\n        </p>\n        <label translate>SMS provider</label>\n        <div class=\"form-group\">\n          <ul class=\"list-unstyled\">\n            <li *ngFor=\"let provider of smsProviders\">\n              <label class=\"c8y-radio\">\n                <input\n                  class=\"form-control\"\n                  type=\"radio\"\n                  name=\"providerName\"\n                  [(ngModel)]=\"smsConfig.provider\"\n                  [value]=\"provider.id\"\n                />\n                <span></span>\n                {{ provider.name | translate }}\n              </label>\n            </li>\n          </ul>\n        </div>\n        <div class=\"form-group\" *ngIf=\"smsConfig.provider === 'openit'\">\n          <label translate for=\"userName\">Username</label>\n          <input\n            id=\"userName\"\n            class=\"form-control\"\n            type=\"text\"\n            autocomplete=\"off\"\n            name=\"userName\"\n            [(ngModel)]=\"smsConfig['openit.username']\"\n            placeholder=\"{{ 'e.g. joe`LOCALIZE`' | translate }}\"\n            required\n          />\n        </div>\n        <div class=\"form-group\" *ngIf=\"smsConfig.provider === 'openit'\">\n          <label translate for=\"password\">Password</label>\n          <input\n            id=\"password\"\n            class=\"form-control\"\n            type=\"password\"\n            autocomplete=\"off\"\n            name=\"password\"\n            [(ngModel)]=\"smsConfig['credentials.openit.password']\"\n            placeholder=\"{{ 'e.g. my_password' | translate }}\"\n            required\n          />\n        </div>\n        <div class=\"form-group\" *ngIf=\"smsConfig.provider === 'sms77'\">\n          <label translate for=\"apiKey\">API key</label>\n          <input\n            id=\"apiKey\"\n            class=\"form-control\"\n            type=\"text\"\n            autocomplete=\"off\"\n            name=\"apiKey\"\n            [(ngModel)]=\"smsConfig['credentials.sms77.api.key']\"\n            required\n          />\n        </div>\n      </div>\n      <div class=\"card-footer\">\n        <button\n          type=\"button\"\n          class=\"btn btn-default\"\n          (click)=\"deleteSMSGatewayConfiguration()\"\n          [disabled]=\"!(oldConfig && oldConfig.provider)\"\n          title=\"{{ 'Delete' | translate }}\"\n          translate\n        >\n          Delete\n        </button>\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary\"\n          [disabled]=\"!smsGatewayForm.form.valid || smsGatewayForm.form.pristine\"\n          title=\"{{ 'Save' | translate }}\"\n          translate\n        >\n          Save\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
    })
], SmsGatewayComponent);

const smsGatewayRoutes = [{ path: 'smsgateway', component: SmsGatewayComponent }];
const ɵ0 = [new NavigatorNode({
        label: gettext('SMS provider'),
        path: 'smsgateway',
        icon: 'envelope-o',
        parent: gettext('Settings'),
        priority: 1000
    })];
const navigatorNodesProvider = {
    provide: HOOK_NAVIGATOR_NODES,
    useValue: ɵ0,
    multi: true
};
let SmsGatewayModule = class SmsGatewayModule {
};
SmsGatewayModule = __decorate([
    NgModule({
        declarations: [SmsGatewayComponent],
        exports: [SmsGatewayComponent],
        imports: [
            CoreModule,
            CommonModule,
            FormsModule,
            RouterModule.forRoot(smsGatewayRoutes, { useHash: true }),
            UpgradeModule
        ],
        entryComponents: [SmsGatewayComponent],
        providers: [SmsGatewayService, navigatorNodesProvider]
    })
], SmsGatewayModule);

/**
 * Generated bundle index. Do not edit.
 */

export { SmsGatewayComponent, SmsGatewayModule, ɵ0, SmsGatewayService as ɵa };
//# sourceMappingURL=c8y-ngx-components-sms-gateway.js.map
