import { __awaiter, __decorate } from 'tslib';
import { EventEmitter, Injectable, Component, Input, Output, Pipe, NgModule } from '@angular/core';
import { gettext, AlertService, operationStatusIcons, operationStatusClasses, AppStateService, ViewContext, CoreModule, HOOK_ONCE_ROUTE } from '@c8y/ngx-components';
import { ActivatedRoute } from '@angular/router';
import { EventService, EventBinaryService, OperationService, InventoryService, InventoryBinaryService, Realtime, OperationStatus, UserService } from '@c8y/client';
import { TranslateService } from '@ngx-translate/core';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { saveAs } from 'file-saver/FileSaver';
import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { cloneDeep } from 'lodash-es';

let DeviceConfigurationService = class DeviceConfigurationService {
    constructor(eventService, eventBinaryService, operationService, alertService, inventoryService, inventoryBinaryService, translateService) {
        this.eventService = eventService;
        this.eventBinaryService = eventBinaryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.translateService = translateService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.repositoryConfigListUpdated = new EventEmitter();
    }
    getLatestConfigurationEvent(deviceId, type) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = {
                source: deviceId,
                type,
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                pageSize: 1
            };
            const { data } = yield this.eventService.list(filter);
            return data[0];
        });
    }
    getEventConfigurationBinary(event) {
        return __awaiter(this, void 0, void 0, function* () {
            let binary;
            try {
                const res = yield this.eventBinaryService.download(event);
                binary = res.text();
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return binary;
        });
    }
    createUploadConfigFileOperation(device, configurationType) {
        return __awaiter(this, void 0, void 0, function* () {
            let operation;
            const operationText = gettext('Retrieve {{ configurationType }} configuration snapshot from device {{ deviceName }}');
            const operationCfg = {
                deviceId: device.id,
                c8y_UploadConfigFile: {
                    type: configurationType
                },
                description: this.translateService.instant(operationText, {
                    configurationType,
                    deviceName: device.name
                })
            };
            try {
                const { data } = yield this.operationService.create(operationCfg);
                operation = data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return operation;
        });
    }
    getLatestConfigFileOperation(deviceId, configType, operationType) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = {
                deviceId,
                fragmentType: operationType,
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                revert: true,
                pageSize: 2000
            };
            const { data } = yield this.operationService.list(filter);
            return data.find(op => op[operationType].type === configType);
        });
    }
    getSnapshotsFromRepository(deviceType, configurationType) {
        return __awaiter(this, void 0, void 0, function* () {
            let query;
            const filter = {
                pageSize: 2000,
                withTotalPages: true
            };
            query = {
                __filter: {
                    __and: [
                        {
                            type: 'c8y_ConfigurationDump'
                        },
                        {
                            __or: [
                                { configurationType: { __eq: configurationType } },
                                {
                                    __not: {
                                        __has: 'configurationType'
                                    }
                                }
                            ]
                        }
                    ]
                },
                __orderby: [{ configurationType: -1, name: 1 }]
            };
            if (deviceType) {
                const deviceTypeFilter = {
                    __or: [
                        { deviceType: { __eq: deviceType } },
                        {
                            __not: {
                                __has: 'deviceType'
                            }
                        }
                    ]
                };
                query.__filter.__and.push(deviceTypeFilter);
            }
            return (yield this.inventoryService.listQuery(query, filter)).data;
        });
    }
    createDownloadConfigFileOperation(device, configurationType, binaryUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            let operation;
            const operationText = gettext('Send configuration {{ configurationType }} to device {{ deviceName }}');
            const operationCfg = {
                deviceId: device.id,
                c8y_DownloadConfigFile: {
                    url: binaryUrl,
                    type: configurationType
                },
                description: this.translateService.instant(operationText, {
                    configurationType,
                    deviceName: device.name
                })
            };
            try {
                const { data } = yield this.operationService.create(operationCfg);
                operation = data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return operation;
        });
    }
    getConfigurationBinaryFile(url) {
        return __awaiter(this, void 0, void 0, function* () {
            let binary;
            const moId = this.inventoryBinaryService.getIdFromUrl(url);
            if (moId) {
                const binaryMO = (yield this.inventoryService.detail(moId)).data;
                const res = yield this.inventoryBinaryService.download(binaryMO);
                binary = yield res.text();
            }
            else {
                binary = this.fetchExternalBinary(url);
            }
            return binary;
        });
    }
    saveToConfigurationRepository(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const mo = {};
            Object.assign(mo, {
                name: config.name,
                type: 'c8y_ConfigurationDump',
                deviceType: config.deviceType,
                configurationType: config.configurationType,
                c8y_Global: {}
            });
            const response = yield this.inventoryBinaryService.create(new Blob([config.binary]), {
                c8y_Global: {}
            });
            mo.url = response.data.self;
            return this.inventoryService.create(mo);
        });
    }
    updateRepositoryConfigList() {
        this.repositoryConfigListUpdated.emit();
    }
    fetchExternalBinary(url) {
        return __awaiter(this, void 0, void 0, function* () {
            let configBinary;
            try {
                const res = yield fetch(url);
                if (res.status === 200) {
                    configBinary = yield res.text();
                }
            }
            catch (ex) {
                // do nothing
            }
            return configBinary;
        });
    }
};
DeviceConfigurationService.ctorParameters = () => [
    { type: EventService },
    { type: EventBinaryService },
    { type: OperationService },
    { type: AlertService },
    { type: InventoryService },
    { type: InventoryBinaryService },
    { type: TranslateService }
];
DeviceConfigurationService = __decorate([
    Injectable()
], DeviceConfigurationService);

let DeviceConfigurationComponent = class DeviceConfigurationComponent {
    constructor(route, deviceConfigurationService, realtime) {
        this.route = route;
        this.deviceConfigurationService = deviceConfigurationService;
        this.realtime = realtime;
        this.configSnapshot = {};
        this.deviceConfigurationService.repositoryConfigListUpdated.subscribe(() => __awaiter(this, void 0, void 0, function* () {
            this.repositorySnapshot = undefined;
            this.repositorySnapshots = yield this.getSnapshotsFromRepository(this.device.type, this.configurationType);
        }));
    }
    ngOnInit() {
        this.device = this.route.snapshot.parent.data.contextData;
        this.supportedConfigurations = this.device.c8y_SupportedConfigurations.map(item => ({
            name: item
        }));
        this.repositorySnapshotsEmptyState = {
            icon: 'gears',
            title: gettext('No configurations available.'),
            text: gettext('Add configuration to configuration repository')
        };
        const eventsChannel = '/eventsWithChildren/' + this.device.id;
        this.eventsSubscription = this.realtime.observable(eventsChannel).subscribe(({ data }) => {
            this.updateConfigSnapshotOnEvent(data);
        });
    }
    onConfigTypeSelected(config) {
        return __awaiter(this, void 0, void 0, function* () {
            this.configurationType = undefined;
            this.repositorySnapshot = undefined;
            this.configSnapshot = {};
            const configEvent = yield this.deviceConfigurationService.getLatestConfigurationEvent(this.device.id, config.name);
            this.updateConfigSnapshotOnEvent(configEvent, config.name);
            this.configurationType = config.name;
            this.repositorySnapshots = yield this.getSnapshotsFromRepository(this.device.type, config.name);
        });
    }
    getSnapshotsFromRepository(deviceType, configurationType) {
        return this.deviceConfigurationService.getSnapshotsFromRepository(deviceType, configurationType);
    }
    updateConfigSnapshotOnEvent(event, configurationType) {
        return __awaiter(this, void 0, void 0, function* () {
            const type = configurationType || this.configurationType;
            if (event && event.type === type) {
                this.configSnapshot = {
                    time: event.time,
                    name: event.text,
                    deviceType: this.device.deviceType,
                    configurationType: type
                };
                this.configSnapshot.binary = yield this.deviceConfigurationService.getEventConfigurationBinary(event);
            }
        });
    }
    onRepositoryConfigSelected(config) {
        return __awaiter(this, void 0, void 0, function* () {
            this.repositorySnapshot = {
                time: config.creationTime,
                name: config.name,
                binaryUrl: config.url,
                deviceType: config.deviceType,
                configurationType: config.configurationType
            };
            if (config.url) {
                this.repositorySnapshot.binary = yield this.deviceConfigurationService.getConfigurationBinaryFile(config.url);
            }
        });
    }
    ngOnDestroy() {
        this.eventsSubscription.unsubscribe();
    }
};
DeviceConfigurationComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: DeviceConfigurationService },
    { type: Realtime }
];
DeviceConfigurationComponent = __decorate([
    Component({
        selector: 'c8y-device-configuration',
        template: "<div class=\"card card--grid card--grid--fullpage grid__col--4-8 grid__row--6-6\">\n  <!-- DEVICE SUPPORTED CONFIGURATIONS -->\n  <div class=\"card--grid__inner-scroll\">\n    <div class=\"card-header separator\">\n      <h4 class=\"card-title\" translate>Configurations</h4>\n    </div>\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\"><span translate>Device-supported configurations</span></h5>\n    </div>\n    <div class=\"p-r-16\">\n      <c8y-device-configuration-list\n        [items]=\"supportedConfigurations\"\n        [itemIcon]=\"'gears'\"\n        (configSelected)=\"onConfigTypeSelected($event)\"\n      ></c8y-device-configuration-list>\n    </div>\n  </div>\n\n  <!-- CONFIGURATION PREVIEW -->\n  <div class=\"card--grid__inner-scroll bg-gray-lighter\">\n    <div class=\"card-header separator bg-gray-lighter hidden-xs hidden-sm\">\n      <h4>&nbsp;</h4>\n    </div>\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\"><span translate>Preview</span></h5>\n\n      <!-- EMPTY STATE -->\n      <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n        <h1 [c8yIcon]=\"'file-text'\"></h1>\n        <p>\n          <strong translate>No configuration selected.</strong><br />\n          <small translate>Select a configuration to preview</small>\n        </p>\n      </div>\n\n      <!-- PREVIEW AVAILABLE STATE -->\n      <c8y-device-configuration-preview\n        *ngIf=\"configurationType\"\n        [device]=\"device\"\n        [configurationType]=\"configurationType\"\n        [configSnapshot]=\"configSnapshot\"\n        [canSaveSnapshot]=\"true\"\n        [operationToTrigger]=\"'c8y_UploadConfigFile'\"\n        [actionButtonText]=\"'Get snapshot from device' | translate\"\n        [actionButtonIcon]=\"'download'\"\n      ></c8y-device-configuration-preview>\n    </div>\n  </div>\n\n  <!-- AVAILABLE SUPPORTED CONFIGURATIONS -->\n  <div class=\"card--grid__inner-scroll\">\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\" translate>Available supported configurations</h5>\n    </div>\n\n    <!-- EMPTY STATE -->\n    <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n      <h1 [c8yIcon]=\"'gears'\"></h1>\n      <p>\n        <strong translate>No selection</strong><br />\n        <small translate>Select a configuration from the device-supported configuration list</small>\n      </p>\n    </div>\n    <div class=\"p-r-16\" *ngIf=\"configurationType\">\n      <c8y-device-configuration-list\n        [items]=\"repositorySnapshots\"\n        [itemIcon]=\"'file-text'\"\n        [emptyState]=\"repositorySnapshotsEmptyState\"\n        [isFilterEnabled]=\"true\"\n        (configSelected)=\"onRepositoryConfigSelected($event)\"\n      ></c8y-device-configuration-list>\n    </div>\n  </div>\n\n  <!-- CONFIGURATION PREVIEW -->\n  <div class=\"card--grid__inner-scroll bg-gray-lighter\">\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\" translate>Preview</h5>\n\n      <!-- EMPTY STATE -->\n\n      <div class=\"c8y-empty-state text-left\" *ngIf=\"!repositorySnapshot\">\n        <h1 [c8yIcon]=\"'file-text'\"></h1>\n        <p>\n          <strong translate>No configuration selected.</strong><br />\n          <small *ngIf=\"!configurationType; else noSnapshot\" translate\n            >Select a configuration to preview</small\n          >\n          <ng-template #noSnapshot>\n            <small translate>Select the configuration you want to preview</small>\n          </ng-template>\n        </p>\n      </div>\n\n      <!-- CONFIGURATION SELECTED STATE -->\n      <c8y-device-configuration-preview\n        *ngIf=\"repositorySnapshot\"\n        [device]=\"device\"\n        [configurationType]=\"configurationType\"\n        [configSnapshot]=\"repositorySnapshot\"\n        [operationToTrigger]=\"'c8y_DownloadConfigFile'\"\n        [actionButtonText]=\"'Send configuration to device' | translate\"\n        [actionButtonIcon]=\"'upload'\"\n      ></c8y-device-configuration-preview>\n    </div>\n  </div>\n</div>\n"
    })
], DeviceConfigurationComponent);

let ConfigurationListComponent = class ConfigurationListComponent {
    constructor() {
        this.configSelected = new EventEmitter();
        this.filterTerm = '';
    }
    showConfigurationTypePreview(config) {
        this.selectedConfig = config;
        this.configSelected.emit(config);
    }
    updatePipe(filterTerm) {
        this.filterTerm = filterTerm;
    }
};
__decorate([
    Input()
], ConfigurationListComponent.prototype, "items", void 0);
__decorate([
    Input()
], ConfigurationListComponent.prototype, "itemIcon", void 0);
__decorate([
    Input()
], ConfigurationListComponent.prototype, "emptyState", void 0);
__decorate([
    Input()
], ConfigurationListComponent.prototype, "isFilterEnabled", void 0);
__decorate([
    Output()
], ConfigurationListComponent.prototype, "configSelected", void 0);
ConfigurationListComponent = __decorate([
    Component({
        selector: 'c8y-device-configuration-list',
        template: "<div class=\"left-p-md bottom-p-xs\" *ngIf=\"isFilterEnabled\">\n  <c8y-filter [icon]=\"'search'\" (onSearch)=\"updatePipe($event)\"></c8y-filter>\n</div>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state text-left\" *ngIf=\"items?.length === 0\">\n  <h1 [c8yIcon]=\"emptyState.icon\"></h1>\n  <p>\n    <strong>{{ emptyState.title | translate }}</strong\n    ><br />\n    <small>{{ emptyState.text | translate }}</small>\n  </p>\n</div>\n\n<!-- CONFIGURATIONS AVAILABLE -->\n<div class=\"c8y-nav-stacked\">\n  <div\n    class=\"c8y-stacked-item flex-row\"\n    [class.active]=\"config === selectedConfig\"\n    *ngFor=\"let config of items | configurationFilterPipe: filterTerm\"\n    (click)=\"showConfigurationTypePreview(config)\"\n  >\n    <div class=\"list-item-icon\">\n      <i [c8yIcon]=\"itemIcon\"></i>\n    </div>\n    <div class=\"list-item-body text-truncate\">\n      <span>{{ config.name }}</span>\n      <span class=\"text-uppercase text-gray-light pull-right\">{{ config.deviceType }}</span>\n    </div>\n  </div>\n</div>\n\n<!-- for Carlos: config.configurationType to differentiate whether a config matches configuration type. -->\n"
    })
], ConfigurationListComponent);

let ConfigurationOperationComponent = class ConfigurationOperationComponent {
    ngOnInit() {
        this.statusIcons = operationStatusIcons;
        this.statusClasses = operationStatusClasses;
    }
};
__decorate([
    Input()
], ConfigurationOperationComponent.prototype, "operation", void 0);
ConfigurationOperationComponent = __decorate([
    Component({
        selector: 'c8y-device-configuration-operation',
        template: "<div class=\"card\">\n  <div class=\"list-group list-group-links\">\n    <a class=\"list-group-item flex-row\" href=\"#/device/{{ operation.deviceId }}/control\">\n      <div class=\"list-item-icon\">\n        <i\n          [c8yIcon]=\"statusIcons[operation.status]\"\n          [ngClass]=\"statusClasses[operation.status]\"\n          [tooltip]=\"operation.status | translate\"\n          tooltip-placement=\"right\"\n        ></i>\n      </div>\n      <div class=\"list-item-body\">\n        <div class=\"flex-row row\">\n          <span class=\"col-sm-8\">{{ operation.description | translate }}</span>\n          <div class=\"col-sm-4 text-muted\">\n            <i c8yIcon=\"calendar\"></i>&nbsp;\n            <small>{{ operation.creationTime | date: 'medium' }}</small>\n          </div>\n        </div>\n      </div>\n    </a>\n  </div>\n</div>\n"
    })
], ConfigurationOperationComponent);

let SourceCodePreviewComponent = class SourceCodePreviewComponent {
};
__decorate([
    Input()
], SourceCodePreviewComponent.prototype, "isDisabled", void 0);
__decorate([
    Input()
], SourceCodePreviewComponent.prototype, "text", void 0);
SourceCodePreviewComponent = __decorate([
    Component({
        selector: 'c8y-source-code-preview',
        template: "<textarea [disabled]=\"isDisabled\" class=\"form-control no-resize\" rows=\"8\">{{ text }}</textarea>\n"
    })
], SourceCodePreviewComponent);

class DeviceConfigurationGuard {
    canActivate(route, state) {
        const contextData = route.data.contextData || route.parent.data.contextData;
        return (contextData &&
            contextData.c8y_SupportedConfigurations &&
            contextData.c8y_SupportedConfigurations.length > 0);
    }
}

var DeviceConfigurationOperation;
(function (DeviceConfigurationOperation) {
    DeviceConfigurationOperation["UPLOAD_CONFIG"] = "c8y_UploadConfigFile";
    DeviceConfigurationOperation["DOWNLOAD_CONFIG"] = "c8y_DownloadConfigFile";
})(DeviceConfigurationOperation || (DeviceConfigurationOperation = {}));

let SaveToRepositoryComponent = class SaveToRepositoryComponent {
    constructor(modal, alertService, deviceConfigurationService) {
        this.modal = modal;
        this.alertService = alertService;
        this.deviceConfigurationService = deviceConfigurationService;
        this.result = new Promise((resolve, reject) => {
            this._save = resolve;
            this._cancel = reject;
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.deviceConfigurationService.saveToConfigurationRepository(this.configSnapshot);
                this.alertService.success(gettext('Configuration saved.'));
                this._save();
            }
            catch (ex) {
                if (ex.data) {
                    this.alertService.danger(ex.data.message);
                }
            }
        });
    }
    close() {
        this._cancel();
        this.modal.hide();
    }
};
SaveToRepositoryComponent.ctorParameters = () => [
    { type: BsModalRef },
    { type: AlertService },
    { type: DeviceConfigurationService }
];
SaveToRepositoryComponent = __decorate([
    Component({
        selector: 'c8y-save-config-to-configuration-repository',
        template: "<div class=\"modal-header bg-primary text-center text-white\">\n  <div style=\"font-size: 62px;\">\n    <span c8yIcon=\"gears\"></span>\n  </div>\n  <h4 class=\"text-uppercase\" translate>\n    Save configuration\n  </h4>\n</div>\n<div class=\"modal-body\">\n  <form #saveConfigurationSnapshot=\"ngForm\" class=\"p-t-24\">\n    <c8y-form-group>\n      <label translate for=\"name\">Name</label>\n      <input\n        id=\"name\"\n        type=\"text\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"name\"\n        [(ngModel)]=\"configSnapshot.name\"\n        required\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"deviceType\">Device type</label>\n      <input\n        id=\"deviceType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"deviceType\"\n        [(ngModel)]=\"configSnapshot.deviceType\"\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"configurationType\">Configuration type</label>\n      <input\n        id=\"configurationType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"configurationType\"\n        [(ngModel)]=\"configSnapshot.configurationType\"\n      />\n    </c8y-form-group>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n    Cancel\n  </button>\n\n  <button\n    title=\"{{ 'Add certificate' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"saveConfigurationSnapshot.form.invalid\"\n    translate\n  >\n    Save\n  </button>\n</div>\n"
    })
], SaveToRepositoryComponent);

let ConfigurationPreviewComponent = class ConfigurationPreviewComponent {
    constructor(deviceConfigurationService, realtime, bsModal, user, appState) {
        this.deviceConfigurationService = deviceConfigurationService;
        this.realtime = realtime;
        this.bsModal = bsModal;
        this.user = user;
        this.appState = appState;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.operationToTrigger === DeviceConfigurationOperation.UPLOAD_CONFIG) {
                const configOperation = yield this.getOperation();
                this.updateOperation(configOperation);
            }
            const operationsChannel = `/operations/${this.device.id}`;
            this.operationsSubscription = this.realtime
                .observable(operationsChannel)
                .subscribe(({ data }) => {
                this.updateOperation(data);
            });
        });
    }
    createDeviceOperation() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
                this.operation = yield this.deviceConfigurationService.createDownloadConfigFileOperation(this.device, this.configurationType, this.configSnapshot.binaryUrl);
            }
            if (this.operationToTrigger === DeviceConfigurationOperation.UPLOAD_CONFIG) {
                this.operation = yield this.deviceConfigurationService.createUploadConfigFileOperation(this.device, this.configurationType);
            }
        });
    }
    showOperation() {
        if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
            return !!this.operation;
        }
        return (this.operation &&
            [OperationStatus.PENDING, OperationStatus.EXECUTING, OperationStatus.FAILED].includes(this.operation.status));
    }
    showBinary() {
        if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
            return true;
        }
        return !this.showOperation();
    }
    isCreateOperationDisabled() {
        return (this.operation &&
            [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(this.operation.status));
    }
    updateOperation(operation) {
        if (operation &&
            operation[this.operationToTrigger] &&
            operation[this.operationToTrigger].type &&
            operation[this.operationToTrigger].type === this.configurationType) {
            this.operation = operation;
        }
    }
    getOperation() {
        return this.deviceConfigurationService.getLatestConfigFileOperation(this.device.id, this.configurationType, this.operationToTrigger);
    }
    download() {
        const blob = new Blob([this.configSnapshot.binary]);
        const fileName = this.configSnapshot.name;
        saveAs(blob, fileName);
    }
    saveToRepository() {
        return __awaiter(this, void 0, void 0, function* () {
            const initialState = {
                configSnapshot: cloneDeep(this.configSnapshot)
            };
            const modal = this.bsModal.show(SaveToRepositoryComponent, {
                class: 'modal-sm',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                yield modal.result;
                this.deviceConfigurationService.updateRepositoryConfigList();
                modal.close();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    hasPermission() {
        return this.user.hasAnyRole(this.appState.currentUser.value, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_CREATE'
        ]);
    }
    ngOnDestroy() {
        this.operationsSubscription.unsubscribe();
    }
};
ConfigurationPreviewComponent.ctorParameters = () => [
    { type: DeviceConfigurationService },
    { type: Realtime },
    { type: BsModalService },
    { type: UserService },
    { type: AppStateService }
];
__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "device", void 0);
__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "configurationType", void 0);
__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "configSnapshot", void 0);
__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "canSaveSnapshot", void 0);
__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "actionButtonText", void 0);
__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "actionButtonIcon", void 0);
__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "operationToTrigger", void 0);
ConfigurationPreviewComponent = __decorate([
    Component({
        selector: 'c8y-device-configuration-preview',
        template: "<div *ngIf=\"configSnapshot\">\n  <div class=\"content-flex-55 p-b-16\">\n    <div class=\"col-5 p-t-4\">\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Configuration</span>\n      <span *ngIf=\"configSnapshot.name; else emptyText\">\n        <strong>{{ configSnapshot.name }}</strong>\n      </span>\n      <ng-template #emptyText> --- </ng-template>\n    </div>\n    <div class=\"col-4 p-t-4\">\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Last updated</span>\n      <small *ngIf=\"configSnapshot.time; else emptyDate\">\n        {{ configSnapshot.time | date: 'medium' }}\n      </small>\n      <ng-template #emptyDate> --- </ng-template>\n    </div>\n    <div class=\"col-3\">\n      <button\n        class=\"btn btn-default btn-sm pull-right\"\n        type=\"button\"\n        title=\"{{ actionButtonText | translate }}\"\n        (click)=\"createDeviceOperation()\"\n        [disabled]=\"isCreateOperationDisabled()\"\n      >\n        <i [c8yIcon]=\"actionButtonIcon\"></i> {{ actionButtonText | translate }}\n      </button>\n    </div>\n  </div>\n  <div class=\"c8y-empty-state text-left\" *ngIf=\"!configSnapshot.binary && showBinary()\">\n    <h1 [c8yIcon]=\"'file-image-o'\"></h1>\n    <p>\n      <strong translate>No preview available.</strong><br />\n      <small translate>Could not fetch the file.</small>\n    </p>\n  </div>\n  <div *ngIf=\"configSnapshot.binary && showBinary()\">\n    <c8y-source-code-preview\n      [text]=\"configSnapshot.binary\"\n      [isDisabled]=\"true\"\n    ></c8y-source-code-preview>\n    <div *ngIf=\"canSaveSnapshot\" class=\"top-p-md\">\n      <button\n        type=\"button\"\n        class=\"btn btn-primary btn-sm pull-right left-m-sm\"\n        (click)=\"download()\"\n        translate\n      >\n        Download\n      </button>\n      <button\n        *ngIf=\"hasPermission()\"\n        type=\"button\"\n        class=\"btn btn-default btn-sm pull-right\"\n        (click)=\"saveToRepository()\"\n        translate\n      >\n        Save to repository\n      </button>\n    </div>\n  </div>\n  <div *ngIf=\"showOperation()\">\n    <c8y-device-configuration-operation\n      [operation]=\"operation\"\n    ></c8y-device-configuration-operation>\n  </div>\n</div>\n"
    })
], ConfigurationPreviewComponent);

let ConfigurationFilterPipe = class ConfigurationFilterPipe {
    transform(items, filterTerm) {
        return filterTerm.trim().length === 0
            ? items
            : items.filter((item) => this.filterContainString(item.name, filterTerm) ||
                this.filterContainString(item.deviceType, filterTerm));
    }
    filterContainString(name, filterTerm) {
        const term = filterTerm.toLowerCase().trim();
        return name && name.toLowerCase().indexOf(term) > -1;
    }
};
ConfigurationFilterPipe = __decorate([
    Pipe({
        name: 'configurationFilterPipe'
    })
], ConfigurationFilterPipe);

const routes = [
    {
        context: ViewContext.Device,
        path: 'device-configuration',
        component: DeviceConfigurationComponent,
        label: gettext('Configuration'),
        icon: 'gears',
        canActivate: [DeviceConfigurationGuard]
    }
];
const ɵ0 = routes;
let DeviceConfigurationModule = class DeviceConfigurationModule {
};
DeviceConfigurationModule = __decorate([
    NgModule({
        declarations: [
            DeviceConfigurationComponent,
            ConfigurationListComponent,
            ConfigurationOperationComponent,
            SourceCodePreviewComponent,
            ConfigurationPreviewComponent,
            ConfigurationFilterPipe,
            SaveToRepositoryComponent
        ],
        exports: [],
        imports: [CoreModule, TooltipModule],
        entryComponents: [DeviceConfigurationComponent, SaveToRepositoryComponent],
        providers: [
            DeviceConfigurationService,
            DeviceConfigurationGuard,
            {
                provide: HOOK_ONCE_ROUTE,
                useValue: ɵ0,
                multi: true
            }
        ]
    })
], DeviceConfigurationModule);

/**
 * Generated bundle index. Do not edit.
 */

export { DeviceConfigurationModule, ɵ0, DeviceConfigurationComponent as ɵa, DeviceConfigurationService as ɵb, ConfigurationListComponent as ɵc, ConfigurationOperationComponent as ɵd, SourceCodePreviewComponent as ɵe, ConfigurationPreviewComponent as ɵf, ConfigurationFilterPipe as ɵg, SaveToRepositoryComponent as ɵh, DeviceConfigurationGuard as ɵi };
//# sourceMappingURL=c8y-ngx-components-device-configuration.js.map
