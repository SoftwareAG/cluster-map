import { Action, ActionBarItem, ActionService, AppStateService, Breadcrumb, RouterService, Search, Tab, DocLink } from '@c8y/ngx-components';
import { Observable, Subject } from 'rxjs';
import { FetchClient } from '@c8y/client';
import { NgZone } from '@angular/core';
import { Router } from '@angular/router';
export declare class BridgeService {
    injector: any;
    private appState;
    private fetchClient;
    router: Router;
    private ngZone;
    private routerService;
    private actionService;
    $routeChanges: Observable<any>;
    $ng1RouteChangeSuccess: Observable<any>;
    $ng1RouteChangeStart: Observable<any>;
    $liveTabs: Subject<Tab[]>;
    navigationNodes$: Observable<any>;
    constructor(injector: any, appState: AppStateService, fetchClient: FetchClient, router: Router, ngZone: NgZone, routerService: RouterService, actionService: ActionService);
    hookViewProvider(): void;
    addRoute(cfg: any): void;
    ng1Routes(): void;
    fixE2eIssues(): void;
    setToken(token?: string, tfa?: string, type?: string): void;
    hookAuth(): void;
    hookLanguage(): void;
    hookTabs(): void;
    hookNavigator(): void;
    getTabs(): Observable<any>;
    getQuickLinks(): Promise<DocLink[]>;
    getActionBarItems(): Observable<ActionBarItem>;
    getBreadcrumbs(): Observable<Breadcrumb[]>;
    getSearch(): Search[];
    getActions(): Observable<Action>;
    fromNg1Event(obj: any, evt: any): Observable<unknown>;
    private hookUserMenu;
}
export declare function bridgeServiceFactory(injector: any, appState: AppStateService, fetchClient: FetchClient, router: Router, ngZone: NgZone, routerService: RouterService, actionService: ActionService): BridgeService;
export declare const bridgeServiceProvider: {
    provide: typeof BridgeService;
    useFactory: typeof bridgeServiceFactory;
    deps: (string | typeof AppStateService | typeof FetchClient | typeof Router | typeof NgZone | typeof RouterService | typeof ActionService)[];
};
