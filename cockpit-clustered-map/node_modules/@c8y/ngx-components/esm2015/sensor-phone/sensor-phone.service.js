import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap';
import { SensorPhoneModalComponent } from './sensor-phone-modal.component';
import { AppStateService } from '@c8y/ngx-components';
import { InventoryService } from '@c8y/client';
import { head } from 'lodash-es';
import { gettext } from '@c8y/ngx-components';
let SensorPhoneService = class SensorPhoneService {
    constructor(bsModalService, ui, inventoryService) {
        this.bsModalService = bsModalService;
        this.ui = ui;
        this.inventoryService = inventoryService;
        this.HTTP_STATUS_CODE = {
            OK: 200,
            CREATED: 201
        };
        this.PHONE_GROUP_FRAGMENT = 'c8y_IsSensorPhoneGroup';
        this.PHONE_GROUP_NAME = gettext('Phones');
        this.ui.currentTenant.subscribe(data => {
            if (data) {
                this.domainName = data.domainName;
                this.tenantId = data.name;
            }
        });
    }
    createModal() {
        this.bsModalService.show(SensorPhoneModalComponent, {
            backdrop: 'static',
            class: 'lg'
        });
    }
    getHost() {
        return this.domainName.substring(this.domainName.indexOf('.') + 1);
    }
    getTenantName() {
        return this.domainName.split('.')[0];
    }
    getTenantId() {
        return this.tenantId;
    }
    checkPhoneGroupExists() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data, res } = yield this.inventoryService.list({
                fragmentType: this.PHONE_GROUP_FRAGMENT
            });
            if (data && res && res.status === this.HTTP_STATUS_CODE.OK) {
                return head(data);
            }
            return null;
        });
    }
    addPhoneGroup() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const group = yield this.checkPhoneGroupExists();
            if (group) {
                return group;
            }
            return yield this.createPhoneGroup();
        });
    }
    createPhoneGroup() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const newPhoneGroup = {
                c8y_Global: {},
                c8y_IsDeviceGroup: {},
                type: 'c8y_DeviceGroup',
                name: this.PHONE_GROUP_NAME,
                [this.PHONE_GROUP_FRAGMENT]: {}
            };
            const { data, res } = yield this.inventoryService.create(newPhoneGroup);
            if (data && res && res.status === this.HTTP_STATUS_CODE.CREATED) {
                return data;
            }
            return null;
        });
    }
    generateRegistrationData(deviceId) {
        const res = 'c8y://' + this.getTenantName() + '.' + this.getHost() + '/?deviceId=' + deviceId;
        return res;
    }
};
SensorPhoneService.ctorParameters = () => [
    { type: BsModalService },
    { type: AppStateService },
    { type: InventoryService }
];
SensorPhoneService = tslib_1.__decorate([
    Injectable()
], SensorPhoneService);
export { SensorPhoneService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vuc29yLXBob25lLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3NlbnNvci1waG9uZS8iLCJzb3VyY2VzIjpbInNlbnNvci1waG9uZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUc5QyxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQVU3QixZQUNVLGNBQThCLEVBQzlCLEVBQW1CLEVBQ25CLGdCQUFrQztRQUZsQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVpuQyxxQkFBZ0IsR0FBRztZQUMxQixFQUFFLEVBQUUsR0FBRztZQUNQLE9BQU8sRUFBRSxHQUFHO1NBQ2IsQ0FBQztRQUdNLHlCQUFvQixHQUFHLHdCQUF3QixDQUFDO1FBQ3ZDLHFCQUFnQixHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQU9wRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDckMsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDM0I7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUU7WUFDbEQsUUFBUSxFQUFFLFFBQVE7WUFDbEIsS0FBSyxFQUFFLElBQUk7U0FDWixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFSyxxQkFBcUI7O1lBQ3pCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO2dCQUNyRCxZQUFZLEVBQUUsSUFBSSxDQUFDLG9CQUFvQjthQUN4QyxDQUFDLENBQUM7WUFDSCxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFO2dCQUMxRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQjtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztLQUFBO0lBRUssYUFBYTs7WUFDakIsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUNqRCxJQUFJLEtBQUssRUFBRTtnQkFDVCxPQUFPLEtBQUssQ0FBQzthQUNkO1lBQ0QsT0FBTyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3ZDLENBQUM7S0FBQTtJQUVLLGdCQUFnQjs7WUFDcEIsTUFBTSxhQUFhLEdBQUc7Z0JBQ3BCLFVBQVUsRUFBRSxFQUFFO2dCQUNkLGlCQUFpQixFQUFFLEVBQUU7Z0JBQ3JCLElBQUksRUFBRSxpQkFBaUI7Z0JBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsZ0JBQWdCO2dCQUMzQixDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUU7YUFDaEMsQ0FBQztZQUVGLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3hFLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7Z0JBQy9ELE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7S0FBQTtJQUVELHdCQUF3QixDQUFDLFFBQVE7UUFDL0IsTUFBTSxHQUFHLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLGFBQWEsR0FBRyxRQUFRLENBQUM7UUFDOUYsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0NBQ0YsQ0FBQTs7WUFyRTJCLGNBQWM7WUFDMUIsZUFBZTtZQUNELGdCQUFnQjs7QUFiakMsa0JBQWtCO0lBRDlCLFVBQVUsRUFBRTtHQUNBLGtCQUFrQixDQWdGOUI7U0FoRlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICduZ3gtYm9vdHN0cmFwJztcbmltcG9ydCB7IFNlbnNvclBob25lTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL3NlbnNvci1waG9uZS1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBJbnZlbnRvcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgaGVhZCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZW5zb3JQaG9uZVNlcnZpY2Uge1xuICByZWFkb25seSBIVFRQX1NUQVRVU19DT0RFID0ge1xuICAgIE9LOiAyMDAsXG4gICAgQ1JFQVRFRDogMjAxXG4gIH07XG4gIHByaXZhdGUgZG9tYWluTmFtZTogc3RyaW5nO1xuICBwcml2YXRlIHRlbmFudElkOiBzdHJpbmc7XG4gIHByaXZhdGUgUEhPTkVfR1JPVVBfRlJBR01FTlQgPSAnYzh5X0lzU2Vuc29yUGhvbmVHcm91cCc7XG4gIHByaXZhdGUgcmVhZG9ubHkgUEhPTkVfR1JPVVBfTkFNRSA9IGdldHRleHQoJ1Bob25lcycpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYnNNb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlLFxuICAgIHByaXZhdGUgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGludmVudG9yeVNlcnZpY2U6IEludmVudG9yeVNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy51aS5jdXJyZW50VGVuYW50LnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHRoaXMuZG9tYWluTmFtZSA9IGRhdGEuZG9tYWluTmFtZTtcbiAgICAgICAgdGhpcy50ZW5hbnRJZCA9IGRhdGEubmFtZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZU1vZGFsKCkge1xuICAgIHRoaXMuYnNNb2RhbFNlcnZpY2Uuc2hvdyhTZW5zb3JQaG9uZU1vZGFsQ29tcG9uZW50LCB7XG4gICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXG4gICAgICBjbGFzczogJ2xnJ1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SG9zdCgpIHtcbiAgICByZXR1cm4gdGhpcy5kb21haW5OYW1lLnN1YnN0cmluZyh0aGlzLmRvbWFpbk5hbWUuaW5kZXhPZignLicpICsgMSk7XG4gIH1cblxuICBnZXRUZW5hbnROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmRvbWFpbk5hbWUuc3BsaXQoJy4nKVswXTtcbiAgfVxuXG4gIGdldFRlbmFudElkKCkge1xuICAgIHJldHVybiB0aGlzLnRlbmFudElkO1xuICB9XG5cbiAgYXN5bmMgY2hlY2tQaG9uZUdyb3VwRXhpc3RzKCkge1xuICAgIGNvbnN0IHsgZGF0YSwgcmVzIH0gPSBhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UubGlzdCh7XG4gICAgICBmcmFnbWVudFR5cGU6IHRoaXMuUEhPTkVfR1JPVVBfRlJBR01FTlRcbiAgICB9KTtcbiAgICBpZiAoZGF0YSAmJiByZXMgJiYgcmVzLnN0YXR1cyA9PT0gdGhpcy5IVFRQX1NUQVRVU19DT0RFLk9LKSB7XG4gICAgICByZXR1cm4gaGVhZChkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyBhZGRQaG9uZUdyb3VwKCkge1xuICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgdGhpcy5jaGVja1Bob25lR3JvdXBFeGlzdHMoKTtcbiAgICBpZiAoZ3JvdXApIHtcbiAgICAgIHJldHVybiBncm91cDtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY3JlYXRlUGhvbmVHcm91cCgpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlUGhvbmVHcm91cCgpIHtcbiAgICBjb25zdCBuZXdQaG9uZUdyb3VwID0ge1xuICAgICAgYzh5X0dsb2JhbDoge30sXG4gICAgICBjOHlfSXNEZXZpY2VHcm91cDoge30sXG4gICAgICB0eXBlOiAnYzh5X0RldmljZUdyb3VwJyxcbiAgICAgIG5hbWU6IHRoaXMuUEhPTkVfR1JPVVBfTkFNRSxcbiAgICAgIFt0aGlzLlBIT05FX0dST1VQX0ZSQUdNRU5UXToge31cbiAgICB9O1xuXG4gICAgY29uc3QgeyBkYXRhLCByZXMgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5jcmVhdGUobmV3UGhvbmVHcm91cCk7XG4gICAgaWYgKGRhdGEgJiYgcmVzICYmIHJlcy5zdGF0dXMgPT09IHRoaXMuSFRUUF9TVEFUVVNfQ09ERS5DUkVBVEVEKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZW5lcmF0ZVJlZ2lzdHJhdGlvbkRhdGEoZGV2aWNlSWQpIHtcbiAgICBjb25zdCByZXMgPSAnYzh5Oi8vJyArIHRoaXMuZ2V0VGVuYW50TmFtZSgpICsgJy4nICsgdGhpcy5nZXRIb3N0KCkgKyAnLz9kZXZpY2VJZD0nICsgZGV2aWNlSWQ7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxufVxuIl19