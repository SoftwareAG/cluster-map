import * as tslib_1 from "tslib";
import { Component, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import { some } from 'lodash-es';
let DropAreaComponent = class DropAreaComponent {
    constructor() {
        this.title = 'Upload file';
        this.message = 'Drop file here';
        this.icon = 'plus-square';
        this.loadingMessage = 'Uploading ...';
        this.alwaysShow = false;
        this.clickToOpen = true;
        this.loading = false;
        this.progress = -1; // -1 = spinner
        this.dropped = new EventEmitter();
        this.isOver = false;
        this.fileIsEmpty = false;
    }
    ngOnInit() {
        this.alwaysShow = this.alwaysShow || this.area.nativeElement.children.length === 0;
    }
    toggle($event) {
        this.zone.nativeElement.style.height = this.area.nativeElement.offsetHeight + 'px';
        this.onOver();
    }
    showPicker($event) {
        this.preventDefault($event);
        this.picker.nativeElement.value = '';
        this.picker.nativeElement.click();
    }
    onOver() {
        if (!this.isOver) {
            this.isOver = true;
            document.addEventListener('dragover', this.preventDefault);
            document.addEventListener('drop', this.preventDefault);
        }
    }
    onPick($event) {
        this.fileIsEmpty = false;
        this.preventDefault($event);
        this.onFilesSelected($event.target.files);
    }
    onDrop($event) {
        this.preventDefault($event);
        this.onFilesSelected($event.dataTransfer.files);
        this.stopDragging();
    }
    onFilesSelected(files) {
        this.fileIsEmpty = false;
        if (files && files.length > 0) {
            if (this.isAnyFileEmpty(files)) {
                this.fileIsEmpty = true;
                this.dropped.emit([]);
            }
            else {
                this.dropped.emit(this.compose(files));
            }
        }
    }
    isAnyFileEmpty(files) {
        return some(Array.from(files), ['size', 0]);
    }
    stopDragging() {
        document.removeEventListener('dragover', this.preventDefault);
        document.removeEventListener('drop', this.preventDefault);
        this.isOver = false;
    }
    preventDefault($event) {
        if ($event) {
            $event.preventDefault();
        }
    }
    compose(files) {
        return Array.from(files).map(file => ({
            file,
            readAsJson: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return JSON.parse(yield this.read(file, ReadAsType.TEXT)); }),
            readAsText: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.TEXT); }),
            readAsArrayBuffer: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.ARRAY_BUFFER); }),
            readAsBinaryString: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.BINARY_STRING); }),
            readAsDataURL: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.read(file, ReadAsType.DATA_URL); })
        }));
    }
    read(file, type) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                switch (type) {
                    case ReadAsType.TEXT: {
                        reader.readAsText(file);
                        break;
                    }
                    case ReadAsType.ARRAY_BUFFER: {
                        reader.readAsArrayBuffer(file);
                        break;
                    }
                    case ReadAsType.BINARY_STRING: {
                        reader.readAsBinaryString(file);
                        break;
                    }
                    case ReadAsType.DATA_URL: {
                        reader.readAsDataURL(file);
                        break;
                    }
                }
                reader.onload = () => this.onLoad(reader, resolve, reject);
            });
        });
    }
    onLoad(reader, resolve, reject) {
        if (reader.readyState !== 2) {
            return;
        }
        if (reader.error) {
            reject(reader.error);
        }
        resolve(reader.result);
    }
};
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "message", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "loadingMessage", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "alwaysShow", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "clickToOpen", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "loading", void 0);
tslib_1.__decorate([
    Input()
], DropAreaComponent.prototype, "progress", void 0);
tslib_1.__decorate([
    Output()
], DropAreaComponent.prototype, "dropped", void 0);
tslib_1.__decorate([
    ViewChild('area', { static: true })
], DropAreaComponent.prototype, "area", void 0);
tslib_1.__decorate([
    ViewChild('zone', { static: false })
], DropAreaComponent.prototype, "zone", void 0);
tslib_1.__decorate([
    ViewChild('picker', { static: false })
], DropAreaComponent.prototype, "picker", void 0);
DropAreaComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-drop-area',
        template: "<div  [ngClass]=\"{'form-group': true,'has-error': fileIsEmpty }\">\n  <small class=\"form-control-feedback-message\">\n    <span *ngIf=\"fileIsEmpty\" translate>\n        File must not be empty, select another one.\n    </span>\n  </small>\n</div>\n<div class=\"drop-zone\" [style.pointerEvents]=\"loading ? 'none' : 'auto'\" #zone style=\"padding-bottom: 0px; height: auto; min-height: 120px; max-height: 80vh;\"\n  (dragleave)=\"stopDragging()\" (drop)=\"onDrop($event)\" (dragover)=\"onOver()\" [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  (click)=\"showPicker($event)\">\n  <div class=\"file-placeholder\" style=\"pointer-events: none;\" [ngClass]=\"{ 'drag-over': isOver }\">\n\n    <div *ngIf=\"loading\" class=\"hint-placeholder\" style=\"width: 300px;\">\n      <p>\n        {{loadingMessage}}\n      </p>\n      <div class=\"progress progress-striped active\" *ngIf=\"progress !== -1\">\n        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" [style.width]=\"progress + '%'\"></div>\n      </div>\n      <div class=\"spinner\" *ngIf=\"progress === -1\" style=\"position: relative;\">\n        <div class=\"rect1\"></div>\n        <div class=\"rect2\"></div>\n        <div class=\"rect3\"></div>\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"></div>\n      </div>\n    </div>\n\n    <div *ngIf=\"!loading\" class=\"hint-placeholder\">\n      <i class=\"fa fw fa-{{icon}}\"></i>\n      <p>\n        <span>{{title}}</span>\n      </p>\n      <p>\n        <b>{{message}}</b>\n        <br>\n        <span *ngIf=\"alwaysShow && clickToOpen\" translate>or click to browse your computer.</span>\n      </p>\n    </div>\n\n  </div>\n</div>\n<input #picker *ngIf=\"clickToOpen\" (change)=\"onPick($event)\" multiple type=\"file\" style=\"opacity: 0; filter: alpha(opacity = 0); height: 0px\">\n<div #area [hidden]=\"isOver || loading\" (dragover)=\"toggle($event)\">\n  <ng-content></ng-content>\n</div>\n"
    })
], DropAreaComponent);
export { DropAreaComponent };
var ReadAsType;
(function (ReadAsType) {
    ReadAsType[ReadAsType["TEXT"] = 0] = "TEXT";
    ReadAsType[ReadAsType["DATA_URL"] = 1] = "DATA_URL";
    ReadAsType[ReadAsType["ARRAY_BUFFER"] = 2] = "ARRAY_BUFFER";
    ReadAsType[ReadAsType["BINARY_STRING"] = 3] = "BINARY_STRING";
})(ReadAsType || (ReadAsType = {}));
//# sourceMappingURL=data:application/json;base64,