import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ApplicationService, IApplication, ICurrentTenant, IUser } from '@c8y/client';
import { get, includes, orderBy } from 'lodash-es';
import { combineLatest } from 'rxjs';
import { first } from 'rxjs/operators';
import { AppStateService } from '../../common/ui-state.service';
let AppSwitcherComponent = class AppSwitcherComponent {
    constructor(ui, applications) {
        this.ui = ui;
        this.applications = applications;
        const { currentUser, currentTenant } = this.ui;
        combineLatest(currentUser, currentTenant).pipe(first()).subscribe(([user, tenant]) => {
            this.tenant = tenant;
            this.listAppsForUser(user);
        });
    }
    get hideCloudApps() {
        return false; // this should be configurable from outside
    }
    isActive(app) {
        return app.contextPath === this.ui.state.app.contextPath;
    }
    getHref(app) {
        return this.applications.getHref(app);
    }
    listAppsForUser(user) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (user) {
                const { data } = yield this.applications.listByUser(user, { pageSize: 1000 });
                this.apps = this.orderApps(this.filterApps(data));
            }
        });
    }
    filterApps(apps) {
        apps = this.filterVisible(apps);
        apps = this.filterCloud(apps);
        apps = this.filterDuplicates(apps);
        return apps;
    }
    filterVisible(apps) {
        const visibleApplicationTypes = ['HOSTED', 'EXTERNAL'];
        return apps.filter((app) => includes(visibleApplicationTypes, app.type) &&
            !app.noAppSwitcher &&
            !get(app, 'manifest.noAppSwitcher'));
    }
    filterCloud(apps) {
        const { hideCloudApps } = this;
        const filterFn = (app) => !!app.cloud;
        if (!hideCloudApps) {
            this.oneCloudApps = this.orderApps(apps.filter(filterFn));
        }
        return apps.filter((app) => !filterFn(app));
    }
    filterDuplicates(apps) {
        // Filter out apps that have duplicate contextpaths and are not own owned but the current tenant;
        const filterFn = (app) => !apps.some((otherApp) => (app !== otherApp) &&
            (app.contextPath && app.contextPath === otherApp.contextPath) &&
            (app.owner.tenant.id !== this.tenant.name));
        return apps.filter(filterFn);
    }
    orderApps(apps) {
        return orderBy(apps, (({ name }) => name.toLowerCase()));
    }
};
AppSwitcherComponent.ctorParameters = () => [
    { type: AppStateService },
    { type: ApplicationService }
];
AppSwitcherComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-app-switcher',
        template: "<div class=\"app-switcher-dropdown\" dropdown>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle\"\n    id=\"appSwitcherDropdown\"\n    dropdownToggle\n  >\n    <i class=\"fa-2x fa fw fa-th\"></i>\n  </button>\n  <div\n    *dropdownMenu\n    class=\"app-switcher-dropdown-menu dropdown-menu\"\n    aria-labelledby=\"appSwitcherDropdown\"\n  >\n    <div class=\"app-switcher-sagcloud\" *ngIf=\"oneCloudApps && oneCloudApps.length > 0\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        *ngFor=\"let app of oneCloudApps\"\n        [href]=\"getHref(app)\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n    <div class=\"app-switcher\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        [ngClass]=\"isActive(app) ? 'active' : ''\"\n        *ngFor=\"let app of apps\"\n        [href]=\"getHref(app)\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n  </div>\n</div>\n"
    })
], AppSwitcherComponent);
export { AppSwitcherComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXN3aXRjaGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2hlYWRlci9hcHBsaWNhdGlvbi9hcHAtc3dpdGNoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN0RixPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBTWhFLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBUy9CLFlBQ1UsRUFBbUIsRUFDbkIsWUFBZ0M7UUFEaEMsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFDbkIsaUJBQVksR0FBWixZQUFZLENBQW9CO1FBQ3RDLE1BQU0sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUM5QyxhQUFhLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDNUMsS0FBSyxFQUFFLENBQ1IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFFLElBQUksRUFBRSxNQUFNLENBQUUsRUFBRSxFQUFFO1lBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDVCxDQUFDO0lBZEQsSUFBWSxh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SUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0NBQ0YsQ0FBQTs7WUE1RGUsZUFBZTtZQUNMLGtCQUFrQjs7QUFYL0Isb0JBQW9CO0lBSmhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsMDFDQUE0QztLQUM3QyxDQUFDO0dBQ1csb0JBQW9CLENBc0VoQztTQXRFWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uU2VydmljZSwgSUFwcGxpY2F0aW9uLCBJQ3VycmVudFRlbmFudCwgSVVzZXIgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBnZXQsIGluY2x1ZGVzLCBvcmRlckJ5IH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQXBwU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29tbW9uL3VpLXN0YXRlLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktYXBwLXN3aXRjaGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FwcC1zd2l0Y2hlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQXBwU3dpdGNoZXJDb21wb25lbnQge1xuICBvbmVDbG91ZEFwcHM/OiBBcnJheTxJQXBwbGljYXRpb24gJiB7W2tleTogc3RyaW5nXTogYW55fT47XG4gIGFwcHM6IEFycmF5PElBcHBsaWNhdGlvbiAmIHtba2V5OiBzdHJpbmddOiBhbnl9PjtcbiAgb3BlbjogYm9vbGVhbjtcblxuICBwcml2YXRlIGdldCBoaWRlQ2xvdWRBcHBzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTsgIC8vIHRoaXMgc2hvdWxkIGJlIGNvbmZpZ3VyYWJsZSBmcm9tIG91dHNpZGVcbiAgfVxuICBwcml2YXRlIHRlbmFudDogSUN1cnJlbnRUZW5hbnQ7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdWk6IEFwcFN0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGFwcGxpY2F0aW9uczogQXBwbGljYXRpb25TZXJ2aWNlKSB7XG4gICAgICBjb25zdCB7IGN1cnJlbnRVc2VyLCBjdXJyZW50VGVuYW50fSA9IHRoaXMudWk7XG4gICAgICBjb21iaW5lTGF0ZXN0KGN1cnJlbnRVc2VyLCBjdXJyZW50VGVuYW50KS5waXBlKFxuICAgICAgICBmaXJzdCgpXG4gICAgICApLnN1YnNjcmliZSgoWyB1c2VyLCB0ZW5hbnQgXSkgPT4ge1xuICAgICAgICAgIHRoaXMudGVuYW50ID0gdGVuYW50O1xuICAgICAgICAgIHRoaXMubGlzdEFwcHNGb3JVc2VyKHVzZXIpO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGlzQWN0aXZlKGFwcDogSUFwcGxpY2F0aW9uKSB7XG4gICAgcmV0dXJuIGFwcC5jb250ZXh0UGF0aCA9PT0gdGhpcy51aS5zdGF0ZS5hcHAuY29udGV4dFBhdGg7XG4gIH1cblxuICBnZXRIcmVmKGFwcDogSUFwcGxpY2F0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwbGljYXRpb25zLmdldEhyZWYoYXBwKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbGlzdEFwcHNGb3JVc2VyKHVzZXI6IElVc2VyIHwgbnVsbCkge1xuICAgIGlmICh1c2VyKSB7XG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuYXBwbGljYXRpb25zLmxpc3RCeVVzZXIodXNlciwgeyBwYWdlU2l6ZTogMTAwMCB9KTtcbiAgICAgIHRoaXMuYXBwcyA9IHRoaXMub3JkZXJBcHBzKHRoaXMuZmlsdGVyQXBwcyhkYXRhKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJBcHBzKGFwcHMpIHtcbiAgICBhcHBzID0gdGhpcy5maWx0ZXJWaXNpYmxlKGFwcHMpO1xuICAgIGFwcHMgPSB0aGlzLmZpbHRlckNsb3VkKGFwcHMpO1xuICAgIGFwcHMgPSB0aGlzLmZpbHRlckR1cGxpY2F0ZXMoYXBwcyk7XG4gICAgcmV0dXJuIGFwcHM7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlclZpc2libGUoYXBwcykge1xuICAgIGNvbnN0IHZpc2libGVBcHBsaWNhdGlvblR5cGVzID0gWydIT1NURUQnLCAnRVhURVJOQUwnXTtcbiAgICByZXR1cm4gYXBwcy5maWx0ZXIoKGFwcCkgPT4gaW5jbHVkZXModmlzaWJsZUFwcGxpY2F0aW9uVHlwZXMsIGFwcC50eXBlKSAmJlxuICAgICAgIWFwcC5ub0FwcFN3aXRjaGVyICYmXG4gICAgICAhZ2V0KGFwcCwgJ21hbmlmZXN0Lm5vQXBwU3dpdGNoZXInKSk7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckNsb3VkKGFwcHMpIHtcbiAgICBjb25zdCB7IGhpZGVDbG91ZEFwcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgZmlsdGVyRm4gPSAoYXBwKSA9PiAhIWFwcC5jbG91ZDtcbiAgICBpZiAoIWhpZGVDbG91ZEFwcHMpIHtcbiAgICAgICAgdGhpcy5vbmVDbG91ZEFwcHMgPSB0aGlzLm9yZGVyQXBwcyhhcHBzLmZpbHRlcihmaWx0ZXJGbikpO1xuICAgIH1cbiAgICByZXR1cm4gYXBwcy5maWx0ZXIoKGFwcCkgPT4gIWZpbHRlckZuKGFwcCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJEdXBsaWNhdGVzKGFwcHMpIHtcbiAgICAvLyBGaWx0ZXIgb3V0IGFwcHMgdGhhdCBoYXZlIGR1cGxpY2F0ZSBjb250ZXh0cGF0aHMgYW5kIGFyZSBub3Qgb3duIG93bmVkIGJ1dCB0aGUgY3VycmVudCB0ZW5hbnQ7XG4gICAgY29uc3QgZmlsdGVyRm4gPSAoYXBwKSA9PiAhYXBwcy5zb21lKChvdGhlckFwcCkgPT4gKGFwcCAhPT0gb3RoZXJBcHApICYmXG4gICAgICAoYXBwLmNvbnRleHRQYXRoICYmIGFwcC5jb250ZXh0UGF0aCA9PT0gb3RoZXJBcHAuY29udGV4dFBhdGgpICYmXG4gICAgICAoYXBwLm93bmVyLnRlbmFudC5pZCAhPT0gdGhpcy50ZW5hbnQubmFtZSkpO1xuICAgIHJldHVybiBhcHBzLmZpbHRlcihmaWx0ZXJGbik7XG4gIH1cblxuICBwcml2YXRlIG9yZGVyQXBwcyhhcHBzKSB7XG4gICAgcmV0dXJuIG9yZGVyQnkoYXBwcywgKCh7IG5hbWUgfSkgPT4gbmFtZS50b0xvd2VyQ2FzZSgpKSk7XG4gIH1cbn1cbiJdfQ==