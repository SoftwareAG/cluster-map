import * as tslib_1 from "tslib";
import { Directive, EventEmitter, Output } from '@angular/core';
import { NgControl, AbstractControl } from '@angular/forms';
import { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';
import { gettext } from '../i18n/public-api';
let JsonValidationPrettifierDirective = class JsonValidationPrettifierDirective {
    constructor(ngCtrl) {
        this.invalidJSON = new EventEmitter();
        this.message = gettext('Must be a valid JSON object.');
        this.debounceTimeInMs = 1000;
        this.abstractCtrl = ngCtrl.control;
    }
    ngOnInit() {
        this.subscription = this.abstractCtrl.valueChanges
            .pipe(tap(() => this.clearValidationMessage()), debounceTime(this.debounceTimeInMs), distinctUntilChanged())
            .subscribe(value => {
            this.validateInputAndPrettify(value);
        });
    }
    ngOnDestroy() {
        if (this.subscription && !this.subscription.closed) {
            this.subscription.unsubscribe();
        }
    }
    validateInputAndPrettify(value) {
        if (value) {
            try {
                const validJsonObject = JSON.parse(value);
                const pretty = JSON.stringify(validJsonObject, undefined, 2);
                this.abstractCtrl.setValue(pretty);
            }
            catch (ex) {
                this.setErrorAndValidationMessage();
            }
        }
    }
    setErrorAndValidationMessage() {
        this.abstractCtrl.setErrors({ invalidBodyTemplate: true });
        this.invalidJSON.emit(this.message);
    }
    clearValidationMessage() {
        this.invalidJSON.emit(undefined);
    }
};
JsonValidationPrettifierDirective.ctorParameters = () => [
    { type: NgControl }
];
tslib_1.__decorate([
    Output()
], JsonValidationPrettifierDirective.prototype, "invalidJSON", void 0);
JsonValidationPrettifierDirective = tslib_1.__decorate([
    Directive({
        selector: 'textarea[prettyValidJson]'
    })
], JsonValidationPrettifierDirective);
export { JsonValidationPrettifierDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi12YWxpZGF0aW9uLXByZXR0aWZpZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvanNvbi12YWxpZGF0aW9uLXByZXR0aWZpZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFLN0MsSUFBYSxpQ0FBaUMsR0FBOUMsTUFBYSxpQ0FBaUM7SUFPNUMsWUFBWSxNQUFpQjtRQU5uQixnQkFBVyxHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXpELFlBQU8sR0FBVyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUMxRCxxQkFBZ0IsR0FBVyxJQUFJLENBQUM7UUFJdEMsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVk7YUFDL0MsSUFBSSxDQUNILEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxFQUN4QyxZQUFZLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQ25DLG9CQUFvQixFQUFFLENBQ3ZCO2FBQ0EsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDbEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFRCx3QkFBd0IsQ0FBQyxLQUFLO1FBQzVCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSTtnQkFDRixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMxQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzdELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3BDO1lBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7YUFDckM7U0FDRjtJQUNILENBQUM7SUFFTyw0QkFBNEI7UUFDbEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU8sc0JBQXNCO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Q0FDRixDQUFBOztZQTFDcUIsU0FBUzs7QUFObkI7SUFBVCxNQUFNLEVBQUU7c0VBQXdEO0FBRHRELGlDQUFpQztJQUg3QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsMkJBQTJCO0tBQ3RDLENBQUM7R0FDVyxpQ0FBaUMsQ0FpRDdDO1NBakRZLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wsIEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9wdWJsaWMtYXBpJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAndGV4dGFyZWFbcHJldHR5VmFsaWRKc29uXSdcbn0pXG5leHBvcnQgY2xhc3MgSnNvblZhbGlkYXRpb25QcmV0dGlmaWVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAT3V0cHV0KCkgaW52YWxpZEpTT046IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwcml2YXRlIGFic3RyYWN0Q3RybDogQWJzdHJhY3RDb250cm9sO1xuICBwcml2YXRlIG1lc3NhZ2U6IHN0cmluZyA9IGdldHRleHQoJ011c3QgYmUgYSB2YWxpZCBKU09OIG9iamVjdC4nKTtcbiAgcHJpdmF0ZSBkZWJvdW5jZVRpbWVJbk1zOiBudW1iZXIgPSAxMDAwO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKG5nQ3RybDogTmdDb250cm9sKSB7XG4gICAgdGhpcy5hYnN0cmFjdEN0cmwgPSBuZ0N0cmwuY29udHJvbDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5hYnN0cmFjdEN0cmwudmFsdWVDaGFuZ2VzXG4gICAgICAucGlwZShcbiAgICAgICAgdGFwKCgpID0+IHRoaXMuY2xlYXJWYWxpZGF0aW9uTWVzc2FnZSgpKSxcbiAgICAgICAgZGVib3VuY2VUaW1lKHRoaXMuZGVib3VuY2VUaW1lSW5NcyksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXRBbmRQcmV0dGlmeSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbiAmJiAhdGhpcy5zdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlSW5wdXRBbmRQcmV0dGlmeSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdmFsaWRKc29uT2JqZWN0ID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IHByZXR0eSA9IEpTT04uc3RyaW5naWZ5KHZhbGlkSnNvbk9iamVjdCwgdW5kZWZpbmVkLCAyKTtcbiAgICAgICAgdGhpcy5hYnN0cmFjdEN0cmwuc2V0VmFsdWUocHJldHR5KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHRoaXMuc2V0RXJyb3JBbmRWYWxpZGF0aW9uTWVzc2FnZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0RXJyb3JBbmRWYWxpZGF0aW9uTWVzc2FnZSgpIHtcbiAgICB0aGlzLmFic3RyYWN0Q3RybC5zZXRFcnJvcnMoeyBpbnZhbGlkQm9keVRlbXBsYXRlOiB0cnVlIH0pO1xuICAgIHRoaXMuaW52YWxpZEpTT04uZW1pdCh0aGlzLm1lc3NhZ2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhclZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIHRoaXMuaW52YWxpZEpTT04uZW1pdCh1bmRlZmluZWQpO1xuICB9XG59XG4iXX0=