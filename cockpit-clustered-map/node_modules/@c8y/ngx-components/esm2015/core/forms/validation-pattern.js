// tslint:disable: max-line-length
import { gettext } from '../i18n/gettext';
// @dynamic
export class ValidationPattern {
    static get(key) {
        const pattern = this.rules[key];
        return pattern;
    }
}
ValidationPattern.messages = {
    deviceId: gettext('Device ID must not contain spaces or slashes ("/").'),
    domain: gettext('Only lowercase letters, digits, hyphens and underscores allowed in the first part of the URI. ' +
        'Must start with a letter; hyphens and underscores only allowed in the middle. Must be a valid URI.'),
    email: gettext('Invalid email address.'),
    internationalPhoneNumber: gettext('International phone number required, in the format +49 9 876 543 210.'),
    loginAlias: gettext('Login alias must not contain slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
    max: gettext('Max value: {{ value }}'),
    min: gettext('Min value: {{ value }}'),
    opcuaBrowsePath: gettext('Invalid OPC UA URI.'),
    password: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
    passwordConfirm: gettext('Passwords do not match.'),
    phoneNumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
    required: gettext('This field is required.'),
    tenantId: gettext('May contain lowercase letters, digits, hyphens and underscores. ' +
        'Must start with a letter; hyphens and underscores only allowed in the middle; minimum 2 characters.'),
    urlSegment: gettext('Slash, single or double dots and white space not allowed'),
    user: gettext('Username must not contain spaces nor slashes ("/", "\\") nor ("+"), (":"), ("$") signs.')
};
ValidationPattern.rules = {
    deviceId: {
        pattern: /^[^\s/]*$/
    },
    domain: {
        pattern: /^[a-z]+[a-z0-9_-]*[a-z0-9]+\.{1}.+$/
    },
    groupName: {
        maxLength: 254
    },
    hostname: {
        pattern: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/
    },
    ip: {
        pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
    },
    opcuaBrowsePath: {
        pattern: /^(opc.tcp|http|https):\/\/[^ "]+$/
    },
    password: {
        pattern: /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/
    },
    phoneNumber: {
        pattern: /^$|^(\+|0{2})[\d\s/-]{1,30}$/
    },
    tenantId: {
        pattern: /^[a-z]+[a-z0-9_-]*[a-z0-9]+$/
    },
    user: {
        pattern: /^[^\\/\s$:+]*$/
    },
    urlSegment: {
        pattern: /^(([.]{1,2})|([/])+|(([/]*)([.]{1,2})([/]*))|((.*)([/]|[ ]+)(.*))|(\s+))$/
    },
    loginAlias: {
        pattern: /^[^\\/$:+]*$/
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1wYXR0ZXJuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvdmFsaWRhdGlvbi1wYXR0ZXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFTMUMsV0FBVztBQUNYLE1BQU0sT0FBTyxpQkFBaUI7SUEwRTVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBVztRQUNwQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sT0FBMEIsQ0FBQztJQUNwQyxDQUFDOztBQTVFZSwwQkFBUSxHQUFHO0lBQ3pCLFFBQVEsRUFBRSxPQUFPLENBQUMscURBQXFELENBQUM7SUFDeEUsTUFBTSxFQUFFLE9BQU8sQ0FDYixnR0FBZ0c7UUFDOUYsb0dBQW9HLENBQ3ZHO0lBQ0QsS0FBSyxFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztJQUN4Qyx3QkFBd0IsRUFBRSxPQUFPLENBQy9CLHVFQUF1RSxDQUN4RTtJQUNELFVBQVUsRUFBRSxPQUFPLENBQ2pCLGlGQUFpRixDQUNsRjtJQUNELEdBQUcsRUFBRyxPQUFPLENBQUMsd0JBQXdCLENBQUM7SUFDdkMsR0FBRyxFQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztJQUN2QyxlQUFlLEVBQUUsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0lBQy9DLFFBQVEsRUFBRSxPQUFPLENBQ2YsOEpBQThKLENBQy9KO0lBQ0QsZUFBZSxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztJQUNuRCxXQUFXLEVBQUUsT0FBTyxDQUNsQiwyRkFBMkYsQ0FDNUY7SUFDRCxRQUFRLEVBQUUsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0lBQzVDLFFBQVEsRUFBRSxPQUFPLENBQ2Ysa0VBQWtFO1FBQ2hFLHFHQUFxRyxDQUN4RztJQUNELFVBQVUsRUFBRSxPQUFPLENBQUMsMERBQTBELENBQUM7SUFDL0UsSUFBSSxFQUFFLE9BQU8sQ0FDWCx5RkFBeUYsQ0FDMUY7Q0FDRixDQUFDO0FBRWMsdUJBQUssR0FBRztJQUN0QixRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsV0FBVztLQUNyQjtJQUNELE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxxQ0FBcUM7S0FDL0M7SUFDRCxTQUFTLEVBQUU7UUFDVCxTQUFTLEVBQUUsR0FBRztLQUNmO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLDJHQUEyRztLQUNySDtJQUNELEVBQUUsRUFBRTtRQUNGLE9BQU8sRUFBRSw2RkFBNkY7S0FDdkc7SUFDRCxlQUFlLEVBQUU7UUFDZixPQUFPLEVBQUUsbUNBQW1DO0tBQzdDO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLHdEQUF3RDtLQUNsRTtJQUNELFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSw4QkFBOEI7S0FDeEM7SUFDRCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsOEJBQThCO0tBQ3hDO0lBQ0QsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFFLGdCQUFnQjtLQUMxQjtJQUNELFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSwyRUFBMkU7S0FDckY7SUFDRCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsY0FBYztLQUN4QjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTogbWF4LWxpbmUtbGVuZ3RoXG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uUnVsZXMge1xuICBwYXR0ZXJuPzogUmVnRXhwO1xuICBtZXNzYWdlPzogc3RyaW5nO1xuICBtYXhMZW5ndGg/OiBudW1iZXI7XG4gIG1pbkxlbmd0aD86IG51bWJlcjtcbn1cblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uUGF0dGVybiB7XG4gIHN0YXRpYyByZWFkb25seSBtZXNzYWdlcyA9IHtcbiAgICBkZXZpY2VJZDogZ2V0dGV4dCgnRGV2aWNlIElEIG11c3Qgbm90IGNvbnRhaW4gc3BhY2VzIG9yIHNsYXNoZXMgKFwiL1wiKS4nKSxcbiAgICBkb21haW46IGdldHRleHQoXG4gICAgICAnT25seSBsb3dlcmNhc2UgbGV0dGVycywgZGlnaXRzLCBoeXBoZW5zIGFuZCB1bmRlcnNjb3JlcyBhbGxvd2VkIGluIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSBVUkkuICcgK1xuICAgICAgICAnTXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyOyBoeXBoZW5zIGFuZCB1bmRlcnNjb3JlcyBvbmx5IGFsbG93ZWQgaW4gdGhlIG1pZGRsZS4gTXVzdCBiZSBhIHZhbGlkIFVSSS4nXG4gICAgKSxcbiAgICBlbWFpbDogZ2V0dGV4dCgnSW52YWxpZCBlbWFpbCBhZGRyZXNzLicpLFxuICAgIGludGVybmF0aW9uYWxQaG9uZU51bWJlcjogZ2V0dGV4dChcbiAgICAgICdJbnRlcm5hdGlvbmFsIHBob25lIG51bWJlciByZXF1aXJlZCwgaW4gdGhlIGZvcm1hdCArNDkgOSA4NzYgNTQzIDIxMC4nXG4gICAgKSxcbiAgICBsb2dpbkFsaWFzOiBnZXR0ZXh0KFxuICAgICAgJ0xvZ2luIGFsaWFzIG11c3Qgbm90IGNvbnRhaW4gc2xhc2hlcyAoXCIvXCIsIFwiXFxcXFwiKSBub3IgKFwiK1wiKSwgKFwiOlwiKSwgKFwiJFwiKSBzaWducy4nXG4gICAgKSxcbiAgICBtYXggOiBnZXR0ZXh0KCdNYXggdmFsdWU6IHt7IHZhbHVlIH19JyksXG4gICAgbWluIDogZ2V0dGV4dCgnTWluIHZhbHVlOiB7eyB2YWx1ZSB9fScpLFxuICAgIG9wY3VhQnJvd3NlUGF0aDogZ2V0dGV4dCgnSW52YWxpZCBPUEMgVUEgVVJJLicpLFxuICAgIHBhc3N3b3JkOiBnZXR0ZXh0KFxuICAgICAgJ1Bhc3N3b3JkIG11c3QgaGF2ZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMgYW5kIG5vIG1vcmUgdGhhbiAzMiBhbmQgY2FuIG9ubHkgY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzIGFuZCBmb2xsb3dpbmcgc3ltYm9sczogYH4hQCMkJV4mKigpX3wrLT0/OzpcXCdcIiwuPD57fVtdXFxcXC8nXG4gICAgKSxcbiAgICBwYXNzd29yZENvbmZpcm06IGdldHRleHQoJ1Bhc3N3b3JkcyBkbyBub3QgbWF0Y2guJyksXG4gICAgcGhvbmVOdW1iZXI6IGdldHRleHQoXG4gICAgICAnSW52YWxpZCBwaG9uZSBudW1iZXIgZm9ybWF0LiBPbmx5IGRpZ2l0cywgc3BhY2VzLCBzbGFzaGVzIChcIi9cIikgYW5kIGRhc2hlcyAoXCItXCIpIGFsbG93ZWQuJ1xuICAgICksXG4gICAgcmVxdWlyZWQ6IGdldHRleHQoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQuJyksXG4gICAgdGVuYW50SWQ6IGdldHRleHQoXG4gICAgICAnTWF5IGNvbnRhaW4gbG93ZXJjYXNlIGxldHRlcnMsIGRpZ2l0cywgaHlwaGVucyBhbmQgdW5kZXJzY29yZXMuICcgK1xuICAgICAgICAnTXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyOyBoeXBoZW5zIGFuZCB1bmRlcnNjb3JlcyBvbmx5IGFsbG93ZWQgaW4gdGhlIG1pZGRsZTsgbWluaW11bSAyIGNoYXJhY3RlcnMuJ1xuICAgICksXG4gICAgdXJsU2VnbWVudDogZ2V0dGV4dCgnU2xhc2gsIHNpbmdsZSBvciBkb3VibGUgZG90cyBhbmQgd2hpdGUgc3BhY2Ugbm90IGFsbG93ZWQnKSxcbiAgICB1c2VyOiBnZXR0ZXh0KFxuICAgICAgJ1VzZXJuYW1lIG11c3Qgbm90IGNvbnRhaW4gc3BhY2VzIG5vciBzbGFzaGVzIChcIi9cIiwgXCJcXFxcXCIpIG5vciAoXCIrXCIpLCAoXCI6XCIpLCAoXCIkXCIpIHNpZ25zLidcbiAgICApXG4gIH07XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bGVzID0ge1xuICAgIGRldmljZUlkOiB7XG4gICAgICBwYXR0ZXJuOiAvXlteXFxzL10qJC9cbiAgICB9LFxuICAgIGRvbWFpbjoge1xuICAgICAgcGF0dGVybjogL15bYS16XStbYS16MC05Xy1dKlthLXowLTldK1xcLnsxfS4rJC9cbiAgICB9LFxuICAgIGdyb3VwTmFtZToge1xuICAgICAgbWF4TGVuZ3RoOiAyNTRcbiAgICB9LFxuICAgIGhvc3RuYW1lOiB7XG4gICAgICBwYXR0ZXJuOiAvXigoW2EtekEtWjAtOV18W2EtekEtWjAtOV1bYS16QS1aMC05LV0qW2EtekEtWjAtOV0pXFwuKSooW0EtWmEtejAtOV18W0EtWmEtejAtOV1bQS1aYS16MC05LV0qW0EtWmEtejAtOV0pJC9cbiAgICB9LFxuICAgIGlwOiB7XG4gICAgICBwYXR0ZXJuOiAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSQvXG4gICAgfSxcbiAgICBvcGN1YUJyb3dzZVBhdGg6IHtcbiAgICAgIHBhdHRlcm46IC9eKG9wYy50Y3B8aHR0cHxodHRwcyk6XFwvXFwvW14gXCJdKyQvXG4gICAgfSxcbiAgICBwYXNzd29yZDoge1xuICAgICAgcGF0dGVybjogL15bYS16QS1aMC05YH4hQCMkJV4mKigpX3wrXFwtPT87OidcIiwuPD57fVtcXF1cXFxcL117OCwzMn0kL1xuICAgIH0sXG4gICAgcGhvbmVOdW1iZXI6IHtcbiAgICAgIHBhdHRlcm46IC9eJHxeKFxcK3wwezJ9KVtcXGRcXHMvLV17MSwzMH0kL1xuICAgIH0sXG4gICAgdGVuYW50SWQ6IHtcbiAgICAgIHBhdHRlcm46IC9eW2Etel0rW2EtejAtOV8tXSpbYS16MC05XSskL1xuICAgIH0sXG4gICAgdXNlcjoge1xuICAgICAgcGF0dGVybjogL15bXlxcXFwvXFxzJDorXSokL1xuICAgIH0sXG4gICAgdXJsU2VnbWVudDoge1xuICAgICAgcGF0dGVybjogL14oKFsuXXsxLDJ9KXwoWy9dKSt8KChbL10qKShbLl17MSwyfSkoWy9dKikpfCgoLiopKFsvXXxbIF0rKSguKikpfChcXHMrKSkkL1xuICAgIH0sXG4gICAgbG9naW5BbGlhczoge1xuICAgICAgcGF0dGVybjogL15bXlxcXFwvJDorXSokL1xuICAgIH1cbiAgfTtcblxuICBzdGF0aWMgZ2V0KGtleTogc3RyaW5nKSB7XG4gICAgY29uc3QgcGF0dGVybiA9IHRoaXMucnVsZXNba2V5XTtcbiAgICByZXR1cm4gcGF0dGVybiBhcyBWYWxpZGF0aW9uUnVsZXM7XG4gIH1cbn1cbiJdfQ==