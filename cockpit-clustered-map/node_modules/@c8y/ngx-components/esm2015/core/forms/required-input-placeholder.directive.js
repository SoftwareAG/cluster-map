import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, AfterContentChecked } from '@angular/core';
import { gettext } from '../i18n/gettext';
import { isUndefined, compact } from 'lodash-es';
import { TranslateService } from '@ngx-translate/core';
let RequiredInputPlaceholderDirective = class RequiredInputPlaceholderDirective {
    constructor(el, renderer, translationService) {
        this.el = el;
        this.renderer = renderer;
        this.translationService = translationService;
    }
    ngAfterContentChecked() {
        this.required = this.el.nativeElement.required;
        this.placeholder = this.el.nativeElement.placeholder;
        const requiredText = `(${this.translationService.instant(gettext('required'))})`;
        this.setPlaceholder(requiredText);
    }
    setPlaceholder(requiredText) {
        if (isUndefined(this.placeholder) && !this.required) {
            this.renderer.removeAttribute(this.el.nativeElement, 'placeholder');
        }
        else if (this.placeholder.indexOf(requiredText) < 0) {
            const parts = compact([
                this.placeholder,
                `${this.required && !this.shouldSkipRequiredHint() ? `${requiredText}` : ''}`
            ]);
            const placeholder = parts.includes(requiredText)
                ? parts.join(' ').trim()
                : parts.join('').trim();
            this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
        }
    }
    shouldSkipRequiredHint() {
        const closestAncestor = this.el.nativeElement.closest('[placeholder-no-required-hint]');
        return !!closestAncestor;
    }
};
RequiredInputPlaceholderDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: TranslateService }
];
RequiredInputPlaceholderDirective = tslib_1.__decorate([
    Directive({
        selector: 'input[required]'
    })
], RequiredInputPlaceholderDirective);
export { RequiredInputPlaceholderDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZm9ybXMvcmVxdWlyZWQtaW5wdXQtcGxhY2Vob2xkZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBS3ZELElBQWEsaUNBQWlDLEdBQTlDLE1BQWEsaUNBQWlDO0lBRzVDLFlBQ1UsRUFBYyxFQUNkLFFBQW1CLEVBQ25CLGtCQUFvQztRQUZwQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWtCO0lBQ3pDLENBQUM7SUFFTixxQkFBcUI7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFDckQsTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDakYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsY0FBYyxDQUFDLFlBQVk7UUFDekIsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuRCxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztTQUNyRTthQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3JELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFdBQVc7Z0JBQ2hCLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7YUFDOUUsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7Z0JBQzlDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDeEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQy9FO0lBQ0gsQ0FBQztJQUVELHNCQUFzQjtRQUNwQixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUN4RixPQUFPLENBQUMsQ0FBQyxlQUFlLENBQUM7SUFDM0IsQ0FBQztDQUNGLENBQUE7O1lBaENlLFVBQVU7WUFDSixTQUFTO1lBQ0MsZ0JBQWdCOztBQU5uQyxpQ0FBaUM7SUFIN0MsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGlCQUFpQjtLQUM1QixDQUFDO0dBQ1csaUNBQWlDLENBb0M3QztTQXBDWSxpQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgQWZ0ZXJDb250ZW50Q2hlY2tlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4vZ2V0dGV4dCc7XG5pbXBvcnQgeyBpc1VuZGVmaW5lZCwgY29tcGFjdCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2lucHV0W3JlcXVpcmVkXSdcbn0pXG5leHBvcnQgY2xhc3MgUmVxdWlyZWRJbnB1dFBsYWNlaG9sZGVyRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZCB7XG4gIHByaXZhdGUgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgcHJpdmF0ZSByZXF1aXJlZDogYm9vbGVhbjtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2VcbiAgICApIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQge1xuICAgIHRoaXMucmVxdWlyZWQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucmVxdWlyZWQ7XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5wbGFjZWhvbGRlcjtcbiAgICBjb25zdCByZXF1aXJlZFRleHQgPSBgKCR7dGhpcy50cmFuc2xhdGlvblNlcnZpY2UuaW5zdGFudChnZXR0ZXh0KCdyZXF1aXJlZCcpKX0pYDtcbiAgICB0aGlzLnNldFBsYWNlaG9sZGVyKHJlcXVpcmVkVGV4dCk7XG4gIH1cblxuICBzZXRQbGFjZWhvbGRlcihyZXF1aXJlZFRleHQpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodGhpcy5wbGFjZWhvbGRlcikgJiYgIXRoaXMucmVxdWlyZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3BsYWNlaG9sZGVyJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBsYWNlaG9sZGVyLmluZGV4T2YocmVxdWlyZWRUZXh0KSA8IDApIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gY29tcGFjdChbXG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIsXG4gICAgICAgIGAke3RoaXMucmVxdWlyZWQgJiYgIXRoaXMuc2hvdWxkU2tpcFJlcXVpcmVkSGludCgpID8gYCR7cmVxdWlyZWRUZXh0fWAgOiAnJ31gXG4gICAgICBdKTtcbiAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gcGFydHMuaW5jbHVkZXMocmVxdWlyZWRUZXh0KVxuICAgICAgICA/IHBhcnRzLmpvaW4oJyAnKS50cmltKClcbiAgICAgICAgOiBwYXJ0cy5qb2luKCcnKS50cmltKCk7XG5cbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3BsYWNlaG9sZGVyJywgcGxhY2Vob2xkZXIpO1xuICAgIH1cbiAgfVxuXG4gIHNob3VsZFNraXBSZXF1aXJlZEhpbnQoKSB7XG4gICAgY29uc3QgY2xvc2VzdEFuY2VzdG9yID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsb3Nlc3QoJ1twbGFjZWhvbGRlci1uby1yZXF1aXJlZC1oaW50XScpO1xuICAgIHJldHVybiAhIWNsb3Nlc3RBbmNlc3RvcjtcbiAgfVxufVxuIl19