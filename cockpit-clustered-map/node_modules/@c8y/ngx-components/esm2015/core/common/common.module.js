var CommonModule_1;
import * as tslib_1 from "tslib";
import { NgModule, APP_INITIALIZER, InjectionToken } from '@angular/core';
import { CommonModule as NgCommonModule } from '@angular/common';
import { DataModule } from '@c8y/ngx-components/api';
import { I18nModule } from '../i18n/i18n.module';
import { IconDirective, ICONS } from './icon.directive';
import { OutletDirective } from './outlet.directive';
import { HOOK_OPTIONS, OptionsService } from './options.service';
import { UserPreferencesService } from './user-preferences/user-preferences.service';
import { HumanizeAppNamePipe } from './humanize-app-name.pipe';
import { HumanizePipe } from './humanize.pipe';
import { AppStateService } from './ui-state.service';
import { TranslateService } from '../i18n/public-api';
import { filter, switchMap, startWith, map, distinctUntilChanged } from 'rxjs/operators';
import { ShortenUserNamePipe } from './shorten-user-name.pipe';
import { ForOfDirective } from './forOf.directive';
import { LoadMoreComponent } from './load-more.component';
import { MapFunctionPipe } from './map-function.pipe';
import { ProgressBarComponent } from './progress-bar.component';
export function initializeServices(translateService, state, userPreferences) {
    const initialize = () => {
        const queryStringLanguage = translateService.queryStringLang();
        const firstLanguage = translateService.firstSupportedLanguage();
        /*
          The ?lang parameter will prevent the user preference language from being activated
        */
        if (queryStringLanguage && translateService.isSupported(queryStringLanguage)) {
            translateService.switchToLanguage(queryStringLanguage);
        }
        else {
            state.currentUser
                .pipe(map(user => user && user.userName), filter(u => !!u), distinctUntilChanged(), switchMap(() => userPreferences.get('language')), startWith(firstLanguage), filter(lang => !!lang), distinctUntilChanged())
                .subscribe(lang => {
                translateService.switchToLanguage(lang);
            });
        }
    };
    return initialize;
}
export const ICON_LIST = new InjectionToken('iconList');
/**
 * Commonly used directives, data access and translation. This module is the shared
 * module across all core components. It should be imported by default.
 *
 * @exports IconDirective A directive to set a c8y icon with [c8yIcon]="'rocket'".
 * @exports OutletDirective A directive which allows to set DOM or Angular templates (used for upgrade).
 * @exports I18nModule Translation module.
 * @exports NgCommonModule Angular common module.
 * @exports DataModule The data layer to allow DI with @c8y/client
 * @exports HumanizeAppNamePipe Humanize an application name (e.g. in the app switcher)
 * @exports HumanizePipe Humanize a word. E.g. `device management` gets `Device management`
 * @exports ShortenUserNamePipe Allows a short name. E.g. `Foo Bar` gets `F. Bar`
 * @exports ForOfDirective A forOf directive like ngFor but with load-more function
 * @exports LoadMoreComponent A component to load more data from a certain data-source
 * @exports ProgressBarComponent Displays either defined or undefined progress.
 */
let CommonModule = CommonModule_1 = class CommonModule {
    static providers() {
        return [
            ...DataModule.providers(),
            // TODO: maybe we can think of a way to remove this C8Y_APP global
            { provide: HOOK_OPTIONS, useValue: window.C8Y_APP || {}, multi: true },
            {
                provide: APP_INITIALIZER,
                useFactory: initializeServices,
                deps: [TranslateService, AppStateService, UserPreferencesService],
                multi: true
            },
            { provide: ICON_LIST, useValue: ICONS, multi: false },
            ...I18nModule.providers(),
            UserPreferencesService,
            OptionsService,
            AppStateService
        ];
    }
    static forRoot() {
        return {
            ngModule: CommonModule_1,
            providers: CommonModule_1.providers()
        };
    }
};
CommonModule = CommonModule_1 = tslib_1.__decorate([
    NgModule({
        imports: [NgCommonModule, I18nModule],
        exports: [
            IconDirective,
            OutletDirective,
            I18nModule,
            NgCommonModule,
            HumanizeAppNamePipe,
            HumanizePipe,
            ShortenUserNamePipe,
            ForOfDirective,
            LoadMoreComponent,
            MapFunctionPipe,
            ProgressBarComponent
        ],
        declarations: [
            IconDirective,
            OutletDirective,
            HumanizePipe,
            HumanizeAppNamePipe,
            ShortenUserNamePipe,
            ForOfDirective,
            LoadMoreComponent,
            MapFunctionPipe,
            ProgressBarComponent
        ],
        entryComponents: [LoadMoreComponent]
    })
], CommonModule);
export { CommonModule };
//# sourceMappingURL=data:application/json;base64,