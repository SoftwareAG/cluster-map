import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import { ICredentials, UserService } from '@c8y/client';
import { AlertService } from '../alert/alert.service';
import { LoginService } from './login.service';
import { LoginViews } from './login.model';
let TotpAuthComponent = class TotpAuthComponent {
    constructor(loginService, userService, alert) {
        this.loginService = loginService;
        this.userService = userService;
        this.alert = alert;
        this.onCancel = new EventEmitter();
        this.LOGIN_VIEWS = LoginViews;
        this.loading = false;
        this.hasError = false;
    }
    get isSetup() {
        return this.view === LoginViews.TotpSetup;
    }
    /**
     * In case of a setup we need the user to be authorized
     * first.
     */
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.view === this.LOGIN_VIEWS.TotpSetup) {
                yield this.loginService.switchLoginMode(this.credentials);
            }
        });
    }
    onTotpSuccess(code) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                this.loading = true;
                this.hasError = false;
                this.credentials.tfa = code;
                if (this.isSetup) {
                    yield this.userService.activateTotp();
                }
                yield this.loginService.switchLoginMode(this.credentials);
                yield this.loginService.verifyAppAccess();
                yield this.loginService.authFulfilled();
            }
            catch (e) {
                this.alert.removeLastDanger();
                if (e.data && e.data.message === 'Access is denied') {
                    this.alert.addServerFailure(e);
                }
                else {
                    this.hasError = true;
                }
            }
            finally {
                this.loading = false;
            }
        });
    }
};
TotpAuthComponent.ctorParameters = () => [
    { type: LoginService },
    { type: UserService },
    { type: AlertService }
];
tslib_1.__decorate([
    Input()
], TotpAuthComponent.prototype, "credentials", void 0);
tslib_1.__decorate([
    Input()
], TotpAuthComponent.prototype, "view", void 0);
tslib_1.__decorate([
    Output()
], TotpAuthComponent.prototype, "onCancel", void 0);
TotpAuthComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-totp-auth',
        template: "<div\n  class=\"legend form-block center\"\n  translate\n>Two-factor authentication</div>\n\n<c8y-totp-setup *ngIf=\"isSetup\"></c8y-totp-setup>\n<c8y-totp-challenge\n  [loading]=\"loading\"\n  [hasError]=\"hasError\"\n  [verify]=\"view === LOGIN_VIEWS.TotpSetup\"\n  (onSuccess)=\"onTotpSuccess($event)\"\n></c8y-totp-challenge>\n\n<div class=\"top-m-sm text-center\">\n  <a\n    title=\"{{ 'Cancel' | translate }}\"\n    class=\"btn btn-link btn-sm\"\n    (click)=\"onCancel.emit()\"\n    translate\n  >Cancel</a>\n</div>\n"
    })
], TotpAuthComponent);
export { TotpAuthComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cC1hdXRoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2xvZ2luL3RvdHAtYXV0aC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTNDLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBWTVCLFlBQ1MsWUFBMEIsRUFDekIsV0FBd0IsRUFDeEIsS0FBbUI7UUFGcEIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDekIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQVpuQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4QyxnQkFBVyxHQUFHLFVBQVUsQ0FBQztRQUN6QixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGFBQVEsR0FBRyxLQUFLLENBQUM7SUFVYixDQUFDO0lBUkwsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFDNUMsQ0FBQztJQVFEOzs7T0FHRztJQUNHLFFBQVE7O1lBQ1osSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFO2dCQUM1QyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUMzRDtRQUNILENBQUM7S0FBQTtJQUVLLGFBQWEsQ0FBQyxJQUFJOztZQUN0QixJQUFJO2dCQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO2dCQUM1QixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ2hCLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztpQkFDdkM7Z0JBQ0QsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzFELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDMUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3pDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUM5QixJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssa0JBQWtCLEVBQUU7b0JBQ25ELElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2hDO3FCQUFNO29CQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2lCQUN0QjthQUNGO29CQUFTO2dCQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2FBQ3RCO1FBQ0gsQ0FBQztLQUFBO0NBQ0YsQ0FBQTs7WUFyQ3dCLFlBQVk7WUFDWixXQUFXO1lBQ2pCLFlBQVk7O0FBZHBCO0lBQVIsS0FBSyxFQUFFO3NEQUEyQjtBQUMxQjtJQUFSLEtBQUssRUFBRTsrQ0FBa0I7QUFDaEI7SUFBVCxNQUFNLEVBQUU7bURBQStCO0FBSDdCLGlCQUFpQjtJQUo3QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsZUFBZTtRQUN6Qix5aEJBQXlDO0tBQzFDLENBQUM7R0FDVyxpQkFBaUIsQ0FrRDdCO1NBbERZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDcmVkZW50aWFscywgVXNlclNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuLi9hbGVydC9hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4vbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblZpZXdzIH0gZnJvbSAnLi9sb2dpbi5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS10b3RwLWF1dGgnLFxuICB0ZW1wbGF0ZVVybDogJy4vdG90cC1hdXRoLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgVG90cEF1dGhDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBjcmVkZW50aWFsczogSUNyZWRlbnRpYWxzO1xuICBASW5wdXQoKSB2aWV3OiBMb2dpblZpZXdzO1xuICBAT3V0cHV0KCkgb25DYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIExPR0lOX1ZJRVdTID0gTG9naW5WaWV3cztcbiAgbG9hZGluZyA9IGZhbHNlO1xuICBoYXNFcnJvciA9IGZhbHNlO1xuXG4gIGdldCBpc1NldHVwKCkge1xuICAgIHJldHVybiB0aGlzLnZpZXcgPT09IExvZ2luVmlld3MuVG90cFNldHVwO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGxvZ2luU2VydmljZTogTG9naW5TZXJ2aWNlLFxuICAgIHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZVxuICApIHsgfVxuXG4gIC8qKlxuICAgKiBJbiBjYXNlIG9mIGEgc2V0dXAgd2UgbmVlZCB0aGUgdXNlciB0byBiZSBhdXRob3JpemVkXG4gICAqIGZpcnN0LlxuICAgKi9cbiAgYXN5bmMgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMudmlldyA9PT0gdGhpcy5MT0dJTl9WSUVXUy5Ub3RwU2V0dXApIHtcbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLnN3aXRjaExvZ2luTW9kZSh0aGlzLmNyZWRlbnRpYWxzKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBvblRvdHBTdWNjZXNzKGNvZGUpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMudGZhID0gY29kZTtcbiAgICAgIGlmICh0aGlzLmlzU2V0dXApIHtcbiAgICAgICAgYXdhaXQgdGhpcy51c2VyU2VydmljZS5hY3RpdmF0ZVRvdHAoKTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLnN3aXRjaExvZ2luTW9kZSh0aGlzLmNyZWRlbnRpYWxzKTtcbiAgICAgIGF3YWl0IHRoaXMubG9naW5TZXJ2aWNlLnZlcmlmeUFwcEFjY2VzcygpO1xuICAgICAgYXdhaXQgdGhpcy5sb2dpblNlcnZpY2UuYXV0aEZ1bGZpbGxlZCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuYWxlcnQucmVtb3ZlTGFzdERhbmdlcigpO1xuICAgICAgaWYgKGUuZGF0YSAmJiBlLmRhdGEubWVzc2FnZSA9PT0gJ0FjY2VzcyBpcyBkZW5pZWQnKSB7XG4gICAgICAgIHRoaXMuYWxlcnQuYWRkU2VydmVyRmFpbHVyZShlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==