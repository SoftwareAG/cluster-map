import * as tslib_1 from "tslib";
import { Component, Input, Optional, Output, EventEmitter, HostListener } from '@angular/core';
import { BsModalRef } from 'ngx-bootstrap/modal';
import { gettext } from '../i18n/gettext';
import { isEmpty } from 'lodash';
/**
 * C8y modal component.
 * ## Example:
 *
 * Creating custom modal:
 * ```typescript
 *  import { Component } from "@angular/core";
 *  import { Subject } from 'rxjs';
 *
 * @Component({
 *  selector: "my-modal",
 *  template: `
 *    <c8y-modal title="CustomTitle"
 *      (onClose)="onClose($event)"
 *      (onDismiss)="onDismiss($event)"
 *      [labels]="labels"
 *      [disabled]="true" <- will disable ok button
 *      >
 *        <span>I am body of modal</span>
 *        <span>For simple string use body="string"</span>
 *    </c8y-modal>`
 * })
 *
 * export class MyModalComponent {
 *
 *  closeSubject: Subject<boolean> = new Subject();
 *  labels : ILabels = {ok: "customOK", cancel: "customCancel"};
 *
 *  onDismiss(event){
 *    this.closeSubject.next(false);
 *  }
 *
 *  onClose(event) {
 *    this.closeSubject.next(true);
 *  }
 * }
 * ```
 * Showing modal:
 * ```typescript
 * import { BsModalService } from "ngx-bootstrap/modal";
 *
 * constructor(
 *  public bsModalService: BsModalService,
 * ) {}
 *
 * showModal() {
 *  const modalRef = this.bsModalService.show(MyModalComponent);
 *  modalRef.content.closeSubject.subscribe(result => {
 *    console.log('results:', result);
 *  });
 * }
 * ```
 */
let ModalComponent = class ModalComponent {
    constructor(modal) {
        this.modal = modal;
        this.onDismiss = new EventEmitter();
        this.onClose = new EventEmitter();
        this.disabled = false;
        this.customFooter = false;
        this._labels = { ok: gettext('OK'), cancel: gettext('Cancel') };
    }
    set labels({ ok, cancel }) {
        this._labels = { ok, cancel };
    }
    get labels() { return this._labels; }
    _dismiss() {
        let fn = this.dismiss;
        if (!fn && this.modal) {
            fn = () => this.modal.hide();
        }
        if (fn) {
            fn();
        }
        this.onDismiss.emit(true);
    }
    _close() {
        let fn = this.close;
        if (!fn && this.modal) {
            fn = () => this.modal.hide();
        }
        if (fn) {
            fn();
        }
        this.onClose.emit(true);
    }
    onEnterKeyDown(event) {
        const hasOnlyOneButton = isEmpty(this.labels.ok) !== isEmpty(this.labels.cancel);
        const isCancelClickable = !this.customFooter && this.labels.cancel;
        const isOkClickable = !this.customFooter && !this.disabled && this.labels.ok;
        if (hasOnlyOneButton && isCancelClickable) {
            this._dismiss();
        }
        if (hasOnlyOneButton && isOkClickable) {
            this._close();
        }
    }
};
ModalComponent.ctorParameters = () => [
    { type: BsModalRef, decorators: [{ type: Optional }] }
];
tslib_1.__decorate([
    Output()
], ModalComponent.prototype, "onDismiss", void 0);
tslib_1.__decorate([
    Output()
], ModalComponent.prototype, "onClose", void 0);
tslib_1.__decorate([
    Input()
], ModalComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input()
], ModalComponent.prototype, "close", void 0);
tslib_1.__decorate([
    Input()
], ModalComponent.prototype, "dismiss", void 0);
tslib_1.__decorate([
    Input()
], ModalComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], ModalComponent.prototype, "body", void 0);
tslib_1.__decorate([
    Input()
], ModalComponent.prototype, "customFooter", void 0);
tslib_1.__decorate([
    Input()
], ModalComponent.prototype, "labels", null);
tslib_1.__decorate([
    HostListener('document:keydown.enter', ['$event'])
], ModalComponent.prototype, "onEnterKeyDown", null);
ModalComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-modal',
        template: "<div class=\"modal-header\">\n  <ng-content select=\"[c8y-modal-title]\"></ng-content>\n  <h3 [hidden]=\"!title\">{{title | translate}}</h3>\n</div>\n<div class=\"modal-body\">\n  <p\n    [hidden]=\"!title\"\n    class=\"text-center text-wrap\"\n    style=\"word-wrap:break-word;\"\n  >{{body}}</p>\n  <ng-content></ng-content>\n</div>\n<div class=\"modal-footer\" *ngIf=\"!customFooter\">\n  <ng-content select=\"[c8y-modal-footer]\"></ng-content>\n  <button\n    title=\"{{ labels.cancel | translate }}\" \n    *ngIf=\"labels.cancel\"\n    class=\"btn btn-default\"\n    (click)=\"_dismiss()\"\n  >{{labels.cancel | translate}}</button>\n  <button\n    title=\"{{ labels.ok | translate }}\" \n    *ngIf=\"labels.ok\"\n    class=\"btn btn-primary\"\n    (click)=\"_close()\"\n    [disabled]=\"disabled\"\n  >{{labels.ok | translate}}</button>\n</div>\n"
    }),
    tslib_1.__param(0, Optional())
], ModalComponent);
export { ModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvbW9kYWwvbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0YsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBT2pDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0RHO0FBTUgsSUFBYSxjQUFjLEdBQTNCLE1BQWEsY0FBYztJQWlCekIsWUFBZ0MsS0FBaUI7UUFBakIsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQWhCdkMsY0FBUyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3RELFlBQU8sR0FBMEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNyRCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBS2pCLGlCQUFZLEdBQVksS0FBSyxDQUFDO1FBTy9CLFlBQU8sR0FBYSxFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBRXpCLENBQUM7SUFSNUMsSUFBSSxNQUFNLENBQUMsRUFBQyxFQUFFLEVBQUUsTUFBTSxFQUFVO1FBQ3ZDLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBQyxFQUFFLEVBQUcsTUFBTSxFQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUksTUFBTSxLQUFjLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFNOUMsUUFBUTtRQUNOLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FBRTtRQUN4RCxJQUFJLEVBQUUsRUFBRTtZQUFFLEVBQUUsRUFBRSxDQUFDO1NBQUU7UUFDakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQUU7UUFDeEQsSUFBSSxFQUFFLEVBQUU7WUFBRSxFQUFFLEVBQUUsQ0FBQztTQUFFO1FBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFbUQsY0FBYyxDQUFDLEtBQW9CO1FBQ3JGLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakYsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbkUsTUFBTSxhQUFhLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUM3RSxJQUFJLGdCQUFnQixJQUFLLGlCQUFpQixFQUFFO1lBQzFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQjtRQUNELElBQUksZ0JBQWdCLElBQUssYUFBYSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNmO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBM0J3QyxVQUFVLHVCQUFwQyxRQUFROztBQWhCWDtJQUFULE1BQU0sRUFBRTtpREFBdUQ7QUFDdEQ7SUFBVCxNQUFNLEVBQUU7K0NBQXFEO0FBQ3JEO0lBQVIsS0FBSyxFQUFFO2dEQUFrQjtBQUNqQjtJQUFSLEtBQUssRUFBRTs2Q0FBbUI7QUFDbEI7SUFBUixLQUFLLEVBQUU7K0NBQXFCO0FBQ3BCO0lBQVIsS0FBSyxFQUFFOzZDQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7NENBQWM7QUFDYjtJQUFSLEtBQUssRUFBRTtvREFBK0I7QUFDOUI7SUFBUixLQUFLLEVBQUU7NENBRVA7QUFzQm1EO0lBQW5ELFlBQVksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29EQVVsRDtBQTNDVSxjQUFjO0lBTDFCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxXQUFXO1FBQ3JCLGkyQkFBcUM7S0FDdEMsQ0FBQztJQW1CYSxtQkFBQSxRQUFRLEVBQUUsQ0FBQTtHQWpCWixjQUFjLENBNEMxQjtTQTVDWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICduZ3gtYm9vdHN0cmFwL21vZGFsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxhYmVscyB7XG4gIG9rPzogc3RyaW5nO1xuICBjYW5jZWw/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQzh5IG1vZGFsIGNvbXBvbmVudC5cbiAqICMjIEV4YW1wbGU6XG4gKlxuICogQ3JlYXRpbmcgY3VzdG9tIG1vZGFsOlxuICogYGBgdHlwZXNjcmlwdFxuICogIGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4gKiAgaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuICpcbiAqIEBDb21wb25lbnQoe1xuICogIHNlbGVjdG9yOiBcIm15LW1vZGFsXCIsXG4gKiAgdGVtcGxhdGU6IGBcbiAqICAgIDxjOHktbW9kYWwgdGl0bGU9XCJDdXN0b21UaXRsZVwiXG4gKiAgICAgIChvbkNsb3NlKT1cIm9uQ2xvc2UoJGV2ZW50KVwiXG4gKiAgICAgIChvbkRpc21pc3MpPVwib25EaXNtaXNzKCRldmVudClcIlxuICogICAgICBbbGFiZWxzXT1cImxhYmVsc1wiXG4gKiAgICAgIFtkaXNhYmxlZF09XCJ0cnVlXCIgPC0gd2lsbCBkaXNhYmxlIG9rIGJ1dHRvblxuICogICAgICA+XG4gKiAgICAgICAgPHNwYW4+SSBhbSBib2R5IG9mIG1vZGFsPC9zcGFuPlxuICogICAgICAgIDxzcGFuPkZvciBzaW1wbGUgc3RyaW5nIHVzZSBib2R5PVwic3RyaW5nXCI8L3NwYW4+XG4gKiAgICA8L2M4eS1tb2RhbD5gXG4gKiB9KVxuICpcbiAqIGV4cG9ydCBjbGFzcyBNeU1vZGFsQ29tcG9uZW50IHtcbiAqXG4gKiAgY2xvc2VTdWJqZWN0OiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3QoKTtcbiAqICBsYWJlbHMgOiBJTGFiZWxzID0ge29rOiBcImN1c3RvbU9LXCIsIGNhbmNlbDogXCJjdXN0b21DYW5jZWxcIn07XG4gKlxuICogIG9uRGlzbWlzcyhldmVudCl7XG4gKiAgICB0aGlzLmNsb3NlU3ViamVjdC5uZXh0KGZhbHNlKTtcbiAqICB9XG4gKlxuICogIG9uQ2xvc2UoZXZlbnQpIHtcbiAqICAgIHRoaXMuY2xvc2VTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gKiAgfVxuICogfVxuICogYGBgXG4gKiBTaG93aW5nIG1vZGFsOlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tIFwibmd4LWJvb3RzdHJhcC9tb2RhbFwiO1xuICpcbiAqIGNvbnN0cnVjdG9yKFxuICogIHB1YmxpYyBic01vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXG4gKiApIHt9XG4gKlxuICogc2hvd01vZGFsKCkge1xuICogIGNvbnN0IG1vZGFsUmVmID0gdGhpcy5ic01vZGFsU2VydmljZS5zaG93KE15TW9kYWxDb21wb25lbnQpO1xuICogIG1vZGFsUmVmLmNvbnRlbnQuY2xvc2VTdWJqZWN0LnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICogICAgY29uc29sZS5sb2coJ3Jlc3VsdHM6JywgcmVzdWx0KTtcbiAqICB9KTtcbiAqIH1cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vbW9kYWwuY29tcG9uZW50Lmh0bWwnLFxufSlcblxuZXhwb3J0IGNsYXNzIE1vZGFsQ29tcG9uZW50IHtcbiAgQE91dHB1dCgpIG9uRGlzbWlzczogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgb25DbG9zZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuICBASW5wdXQoKSBjbG9zZTogKCkgPT4gdm9pZDtcbiAgQElucHV0KCkgZGlzbWlzczogKCkgPT4gdm9pZDtcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgYm9keTogc3RyaW5nO1xuICBASW5wdXQoKSBjdXN0b21Gb290ZXI6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgc2V0IGxhYmVscyh7b2ssIGNhbmNlbH06IElMYWJlbHMpIHtcbiAgICB0aGlzLl9sYWJlbHMgPSB7b2sgLCBjYW5jZWx9O1xuICB9XG5cbiAgZ2V0IGxhYmVscygpOiBJTGFiZWxzIHsgcmV0dXJuIHRoaXMuX2xhYmVsczsgfVxuXG4gIHByaXZhdGUgX2xhYmVsczogSUxhYmVscyA9ICB7IG9rOiBnZXR0ZXh0KCdPSycpLCBjYW5jZWw6IGdldHRleHQoJ0NhbmNlbCcpIH07XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBtb2RhbDogQnNNb2RhbFJlZikge31cblxuICBfZGlzbWlzcygpIHtcbiAgICBsZXQgZm4gPSB0aGlzLmRpc21pc3M7XG4gICAgaWYgKCFmbiAmJiB0aGlzLm1vZGFsKSB7IGZuID0gKCkgPT4gdGhpcy5tb2RhbC5oaWRlKCk7IH1cbiAgICBpZiAoZm4pIHsgZm4oKTsgfVxuICAgIHRoaXMub25EaXNtaXNzLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBfY2xvc2UoKSB7XG4gICAgbGV0IGZuID0gdGhpcy5jbG9zZTtcbiAgICBpZiAoIWZuICYmIHRoaXMubW9kYWwpIHsgZm4gPSAoKSA9PiB0aGlzLm1vZGFsLmhpZGUoKTsgfVxuICAgIGlmIChmbikgeyBmbigpOyB9XG4gICAgdGhpcy5vbkNsb3NlLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXlkb3duLmVudGVyJywgWyckZXZlbnQnXSkgb25FbnRlcktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBjb25zdCBoYXNPbmx5T25lQnV0dG9uID0gaXNFbXB0eSh0aGlzLmxhYmVscy5vaykgIT09IGlzRW1wdHkodGhpcy5sYWJlbHMuY2FuY2VsKTtcbiAgICBjb25zdCBpc0NhbmNlbENsaWNrYWJsZSA9ICF0aGlzLmN1c3RvbUZvb3RlciAmJiB0aGlzLmxhYmVscy5jYW5jZWw7XG4gICAgY29uc3QgaXNPa0NsaWNrYWJsZSA9ICF0aGlzLmN1c3RvbUZvb3RlciAmJiAhdGhpcy5kaXNhYmxlZCAmJiB0aGlzLmxhYmVscy5vaztcbiAgICBpZiAoaGFzT25seU9uZUJ1dHRvbiAgJiYgaXNDYW5jZWxDbGlja2FibGUpIHtcbiAgICAgIHRoaXMuX2Rpc21pc3MoKTtcbiAgICB9XG4gICAgaWYgKGhhc09ubHlPbmVCdXR0b24gICYmIGlzT2tDbGlja2FibGUpIHtcbiAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=