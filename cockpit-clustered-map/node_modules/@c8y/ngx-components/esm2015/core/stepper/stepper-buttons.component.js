import * as tslib_1 from "tslib";
import { Host, Component, Input, Output, EventEmitter } from '@angular/core';
import { C8yStepper } from './stepper.component';
import { CdkStep } from '@angular/cdk/stepper';
/**
 * C8yStepperButtons provides a convinient way to have, according to
 * the C8yStepper and each cdk-step, buttons to navigate between steps or to cancel the whole
 * step-process. Buttons rendered with the help of this component will use the branding css.
 *
 * By default all steps with this component in use will render a next button, expect the last step.
 * The other way around, every step using this component will render a back button, expect the first step.
 * To get a cancel button rendered you need to handle the onCancel event.
 * For next and back button you don't need to handle the available events onNext and onBack because default behavior
 * is implemented. The default will just call, according to the button, the stepper.next() or stepper.previous()
 * methods and moves the stepper forth or back. Using the EventEmitter onNext and onBack will emit for you the following
 * object: {stepper: C8yStepper, step: CdkStep}. This is useful if you need to implement custom logic before moving
 * to the next step or sending data to a backend. In this case you need to tell the stepper to move forward or back
 * on your own.
 *
 * With the component input [labels] you can change the label of each button in each step. It takes an object like this:
 * {next?: string, back?: string, cancel?: string}
 *
 * The [pending] input is of type boolean and will enable css animation for the next button when true.
 *
 * If the cdk-step provides a stepControl the component will set the next button disabled when the formGroup
 * behind it is invalid. As long as the [pending] input is true the back and next button is also disabled.
 * This will prevent multiple clicks while running a request or stepping back while a request is ongoing.
 *
 * @example
 * ```
 * <c8y-stepper>
 *  <cdk-step>
 *    <!--
 *      your html code
 *          ...
 *          ...    -->
 *    <c8y-stepper-buttons
 *     (onNext)="save()"
 *     [labels]="{ next: 'Save' }"
 *     [pending]="pendingStatus"
 *     ></c8y-stepper-buttons>
 *  </cdk-step>
 * </c8y-stepper>
 *
 * // in your component:
 * async save() {
 *   this.pendingStatus = true;
 *   // your async request goes here ...
 *   // await something();
 *   this.pendingStatus = false;
 *   this.stepper.next();
 * }
 * ```
 */
let C8yStepperButtons = class C8yStepperButtons {
    constructor(stepper, step) {
        this.stepper = stepper;
        this.step = step;
        /**
         * Optional
         * Indicates if a request is pending and sets the next button
         * to disabled when true
         */
        this.pending = false;
        /**
         * EventEmitter which emits when cancel button is clicked
         */
        this.onCancel = new EventEmitter();
        /**
         * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when next button is clicked.
         */
        this.onNext = new EventEmitter();
        /**
         * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when back button is clicked.
         */
        this.onBack = new EventEmitter();
        /**
         * Indicator which button should be shown.
         * Based on the cdk-steps within the c8y-stepper
         * next and back buttons are rendered.
         */
        this.showBtns = {
            cancel: false,
            back: false,
            next: false
        };
        /**
         * Disabled state of a button
         */
        this.disabled = false;
    }
    ngAfterContentInit() {
        this.showBtns.cancel = this.onCancel.observers.length > 0;
        if (this.stepper && this.stepper.steps && this.step) {
            this.showBtns.back = this.stepper.steps.first !== this.step;
            this.showBtns.next = this.stepper.steps.last !== this.step;
        }
        if (this.step && this.step.stepControl) {
            this.disabled = this.step.stepControl.invalid;
            this.statusChangeSubscription = this.step.stepControl.statusChanges.subscribe(status => {
                this.disabled = this.step.stepControl.invalid;
            });
        }
    }
    ngOnChanges(changes) {
        /**
         * Disable save/next button while the status is pending
         * This will prevent multiple clicks and therefore multiple requests
         */
        if (changes && changes.pending) {
            this.disabled = changes.pending.currentValue;
        }
    }
    ngOnDestroy() {
        if (this.statusChangeSubscription && !this.statusChangeSubscription.closed) {
            this.statusChangeSubscription.unsubscribe();
        }
    }
    /**
     * Gets called when cancel button is clicked.
     * It will emit immediate.
     */
    cancel() {
        this.onCancel.emit();
    }
    /**
     * Gets called when next button is clicked. When onNext EventEmitter has an observer registered
     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
     * Otherwise it will call stepper.next() as default.
     */
    next() {
        if (this.onNext.observers.length > 0) {
            this.onNext.emit({ stepper: this.stepper, step: this.step });
        }
        else {
            this.stepper.next();
        }
    }
    /**
     * Gets called when back button is clicked. When onBack EventEmitter has an observer registered
     * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
     * Otherwise it will call stepper.previous() as default.
     */
    back() {
        if (this.onBack.observers.length > 0) {
            this.onBack.emit({ stepper: this.stepper, step: this.step });
        }
        else {
            this.stepper.previous();
        }
    }
};
C8yStepperButtons.ctorParameters = () => [
    { type: C8yStepper, decorators: [{ type: Host }] },
    { type: CdkStep, decorators: [{ type: Host }] }
];
tslib_1.__decorate([
    Input()
], C8yStepperButtons.prototype, "labels", void 0);
tslib_1.__decorate([
    Input()
], C8yStepperButtons.prototype, "pending", void 0);
tslib_1.__decorate([
    Output()
], C8yStepperButtons.prototype, "onCancel", void 0);
tslib_1.__decorate([
    Output()
], C8yStepperButtons.prototype, "onNext", void 0);
tslib_1.__decorate([
    Output()
], C8yStepperButtons.prototype, "onBack", void 0);
C8yStepperButtons = tslib_1.__decorate([
    Component({
        selector: 'c8y-stepper-buttons',
        template: "<div class=\"text-center\">\n  <button *ngIf=\"showBtns.cancel\" (click)=\"cancel()\" type=\"button\" class=\"btn btn-default\">\n    <span>{{labels?.cancel || 'Cancel' | translate}}</span>\n  </button>\n  <button\n    *ngIf=\"showBtns.back\"\n    type=\"button\"\n    (click)=\"back()\"\n    class=\"btn btn-default\"\n    [disabled]=\"pending\"\n  >\n    <span>{{ labels?.back || 'Back' | translate }}</span>\n  </button>\n  <button\n    (click)=\"next()\"\n    *ngIf=\"showBtns.next\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pending }\"\n    [disabled]=\"disabled\"\n  >\n    <span>{{labels?.next || 'Next' | translate }}</span>\n  </button>\n</div>\n"
    }),
    tslib_1.__param(0, Host()), tslib_1.__param(1, Host())
], C8yStepperButtons);
export { C8yStepperButtons };
//# sourceMappingURL=data:application/json;base64,