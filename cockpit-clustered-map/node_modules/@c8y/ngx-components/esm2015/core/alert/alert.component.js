import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ContentChild } from '@angular/core';
import { AlertService } from './alert.service';
import { AlertDetailsComponent } from './alert-details.component';
let AlertComponent = class AlertComponent {
    constructor(alertService) {
        this.alertService = alertService;
    }
    ngAfterViewInit() {
        if (!this.containDetailsComponent) {
            this.detailedData = null;
        }
        this.viewInitTimeout = setTimeout(() => this.alertService.add(this));
    }
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        this.alertService.remove(this);
    }
};
AlertComponent.ctorParameters = () => [
    { type: AlertService }
];
tslib_1.__decorate([
    Input()
], AlertComponent.prototype, "type", void 0);
tslib_1.__decorate([
    Input()
], AlertComponent.prototype, "onDetail", void 0);
tslib_1.__decorate([
    Input()
], AlertComponent.prototype, "onClose", void 0);
tslib_1.__decorate([
    ViewChild('detailedData', { static: false })
], AlertComponent.prototype, "detailedData", void 0);
tslib_1.__decorate([
    ViewChild('text', { static: false })
], AlertComponent.prototype, "text", void 0);
tslib_1.__decorate([
    ContentChild(AlertDetailsComponent, { static: false })
], AlertComponent.prototype, "containDetailsComponent", void 0);
AlertComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-alert',
        template: "<ng-template #text>\r\n  <ng-content select=\"c8y-alert-text\"></ng-content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #detailedData>\r\n  <ng-content select=\"c8y-alert-details\"></ng-content>\r\n</ng-template>"
    })
], AlertComponent);
export { AlertComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvYWxlcnQvYWxlcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFhLEtBQUssRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQU9sRSxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0lBVXpCLFlBQW1CLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQUcsQ0FBQztJQUVqRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1QsWUFBWSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0NBQ0YsQ0FBQTs7WUFma0MsWUFBWTs7QUFScEM7SUFBUixLQUFLLEVBQUU7NENBQTREO0FBQzNEO0lBQVIsS0FBSyxFQUFFO2dEQUFzQjtBQUNyQjtJQUFSLEtBQUssRUFBRTsrQ0FBcUI7QUFDZTtJQUEzQyxTQUFTLENBQUMsY0FBYyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQyxDQUFDO29EQUFjO0FBQ3JCO0lBQW5DLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUM7NENBQU07QUFDYTtJQUFyRCxZQUFZLENBQUMscUJBQXFCLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUM7K0RBQWdEO0FBUDFGLGNBQWM7SUFMMUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFdBQVc7UUFDckIsc1BBQXFDO0tBQ3RDLENBQUM7R0FFVyxjQUFjLENBeUIxQjtTQXpCWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIElucHV0LCBWaWV3Q2hpbGQsIENvbnRlbnRDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxlcnQgfSBmcm9tICcuL2FsZXJ0Lm1vZGVsJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4vYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBBbGVydERldGFpbHNDb21wb25lbnQgfSBmcm9tICcuL2FsZXJ0LWRldGFpbHMuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWFsZXJ0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FsZXJ0LmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIEFsZXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBBbGVydCB7XG5cbiAgQElucHV0KCkgdHlwZTogJ3N1Y2Nlc3MnIHwgJ3dhcm5pbmcnIHwgJ2RhbmdlcicgfCAnaW5mbycgfCAnc3lzdGVtJztcbiAgQElucHV0KCkgb25EZXRhaWw6ICgpID0+IHZvaWQ7XG4gIEBJbnB1dCgpIG9uQ2xvc2U6ICgpID0+IHZvaWQ7XG4gIEBWaWV3Q2hpbGQoJ2RldGFpbGVkRGF0YScsIHtzdGF0aWM6IGZhbHNlfSkgZGV0YWlsZWREYXRhO1xuICBAVmlld0NoaWxkKCd0ZXh0Jywge3N0YXRpYzogZmFsc2V9KSB0ZXh0O1xuICBAQ29udGVudENoaWxkKEFsZXJ0RGV0YWlsc0NvbXBvbmVudCwge3N0YXRpYzogZmFsc2V9KSBjb250YWluRGV0YWlsc0NvbXBvbmVudDogQWxlcnREZXRhaWxzQ29tcG9uZW50O1xuICBwcml2YXRlIHZpZXdJbml0VGltZW91dDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICghdGhpcy5jb250YWluRGV0YWlsc0NvbXBvbmVudCkge1xuICAgICAgdGhpcy5kZXRhaWxlZERhdGEgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLnZpZXdJbml0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT5cbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmFkZCh0aGlzKVxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy52aWV3SW5pdFRpbWVvdXQpO1xuICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnJlbW92ZSh0aGlzKTtcbiAgfVxufVxuIl19