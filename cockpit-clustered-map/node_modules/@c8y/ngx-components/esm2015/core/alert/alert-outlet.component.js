import * as tslib_1 from "tslib";
import { Component, TemplateRef, Attribute, HostBinding } from '@angular/core';
import { AlertService } from './alert.service';
let AlertOutletComponent = class AlertOutletComponent {
    constructor(position, alertService) {
        this.position = position;
        this.alertService = alertService;
        this.detailDisplayedAlert = {};
        this.isStatic = false;
        this.isStatic = this.position === 'static';
    }
    get alerts() {
        return this.alertService.state$;
    }
    getClass(alert) {
        const classes = [];
        if (alert.type !== 'danger') {
            classes.push('interact');
        }
        classes.push(`alert-${alert.type}`);
        return classes.join(' ');
    }
    close(alert) {
        if (alert.onClose) {
            alert.onClose();
        }
        this.alertService.remove(alert);
    }
    showDetails(alert) {
        if (alert.onDetail) {
            return alert.onDetail();
        }
        this.detailDisplayedAlert = Object.assign({}, alert);
        this.detailDisplayedAlert.mode = 'raw';
        this.setDetailsContent(alert);
    }
    setDetailsContent(alert) {
        if (this.isTemplateRef(alert.detailedData) || typeof alert.detailedData === 'string') {
            this.detailDisplayedAlert.contents = alert.detailedData;
        }
        else {
            this.detailDisplayedAlert.contents = JSON.stringify(alert.detailedData, null, 2);
        }
    }
    hasDetails(alert) {
        return (alert.detailedData || alert.onDetail);
    }
    closeDetails() {
        this.detailDisplayedAlert = {};
    }
    isDetailsShow(alert) {
        return this.alertService.areSame(alert, this.detailDisplayedAlert);
    }
    isTemplateRef(value) {
        return value instanceof TemplateRef;
    }
    template(content) {
        return this.isTemplateRef(content) ? content : undefined;
    }
};
AlertOutletComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ['position',] }] },
    { type: AlertService }
];
tslib_1.__decorate([
    HostBinding('class.static')
], AlertOutletComponent.prototype, "isStatic", void 0);
AlertOutletComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-alert-outlet',
        template: "<div\n  class=\"alert animated fadeInRightBig\"\n  *ngFor=\"let alert of alerts | async\"\n  [ngClass]=\"[getClass(alert), isDetailsShow(alert) ? 'expanded' : '']\"\n>\n  <button title=\"{{ 'Close' | translate }}\" type=\"button\" class=\"close\" (click)=\"close(alert)\">\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">{{ 'Close' | translate }}</span>\n  </button>\n\n  <div *ngIf=\"!isTemplateRef(alert.text); else template(alert.text)\">\n    <strong *ngIf=\"!alert.allowHtml\" [innerText]=\"alert.text | translate\" class=\"message\"></strong>\n    <strong *ngIf=\"alert.allowHtml\" [innerHTML]=\"alert.text | translate\" class=\"message\"></strong>\n  </div>\n  <p *ngIf=\"hasDetails(alert) && !isDetailsShow(alert)\" class=\"text-muted top-m-sm\">\n    <button\n      title=\"{{ 'Show details' | translate }}\"\n      class=\"btn btn-clean\"\n      (click)=\"showDetails(alert)\"\n    >\n      <i class=\"fa fa-chevron-down\"></i>\n      {{ 'Show details' | translate }}\n    </button>\n  </p>\n  <p *ngIf=\"hasDetails(alert) && isDetailsShow(alert)\" class=\"text-muted top-m-sm\">\n    <button title=\"{{ 'Hide details' | translate }}\" class=\"btn btn-clean\" (click)=\"closeDetails()\">\n      <i class=\"fa fa-chevron-up\"></i>\n      {{ 'Hide details' | translate }}\n    </button>\n  </p>\n  <div *ngIf=\"isDetailsShow(alert)\">\n    <div *ngIf=\"!isTemplateRef(detailDisplayedAlert.contents); else template(alert.detailedData)\">\n      <pre><code [innerText]=\"detailDisplayedAlert.contents | translate\"></code></pre>\n    </div>\n  </div>\n</div>\n"
    }),
    tslib_1.__param(0, Attribute('position'))
], AlertOutletComponent);
export { AlertOutletComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQtb3V0bGV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2FsZXJ0L2FsZXJ0LW91dGxldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBUS9DLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBTy9CLFlBQ2lDLFFBQWdCLEVBQ3hDLFlBQTBCO1FBREYsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUN4QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQVBuQyx5QkFBb0IsR0FBUSxFQUFFLENBQUM7UUFDRixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBUTVDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUM7SUFDN0MsQ0FBQztJQVJELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7SUFDbEMsQ0FBQztJQVFELFFBQVEsQ0FBQyxLQUFZO1FBQ25CLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDMUI7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDcEMsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNqQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDakI7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQUs7UUFDZixJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDbEIsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDekI7UUFDRCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDdkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxLQUFLO1FBQ3JCLElBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksT0FBTyxLQUFLLENBQUMsWUFBWSxLQUFLLFFBQVEsRUFBRztZQUN0RixJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7U0FDekQ7YUFBTTtZQUNMLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNsRjtJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsS0FBSztRQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFLO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBSztRQUNqQixPQUFPLEtBQUssWUFBWSxXQUFXLENBQUM7SUFDdEMsQ0FBQztJQUVELFFBQVEsQ0FBQyxPQUFPO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUMzRCxDQUFDO0NBQ0YsQ0FBQTs7eUNBMURJLFNBQVMsU0FBQyxVQUFVO1lBQ0EsWUFBWTs7QUFOTjtJQUE1QixXQUFXLENBQUMsY0FBYyxDQUFDO3NEQUFrQjtBQUhuQyxvQkFBb0I7SUFMaEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGtCQUFrQjtRQUM1Qixza0RBQTRDO0tBQzdDLENBQUM7SUFVRyxtQkFBQSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7R0FSYixvQkFBb0IsQ0FrRWhDO1NBbEVZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVSZWYsIEF0dHJpYnV0ZSwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSAnLi9hbGVydC5tb2RlbCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UgfSBmcm9tICcuL2FsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1hbGVydC1vdXRsZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vYWxlcnQtb3V0bGV0LmNvbXBvbmVudC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIEFsZXJ0T3V0bGV0Q29tcG9uZW50IHtcblxuICBkZXRhaWxEaXNwbGF5ZWRBbGVydDogYW55ID0ge307XG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3RhdGljJykgaXNTdGF0aWMgPSBmYWxzZTtcbiAgZ2V0IGFsZXJ0cygpOiBCZWhhdmlvclN1YmplY3Q8QWxlcnRbXT4ge1xuICAgIHJldHVybiB0aGlzLmFsZXJ0U2VydmljZS5zdGF0ZSQ7XG4gIH1cbiAgY29uc3RydWN0b3IoXG4gICAgQEF0dHJpYnV0ZSgncG9zaXRpb24nKSBwcml2YXRlIHBvc2l0aW9uOiBzdHJpbmcsXG4gICAgcHVibGljIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuaXNTdGF0aWMgPSB0aGlzLnBvc2l0aW9uID09PSAnc3RhdGljJztcbiAgfVxuXG4gIGdldENsYXNzKGFsZXJ0OiBBbGVydCkge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBbXTtcbiAgICBpZiAoYWxlcnQudHlwZSAhPT0gJ2RhbmdlcicpIHtcbiAgICAgIGNsYXNzZXMucHVzaCgnaW50ZXJhY3QnKTtcbiAgICB9XG4gICAgY2xhc3Nlcy5wdXNoKGBhbGVydC0ke2FsZXJ0LnR5cGV9YCk7XG4gICAgcmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuICB9XG5cbiAgY2xvc2UoYWxlcnQpIHtcbiAgICBpZiAoYWxlcnQub25DbG9zZSkge1xuICAgICAgYWxlcnQub25DbG9zZSgpO1xuICAgIH1cbiAgICB0aGlzLmFsZXJ0U2VydmljZS5yZW1vdmUoYWxlcnQpO1xuICB9XG5cbiAgc2hvd0RldGFpbHMoYWxlcnQpIHtcbiAgICBpZiAoYWxlcnQub25EZXRhaWwpIHtcbiAgICAgIHJldHVybiBhbGVydC5vbkRldGFpbCgpO1xuICAgIH1cbiAgICB0aGlzLmRldGFpbERpc3BsYXllZEFsZXJ0ID0gT2JqZWN0LmFzc2lnbih7fSwgYWxlcnQpO1xuICAgIHRoaXMuZGV0YWlsRGlzcGxheWVkQWxlcnQubW9kZSA9ICdyYXcnO1xuICAgIHRoaXMuc2V0RGV0YWlsc0NvbnRlbnQoYWxlcnQpO1xuICB9XG5cbiAgc2V0RGV0YWlsc0NvbnRlbnQoYWxlcnQpIHtcbiAgICBpZiAoIHRoaXMuaXNUZW1wbGF0ZVJlZihhbGVydC5kZXRhaWxlZERhdGEpIHx8IHR5cGVvZiBhbGVydC5kZXRhaWxlZERhdGEgPT09ICdzdHJpbmcnICkge1xuICAgICAgdGhpcy5kZXRhaWxEaXNwbGF5ZWRBbGVydC5jb250ZW50cyA9IGFsZXJ0LmRldGFpbGVkRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZXRhaWxEaXNwbGF5ZWRBbGVydC5jb250ZW50cyA9IEpTT04uc3RyaW5naWZ5KGFsZXJ0LmRldGFpbGVkRGF0YSwgbnVsbCwgMik7XG4gICAgfVxuICB9XG5cbiAgaGFzRGV0YWlscyhhbGVydCkge1xuICAgIHJldHVybiAoYWxlcnQuZGV0YWlsZWREYXRhIHx8IGFsZXJ0Lm9uRGV0YWlsKTtcbiAgfVxuXG4gIGNsb3NlRGV0YWlscygpIHtcbiAgICB0aGlzLmRldGFpbERpc3BsYXllZEFsZXJ0ID0ge307XG4gIH1cblxuICBpc0RldGFpbHNTaG93KGFsZXJ0KSB7XG4gICAgcmV0dXJuIHRoaXMuYWxlcnRTZXJ2aWNlLmFyZVNhbWUoYWxlcnQsIHRoaXMuZGV0YWlsRGlzcGxheWVkQWxlcnQpO1xuICB9XG5cbiAgaXNUZW1wbGF0ZVJlZih2YWx1ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmO1xuICB9XG5cbiAgdGVtcGxhdGUoY29udGVudCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuaXNUZW1wbGF0ZVJlZihjb250ZW50KSA/IGNvbnRlbnQgOiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==