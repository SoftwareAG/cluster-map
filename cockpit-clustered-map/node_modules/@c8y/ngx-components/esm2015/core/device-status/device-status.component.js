import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { deviceAvailabilityIconMap, PushStatusLabels, SendStatusLabels, tooltips } from './device-availability';
import { TranslateService } from '@ngx-translate/core';
import { get } from 'lodash-es';
let DeviceStatusComponent = class DeviceStatusComponent {
    constructor(translateService) {
        this.translateService = translateService;
    }
    set node(value) {
        this._mo = value.mo || value;
    }
    get() {
        return this._mo;
    }
    ngAfterContentInit() {
        this.requiredAvailability = get(this._mo, 'c8y_RequiredAvailability');
        this.availabilityStatus = get(this._mo, 'c8y_Availability.status');
        this.pushStatus = get(this._mo, 'c8y_Connection.status') || 'UNKNOWN';
        this.sendStatus = this.availabilityStatus || (this.requiredAvailability ? ('UNKNOWN') : ('NOT_MONITORED'));
    }
    status() {
        let statuses;
        if (this.availabilityStatus === 'MAINTENANCE' || this.pushStatus === 'MAINTENANCE') {
            statuses = this.getMaintenanceStatus();
        }
        else {
            statuses = this.getSendPushStatus();
        }
        return statuses;
    }
    getMaintenanceStatus() {
        return ({
            sendStatus: false,
            pushStatus: false,
            maintenanceStatus: {
                icon: deviceAvailabilityIconMap.device.MAINTENANCE.icon,
                class: deviceAvailabilityIconMap.device.MAINTENANCE.class,
                tooltip: tooltips.maintenance
            }
        });
    }
    getSendPushStatus() {
        return ({
            sendStatus: {
                icon: deviceAvailabilityIconMap.sendData[this.sendStatus].icon,
                class: deviceAvailabilityIconMap.sendData[this.sendStatus].class,
                status: this.sendStatus,
                label: SendStatusLabels[this.sendStatus],
                tooltip: this.getSendStatusTooltip(this._mo)
            },
            pushStatus: {
                icon: deviceAvailabilityIconMap.push[this.pushStatus].icon,
                class: deviceAvailabilityIconMap.push[this.pushStatus].class,
                status: this.pushStatus,
                label: PushStatusLabels[this.pushStatus],
                tooltip: this.getPushStatusTooltip(this.pushStatus === 'CONNECTED')
            },
            maintenanceStatus: false
        });
    }
    getSendStatusTooltip(device) {
        const availability = device && device.c8y_Availability;
        const lastMessage = availability && availability.lastMessage;
        if (lastMessage) {
            return tooltips.sendStatusConnected(lastMessage, this.translateService);
        }
        return tooltips.sendStatusDisconnected;
    }
    getPushStatusTooltip(isActive) {
        return isActive ? tooltips.pushStatusConnected : tooltips.pushStatusDisconnected;
    }
};
DeviceStatusComponent.ctorParameters = () => [
    { type: TranslateService }
];
tslib_1.__decorate([
    Input('mo')
], DeviceStatusComponent.prototype, "node", null);
DeviceStatusComponent = tslib_1.__decorate([
    Component({
        selector: 'device-status',
        template: "<!-- ATTENTION: keep text format in `tooltip` attribute -->\n<div class=\"statusContainer\"\n    tooltip=\"{{status().sendStatus.tooltip | translate}}\n{{status().pushStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"left\"\n   >\n    <div\n    *ngIf=\"!!status().sendStatus\"\n    class=\"sendStatus\"\n    [c8yIcon]=\"status().sendStatus.icon\"\n    [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n    *ngIf=\"!!status().pushStatus\"\n    class=\"pushStatus\"\n    [c8yIcon]=\"status().pushStatus.icon\"\n    [ngClass]=\"status().pushStatus.class\"\n    >\n    </div>\n\n  <div *ngIf=\"!!status().maintenanceStatus\"\n    class=\"maintenanceStatus\"\n    tooltip=\"{{status().maintenanceStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"auto\"\n    [c8yIcon]=\"status().maintenanceStatus.icon\"\n    [ngClass]=\"status().maintenanceStatus.class\"></div>\n</div>\n"
    })
], DeviceStatusComponent);
export { DeviceStatusComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLXN0YXR1cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9kZXZpY2Utc3RhdHVzL2RldmljZS1zdGF0dXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEgsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQU1oQyxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQVdoQyxZQUNVLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQ3pDLENBQUM7SUFaUyxJQUFJLElBQUksQ0FBQyxLQUFLO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQVlELEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsb0JBQW9CLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUVuRSxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLElBQUksU0FBUyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxVQUFVLEdBQUcs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eTZCQUE2QztLQUM5QyxDQUFDO0dBQ1cscUJBQXFCLENBbUZqQztTQW5GWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwLCBQdXNoU3RhdHVzTGFiZWxzLCBTZW5kU3RhdHVzTGFiZWxzLCB0b29sdGlwcyB9IGZyb20gJy4vZGV2aWNlLWF2YWlsYWJpbGl0eSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICdsb2Rhc2gtZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkZXZpY2Utc3RhdHVzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RldmljZS1zdGF0dXMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERldmljZVN0YXR1c0NvbXBvbmVudCB7XG4gIEBJbnB1dCgnbW8nKSBzZXQgbm9kZSh2YWx1ZSkge1xuICAgIHRoaXMuX21vID0gdmFsdWUubW8gfHwgdmFsdWU7XG4gIH1cblxuICBwcml2YXRlIF9tbztcbiAgcHJpdmF0ZSByZXF1aXJlZEF2YWlsYWJpbGl0eTtcbiAgcHJpdmF0ZSBhdmFpbGFiaWxpdHlTdGF0dXM7XG4gIHByaXZhdGUgcHVzaFN0YXR1cztcbiAgcHJpdmF0ZSBzZW5kU3RhdHVzO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZVxuICApIHt9XG5cbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9tbztcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnJlcXVpcmVkQXZhaWxhYmlsaXR5ID0gZ2V0KHRoaXMuX21vLCAnYzh5X1JlcXVpcmVkQXZhaWxhYmlsaXR5Jyk7XG4gICAgdGhpcy5hdmFpbGFiaWxpdHlTdGF0dXMgPSBnZXQodGhpcy5fbW8sICdjOHlfQXZhaWxhYmlsaXR5LnN0YXR1cycpO1xuXG4gICAgdGhpcy5wdXNoU3RhdHVzID0gZ2V0KHRoaXMuX21vLCAnYzh5X0Nvbm5lY3Rpb24uc3RhdHVzJykgfHwgJ1VOS05PV04nO1xuICAgIHRoaXMuc2VuZFN0YXR1cyA9IHRoaXMuYXZhaWxhYmlsaXR5U3RhdHVzIHx8ICh0aGlzLnJlcXVpcmVkQXZhaWxhYmlsaXR5ID8gKCdVTktOT1dOJykgOiAoJ05PVF9NT05JVE9SRUQnKSk7XG4gIH1cblxuICBzdGF0dXMoKSB7XG4gICAgbGV0IHN0YXR1c2VzO1xuXG4gICAgaWYgKHRoaXMuYXZhaWxhYmlsaXR5U3RhdHVzID09PSAnTUFJTlRFTkFOQ0UnIHx8IHRoaXMucHVzaFN0YXR1cyA9PT0gJ01BSU5URU5BTkNFJykge1xuICAgICAgc3RhdHVzZXMgPSB0aGlzLmdldE1haW50ZW5hbmNlU3RhdHVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXR1c2VzID0gdGhpcy5nZXRTZW5kUHVzaFN0YXR1cygpO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0dXNlcztcbiAgfVxuXG4gIGdldE1haW50ZW5hbmNlU3RhdHVzKCkge1xuICAgIHJldHVybiAoe1xuICAgICAgc2VuZFN0YXR1czogZmFsc2UsXG4gICAgICBwdXNoU3RhdHVzOiBmYWxzZSxcbiAgICAgIG1haW50ZW5hbmNlU3RhdHVzOiB7XG4gICAgICAgIGljb246IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAuZGV2aWNlLk1BSU5URU5BTkNFLmljb24sXG4gICAgICAgIGNsYXNzOiBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwLmRldmljZS5NQUlOVEVOQU5DRS5jbGFzcyxcbiAgICAgICAgdG9vbHRpcDogdG9vbHRpcHMubWFpbnRlbmFuY2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2VuZFB1c2hTdGF0dXMoKSB7XG4gICAgcmV0dXJuICh7XG4gICAgICBzZW5kU3RhdHVzOiB7XG4gICAgICAgIGljb246IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAuc2VuZERhdGFbdGhpcy5zZW5kU3RhdHVzXS5pY29uLFxuICAgICAgICBjbGFzczogZGV2aWNlQXZhaWxhYmlsaXR5SWNvbk1hcC5zZW5kRGF0YVt0aGlzLnNlbmRTdGF0dXNdLmNsYXNzLFxuICAgICAgICBzdGF0dXM6IHRoaXMuc2VuZFN0YXR1cyxcbiAgICAgICAgbGFiZWw6IFNlbmRTdGF0dXNMYWJlbHNbdGhpcy5zZW5kU3RhdHVzXSxcbiAgICAgICAgdG9vbHRpcDogdGhpcy5nZXRTZW5kU3RhdHVzVG9vbHRpcCh0aGlzLl9tbylcbiAgICAgIH0sXG4gICAgICBwdXNoU3RhdHVzOiB7XG4gICAgICAgIGljb246IGRldmljZUF2YWlsYWJpbGl0eUljb25NYXAucHVzaFt0aGlzLnB1c2hTdGF0dXNdLmljb24sXG4gICAgICAgIGNsYXNzOiBkZXZpY2VBdmFpbGFiaWxpdHlJY29uTWFwLnB1c2hbdGhpcy5wdXNoU3RhdHVzXS5jbGFzcyxcbiAgICAgICAgc3RhdHVzOiB0aGlzLnB1c2hTdGF0dXMsXG4gICAgICAgIGxhYmVsOiBQdXNoU3RhdHVzTGFiZWxzW3RoaXMucHVzaFN0YXR1c10sXG4gICAgICAgIHRvb2x0aXA6IHRoaXMuZ2V0UHVzaFN0YXR1c1Rvb2x0aXAodGhpcy5wdXNoU3RhdHVzID09PSAnQ09OTkVDVEVEJylcbiAgICAgIH0sXG4gICAgICBtYWludGVuYW5jZVN0YXR1czogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2VuZFN0YXR1c1Rvb2x0aXAoZGV2aWNlKSB7XG4gICAgY29uc3QgYXZhaWxhYmlsaXR5ID0gZGV2aWNlICYmIGRldmljZS5jOHlfQXZhaWxhYmlsaXR5O1xuICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gYXZhaWxhYmlsaXR5ICYmIGF2YWlsYWJpbGl0eS5sYXN0TWVzc2FnZTtcbiAgICBpZiAobGFzdE1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiB0b29sdGlwcy5zZW5kU3RhdHVzQ29ubmVjdGVkKGxhc3RNZXNzYWdlLCB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UpO1xuICAgIH1cbiAgICByZXR1cm4gdG9vbHRpcHMuc2VuZFN0YXR1c0Rpc2Nvbm5lY3RlZDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHVzaFN0YXR1c1Rvb2x0aXAoaXNBY3RpdmUpIHtcbiAgICByZXR1cm4gaXNBY3RpdmUgPyB0b29sdGlwcy5wdXNoU3RhdHVzQ29ubmVjdGVkIDogdG9vbHRpcHMucHVzaFN0YXR1c0Rpc2Nvbm5lY3RlZDtcbiAgfVxufVxuIl19