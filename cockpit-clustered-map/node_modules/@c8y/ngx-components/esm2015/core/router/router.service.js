import * as tslib_1 from "tslib";
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { fromFactories } from '../common/extension-hooks';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * A hook to use for Multi Provider extension.
 */
export const HOOK_ONCE_ROUTE = new InjectionToken('RouteFactory');
/**
 * A service which defines routes
 */
let RouterService = class RouterService {
    constructor(factories, router) {
        this.router = router;
        fromFactories(factories).subscribe((routes) => {
            this.addRoute(routes);
        });
    }
    /**
     * Add a new route to the router configuration or a context.
     * @param route The route to add
     */
    addRoute(route) {
        this.addRoutes(Array.isArray(route) ? route : [route]);
    }
    addRoutes(routes) {
        const emptyRoute = this.router.config.find(r => r.path === '**');
        this.router.resetConfig([
            ...this.router.config.filter(r => r.path !== '**'),
            ...routes
                .map((r) => this.convertRoute(this.router.config, r)),
            emptyRoute
        ].filter(Boolean));
    }
    convertRoute(initialConfig, route) {
        if (route.context) {
            initialConfig.forEach((r) => {
                if (r.data && r.data.context === route.context) {
                    r.children = [route, ...(r.children || [])];
                }
            });
            return;
        }
        return route;
    }
};
RouterService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [HOOK_ONCE_ROUTE,] }] },
    { type: Router }
];
RouterService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function RouterService_Factory() { return new RouterService(i0.ɵɵinject(HOOK_ONCE_ROUTE, 8), i0.ɵɵinject(i1.Router)); }, token: RouterService, providedIn: "root" });
RouterService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(HOOK_ONCE_ROUTE))
], RouterService);
export { RouterService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29yZS9yb3V0ZXIvcm91dGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7O0FBRzFEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLElBQUksY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRWxFOztHQUVHO0FBSUgsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBYTtJQUN4QixZQUN1QyxTQUF5QixFQUN0RCxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUV0QixhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBZSxFQUFFLEVBQUU7WUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRLENBQUMsS0FBc0I7UUFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8sU0FBUyxDQUFDLE1BQU07UUFDdEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FDckI7WUFDRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO1lBQ2xELEdBQUcsTUFBTTtpQkFDTixHQUFHLENBQUMsQ0FBQyxDQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDOUQsVUFBVTtTQUNYLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUNsQixDQUFDO0lBQ0osQ0FBQztJQUVPLFlBQVksQ0FBQyxhQUFhLEVBQUUsS0FBWTtRQUM5QyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDakIsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQVEsRUFBRSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBRTtvQkFDOUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUM3QztZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTztTQUNSO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0YsQ0FBQTs7d0NBdkNJLFFBQVEsWUFBSSxNQUFNLFNBQUMsZUFBZTtZQUNuQixNQUFNOzs7QUFIYixhQUFhO0lBSHpCLFVBQVUsQ0FBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7SUFHRyxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtHQUYzQixhQUFhLENBeUN6QjtTQXpDWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmcm9tRmFjdG9yaWVzIH0gZnJvbSAnLi4vY29tbW9uL2V4dGVuc2lvbi1ob29rcyc7XG5pbXBvcnQgeyBSb3V0ZUZhY3RvcnksIFJvdXRlIH0gZnJvbSAnLi9yb3V0ZXIubW9kZWxzJztcblxuLyoqXG4gKiBBIGhvb2sgdG8gdXNlIGZvciBNdWx0aSBQcm92aWRlciBleHRlbnNpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBIT09LX09OQ0VfUk9VVEUgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1JvdXRlRmFjdG9yeScpO1xuXG4vKipcbiAqIEEgc2VydmljZSB3aGljaCBkZWZpbmVzIHJvdXRlc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBSb3V0ZXJTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChIT09LX09OQ0VfUk9VVEUpIGZhY3RvcmllczogUm91dGVGYWN0b3J5W10sXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICApIHtcbiAgICBmcm9tRmFjdG9yaWVzKGZhY3Rvcmllcykuc3Vic2NyaWJlKChyb3V0ZXM6IFJvdXRlW10pID0+IHtcbiAgICAgIHRoaXMuYWRkUm91dGUocm91dGVzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgcm91dGUgdG8gdGhlIHJvdXRlciBjb25maWd1cmF0aW9uIG9yIGEgY29udGV4dC5cbiAgICogQHBhcmFtIHJvdXRlIFRoZSByb3V0ZSB0byBhZGRcbiAgICovXG4gIGFkZFJvdXRlKHJvdXRlOiBSb3V0ZSB8IFJvdXRlW10pIHtcbiAgICB0aGlzLmFkZFJvdXRlcyhBcnJheS5pc0FycmF5KHJvdXRlKSA/IHJvdXRlIDogW3JvdXRlXSk7XG4gIH1cblxuICBwcml2YXRlIGFkZFJvdXRlcyhyb3V0ZXMpIHtcbiAgICBjb25zdCBlbXB0eVJvdXRlID0gdGhpcy5yb3V0ZXIuY29uZmlnLmZpbmQociA9PiByLnBhdGggPT09ICcqKicpO1xuICAgIHRoaXMucm91dGVyLnJlc2V0Q29uZmlnKFxuICAgICAgW1xuICAgICAgICAuLi50aGlzLnJvdXRlci5jb25maWcuZmlsdGVyKHIgPT4gci5wYXRoICE9PSAnKionKSxcbiAgICAgICAgLi4ucm91dGVzXG4gICAgICAgICAgLm1hcCgocjogUm91dGUpID0+IHRoaXMuY29udmVydFJvdXRlKHRoaXMucm91dGVyLmNvbmZpZywgcikpLFxuICAgICAgICBlbXB0eVJvdXRlXG4gICAgICBdLmZpbHRlcihCb29sZWFuKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRSb3V0ZShpbml0aWFsQ29uZmlnLCByb3V0ZTogUm91dGUpIHtcbiAgICBpZiAocm91dGUuY29udGV4dCkge1xuICAgICAgaW5pdGlhbENvbmZpZy5mb3JFYWNoKChyOiBSb3V0ZSkgPT4ge1xuICAgICAgICBpZiAoci5kYXRhICYmIHIuZGF0YS5jb250ZXh0ID09PSByb3V0ZS5jb250ZXh0KSB7XG4gICAgICAgICAgci5jaGlsZHJlbiA9IFtyb3V0ZSwgLi4uKHIuY2hpbGRyZW4gfHwgW10pXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiByb3V0ZTtcbiAgfVxufVxuIl19