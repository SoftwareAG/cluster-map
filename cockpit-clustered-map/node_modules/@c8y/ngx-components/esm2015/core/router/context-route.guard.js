import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { from, of } from 'rxjs';
import { catchError, map, shareReplay, tap } from 'rxjs/operators';
import { ViewContextServices } from './view-context.service';
let ContextRouteGuard = class ContextRouteGuard {
    constructor(injector) {
        this.injector = injector;
        this.caches = new Map();
    }
    canActivate(route) {
        const id = route.paramMap.get('id');
        const service = this.service(route);
        this.clearDetailCached(service, id);
        return this.detailCached(service, id).pipe(tap((contextData) => route.data = Object.assign({}, route.data, { contextData })), map(() => true), catchError((ex) => of(false)));
    }
    service(route) {
        const serviceInstance = ViewContextServices.contextToService(route.data.context);
        return this.injector.get(serviceInstance);
    }
    detailCached(service, id) {
        const cache = this.getCache(service);
        let cached = cache[id];
        if (!cached) {
            cached = from(service.detail(id)).pipe(map(({ data }) => data), shareReplay(1));
            cache[id] = cached;
        }
        return cached;
    }
    clearDetailCached(service, id) {
        const cache = this.getCache(service);
        delete cache[id];
    }
    getCache(service) {
        let cache = this.caches.get(service);
        if (!cache) {
            cache = {};
            this.caches.set(service, cache);
        }
        return cache;
    }
};
ContextRouteGuard.ctorParameters = () => [
    { type: Injector }
];
ContextRouteGuard = tslib_1.__decorate([
    Injectable()
], ContextRouteGuard);
export { ContextRouteGuard };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1yb3V0ZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL3JvdXRlci9jb250ZXh0LXJvdXRlLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFHN0QsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUFFNUIsWUFDVSxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRnBCLFdBQU0sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBR3hCLENBQUM7SUFFSixXQUFXLENBQUMsS0FBNkI7UUFDdkMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUN4QyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLHFCQUFRLEtBQUssQ0FBQyxJQUFJLElBQUUsV0FBVyxHQUFFLENBQUMsRUFDakUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNmLFVBQVUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQzlCLENBQUM7SUFDSixDQUFDO0lBRU8sT0FBTyxDQUFDLEtBQUs7UUFDbkIsTUFBTSxlQUFlLEdBQUcsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqRixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTyxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDcEMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ3ZCLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO1lBQ0YsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQztTQUNwQjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNuQyxNQUFNLEtBQUssR0FBa0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRCxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRU8sUUFBUSxDQUFDLE9BQU87UUFDdEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDWCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRixDQUFBOztZQTdDcUIsUUFBUTs7QUFIakIsaUJBQWlCO0lBRDdCLFVBQVUsRUFBRTtHQUNBLGlCQUFpQixDQWdEN0I7U0FoRFksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZyb20sIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHNoYXJlUmVwbGF5LCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBWaWV3Q29udGV4dFNlcnZpY2VzIH0gZnJvbSAnLi92aWV3LWNvbnRleHQuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb250ZXh0Um91dGVHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgcHJpdmF0ZSBjYWNoZXMgPSBuZXcgTWFwKCk7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXG4gICkge31cblxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCkge1xuICAgIGNvbnN0IGlkID0gcm91dGUucGFyYW1NYXAuZ2V0KCdpZCcpO1xuICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLnNlcnZpY2Uocm91dGUpO1xuICAgIHRoaXMuY2xlYXJEZXRhaWxDYWNoZWQoc2VydmljZSwgaWQpO1xuICAgIHJldHVybiB0aGlzLmRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkucGlwZShcbiAgICAgIHRhcCgoY29udGV4dERhdGEpID0+IHJvdXRlLmRhdGEgPSB7IC4uLnJvdXRlLmRhdGEsIGNvbnRleHREYXRhIH0pLFxuICAgICAgbWFwKCgpID0+IHRydWUpLFxuICAgICAgY2F0Y2hFcnJvcigoZXgpID0+IG9mKGZhbHNlKSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXJ2aWNlKHJvdXRlKSB7XG4gICAgY29uc3Qgc2VydmljZUluc3RhbmNlID0gVmlld0NvbnRleHRTZXJ2aWNlcy5jb250ZXh0VG9TZXJ2aWNlKHJvdXRlLmRhdGEuY29udGV4dCk7XG4gICAgcmV0dXJuIHRoaXMuaW5qZWN0b3IuZ2V0KHNlcnZpY2VJbnN0YW5jZSk7XG4gIH1cblxuICBwcml2YXRlIGRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkge1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5nZXRDYWNoZShzZXJ2aWNlKTtcbiAgICBsZXQgY2FjaGVkID0gY2FjaGVbaWRdO1xuICAgIGlmICghY2FjaGVkKSB7XG4gICAgICBjYWNoZWQgPSBmcm9tKHNlcnZpY2UuZGV0YWlsKGlkKSkucGlwZShcbiAgICAgICAgbWFwKCh7IGRhdGEgfSkgPT4gZGF0YSksXG4gICAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgICApO1xuICAgICAgY2FjaGVbaWRdID0gY2FjaGVkO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhckRldGFpbENhY2hlZChzZXJ2aWNlLCBpZCkge1xuICAgIGNvbnN0IGNhY2hlOiBNYXA8YW55LCBhbnk+ID0gdGhpcy5nZXRDYWNoZShzZXJ2aWNlKTtcbiAgICBkZWxldGUgY2FjaGVbaWRdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDYWNoZShzZXJ2aWNlKSB7XG4gICAgbGV0IGNhY2hlID0gdGhpcy5jYWNoZXMuZ2V0KHNlcnZpY2UpO1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgIGNhY2hlID0ge307XG4gICAgICB0aGlzLmNhY2hlcy5zZXQoc2VydmljZSwgY2FjaGUpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cbn1cbiJdfQ==