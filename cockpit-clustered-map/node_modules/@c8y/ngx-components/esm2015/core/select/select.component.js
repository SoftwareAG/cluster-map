import * as tslib_1 from "tslib";
import { BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { Component, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
let SelectComponent = class SelectComponent {
    constructor() {
        this.placeholder = 'Select item';
        this.applyLabel = 'Apply';
        this.onChange = new EventEmitter();
        this.textFilter = '';
        this.labelText = '';
        this.isOpen = false;
        this.filteredItems = [];
        this.sizeToShowFilter = 5;
        this.itemsSelected = new Set();
        this.stopClicks = false;
    }
    preventClick(evt) {
        if (this.stopClicks) {
            evt.stopPropagation();
        }
        this.stopClicks = this.isOpen;
    }
    isOpenChange(isOpen) {
        this.isOpen = isOpen;
        if (isOpen) {
            this.updateSelected();
        }
        else {
            this.stopClicks = false;
        }
    }
    outterSelected(item) {
        const { selected, itemsSelected, items } = this;
        let isSelected = () => false;
        if (typeof selected === 'function') {
            isSelected = selected;
        }
        else if (Array.isArray(selected)) {
            isSelected = (i) => selected.indexOf(i) > -1;
        }
        return isSelected(item);
    }
    isSelected(item) {
        return this.itemsSelected.has(item);
    }
    applyChanges() {
        const selected = Array.from(this.itemsSelected.values());
        this.onChange.emit(selected);
        this.dropdown.hide();
    }
    selectAll(checked) {
        this.filteredItems.forEach(item => this.onChangeItem(checked, item));
    }
    allSelected() {
        return this.filteredItems.length === this.itemsSelected.size;
    }
    onChangeItem(checked, item) {
        if (checked) {
            this.itemsSelected.add(item);
        }
        else {
            this.itemsSelected.delete(item);
        }
    }
    updateFiltered(term) {
        if (term) {
            const search = new RegExp(term, 'i');
            this.filteredItems = this.items.filter(({ name }) => search.test(name));
        }
        else {
            this.filteredItems = this.items;
        }
    }
    ngOnChanges(changes) {
        if (this.isOpen) {
            return;
        }
        if (changes.items || changes.selected || changes.applyLabel) {
            this.updateSelected();
            this.updateLabel();
        }
    }
    updateLabel() {
        const outterSelected = this.items.filter(i => this.outterSelected(i));
        if (typeof this.selectedLabel === 'string') {
            this.labelText = this.selectedLabel;
        }
        else if (typeof this.selectedLabel === 'function') {
            this.labelText = this.selectedLabel(outterSelected);
        }
        else {
            this.labelText = outterSelected.map(({ name }) => name).join(', ');
        }
    }
    updateSelected() {
        const { itemsSelected, items } = this;
        itemsSelected.clear();
        items.forEach(item => {
            if (this.outterSelected(item)) {
                itemsSelected.add(item);
            }
        });
        this.filteredItems = items;
    }
};
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "selectedLabel", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "applyLabel", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "items", void 0);
tslib_1.__decorate([
    Input()
], SelectComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Output()
], SelectComponent.prototype, "onChange", void 0);
tslib_1.__decorate([
    ViewChild(BsDropdownDirective, { static: false })
], SelectComponent.prototype, "dropdown", void 0);
tslib_1.__decorate([
    HostListener('click', ['$event'])
], SelectComponent.prototype, "preventClick", null);
SelectComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-select',
        template: "<div\n  class=\"c8y-child-assets-selector  dropdown fit-h\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">{{ labelText | translate }}</span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">{{ placeholder | translate }}</span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          placeholder=\"{{ 'Filter' | translate }}&hellip;\"\n          (keyup)=\"updateFiltered($event.target.value)\"\n        />\n        <span class=\"input-group-addon\">\n          <i class=\"fa fa-search\" *ngIf=\"!textFilter\"></i>\n          <i class=\"fa fa-times text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n        </span>\n      </div>\n    </li>\n\n    <li class=\"multiselect-item\">\n      <label\n        title=\"{{ 'All' | translate }}\"\n        class=\"c8y-checkbox input-sm\"\n        ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n      >\n        <input\n          type=\"checkbox\"\n          [checked]=\"allSelected()\"\n          (change)=\"selectAll($event.target.checked)\"\n          style=\"margin-top:0;\"\n        /><span></span> &nbsp;<span span class=\"label-text \" translate>All</span>\n      </label>\n    </li>\n\n    <li class=\"multiselect-item-container\">\n      <ul class=\"list-unstyled\">\n        <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n          <label class=\"c8y-checkbox input-sm text-truncate\">\n            <input\n              type=\"checkbox\"\n              [checked]=\"isSelected(item)\"\n              (change)=\"onChangeItem($event.target.checked, item)\"\n              style=\"margin-top:0\"\n            />\n            <span></span>\n            &nbsp;<span class=\"label-text \" title=\"{{ item.name | translate }}\">{{\n              item.name | translate\n            }}</span>\n          </label>\n        </li>\n      </ul>\n    </li>\n    <li class=\"divider\"></li>\n    <li>\n      <button\n        title=\"{{ applyLabel | translate }}\"\n        class=\"btn btn-primary btn-block\"\n        (click)=\"applyChanges()\"\n      >\n        {{ applyLabel | translate }}\n      </button>\n    </li>\n  </ul>\n</div>\n"
    })
], SelectComponent);
export { SelectComponent };
//# sourceMappingURL=data:application/json;base64,