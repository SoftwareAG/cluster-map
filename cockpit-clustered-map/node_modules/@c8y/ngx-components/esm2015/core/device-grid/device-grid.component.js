import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { DeviceGridService } from './device-grid.service';
import { gettext } from '../i18n/gettext';
let DeviceGridComponent = class DeviceGridComponent {
    constructor(deviceGridService) {
        this.deviceGridService = deviceGridService;
        this.title = gettext('Devices');
        this.loadingItemsLabel = gettext('Loading devicesâ€¦');
        this.noMatchingItemsLabel = gettext('No matching devices.');
        this.selectable = false;
        this.onColumnsChange = new EventEmitter();
        this.onDeviceQueryStringChange = new EventEmitter();
        this.columns = this.deviceGridService.getDefaultColumns();
        this.pagination = this.deviceGridService.getDefaultPagination();
        this.actionControls = this.deviceGridService.getDefaultActionControls();
        this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
    }
    set _columns(value) {
        if (value) {
            this.columns = value;
        }
        else {
            this.columns = this.deviceGridService.getDefaultColumns();
        }
    }
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
        else {
            this.pagination = this.deviceGridService.getDefaultPagination();
        }
    }
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.deviceGridService.getDefaultActionControls();
        }
    }
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
        }
    }
    trackByName(_index, column) {
        return column.name;
    }
    onDataSourceModifier(dataSourceModifier) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { res, data, paging } = yield this.deviceGridService.getDevices(dataSourceModifier.columns, dataSourceModifier.pagination);
            const filteredSize = yield this.deviceGridService.getDevicesCount(dataSourceModifier.columns, dataSourceModifier.pagination);
            const size = yield this.deviceGridService.getDevicesTotal();
            this.onColumnsChange.emit(dataSourceModifier.columns);
            this.onDeviceQueryStringChange.emit(this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns));
            return {
                res,
                data,
                paging,
                filteredSize,
                size
            };
        });
    }
};
DeviceGridComponent.ctorParameters = () => [
    { type: DeviceGridService }
];
tslib_1.__decorate([
    Input()
], DeviceGridComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input()
], DeviceGridComponent.prototype, "loadingItemsLabel", void 0);
tslib_1.__decorate([
    Input()
], DeviceGridComponent.prototype, "noMatchingItemsLabel", void 0);
tslib_1.__decorate([
    Input('columns')
], DeviceGridComponent.prototype, "_columns", null);
tslib_1.__decorate([
    Input('pagination')
], DeviceGridComponent.prototype, "_pagination", null);
tslib_1.__decorate([
    Input('actionControls')
], DeviceGridComponent.prototype, "_actionControls", null);
tslib_1.__decorate([
    Input()
], DeviceGridComponent.prototype, "selectable", void 0);
tslib_1.__decorate([
    Input('bulkActionControls')
], DeviceGridComponent.prototype, "_bulkActionControls", null);
tslib_1.__decorate([
    Output()
], DeviceGridComponent.prototype, "onColumnsChange", void 0);
tslib_1.__decorate([
    Output()
], DeviceGridComponent.prototype, "onDeviceQueryStringChange", void 0);
DeviceGridComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-device-grid',
        template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [noMatchingItemsLabel]=\"noMatchingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\">\n      <ng-container *ngIf=\"column.filteringConfig\">\n        <ng-container *c8yFilteringFormRendererDef=\"let context\">\n          <c8y-filtering-form [context]=\"context\"></c8y-filtering-form>\n        </ng-container>\n      </ng-container>\n    </c8y-column>\n  </ng-container>\n</c8y-data-grid>\n"
    })
], DeviceGridComponent);
export { DeviceGridComponent };
//# sourceMappingURL=data:application/json;base64,