import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, ViewChild } from '@angular/core';
import { get, cloneDeep } from 'lodash-es';
import { SchemaFormComponent } from '../forms/schema-form.component';
let FilteringFormComponent = class FilteringFormComponent {
    ngOnInit() {
        const column = this.context.property;
        this.schema = cloneDeep(column.filteringConfig.schema);
        this.form = cloneDeep(column.filteringConfig.form);
        this.model = cloneDeep(column.externalFilterQuery || {});
        this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };
    }
    canApply() {
        return get(this.schemaFormComponent, '$componentScope.vm.ngForm.$invalid');
    }
    applyFilter() {
        this.context.applyFilter({
            externalFilterQuery: this.model
        });
    }
    resetFilter() {
        this.context.resetFilter();
    }
};
tslib_1.__decorate([
    Input()
], FilteringFormComponent.prototype, "context", void 0);
tslib_1.__decorate([
    ViewChild(forwardRef(() => SchemaFormComponent), { static: false })
], FilteringFormComponent.prototype, "schemaFormComponent", void 0);
FilteringFormComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-filtering-form',
        template: "<c8y-schema-form\n  [schema]=\"schema\"\n  [form]=\"form\"\n  [model]=\"model\"\n  [options]=\"options\"\n></c8y-schema-form>\n<div class=\"flex-row p-t-16\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"canApply()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
    })
], FilteringFormComponent);
export { FilteringFormComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyaW5nLWZvcm0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvZGV2aWNlLWdyaWQvZmlsdGVyaW5nLWZvcm0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzNDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBUXJFLElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBU2pDLFFBQVE7UUFDTixNQUFNLE1BQU0sR0FBcUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsWUFBWSxFQUFFLEVBQUUsY0FBYyxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUN6RSxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7WUFDdkIsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdCLENBQUM7Q0FDRixDQUFBO0FBN0JVO0lBQVIsS0FBSyxFQUFFO3VEQUF1QztBQUNzQjtJQUFwRSxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7bUVBQTBCO0FBRm5GLHNCQUFzQjtJQUpsQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsb0JBQW9CO1FBQzlCLHlqQkFBOEM7S0FDL0MsQ0FBQztHQUNXLHNCQUFzQixDQThCbEM7U0E5Qlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbnB1dCwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldCwgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IFNjaGVtYUZvcm1Db21wb25lbnQgfSBmcm9tICcuLi9mb3Jtcy9zY2hlbWEtZm9ybS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29udGV4dCB9IGZyb20gJy4uL2RhdGEtZ3JpZC9jb2x1bW4vZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXInO1xuaW1wb3J0IHsgRGV2aWNlR3JpZENvbHVtbiB9IGZyb20gJy4vZGV2aWNlLWdyaWQubW9kZWxzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWZpbHRlcmluZy1mb3JtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlcmluZy1mb3JtLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBGaWx0ZXJpbmdGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY29udGV4dDogRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29udGV4dDtcbiAgQFZpZXdDaGlsZChmb3J3YXJkUmVmKCgpID0+IFNjaGVtYUZvcm1Db21wb25lbnQpLCB7IHN0YXRpYzogZmFsc2UgfSkgc2NoZW1hRm9ybUNvbXBvbmVudDogYW55O1xuXG4gIHNjaGVtYTtcbiAgZm9ybTtcbiAgbW9kZWw7XG4gIG9wdGlvbnM7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgY29sdW1uOiBEZXZpY2VHcmlkQ29sdW1uID0gdGhpcy5jb250ZXh0LnByb3BlcnR5O1xuICAgIHRoaXMuc2NoZW1hID0gY2xvbmVEZWVwKGNvbHVtbi5maWx0ZXJpbmdDb25maWcuc2NoZW1hKTtcbiAgICB0aGlzLmZvcm0gPSBjbG9uZURlZXAoY29sdW1uLmZpbHRlcmluZ0NvbmZpZy5mb3JtKTtcbiAgICB0aGlzLm1vZGVsID0gY2xvbmVEZWVwKGNvbHVtbi5leHRlcm5hbEZpbHRlclF1ZXJ5IHx8IHt9KTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7IGZvcm1EZWZhdWx0czogeyBuZ01vZGVsT3B0aW9uczogeyBkZWJvdW5jZTogMTAwIH0gfSB9O1xuICB9XG5cbiAgY2FuQXBwbHkoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLnNjaGVtYUZvcm1Db21wb25lbnQsICckY29tcG9uZW50U2NvcGUudm0ubmdGb3JtLiRpbnZhbGlkJyk7XG4gIH1cblxuICBhcHBseUZpbHRlcigpIHtcbiAgICB0aGlzLmNvbnRleHQuYXBwbHlGaWx0ZXIoe1xuICAgICAgZXh0ZXJuYWxGaWx0ZXJRdWVyeTogdGhpcy5tb2RlbFxuICAgIH0pO1xuICB9XG5cbiAgcmVzZXRGaWx0ZXIoKSB7XG4gICAgdGhpcy5jb250ZXh0LnJlc2V0RmlsdGVyKCk7XG4gIH1cbn1cbiJdfQ==