import { BaseDeviceGridColumn } from './base.device-grid-column';
import { AlarmsCellRendererComponent } from './alarms.cell-renderer.component';
import { gettext } from '../../i18n/gettext';
import { map } from 'lodash-es';
export class AlarmsDeviceGridColumn extends BaseDeviceGridColumn {
    constructor() {
        super();
        this.name = 'alarms';
        this.header = gettext('Alarms');
        this.cellRendererComponent = AlarmsCellRendererComponent;
        this.filterable = true;
        this.filteringConfig = {
            schema: {
                type: 'object',
                properties: {
                    critical: {
                        type: 'boolean'
                    },
                    major: {
                        type: 'boolean'
                    },
                    minor: {
                        type: 'boolean'
                    },
                    warning: {
                        type: 'boolean'
                    },
                    none: {
                        type: 'boolean'
                    }
                }
            },
            form: [
                {
                    type: 'template',
                    template: `<label><span translate>${gettext('Show devices with active')}</span>:</label>`
                },
                {
                    key: 'critical',
                    title: gettext('Critical alarms')
                },
                {
                    key: 'major',
                    title: gettext('Major alarms')
                },
                {
                    key: 'minor',
                    title: gettext('Minor alarms')
                },
                {
                    key: 'warning',
                    title: gettext('Warnings')
                },
                {
                    key: 'none',
                    title: gettext('No alarms')
                }
            ],
            getFilter(model) {
                const filter = {};
                const ors = [];
                if (model.critical) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });
                }
                if (model.major) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });
                }
                if (model.minor) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });
                }
                if (model.warning) {
                    ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });
                }
                if (model.none) {
                    ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });
                    ors.push({
                        __and: map(['critical', 'major', 'minor', 'warning'], sev => {
                            const zero = {};
                            const has = { __not: { __has: undefined } };
                            const key = `c8y_ActiveAlarmsStatus.${sev}`;
                            zero[key] = 0;
                            has.__not.__has = key;
                            return { __or: [zero, has] };
                        })
                    });
                }
                if (ors.length) {
                    filter.__or = ors;
                }
                return filter;
            }
        };
        this.sortable = true;
        this.sortingConfig = {
            pathSortingConfigs: [
                { path: 'c8y_ActiveAlarmsStatus.critical' },
                { path: 'c8y_ActiveAlarmsStatus.major' },
                { path: 'c8y_ActiveAlarmsStatus.minor' },
                { path: 'c8y_ActiveAlarmsStatus.warning' }
            ]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxhcm1zLmRldmljZS1ncmlkLWNvbHVtbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2RldmljZS1ncmlkL2NvbHVtbnMvYWxhcm1zLmRldmljZS1ncmlkLWNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVoQyxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsb0JBQW9CO0lBQzlEO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsMkJBQTJCLENBQUM7UUFFekQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRztZQUNyQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsVUFBVSxFQUFFO29CQUNWLFFBQVEsRUFBRTt3QkFDUixJQUFJLEVBQUUsU0FBUztxQkFDaEI7b0JBQ0QsS0FBSyxFQUFFO3dCQUNMLElBQUksRUFBRSxTQUFTO3FCQUNoQjtvQkFDRCxLQUFLLEVBQUU7d0JBQ0wsSUFBSSxFQUFFLFNBQVM7cUJBQ2hCO29CQUNELE9BQU8sRUFBRTt3QkFDUCxJQUFJLEVBQUUsU0FBUztxQkFDaEI7b0JBQ0QsSUFBSSxFQUFFO3dCQUNKLElBQUksRUFBRSxTQUFTO3FCQUNoQjtpQkFDRjthQUNGO1lBQ0QsSUFBSSxF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QUUsaUNBQWlDLEVBQUU7Z0JBQzNDLEVBQUUsSUFBSSxFQUFFLDhCQUE4QixFQUFFO2dCQUN4QyxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRTtnQkFDeEMsRUFBRSxJQUFJLEVBQUUsZ0NBQWdDLEVBQUU7YUFDM0M7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZURldmljZUdyaWRDb2x1bW4gfSBmcm9tICcuL2Jhc2UuZGV2aWNlLWdyaWQtY29sdW1uJztcbmltcG9ydCB7IEFsYXJtc0NlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vYWxhcm1zLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi8uLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuZXhwb3J0IGNsYXNzIEFsYXJtc0RldmljZUdyaWRDb2x1bW4gZXh0ZW5kcyBCYXNlRGV2aWNlR3JpZENvbHVtbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLm5hbWUgPSAnYWxhcm1zJztcbiAgICB0aGlzLmhlYWRlciA9IGdldHRleHQoJ0FsYXJtcycpO1xuICAgIHRoaXMuY2VsbFJlbmRlcmVyQ29tcG9uZW50ID0gQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50O1xuXG4gICAgdGhpcy5maWx0ZXJhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmZpbHRlcmluZ0NvbmZpZyA9IHtcbiAgICAgIHNjaGVtYToge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGNyaXRpY2FsOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1ham9yOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1pbm9yOiB7XG4gICAgICAgICAgICB0eXBlOiAnYm9vbGVhbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIHdhcm5pbmc6IHtcbiAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbm9uZToge1xuICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZm9ybTogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3RlbXBsYXRlJyxcbiAgICAgICAgICB0ZW1wbGF0ZTogYDxsYWJlbD48c3BhbiB0cmFuc2xhdGU+JHtnZXR0ZXh0KCdTaG93IGRldmljZXMgd2l0aCBhY3RpdmUnKX08L3NwYW4+OjwvbGFiZWw+YFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnY3JpdGljYWwnLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdDcml0aWNhbCBhbGFybXMnKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnbWFqb3InLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdNYWpvciBhbGFybXMnKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnbWlub3InLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdNaW5vciBhbGFybXMnKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnd2FybmluZycsXG4gICAgICAgICAgdGl0bGU6IGdldHRleHQoJ1dhcm5pbmdzJylcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ25vbmUnLFxuICAgICAgICAgIHRpdGxlOiBnZXR0ZXh0KCdObyBhbGFybXMnKVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZ2V0RmlsdGVyKG1vZGVsKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcjogYW55ID0ge307XG4gICAgICAgIGNvbnN0IG9ycyA9IFtdO1xuICAgICAgICBpZiAobW9kZWwuY3JpdGljYWwpIHtcbiAgICAgICAgICBvcnMucHVzaCh7ICdjOHlfQWN0aXZlQWxhcm1zU3RhdHVzLmNyaXRpY2FsJzogeyBfX2d0OiAwIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGVsLm1ham9yKSB7XG4gICAgICAgICAgb3JzLnB1c2goeyAnYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy5tYWpvcic6IHsgX19ndDogMCB9IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlbC5taW5vcikge1xuICAgICAgICAgIG9ycy5wdXNoKHsgJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMubWlub3InOiB7IF9fZ3Q6IDAgfSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZWwud2FybmluZykge1xuICAgICAgICAgIG9ycy5wdXNoKHsgJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMud2FybmluZyc6IHsgX19ndDogMCB9IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlbC5ub25lKSB7XG4gICAgICAgICAgb3JzLnB1c2goeyBfX25vdDogeyBfX2hhczogJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMnIH0gfSk7XG4gICAgICAgICAgb3JzLnB1c2goe1xuICAgICAgICAgICAgX19hbmQ6IG1hcChbJ2NyaXRpY2FsJywgJ21ham9yJywgJ21pbm9yJywgJ3dhcm5pbmcnXSwgc2V2ID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgemVybyA9IHt9O1xuICAgICAgICAgICAgICBjb25zdCBoYXMgPSB7IF9fbm90OiB7IF9faGFzOiB1bmRlZmluZWQgfSB9O1xuICAgICAgICAgICAgICBjb25zdCBrZXkgPSBgYzh5X0FjdGl2ZUFsYXJtc1N0YXR1cy4ke3Nldn1gO1xuICAgICAgICAgICAgICB6ZXJvW2tleV0gPSAwO1xuICAgICAgICAgICAgICBoYXMuX19ub3QuX19oYXMgPSBrZXk7XG4gICAgICAgICAgICAgIHJldHVybiB7IF9fb3I6IFt6ZXJvLCBoYXNdIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgZmlsdGVyLl9fb3IgPSBvcnM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5zb3J0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5zb3J0aW5nQ29uZmlnID0ge1xuICAgICAgcGF0aFNvcnRpbmdDb25maWdzOiBbXG4gICAgICAgIHsgcGF0aDogJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMuY3JpdGljYWwnIH0sXG4gICAgICAgIHsgcGF0aDogJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMubWFqb3InIH0sXG4gICAgICAgIHsgcGF0aDogJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMubWlub3InIH0sXG4gICAgICAgIHsgcGF0aDogJ2M4eV9BY3RpdmVBbGFybXNTdGF0dXMud2FybmluZycgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==