import * as tslib_1 from "tslib";
import { Component, forwardRef, Inject } from '@angular/core';
import { CellRendererContext } from '../../data-grid/column/cell-renderer';
import { DeviceGridService } from '../device-grid.service';
let NameCellRendererComponent = class NameCellRendererComponent {
    constructor(context, deviceGridService) {
        this.context = context;
        this.deviceGridService = deviceGridService;
    }
};
NameCellRendererComponent.ctorParameters = () => [
    { type: CellRendererContext },
    { type: DeviceGridService, decorators: [{ type: Inject, args: [forwardRef(() => DeviceGridService),] }] }
];
NameCellRendererComponent = tslib_1.__decorate([
    Component({
        template: `
    <a
      [href]="deviceGridService.getDeviceHref(context.item)"
      title="{{ deviceGridService.getProperName(context.item) }}"
      class="interact"
    >
      {{ deviceGridService.getProperName(context.item) }}
    </a>
  `
    }),
    tslib_1.__param(1, Inject(forwardRef(() => DeviceGridService)))
], NameCellRendererComponent);
export { NameCellRendererComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2RldmljZS1ncmlkL2NvbHVtbnMvbmFtZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBYTNELElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBQ3BDLFlBQ1MsT0FBNEIsRUFDaUIsaUJBQW9DO1FBRGpGLFlBQU8sR0FBUCxPQUFPLENBQXFCO1FBQ2lCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7SUFDdkYsQ0FBQztDQUNMLENBQUE7O1lBSG1CLG1CQUFtQjtZQUNvQyxpQkFBaUIsdUJBQXZGLE1BQU0sU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUM7O0FBSGxDLHlCQUF5QjtJQVhyQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUU7Ozs7Ozs7O0dBUVQ7S0FDRixDQUFDO0lBSUcsbUJBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUE7R0FIbkMseUJBQXlCLENBS3JDO1NBTFkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENlbGxSZW5kZXJlckNvbnRleHQgfSBmcm9tICcuLi8uLi9kYXRhLWdyaWQvY29sdW1uL2NlbGwtcmVuZGVyZXInO1xuaW1wb3J0IHsgRGV2aWNlR3JpZFNlcnZpY2UgfSBmcm9tICcuLi9kZXZpY2UtZ3JpZC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlOiBgXG4gICAgPGFcbiAgICAgIFtocmVmXT1cImRldmljZUdyaWRTZXJ2aWNlLmdldERldmljZUhyZWYoY29udGV4dC5pdGVtKVwiXG4gICAgICB0aXRsZT1cInt7IGRldmljZUdyaWRTZXJ2aWNlLmdldFByb3Blck5hbWUoY29udGV4dC5pdGVtKSB9fVwiXG4gICAgICBjbGFzcz1cImludGVyYWN0XCJcbiAgICA+XG4gICAgICB7eyBkZXZpY2VHcmlkU2VydmljZS5nZXRQcm9wZXJOYW1lKGNvbnRleHQuaXRlbSkgfX1cbiAgICA8L2E+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBjb250ZXh0OiBDZWxsUmVuZGVyZXJDb250ZXh0LFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBEZXZpY2VHcmlkU2VydmljZSkpIHB1YmxpYyBkZXZpY2VHcmlkU2VydmljZTogRGV2aWNlR3JpZFNlcnZpY2VcbiAgKSB7fVxufVxuIl19