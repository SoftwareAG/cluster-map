import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { PasswordStrength } from '@c8y/client';
import { filter } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import { PasswordConfirmModalComponent } from './password-confirm-modal.component';
import { BsModalService } from 'ngx-bootstrap/modal';
import { take } from 'rxjs/operators';
let PasswordService = class PasswordService {
    constructor(modalService) {
        this.modalService = modalService;
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    confirmPassword() {
        const modalInstance = this.modalService.show(PasswordConfirmModalComponent);
        return modalInstance.content.passwordConfirmedEmitter.pipe(take(1));
    }
    hasLowerCase(password) {
        return (password.search(/[a-z]/) !== -1);
    }
    hasUpperCase(password) {
        return (password.search(/[A-Z]/) !== -1);
    }
    hasNumbers(password) {
        return (password.search(/[0-9]/) !== -1);
    }
    hasSpecialChars(password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    }
    getStrengthColor(password) {
        const passwordStrength = filter([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 2) {
            return this.GREEN;
        }
        else if (passwordStrength >= 2) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    }
};
PasswordService.ctorParameters = () => [
    { type: BsModalService }
];
PasswordService = tslib_1.__decorate([
    Injectable()
], PasswordService);
export { PasswordService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbkMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdEMsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQXFCMUIsWUFBb0IsWUFBNEI7UUFBNUIsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBbkJ4QyxVQUFLLEdBQTBCO1lBQ3JDLFNBQVMsRUFBRSxPQUFPO1lBQ2xCLEtBQUssRUFBRSxnQkFBZ0I7WUFDdkIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDOUIsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsS0FBSztTQUN6QyxDQUFDO1FBQ00sV0FBTSxHQUEwQjtZQUN0QyxTQUFTLEVBQUUsUUFBUTtZQUNuQixLQUFLLEVBQUUsbUJBQW1CO1lBQzFCLFdBQVcsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQzlCLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLE1BQU07U0FDMUMsQ0FBQztRQUNNLFFBQUcsR0FBMEI7WUFDbkMsU0FBUyxFQUFFLEtBQUs7WUFDaEIsS0FBSyxFQUFFLGlCQUFpQjtZQUN4QixXQUFXLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUM1QixnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxHQUFHO1NBQ3ZDLENBQUM7SUFFaUQsQ0FBQztJQUVwRCxlQUFlO1FBQ2IsTUFBTSxhQUFhLEdBQVEsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUNqRixPQUFPLGFBQWEsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxZQUFZLENBQUMsUUFBZ0I7UUFDM0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsWUFBWSxDQUFDLFFBQWdCO1FBQzNCLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFVBQVUsQ0FBQyxRQUFnQjtRQUN6QixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxlQUFlLENBQUMsUUFBZ0I7UUFDOUIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBZ0I7UUFDL0IsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7WUFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7WUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDekIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUM7U0FDL0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVWLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNuQjthQUFNLElBQUksZ0JBQWdCLElBQUksQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNwQjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBdkNtQyxjQUFjOztBQXJCckMsZUFBZTtJQUQzQixVQUFVLEVBQUU7R0FDQSxlQUFlLENBNEQzQjtTQTVEWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFzc3dvcmRTdHJlbmd0aCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBQYXNzd29yZFN0cmVuZ3RoQ29sb3IgfSBmcm9tICcuL3Bhc3N3b3JkLm1vZGVsJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgUGFzc3dvcmRDb25maXJtTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL3Bhc3N3b3JkLWNvbmZpcm0tbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9tb2RhbCc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRTZXJ2aWNlIHtcblxuICBwcml2YXRlIEdSRUVOOiBQYXNzd29yZFN0cmVuZ3RoQ29sb3IgPSB7XG4gICAgY29sb3JOYW1lOiAnZ3JlZW4nLFxuICAgIGNvbG9yOiAncmdiKDAsIDEyOCwgMCknLFxuICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCdzdHJvbmcnKSxcbiAgICBwYXNzd29yZFN0cmVuZ3RoOiBQYXNzd29yZFN0cmVuZ3RoLkdSRUVOXG4gIH07XG4gIHByaXZhdGUgWUVMTE9XOiBQYXNzd29yZFN0cmVuZ3RoQ29sb3IgPSB7XG4gICAgY29sb3JOYW1lOiAneWVsbG93JyxcbiAgICBjb2xvcjogJ3JnYigyNTUsIDIwNCwgNTEpJyxcbiAgICBkZXNjcmlwdGlvbjogZ2V0dGV4dCgnbWVkaXVtJyksXG4gICAgcGFzc3dvcmRTdHJlbmd0aDogUGFzc3dvcmRTdHJlbmd0aC5ZRUxMT1dcbiAgfTtcbiAgcHJpdmF0ZSBSRUQ6IFBhc3N3b3JkU3RyZW5ndGhDb2xvciA9IHtcbiAgICBjb2xvck5hbWU6ICdyZWQnLFxuICAgIGNvbG9yOiAncmdiKDE3MCwgMCwgNTEpJyxcbiAgICBkZXNjcmlwdGlvbjogZ2V0dGV4dCgnd2VhaycpLFxuICAgIHBhc3N3b3JkU3RyZW5ndGg6IFBhc3N3b3JkU3RyZW5ndGguUkVEXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlKSB7fVxuXG4gIGNvbmZpcm1QYXNzd29yZCgpIHtcbiAgICBjb25zdCBtb2RhbEluc3RhbmNlOiBhbnkgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KFBhc3N3b3JkQ29uZmlybU1vZGFsQ29tcG9uZW50KTtcbiAgICByZXR1cm4gbW9kYWxJbnN0YW5jZS5jb250ZW50LnBhc3N3b3JkQ29uZmlybWVkRW1pdHRlci5waXBlKHRha2UoMSkpO1xuICB9XG5cbiAgaGFzTG93ZXJDYXNlKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHBhc3N3b3JkLnNlYXJjaCgvW2Etel0vKSAhPT0gLTEpO1xuICB9XG5cbiAgaGFzVXBwZXJDYXNlKHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHBhc3N3b3JkLnNlYXJjaCgvW0EtWl0vKSAhPT0gLTEpO1xuICB9XG5cbiAgaGFzTnVtYmVycyhwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChwYXNzd29yZC5zZWFyY2goL1swLTldLykgIT09IC0xKTtcbiAgfVxuXG4gIGhhc1NwZWNpYWxDaGFycyhwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChwYXNzd29yZC5zZWFyY2goL1teMC05YS16QS1aXSsvKSAhPT0gLTEpO1xuICB9XG5cbiAgZ2V0U3RyZW5ndGhDb2xvcihwYXNzd29yZDogc3RyaW5nKTogUGFzc3dvcmRTdHJlbmd0aENvbG9yIHtcbiAgICBjb25zdCBwYXNzd29yZFN0cmVuZ3RoID0gZmlsdGVyKFtcbiAgICAgIHRoaXMuaGFzTG93ZXJDYXNlKHBhc3N3b3JkKSxcbiAgICAgIHRoaXMuaGFzVXBwZXJDYXNlKHBhc3N3b3JkKSxcbiAgICAgIHRoaXMuaGFzTnVtYmVycyhwYXNzd29yZCksXG4gICAgICB0aGlzLmhhc1NwZWNpYWxDaGFycyhwYXNzd29yZClcbiAgICBdKS5sZW5ndGg7XG5cbiAgICBpZiAocGFzc3dvcmRTdHJlbmd0aCA+IDIpIHtcbiAgICAgIHJldHVybiB0aGlzLkdSRUVOO1xuICAgIH0gZWxzZSBpZiAocGFzc3dvcmRTdHJlbmd0aCA+PSAyKSB7XG4gICAgICByZXR1cm4gdGhpcy5ZRUxMT1c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLlJFRDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==