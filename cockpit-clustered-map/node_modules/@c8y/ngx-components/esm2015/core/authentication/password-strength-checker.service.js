import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { PasswordStrength } from '@c8y/client';
import { filter } from 'lodash-es';
import { gettext } from '../i18n/gettext';
let PasswordStrengthCheckerService = class PasswordStrengthCheckerService {
    constructor() {
        this.GREEN = {
            colorName: 'green',
            color: 'rgb(0, 128, 0)',
            description: gettext('strong'),
            passwordStrength: PasswordStrength.GREEN
        };
        this.YELLOW = {
            colorName: 'yellow',
            color: 'rgb(255, 204, 51)',
            description: gettext('medium'),
            passwordStrength: PasswordStrength.YELLOW
        };
        this.RED = {
            colorName: 'red',
            color: 'rgb(170, 0, 51)',
            description: gettext('weak'),
            passwordStrength: PasswordStrength.RED
        };
    }
    hasLowerCase(password) {
        return (password.search(/[a-z]/) !== -1);
    }
    hasUpperCase(password) {
        return (password.search(/[A-Z]/) !== -1);
    }
    hasNumbers(password) {
        return (password.search(/[0-9]/) !== -1);
    }
    hasSpecialChars(password) {
        return (password.search(/[^0-9a-zA-Z]+/) !== -1);
    }
    getStrengthColor(password) {
        const passwordStrength = filter([
            this.hasLowerCase(password),
            this.hasUpperCase(password),
            this.hasNumbers(password),
            this.hasSpecialChars(password)
        ]).length;
        if (passwordStrength > 2) {
            return this.GREEN;
        }
        else if (passwordStrength >= 2) {
            return this.YELLOW;
        }
        else {
            return this.RED;
        }
    }
};
PasswordStrengthCheckerService = tslib_1.__decorate([
    Injectable()
], PasswordStrengthCheckerService);
export { PasswordStrengthCheckerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtc3RyZW5ndGgtY2hlY2tlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImNvcmUvYXV0aGVudGljYXRpb24vcGFzc3dvcmQtc3RyZW5ndGgtY2hlY2tlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRW5DLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUcxQyxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUE4QjtJQUQzQztRQUdVLFVBQUssR0FBMEI7WUFDckMsU0FBUyxFQUFFLE9BQU87WUFDbEIsS0FBSyxFQUFFLGdCQUFnQjtZQUN2QixXQUFXLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUM5QixnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLO1NBQ3pDLENBQUM7UUFDTSxXQUFNLEdBQTBCO1lBQ3RDLFNBQVMsRUFBRSxRQUFRO1lBQ25CLEtBQUssRUFBRSxtQkFBbUI7WUFDMUIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDOUIsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsTUFBTTtTQUMxQyxDQUFDO1FBQ00sUUFBRyxHQUEwQjtZQUNuQyxTQUFTLEVBQUUsS0FBSztZQUNoQixLQUFLLEVBQUUsaUJBQWlCO1lBQ3hCLFdBQVcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQzVCLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLEdBQUc7U0FDdkMsQ0FBQztJQWtDSixDQUFDO0lBaENDLFlBQVksQ0FBQyxRQUFnQjtRQUMzQixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxZQUFZLENBQUMsUUFBZ0I7UUFDM0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsVUFBVSxDQUFDLFFBQWdCO1FBQ3pCLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGVBQWUsQ0FBQyxRQUFnQjtRQUM5QixPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFnQjtRQUMvQixNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztZQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUN6QixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztTQUMvQixDQUFDLENBQUMsTUFBTSxDQUFDO1FBRVYsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ25CO2FBQU0sSUFBSSxnQkFBZ0IsSUFBSSxDQUFDLEVBQUU7WUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ3BCO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDakI7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQXJEWSw4QkFBOEI7SUFEMUMsVUFBVSxFQUFFO0dBQ0EsOEJBQThCLENBcUQxQztTQXJEWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGggfSBmcm9tICdAYzh5L2NsaWVudCc7XHJcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcbmltcG9ydCB7IFBhc3N3b3JkU3RyZW5ndGhDb2xvciB9IGZyb20gJy4vcGFzc3dvcmQubW9kZWwnO1xyXG5pbXBvcnQgeyBnZXR0ZXh0IH0gZnJvbSAnLi4vaTE4bi9nZXR0ZXh0JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkU3RyZW5ndGhDaGVja2VyU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgR1JFRU46IFBhc3N3b3JkU3RyZW5ndGhDb2xvciA9IHtcclxuICAgIGNvbG9yTmFtZTogJ2dyZWVuJyxcclxuICAgIGNvbG9yOiAncmdiKDAsIDEyOCwgMCknLFxyXG4gICAgZGVzY3JpcHRpb246IGdldHRleHQoJ3N0cm9uZycpLFxyXG4gICAgcGFzc3dvcmRTdHJlbmd0aDogUGFzc3dvcmRTdHJlbmd0aC5HUkVFTlxyXG4gIH07XHJcbiAgcHJpdmF0ZSBZRUxMT1c6IFBhc3N3b3JkU3RyZW5ndGhDb2xvciA9IHtcclxuICAgIGNvbG9yTmFtZTogJ3llbGxvdycsXHJcbiAgICBjb2xvcjogJ3JnYigyNTUsIDIwNCwgNTEpJyxcclxuICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCdtZWRpdW0nKSxcclxuICAgIHBhc3N3b3JkU3RyZW5ndGg6IFBhc3N3b3JkU3RyZW5ndGguWUVMTE9XXHJcbiAgfTtcclxuICBwcml2YXRlIFJFRDogUGFzc3dvcmRTdHJlbmd0aENvbG9yID0ge1xyXG4gICAgY29sb3JOYW1lOiAncmVkJyxcclxuICAgIGNvbG9yOiAncmdiKDE3MCwgMCwgNTEpJyxcclxuICAgIGRlc2NyaXB0aW9uOiBnZXR0ZXh0KCd3ZWFrJyksXHJcbiAgICBwYXNzd29yZFN0cmVuZ3RoOiBQYXNzd29yZFN0cmVuZ3RoLlJFRFxyXG4gIH07XHJcblxyXG4gIGhhc0xvd2VyQ2FzZShwYXNzd29yZDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gKHBhc3N3b3JkLnNlYXJjaCgvW2Etel0vKSAhPT0gLTEpO1xyXG4gIH1cclxuXHJcbiAgaGFzVXBwZXJDYXNlKHBhc3N3b3JkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiAocGFzc3dvcmQuc2VhcmNoKC9bQS1aXS8pICE9PSAtMSk7XHJcbiAgfVxyXG5cclxuICBoYXNOdW1iZXJzKHBhc3N3b3JkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiAocGFzc3dvcmQuc2VhcmNoKC9bMC05XS8pICE9PSAtMSk7XHJcbiAgfVxyXG5cclxuICBoYXNTcGVjaWFsQ2hhcnMocGFzc3dvcmQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIChwYXNzd29yZC5zZWFyY2goL1teMC05YS16QS1aXSsvKSAhPT0gLTEpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U3RyZW5ndGhDb2xvcihwYXNzd29yZDogc3RyaW5nKTogUGFzc3dvcmRTdHJlbmd0aENvbG9yIHtcclxuICAgIGNvbnN0IHBhc3N3b3JkU3RyZW5ndGggPSBmaWx0ZXIoW1xyXG4gICAgICB0aGlzLmhhc0xvd2VyQ2FzZShwYXNzd29yZCksXHJcbiAgICAgIHRoaXMuaGFzVXBwZXJDYXNlKHBhc3N3b3JkKSxcclxuICAgICAgdGhpcy5oYXNOdW1iZXJzKHBhc3N3b3JkKSxcclxuICAgICAgdGhpcy5oYXNTcGVjaWFsQ2hhcnMocGFzc3dvcmQpXHJcbiAgICBdKS5sZW5ndGg7XHJcblxyXG4gICAgaWYgKHBhc3N3b3JkU3RyZW5ndGggPiAyKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLkdSRUVOO1xyXG4gICAgfSBlbHNlIGlmIChwYXNzd29yZFN0cmVuZ3RoID49IDIpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuWUVMTE9XO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuUkVEO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=