import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter } from '@angular/core';
import { SystemOptionsService } from '@c8y/client';
import { ControlContainer, NgForm } from '@angular/forms';
let NewPasswordComponent = class NewPasswordComponent {
    constructor(systemOptions) {
        this.systemOptions = systemOptions;
        this.password = new EventEmitter();
        this.model = {};
        this.enforcePasswordStrength = false;
        this.changePassword = false;
    }
    ngOnInit() {
        this.loadEnforcePasswordStrength();
    }
    newPasswordChanged() {
        this.password.emit({
            password: this.model.newPassword,
            passwordStrength: this.model.strength
        });
    }
    loadEnforcePasswordStrength() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield this.systemOptions.detail({
                    category: 'password',
                    key: 'enforce.strength'
                });
                this.enforcePasswordStrength = data.value === 'true';
            }
            catch (e) {
                // do nothing;
            }
        });
    }
    toggleChangePassword() {
        this.changePassword = !this.changePassword;
        if (!this.changePassword) {
            this.password.emit({});
            this.model = {};
        }
    }
};
NewPasswordComponent.ctorParameters = () => [
    { type: SystemOptionsService }
];
tslib_1.__decorate([
    Output()
], NewPasswordComponent.prototype, "password", void 0);
NewPasswordComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-new-password',
        template: "<div class=\"form-group\">\n  <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n    <ng-container *ngIf=\"!changePassword\">\n      {{ 'Change password' | translate }}\n    </ng-container>\n    <ng-container *ngIf=\"changePassword\">\n      {{ 'Cancel password change' | translate }}\n    </ng-container>\n  </button>\n</div>\n\n<div *ngIf=\"changePassword\">\n  <c8y-form-group>\n    <label for=\"newPassword\" translate>Password</label>\n    <input\n      id=\"newPassword\"\n      [(ngModel)]=\"model.newPassword\"\n      #newPassword=\"ngModel\"\n      (change)=\"newPasswordChanged()\"\n      type=\"password\"\n      name=\"newPassword\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g. my_new_password' | translate }}\"\n      required\n      c8yDefaultValidation=\"password\"\n      autocomplete=\"new-password\"\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label for=\"newConfirmPassword\" translate>Confirm password</label>\n    <input\n      id=\"newConfirmPassword\"\n      [(ngModel)]=\"model.newPasswordConfirm\"\n      #newPasswordConfirm=\"ngModel\"\n      type=\"password\"\n      name=\"newPasswordConfirm\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g. my_new_password' | translate }}\"\n      required\n      passwordConfirm=\"newPassword\"\n      autocomplete=\"new-password\"\n    />\n  </c8y-form-group>\n\n  <c8y-password-strength\n    [password]=\"model.newPassword\"\n    [hidden]=\"!model.newPassword\"\n    (strength)=\"model.strength = $event\"\n  ></c8y-password-strength>\n\n  <c8y-password-check-list\n    [password]=\"model.newPassword\"\n    [hidden]=\"!enforcePasswordStrength\"\n  ></c8y-password-check-list>\n</div>\n",
        viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
    })
], NewPasswordComponent);
export { NewPasswordComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3LXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJjb3JlL2F1dGhlbnRpY2F0aW9uL25ldy1wYXNzd29yZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTzFELElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBTS9CLFlBQW9CLGFBQW1DO1FBQW5DLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUw3QyxhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQW9CLENBQUM7UUFDMUQsVUFBSyxHQUFRLEVBQUUsQ0FBQztRQUNoQiw0QkFBdUIsR0FBWSxLQUFLLENBQUM7UUFDekMsbUJBQWMsR0FBWSxLQUFLLENBQUM7SUFFMEIsQ0FBQztJQUUzRCxRQUFRO1FBQ04sSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXO1lBQ2hDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUTtTQUN0QyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUssMkJBQTJCOztZQUMvQixJQUFJO2dCQUNGLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO29CQUMvQyxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsR0FBRyxFQUFFLGtCQUFrQjtpQkFDeEIsQ0FBQyxDQUFDO2dCQUNILElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQzthQUN0RDtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLGNBQWM7YUFDZjtRQUNILENBQUM7S0FBQTtJQUVELG9CQUFvQjtRQUNsQixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNqQjtJQUNILENBQUM7Q0FDRixDQUFBOztZQWhDb0Msb0JBQW9COztBQUw3QztJQUFULE1BQU0sRUFBRTtzREFBaUQ7QUFEL0Msb0JBQW9CO0lBTGhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsNHNEQUE0QztRQUM1QyxhQUFhLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUM7S0FDcEUsQ0FBQztHQUNXLG9CQUFvQixDQXNDaEM7U0F0Q1ksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5ld1Bhc3N3b3JkIH0gZnJvbSAnLi9wYXNzd29yZC5tb2RlbCc7XHJcbmltcG9ydCB7IFN5c3RlbU9wdGlvbnNTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xyXG5pbXBvcnQgeyBDb250cm9sQ29udGFpbmVyLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2M4eS1uZXctcGFzc3dvcmQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9uZXctcGFzc3dvcmQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHZpZXdQcm92aWRlcnM6IFt7IHByb3ZpZGU6IENvbnRyb2xDb250YWluZXIsIHVzZUV4aXN0aW5nOiBOZ0Zvcm0gfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5ld1Bhc3N3b3JkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBAT3V0cHV0KCkgcGFzc3dvcmQgPSBuZXcgRXZlbnRFbWl0dGVyPE5ld1Bhc3N3b3JkIHwge30+KCk7XHJcbiAgbW9kZWw6IGFueSA9IHt9O1xyXG4gIGVuZm9yY2VQYXNzd29yZFN0cmVuZ3RoOiBib29sZWFuID0gZmFsc2U7XHJcbiAgY2hhbmdlUGFzc3dvcmQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzeXN0ZW1PcHRpb25zOiBTeXN0ZW1PcHRpb25zU2VydmljZSkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmxvYWRFbmZvcmNlUGFzc3dvcmRTdHJlbmd0aCgpO1xyXG4gIH1cclxuXHJcbiAgbmV3UGFzc3dvcmRDaGFuZ2VkKCkge1xyXG4gICAgdGhpcy5wYXNzd29yZC5lbWl0KHtcclxuICAgICAgcGFzc3dvcmQ6IHRoaXMubW9kZWwubmV3UGFzc3dvcmQsXHJcbiAgICAgIHBhc3N3b3JkU3RyZW5ndGg6IHRoaXMubW9kZWwuc3RyZW5ndGhcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZEVuZm9yY2VQYXNzd29yZFN0cmVuZ3RoKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLnN5c3RlbU9wdGlvbnMuZGV0YWlsKHtcclxuICAgICAgICBjYXRlZ29yeTogJ3Bhc3N3b3JkJyxcclxuICAgICAgICBrZXk6ICdlbmZvcmNlLnN0cmVuZ3RoJ1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5lbmZvcmNlUGFzc3dvcmRTdHJlbmd0aCA9IGRhdGEudmFsdWUgPT09ICd0cnVlJztcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgLy8gZG8gbm90aGluZztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvZ2dsZUNoYW5nZVBhc3N3b3JkKCkge1xyXG4gICAgdGhpcy5jaGFuZ2VQYXNzd29yZCA9ICF0aGlzLmNoYW5nZVBhc3N3b3JkO1xyXG4gICAgaWYgKCF0aGlzLmNoYW5nZVBhc3N3b3JkKSB7XHJcbiAgICAgIHRoaXMucGFzc3dvcmQuZW1pdCh7fSk7XHJcbiAgICAgIHRoaXMubW9kZWwgPSB7fTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19