import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { gettext, DocsService, DocLink, NavigatorService } from '@c8y/ngx-components';
import { Router } from '@angular/router';
import { TenantService, ApplicationService, IApplication } from '@c8y/client';
let WelcomeToCockpit = class WelcomeToCockpit {
    constructor(tenantService, docs, router, navigator, applicationService) {
        this.tenantService = tenantService;
        this.docs = docs;
        this.router = router;
        this.navigator = navigator;
        this.applicationService = applicationService;
        this.quickLinks = [];
        this.REPORT_NODE = 'Reports';
        this.CONFIGURATION_NODE = 'Configuration';
        this.TRIAL = 'TRIAL';
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.tenantType = yield this.tenantService.currentTenantType();
            this.setMessage();
            this.navSubscription = this.navigator.items$.subscribe(nodes => {
                this.navNodes = nodes;
            });
            this.docsSubscription = this.docs.items$.subscribe(links => {
                this.links = links;
            });
            // <---TRIAL & REGULAR TENANT --->
            this.createConnectSmartphoneQuickLink();
            yield this.createQuicklinkRegisterDevice();
            // <--- TRIAL TENANT --->
            if (this.tenantType === this.TRIAL) {
                this.createQuicklinkUserGuide();
                return;
            }
            // <--- REGULAR TENANT --->
            this.createQuicklinkAddGroup();
            this.createQuickLinkReports();
            this.createQuicklinkDataPointLibrary();
            this.createQuicklinkSmartRules();
        });
    }
    ngOnDestroy() {
        if (this.docsSubscription && !this.docsSubscription.closed) {
            this.docsSubscription.unsubscribe();
        }
        if (this.navSubscription && !this.navSubscription.closed) {
            this.navSubscription.unsubscribe();
        }
    }
    setMessage() {
        if (this.tenantType === this.TRIAL) {
            this.welcomeMessage = gettext(`
        The Cockpit application allows you to build IoT applications in minutes.
        To get started, connect any device to the platform.
        If you do not have an IoT device to hand, you can start by connecting your smartphone.
        Click below to be guided through the process.
      `);
        }
        else {
            this.welcomeMessage = gettext(`
        The Cockpit application provides you with options to manage
        and monitor Internet of Things assets and data from business perspective.
      `);
        }
    }
    createQuicklinkAddGroup() {
        // comes from angularJS factory c8yQuickLinks
        const addGroup = this.links.find(link => link.label === 'Add group');
        if (addGroup) {
            this.quickLinks.push(addGroup);
        }
    }
    createConnectSmartphoneQuickLink() {
        // Provider in SensorPhoneModule defines the
        // 'Connect smartphone' quicklink.
        const connectSmartphone = this.links.find(link => link.label === 'Connect smartphone');
        if (connectSmartphone) {
            this.quickLinks.push(connectSmartphone);
        }
    }
    createQuickLinkReports() {
        const reports = {
            icon: 'c8y-reports',
            label: gettext('Reports'),
            url: '/export'
        };
        const reportsNode = this.findNavigatorNode(this.REPORT_NODE);
        if (reportsNode && reportsNode.show) {
            reports.click = () => {
                reportsNode.open = true;
                this.router.navigateByUrl(reports.url);
            };
            this.quickLinks.push(reports);
        }
    }
    createQuicklinkDataPointLibrary() {
        const dataPointLib = {
            icon: 'c8y-data-points',
            label: gettext('Data point library'),
            url: '/datapointlibrary'
        };
        const configurationNode = this.findNavigatorNode(this.CONFIGURATION_NODE);
        if (configurationNode && configurationNode.show) {
            dataPointLib.click = () => {
                configurationNode.open = true;
                this.router.navigateByUrl(dataPointLib.url);
            };
            this.quickLinks.push(dataPointLib);
        }
    }
    createQuicklinkSmartRules() {
        const smartRules = {
            icon: 'c8y-smart-rules',
            label: gettext('Smart rules'),
            url: '/rules'
        };
        const configurationNode = this.findNavigatorNode(this.CONFIGURATION_NODE);
        if (configurationNode && configurationNode.show) {
            smartRules.click = () => {
                configurationNode.open = true;
                this.router.navigateByUrl(smartRules.url);
            };
            this.quickLinks.push(smartRules);
        }
    }
    createQuicklinkRegisterDevice() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.applicationService.listByUser();
            if (data) {
                const deviceManagement = data.find(app => app.contextPath === 'devicemanagement');
                if (deviceManagement) {
                    const deviceMgmtUrl = this.applicationService.getHref(deviceManagement);
                    const registerDevice = {
                        icon: 'c8y-device-connect',
                        label: gettext('Register device'),
                        click: () => window.open(`${deviceMgmtUrl}/#/deviceregistration`, '_self')
                    };
                    this.quickLinks.push(registerDevice);
                }
            }
        });
    }
    createQuicklinkUserGuide() {
        const userGuide = {
            icon: 'c8y-user',
            label: gettext('User guide'),
            url: '/users-guide/getting-started',
            click: () => {
                const userGuideURL = this.docs.getUserGuideLink(userGuide.url);
                window.open(userGuideURL);
            }
        };
        this.quickLinks.push(userGuide);
    }
    findNavigatorNode(nodeRealName) {
        if (this.navNodes && this.navNodes.length > 0) {
            return this.navNodes.find((node) => node.realName === nodeRealName);
        }
        return undefined;
    }
};
WelcomeToCockpit.ctorParameters = () => [
    { type: TenantService },
    { type: DocsService },
    { type: Router },
    { type: NavigatorService },
    { type: ApplicationService }
];
tslib_1.__decorate([
    Input()
], WelcomeToCockpit.prototype, "config", void 0);
WelcomeToCockpit = tslib_1.__decorate([
    Component({
        selector: 'c8y-welcome-to-cockpit',
        template: "<div class=\"welcome-widget welcome-cockpit\">\r\n  <div class=\"flex-row\">\r\n    <div class=\"col-xs-12 col-md-5 flex-item-v-stretch p-24\">\r\n      <h2 class=\"text-light\">{{ 'Welcome to Cockpit' | translate }}</h2>\r\n      <p class=\"text-16 text-light p-t-16 p-b-24\">{{ welcomeMessage | translate }}</p>\r\n      <div class=\"card-group interact-grid tight-grid\">\r\n        <div *ngFor=\"let link of quickLinks\" class=\"col-sm-4 col-xs-6\">\r\n          <c8y-quick-link\r\n            (click)=\"link.click ? link.click() : false\"\r\n            [icon]=\"link.icon\"\r\n            [label]=\"link.label\"\r\n            class=\"card\"\r\n          >\r\n          </c8y-quick-link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- <div class=\"col-sm-6 welcome-illustration flex-item-v-stretch\"></div> -->\r\n  </div>\r\n</div>\r\n"
    })
], WelcomeToCockpit);
export { WelcomeToCockpit };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VsY29tZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL2NvbnRleHQtZGFzaGJvYXJkLyIsInNvdXJjZXMiOlsid2VsY29tZS93ZWxjb21lLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQU05RSxJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtJQWMzQixZQUNVLGFBQTRCLEVBQzVCLElBQWlCLEVBQ2pCLE1BQWMsRUFDZCxTQUEyQixFQUMzQixrQkFBc0M7UUFKdEMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUNqQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQWhCaEQsZUFBVSxHQUFHLEVBQUUsQ0FBQztRQUVDLGdCQUFXLEdBQVcsU0FBUyxDQUFDO1FBQ2hDLHVCQUFrQixHQUFXLGVBQWUsQ0FBQztRQUM3QyxVQUFLLEdBQVcsT0FBTyxDQUFDO0lBYXRDLENBQUM7SUFFRSxRQUFROztZQUNaLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDL0QsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFD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LElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBVyxDQUFDO2dCQUN6RSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzVCLENBQUM7U0FDRixDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVPLGlCQUFpQixDQUFDLFlBQW9CO1FBQzVDLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxZQUFZLENBQUMsQ0FBQztTQUMxRTtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRixDQUFBOztZQXBLMEIsYUFBYTtZQUN0QixXQUFXO1lBQ1QsTUFBTTtZQUNILGdCQUFnQjtZQUNQLGtCQUFrQjs7QUFsQnZDO0lBQVIsS0FBSyxFQUFFO2dEQUFRO0FBREwsZ0JBQWdCO0lBSjVCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx3QkFBd0I7UUFDbEMsbTJCQUF1QztLQUN4QyxDQUFDO0dBQ1csZ0JBQWdCLENBbUw1QjtTQW5MWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0dGV4dCwgRG9jc1NlcnZpY2UsIERvY0xpbmssIE5hdmlnYXRvclNlcnZpY2UgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRlbmFudFNlcnZpY2UsIEFwcGxpY2F0aW9uU2VydmljZSwgSUFwcGxpY2F0aW9uIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktd2VsY29tZS10by1jb2NrcGl0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3dlbGNvbWUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFdlbGNvbWVUb0NvY2twaXQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGNvbmZpZztcbiAgd2VsY29tZU1lc3NhZ2U7XG4gIHF1aWNrTGlua3MgPSBbXTtcblxuICBwcml2YXRlIHJlYWRvbmx5IFJFUE9SVF9OT0RFOiBzdHJpbmcgPSAnUmVwb3J0cyc7XG4gIHByaXZhdGUgcmVhZG9ubHkgQ09ORklHVVJBVElPTl9OT0RFOiBzdHJpbmcgPSAnQ29uZmlndXJhdGlvbic7XG4gIHByaXZhdGUgcmVhZG9ubHkgVFJJQUw6IHN0cmluZyA9ICdUUklBTCc7XG4gIHByaXZhdGUgdGVuYW50VHlwZTogc3RyaW5nO1xuICBwcml2YXRlIG5hdk5vZGVzOiBhbnlbXTtcbiAgcHJpdmF0ZSBsaW5rczogRG9jTGlua1tdO1xuICBwcml2YXRlIGRvY3NTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBuYXZTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbmFudFNlcnZpY2U6IFRlbmFudFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBkb2NzOiBEb2NzU2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgbmF2aWdhdG9yOiBOYXZpZ2F0b3JTZXJ2aWNlLFxuICAgIHByaXZhdGUgYXBwbGljYXRpb25TZXJ2aWNlOiBBcHBsaWNhdGlvblNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIHRoaXMudGVuYW50VHlwZSA9IGF3YWl0IHRoaXMudGVuYW50U2VydmljZS5jdXJyZW50VGVuYW50VHlwZSgpO1xuICAgIHRoaXMuc2V0TWVzc2FnZSgpO1xuICAgIHRoaXMubmF2U3Vic2NyaXB0aW9uID0gdGhpcy5uYXZpZ2F0b3IuaXRlbXMkLnN1YnNjcmliZShub2RlcyA9PiB7XG4gICAgICB0aGlzLm5hdk5vZGVzID0gbm9kZXM7XG4gICAgfSk7XG4gICAgdGhpcy5kb2NzU3Vic2NyaXB0aW9uID0gdGhpcy5kb2NzLml0ZW1zJC5zdWJzY3JpYmUobGlua3MgPT4ge1xuICAgICAgdGhpcy5saW5rcyA9IGxpbmtzO1xuICAgIH0pO1xuXG4gICAgLy8gPC0tLVRSSUFMICYgUkVHVUxBUiBURU5BTlQgLS0tPlxuICAgIHRoaXMuY3JlYXRlQ29ubmVjdFNtYXJ0cGhvbmVRdWlja0xpbmsoKTtcbiAgICBhd2FpdCB0aGlzLmNyZWF0ZVF1aWNrbGlua1JlZ2lzdGVyRGV2aWNlKCk7XG5cbiAgICAvLyA8LS0tIFRSSUFMIFRFTkFOVCAtLS0+XG4gICAgaWYgKHRoaXMudGVuYW50VHlwZSA9PT0gdGhpcy5UUklBTCkge1xuICAgICAgdGhpcy5jcmVhdGVRdWlja2xpbmtVc2VyR3VpZGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyA8LS0tIFJFR1VMQVIgVEVOQU5UIC0tLT5cbiAgICB0aGlzLmNyZWF0ZVF1aWNrbGlua0FkZEdyb3VwKCk7XG4gICAgdGhpcy5jcmVhdGVRdWlja0xpbmtSZXBvcnRzKCk7XG4gICAgdGhpcy5jcmVhdGVRdWlja2xpbmtEYXRhUG9pbnRMaWJyYXJ5KCk7XG4gICAgdGhpcy5jcmVhdGVRdWlja2xpbmtTbWFydFJ1bGVzKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5kb2NzU3Vic2NyaXB0aW9uICYmICF0aGlzLmRvY3NTdWJzY3JpcHRpb24uY2xvc2VkKSB7XG4gICAgICB0aGlzLmRvY3NTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uYXZTdWJzY3JpcHRpb24gJiYgIXRoaXMubmF2U3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgdGhpcy5uYXZTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldE1lc3NhZ2UoKSB7XG4gICAgaWYgKHRoaXMudGVuYW50VHlwZSA9PT0gdGhpcy5UUklBTCkge1xuICAgICAgdGhpcy53ZWxjb21lTWVzc2FnZSA9IGdldHRleHQoYFxuICAgICAgICBUaGUgQ29ja3BpdCBhcHBsaWNhdGlvbiBhbGxvd3MgeW91IHRvIGJ1aWxkIElvVCBhcHBsaWNhdGlvbnMgaW4gbWludXRlcy5cbiAgICAgICAgVG8gZ2V0IHN0YXJ0ZWQsIGNvbm5lY3QgYW55IGRldmljZSB0byB0aGUgcGxhdGZvcm0uXG4gICAgICAgIElmIHlvdSBkbyBub3QgaGF2ZSBhbiBJb1QgZGV2aWNlIHRvIGhhbmQsIHlvdSBjYW4gc3RhcnQgYnkgY29ubmVjdGluZyB5b3VyIHNtYXJ0cGhvbmUuXG4gICAgICAgIENsaWNrIGJlbG93IHRvIGJlIGd1aWRlZCB0aHJvdWdoIHRoZSBwcm9jZXNzLlxuICAgICAgYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2VsY29tZU1lc3NhZ2UgPSBnZXR0ZXh0KGBcbiAgICAgICAgVGhlIENvY2twaXQgYXBwbGljYXRpb24gcHJvdmlkZXMgeW91IHdpdGggb3B0aW9ucyB0byBtYW5hZ2VcbiAgICAgICAgYW5kIG1vbml0b3IgSW50ZXJuZXQgb2YgVGhpbmdzIGFzc2V0cyBhbmQgZGF0YSBmcm9tIGJ1c2luZXNzIHBlcnNwZWN0aXZlLlxuICAgICAgYCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVRdWlja2xpbmtBZGRHcm91cCgpIHtcbiAgICAvLyBjb21lcyBmcm9tIGFuZ3VsYXJKUyBmYWN0b3J5IGM4eVF1aWNrTGlua3NcbiAgICBjb25zdCBhZGRHcm91cDogUGFydGlhbDxEb2NMaW5rPiA9IHRoaXMubGlua3MuZmluZChsaW5rID0+IGxpbmsubGFiZWwgPT09ICdBZGQgZ3JvdXAnKTtcbiAgICBpZiAoYWRkR3JvdXApIHtcbiAgICAgIHRoaXMucXVpY2tMaW5rcy5wdXNoKGFkZEdyb3VwKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUNvbm5lY3RTbWFydHBob25lUXVpY2tMaW5rKCkge1xuICAgIC8vIFByb3ZpZGVyIGluIFNlbnNvclBob25lTW9kdWxlIGRlZmluZXMgdGhlXG4gICAgLy8gJ0Nvbm5lY3Qgc21hcnRwaG9uZScgcXVpY2tsaW5rLlxuICAgIGNvbnN0IGNvbm5lY3RTbWFydHBob25lID0gdGhpcy5saW5rcy5maW5kKGxpbmsgPT4gbGluay5sYWJlbCA9PT0gJ0Nvbm5lY3Qgc21hcnRwaG9uZScpO1xuICAgIGlmIChjb25uZWN0U21hcnRwaG9uZSkge1xuICAgICAgdGhpcy5xdWlja0xpbmtzLnB1c2goY29ubmVjdFNtYXJ0cGhvbmUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUXVpY2tMaW5rUmVwb3J0cygpIHtcbiAgICBjb25zdCByZXBvcnRzOiBQYXJ0aWFsPERvY0xpbms+ID0ge1xuICAgICAgaWNvbjogJ2M4eS1yZXBvcnRzJyxcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdSZXBvcnRzJyksXG4gICAgICB1cmw6ICcvZXhwb3J0J1xuICAgIH07XG5cbiAgICBjb25zdCByZXBvcnRzTm9kZSA9IHRoaXMuZmluZE5hdmlnYXRvck5vZGUodGhpcy5SRVBPUlRfTk9ERSk7XG4gICAgaWYgKHJlcG9ydHNOb2RlICYmIHJlcG9ydHNOb2RlLnNob3cpIHtcbiAgICAgIHJlcG9ydHMuY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIHJlcG9ydHNOb2RlLm9wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKHJlcG9ydHMudXJsKTtcbiAgICAgIH07XG4gICAgICB0aGlzLnF1aWNrTGlua3MucHVzaChyZXBvcnRzKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVF1aWNrbGlua0RhdGFQb2ludExpYnJhcnkoKSB7XG4gICAgY29uc3QgZGF0YVBvaW50TGliOiBQYXJ0aWFsPERvY0xpbms+ID0ge1xuICAgICAgaWNvbjogJ2M4eS1kYXRhLXBvaW50cycsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnRGF0YSBwb2ludCBsaWJyYXJ5JyksXG4gICAgICB1cmw6ICcvZGF0YXBvaW50bGlicmFyeSdcbiAgICB9O1xuXG4gICAgY29uc3QgY29uZmlndXJhdGlvbk5vZGUgPSB0aGlzLmZpbmROYXZpZ2F0b3JOb2RlKHRoaXMuQ09ORklHVVJBVElPTl9OT0RFKTtcbiAgICBpZiAoY29uZmlndXJhdGlvbk5vZGUgJiYgY29uZmlndXJhdGlvbk5vZGUuc2hvdykge1xuICAgICAgZGF0YVBvaW50TGliLmNsaWNrID0gKCkgPT4ge1xuICAgICAgICBjb25maWd1cmF0aW9uTm9kZS5vcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybChkYXRhUG9pbnRMaWIudXJsKTtcbiAgICAgIH07XG4gICAgICB0aGlzLnF1aWNrTGlua3MucHVzaChkYXRhUG9pbnRMaWIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUXVpY2tsaW5rU21hcnRSdWxlcygpIHtcbiAgICBjb25zdCBzbWFydFJ1bGVzOiBQYXJ0aWFsPERvY0xpbms+ID0ge1xuICAgICAgaWNvbjogJ2M4eS1zbWFydC1ydWxlcycsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnU21hcnQgcnVsZXMnKSxcbiAgICAgIHVybDogJy9ydWxlcydcbiAgICB9O1xuICAgIGNvbnN0IGNvbmZpZ3VyYXRpb25Ob2RlID0gdGhpcy5maW5kTmF2aWdhdG9yTm9kZSh0aGlzLkNPTkZJR1VSQVRJT05fTk9ERSk7XG4gICAgaWYgKGNvbmZpZ3VyYXRpb25Ob2RlICYmIGNvbmZpZ3VyYXRpb25Ob2RlLnNob3cpIHtcbiAgICAgIHNtYXJ0UnVsZXMuY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb25Ob2RlLm9wZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKHNtYXJ0UnVsZXMudXJsKTtcbiAgICAgIH07XG4gICAgICB0aGlzLnF1aWNrTGlua3MucHVzaChzbWFydFJ1bGVzKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZVF1aWNrbGlua1JlZ2lzdGVyRGV2aWNlKCkge1xuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdGhpcy5hcHBsaWNhdGlvblNlcnZpY2UubGlzdEJ5VXNlcigpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBjb25zdCBkZXZpY2VNYW5hZ2VtZW50OiBJQXBwbGljYXRpb24gPSBkYXRhLmZpbmQoXG4gICAgICAgIGFwcCA9PiBhcHAuY29udGV4dFBhdGggPT09ICdkZXZpY2VtYW5hZ2VtZW50J1xuICAgICAgKTtcbiAgICAgIGlmIChkZXZpY2VNYW5hZ2VtZW50KSB7XG4gICAgICAgIGNvbnN0IGRldmljZU1nbXRVcmwgPSB0aGlzLmFwcGxpY2F0aW9uU2VydmljZS5nZXRIcmVmKGRldmljZU1hbmFnZW1lbnQpO1xuICAgICAgICBjb25zdCByZWdpc3RlckRldmljZTogUGFydGlhbDxEb2NMaW5rPiA9IHtcbiAgICAgICAgICBpY29uOiAnYzh5LWRldmljZS1jb25uZWN0JyxcbiAgICAgICAgICBsYWJlbDogZ2V0dGV4dCgnUmVnaXN0ZXIgZGV2aWNlJyksXG4gICAgICAgICAgY2xpY2s6ICgpID0+IHdpbmRvdy5vcGVuKGAke2RldmljZU1nbXRVcmx9LyMvZGV2aWNlcmVnaXN0cmF0aW9uYCwgJ19zZWxmJylcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5xdWlja0xpbmtzLnB1c2gocmVnaXN0ZXJEZXZpY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUXVpY2tsaW5rVXNlckd1aWRlKCkge1xuICAgIGNvbnN0IHVzZXJHdWlkZTogUGFydGlhbDxEb2NMaW5rPiA9IHtcbiAgICAgIGljb246ICdjOHktdXNlcicsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnVXNlciBndWlkZScpLFxuICAgICAgdXJsOiAnL3VzZXJzLWd1aWRlL2dldHRpbmctc3RhcnRlZCcsXG4gICAgICBjbGljazogKCkgPT4ge1xuICAgICAgICBjb25zdCB1c2VyR3VpZGVVUkwgPSB0aGlzLmRvY3MuZ2V0VXNlckd1aWRlTGluayh1c2VyR3VpZGUudXJsKSBhcyBzdHJpbmc7XG4gICAgICAgIHdpbmRvdy5vcGVuKHVzZXJHdWlkZVVSTCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnF1aWNrTGlua3MucHVzaCh1c2VyR3VpZGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kTmF2aWdhdG9yTm9kZShub2RlUmVhbE5hbWU6IHN0cmluZykge1xuICAgIGlmICh0aGlzLm5hdk5vZGVzICYmIHRoaXMubmF2Tm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMubmF2Tm9kZXMuZmluZCgobm9kZTogYW55KSA9PiBub2RlLnJlYWxOYW1lID09PSBub2RlUmVhbE5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=