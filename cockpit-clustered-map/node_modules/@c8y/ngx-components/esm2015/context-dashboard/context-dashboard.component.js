import * as tslib_1 from "tslib";
import { Component, HostBinding, Inject, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AlertService, DashboardChildChange, DashboardChildComponent, DashboardSettings, DynamicComponentDefinition, gettext, Widget, WidgetChange } from '@c8y/ngx-components';
import { cloneDeep, findIndex, get, keyBy, omit, values } from 'lodash-es';
import { BsModalService } from 'ngx-bootstrap/modal';
import { CONTEXT_DASHBOARD_CONFIG, WIDGET_HEADER_CLASSES } from './context-dashboard.model';
import { ContextDashboardService } from './context-dashboard.service';
import { DashboardDetailComponent } from './dashboard-detail.component';
import { WidgetConfigComponent } from './widget-config.component';
import { WidgetService } from './widget.service';
/**
 * The context dashboard is a dashboard which resolves it data from the current context (device or group)
 * it is displayed on. It usually uses the route.data for it, but you can pass
 * a different managedObject to the [mo] input parameter to change that behavior.
 */
let ContextDashboardComponent = class ContextDashboardComponent {
    constructor(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal) {
        this.route = route;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.alert = alert;
        this.renderer = renderer;
        this.moduleConfig = moduleConfig;
        this.widgetService = widgetService;
        this.bsModal = bsModal;
        this.childrenClasses = '';
        this.setTitle = false;
        this.disabled = false;
        this.defaultWidgets = [];
        this.canDelete = true;
        this.isLoading = true;
        this.class = '';
        this.widgets = [];
    }
    ngOnInit() {
        if (!this.name) {
            this.loadContextDashboard();
            return;
        }
        this.loadNamedDashboard();
    }
    /**
     * Applies the current context to the widget
     * @param widget The widget to apply the context to.
     */
    applyDeviceTarget(widget) {
        if (widget.config.device) {
            widget.config.device = { id: this.context.id, name: this.context.name };
        }
    }
    /**
     * Removes the route listener.
     */
    ngOnDestroy() {
        if (this.dataSub) {
            this.dataSub.unsubscribe();
        }
    }
    /**
     * Restores the dashboard widgets to the default widgets.
     */
    restore() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.isLoading = true;
            this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
            yield this.contextDashboardService.update(this.mo);
            this.onLoad();
        });
    }
    /**
     * Updates all dashboards children's. Useful for position changes on the dashboard.
     * @param child The child to change.
     */
    updateDashboardChildren(child) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { children } = child;
            const dashboardMO = this.mo;
            const mappedChildren = keyBy(children.map(c => this.componentToWidget(c)), 'id');
            dashboardMO.c8y_Dashboard.children = mappedChildren;
            return this.contextDashboardService.update(dashboardMO);
        });
    }
    /**
     * Remove the complete dashboard and navigate away.
     */
    deleteDashboard() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.contextDashboardService.delete(this.mo);
            if (this.route.parent) {
                const route = this.route.parent.snapshot.url.map(segment => segment.path).join('/');
                this.router.navigateByUrl(route);
            }
        });
    }
    /**
     * Edits the current dashboard
     */
    editDashboard() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const initialState = {
                dashboard: this.dashboard,
                deviceType: this.context.type,
                isNamedDashboard: this.contextDashboardService.isNamed(this.mo)
            };
            const modal = this.bsModal.show(DashboardDetailComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const dashboardMO = cloneDeep(this.mo);
                dashboardMO.c8y_Dashboard = yield modal.result;
                yield this.contextDashboardService.update(dashboardMO);
                yield this.contextDashboardService.refreshTabs(dashboardMO);
                this.onLoad();
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    /**
     * Edits a widget on the dashboard.
     * @param change The widget change event.
     */
    editWidget(change) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { x, y, width, height } = change.source;
            const component = yield this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId);
            if (!component) {
                this.addWidget();
                return;
            }
            yield this.addWidget(Object.assign({}, component, { data: Object.assign({}, component.data, change.widget, { _x: x, _y: y, _width: width, _height: height }) }));
        });
    }
    /**
     * Adds a widget to the dashboard.
     * @param selected Define a selected component to switch to edit mode directly.
     */
    addWidget(selected) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const initialState = {
                mo: this.mo,
                context: this.context,
                selected: cloneDeep(selected)
            };
            const modal = this.bsModal.show(WidgetConfigComponent, {
                class: 'modal-lg',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                const newWidget = yield modal.result;
                if (!this.mo.c8y_Dashboard.children) {
                    this.mo.c8y_Dashboard.children = {};
                }
                this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
                this.contextDashboardService.update(this.mo);
                newWidget.classes = this.mergeWidgetClasses(newWidget);
                yield this.updateWidget(newWidget);
                modal.close();
            }
            catch (ex) {
                // intended empty
            }
        });
    }
    /**
     * Updates a widget or adds a new one if it doesn't exist on
     * the dashboard.
     * @param widget The new widget
     */
    updateWidget(widget) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const index = findIndex(this.widgets, { id: widget.id });
            const isNew = index === -1;
            const mappedWidget = yield this.mapLegacy(widget);
            if (isNew) {
                this.widgets.push(mappedWidget);
            }
            else {
                this.widgets.splice(index, 1, mappedWidget);
            }
        });
    }
    /**
     * Removes a widget and rearranges the remaining ones
     * if necessary.
     * @param change The change event.
     */
    deleteWidget(change) {
        const { widget, source } = change;
        delete this.mo.c8y_Dashboard.children[widget.id];
        const removed = this.widgets.find(({ id }) => id === widget.id);
        this.widgets.splice(this.widgets.indexOf(removed), 1);
        // using setTimeout to give the component the chance to remove it.
        setTimeout(() => {
            const child = new DashboardChildChange(source);
            child.collapseUpAll();
            this.updateDashboardChildren(child);
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    addDashboardClassToBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.addClass(document.body, cssClass);
        });
    }
    /**
     * This is a workaround to ensure that the dragged-element
     * (which is attached to the body) has the right styling.
     */
    removeDashboardClassFromBody() {
        this.class.split(' ').forEach(cssClass => {
            this.renderer.removeClass(document.body, cssClass);
        });
    }
    /**
     * Changes the dashboard settings to frozen or vice versa.
     * @param settings The current settings of the dashboard.
     */
    toggleFreeze(settings) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.toggleIsFrozenFlag(settings);
            try {
                yield this.contextDashboardService.update(this.mo);
                if (this.dashboard.isFrozen) {
                    this.alert.success(gettext('Your dashboard is locked now.'));
                }
                else {
                    this.alert.success(gettext('Your dashboard is unlocked now.'));
                }
            }
            catch (ex) {
                this.alert.addServerFailure(ex);
                this.toggleIsFrozenFlag(settings);
            }
        });
    }
    toggleIsFrozenFlag(settings) {
        settings.isFrozen = !settings.isFrozen;
        this.dashboard.isFrozen = settings.isFrozen;
    }
    loadContextDashboard() {
        this.dataSub = this.route.data.subscribe(({ dashboard }) => {
            this.context = this.route.parent.snapshot.data.contextData;
            this.mo = dashboard;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad();
        });
    }
    loadNamedDashboard() {
        this.dataSub = this.contextDashboardService
            .getNamedDashboardOrCreate(this.name, this.defaultWidgets)
            .subscribe(mo => {
            this.context = this.context || {};
            this.mo = mo;
            this.dashboard = this.mo.c8y_Dashboard;
            this.onLoad();
        });
    }
    onLoad() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.disabled = !this.contextDashboardService.hasPermission();
            const dashboardChildren = cloneDeep(this.mo.c8y_Dashboard.children);
            const isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
            const dashboardClasses = Object.assign({ 'c8y-grid-dashboard': true, dashboard: true }, this.dashboard.classes);
            this.widgets = yield Promise.all(values(dashboardChildren).map(widget => {
                widget.classes = this.mergeWidgetClasses(widget);
                if (isDeviceType) {
                    this.applyDeviceTarget(widget);
                }
                return this.mapLegacy(widget);
            }));
            this.class = Object.keys(dashboardClasses).join(' ');
            this.disabled = !this.contextDashboardService.hasPermission();
            this.isLoading = false;
        });
    }
    mergeWidgetClasses(widget) {
        const hasHeaderClass = WIDGET_HEADER_CLASSES.find(el => widget.classes && widget.classes[el.class]);
        const widgetClasses = hasHeaderClass
            ? Object.assign({}, widget.classes) : Object.assign({}, this.dashboard.widgetClasses, widget.classes);
        return Object.assign({ card: true, 'card-dashboard': true }, widgetClasses);
    }
    componentToWidget(child) {
        return Object.assign({}, omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext']), {
            _x: child.x,
            _y: child.y,
            _width: child.width,
            _height: child.height
        });
    }
    mapLegacy(widget) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const cmp = yield this.widgetService.getWidgetDefinition(widget.componentId || widget.name);
            if (get(cmp, 'data.settings.upgrade')) {
                widget.widgetComponent = cmp.data.settings.widgetComponent;
                widget.configComponent = cmp.data.settings.configComponent;
                widget.templateUrl = cmp.data.settings.templateUrl;
                widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
                widget.transformConfigWithContext =
                    cmp.data.settings.componentTransformConfigWithContext ||
                        cmp.data.settings.transformConfigWithContext;
            }
            else {
                delete widget.templateUrl;
                delete widget.configTemplateUrl;
            }
            return widget;
        });
    }
};
ContextDashboardComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: ContextDashboardService },
    { type: AlertService },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] },
    { type: WidgetService },
    { type: BsModalService }
];
tslib_1.__decorate([
    Input()
], ContextDashboardComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input()
], ContextDashboardComponent.prototype, "childrenClasses", void 0);
tslib_1.__decorate([
    Input()
], ContextDashboardComponent.prototype, "context", void 0);
tslib_1.__decorate([
    Input()
], ContextDashboardComponent.prototype, "setTitle", void 0);
tslib_1.__decorate([
    Input()
], ContextDashboardComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input()
], ContextDashboardComponent.prototype, "defaultWidgets", void 0);
tslib_1.__decorate([
    Input()
], ContextDashboardComponent.prototype, "canDelete", void 0);
tslib_1.__decorate([
    Input()
], ContextDashboardComponent.prototype, "isLoading", void 0);
tslib_1.__decorate([
    HostBinding('class')
], ContextDashboardComponent.prototype, "class", void 0);
ContextDashboardComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-context-dashboard',
        template: "<c8y-action-bar-item [placement]=\"'more'\" *ngIf=\"defaultWidgets.length > 0\">\n  <button (click)=\"restore()\" [disabled]=\"dashboard?.isFrozen || disabled\">\n    <i c8yIcon=\"undo\"></i>&nbsp;<span translate>Restore dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name : undefined,\n    widgetMargin: dashboard?.widgetMargin\n  }\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n>\n</c8y-widgets-dashboard>\n",
        host: {
            style: `
      display: block;
    `,
            class: 'dashboard c8y-grid-dashboard'
        }
    }),
    tslib_1.__param(5, Inject(CONTEXT_DASHBOARD_CONFIG))
], ContextDashboardComponent);
export { ContextDashboardComponent };
//# sourceMappingURL=data:application/json;base64,