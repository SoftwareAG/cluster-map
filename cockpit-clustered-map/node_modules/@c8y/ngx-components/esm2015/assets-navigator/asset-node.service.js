import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { InventoryService, UserService, PagingStrategy } from '@c8y/client';
import { AlertService, BreadcrumbService, ModalService, NavigatorNode, AppStateService } from '@c8y/ngx-components';
import { ApiService } from '@c8y/ngx-components/api';
import { empty } from 'rxjs';
import { filter, mergeMap, map, scan } from 'rxjs/operators';
import { AssetNode } from './asset-node';
import { ASSET_NAVIGATOR_CONFIG } from './asset-node-config.model';
import { DynamicGroupNode } from './dynamic-group-node';
import { GroupFragment } from './group-fragment.model';
import { DeviceGroupService } from './group.service';
import { flatMap, includes, reject, map as ldMap } from 'lodash-es';
let AssetNodeService = class AssetNodeService {
    constructor(inventory, groups, apiService, modal, alert, breadcrumbService, user, appState, moduleConfig) {
        this.inventory = inventory;
        this.groups = groups;
        this.apiService = apiService;
        this.modal = modal;
        this.alert = alert;
        this.breadcrumbService = breadcrumbService;
        this.user = user;
        this.appState = appState;
        this.moduleConfig = moduleConfig;
        this.firstUrl = true;
        this.moduleConfig = Object.assign({ rootNodePriority: 2000 }, (moduleConfig || {}));
    }
    createRootNode() {
        this.rootNode = this.createAssetNode({
            root: true,
            priority: this.moduleConfig.rootNodePriority
        });
        return this.rootNode;
    }
    createDynamicGroupNode(config) {
        return new DynamicGroupNode(this, config);
    }
    createAssetNode(config) {
        return new AssetNode(this, config);
    }
    createChildNode(managedObject) {
        const { type } = managedObject;
        const config = { mo: managedObject };
        if (type === GroupFragment.dynamicGroupType) {
            return this.createDynamicGroupNode(config);
        }
        return this.createAssetNode(config);
    }
    getRootNodes() {
        if (this.user.hasRole(this.appState.currentUser.value, 'ROLE_INVENTORY_READ')) {
            const query = this.rootQueryFilter();
            const rootNodeFilter = this.createFilter({ query, pageSize: 20, skipChildrenNames: true });
            return this.inventory.list(rootNodeFilter);
        }
        else {
            const groupFilter = this.createFilter({
                fragmentType: GroupFragment.groupFragmentType,
                withTotalPages: true,
                pageSize: 500,
                skipChildrenNames: true
            });
            return this.inventory
                .list$(groupFilter, {
                hot: false,
                pagingStrategy: PagingStrategy.ALL,
                realtime: false
            })
                .pipe(scan((acc, val) => [...acc, ...val], []), map(groups => this.rejectSubgroups(groups)))
                .toPromise();
        }
    }
    getGroupItems(moId) {
        const query = this.groupQueryFilter(moId);
        const groupFilter = this.createFilter({ query, skipChildrenNames: true });
        return this.inventory.list(groupFilter);
    }
    getDynamicGroupItems(query) {
        const dynamicGroupfilter = this.createFilter({ q: query });
        return this.inventory.list(dynamicGroupfilter);
    }
    groupQueryFilter(moId) {
        return `$filter=(bygroupid(${moId}))$orderby=name`;
    }
    rootQueryFilter() {
        const { moduleConfig } = this;
        const rootFilter = [`(type eq '${GroupFragment.groupType}')`];
        if (moduleConfig.smartGroups) {
            rootFilter.push(`(type eq '${GroupFragment.dynamicGroupType}')`);
        }
        return `$filter=(${rootFilter.join(' or ')})$orderby=name`;
    }
    onUpdate({ mo, root }) {
        if (mo.id) {
            return this.apiService
                .hookResponse(({ url, method }) => ['PUT', 'DELETE', 'POST'].includes(method) &&
                RegExp(`((inventory/managedObjects)|(service/smartgroup/smartgroups))/${mo.id}`).test(url))
                .pipe(filter(() => !this.draggedData), mergeMap(this.apiService.resolveData), filter((response) => !response.data.c8y_Dashboard));
        }
        else if (root) {
            return this.apiService.hookResponse(({ url, method, options }) => RegExp('((inventory/managedObjects)|(service/smartgroup/smartgroups))/?$').test(url) &&
                method === 'POST' &&
                this.isNewManagedObjectRoot(options));
        }
        else {
            return empty();
        }
    }
    isNewManagedObjectRoot(options = {}) {
        const { data } = options;
        let isRootAsset = false;
        if (typeof data === 'object') {
            isRootAsset = !!data[GroupFragment.groupFragmentType];
            if (!isRootAsset && this.moduleConfig.smartGroups) {
                isRootAsset = !!data[GroupFragment.dynamicGroupFragment];
            }
        }
        return isRootAsset;
    }
    /**
     * There could be multiple breadcrumbs for devices,
     * so we set a preferred one on click on a device.
     * @param parents The parent nodes of the device to select the prefered one.
     */
    preferBreadcrumb(parents) {
        if (parents.length === 1) {
            this.breadcrumbService.selectPreferredByPath(parents[0].path);
        }
    }
    rejectSubgroups(groups) {
        const allChildAssetRefs = flatMap(groups, 'childAssets.references');
        const allChildAssetIds = ldMap(allChildAssetRefs, 'managedObject.id');
        const isSubgroup = group => includes(allChildAssetIds, group.id);
        return reject(groups, isSubgroup);
    }
    createFilter(extraParams = {}) {
        const params = {
            currentPage: 1,
            withTotalPages: true,
            pageSize: 10
        };
        return Object.assign({}, params, extraParams);
    }
};
AssetNodeService.ctorParameters = () => [
    { type: InventoryService },
    { type: DeviceGroupService },
    { type: ApiService },
    { type: ModalService },
    { type: AlertService },
    { type: BreadcrumbService },
    { type: UserService },
    { type: AppStateService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ASSET_NAVIGATOR_CONFIG,] }] }
];
AssetNodeService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(8, Optional()), tslib_1.__param(8, Inject(ASSET_NAVIGATOR_CONFIG))
], AssetNodeService);
export { AssetNodeService };
//# sourceMappingURL=data:application/json;base64,