import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FetchClient, IFetchOptions, TenantOptionsService } from '@c8y/client';
let SmsGatewayService = class SmsGatewayService {
    constructor(client, tenantOptionsService) {
        this.client = client;
        this.tenantOptionsService = tenantOptionsService;
        this.category = 'messaging';
        this.basePath = 'service/register/messaging';
        this.providerTemplates = {
            cepConfig: {
                'sms.senderAddress': 'cumulocity',
                'sms.senderName': 'cumulocity'
            },
            openit: {
                provider: 'openit',
                'openit.baseUrl': 'https://sms.plusserver.com/put.php'
            },
            sms77: {
                provider: 'sms77',
                'sms77.url': 'https://gateway.sms77.io/api/sms'
            }
        };
    }
    getProviderConfig() {
        return this.tenantOptionsService.detail({ category: this.category, key: '' });
    }
    saveProviderConfig(newConfig) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const providerTemplate = this.providerTemplates[newConfig.provider];
            const { cepConfig } = this.providerTemplates;
            Object.assign(newConfig, providerTemplate, cepConfig);
            const config = {
                method: 'PUT',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify(newConfig)
            };
            return this.client.fetch(this.basePath, config);
        });
    }
    deleteProviderConfig(config) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const providerTemplate = this.providerTemplates[config.provider];
            Object.assign(config, providerTemplate);
            return this.deleteProviderOptions(config);
        });
    }
    deleteProviderOptions(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (const optionKey of Object.keys(options)) {
                yield this.tenantOptionsService.delete({ category: this.category, key: optionKey });
            }
        });
    }
};
SmsGatewayService.ctorParameters = () => [
    { type: FetchClient },
    { type: TenantOptionsService }
];
SmsGatewayService = tslib_1.__decorate([
    Injectable()
], SmsGatewayService);
export { SmsGatewayService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21zLWdhdGV3YXkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvc21zLWdhdGV3YXkvIiwic291cmNlcyI6WyJzbXMtZ2F0ZXdheS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRy9FLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBa0I1QixZQUFvQixNQUFtQixFQUFVLG9CQUEwQztRQUF2RSxXQUFNLEdBQU4sTUFBTSxDQUFhO1FBQVUseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQWpCMUUsYUFBUSxHQUFHLFdBQVcsQ0FBQztRQUN2QixhQUFRLEdBQUcsNEJBQTRCLENBQUM7UUFDakQsc0JBQWlCLEdBQUc7WUFDMUIsU0FBUyxFQUFFO2dCQUNULG1CQUFtQixFQUFFLFlBQVk7Z0JBQ2pDLGdCQUFnQixFQUFFLFlBQVk7YUFDL0I7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLGdCQUFnQixFQUFFLG9DQUFvQzthQUN2RDtZQUNELEtBQUssRUFBRTtnQkFDTCxRQUFRLEVBQUUsT0FBTztnQkFDakIsV0FBVyxFQUFFLGtDQUFrQzthQUNoRDtTQUNGLENBQUM7SUFFNEYsQ0FBQztJQUUvRixpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUssa0JBQWtCLENBQUMsU0FBUzs7WUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7WUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFdEQsTUFBTSxNQUFNLEdBQWtCO2dCQUM1QixNQUFNLEVBQUUsS0FBSztnQkFDYixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQy9DLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQzthQUNoQyxDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELENBQUM7S0FBQTtJQUVLLG9CQUFvQixDQUFDLE1BQU07O1lBQy9CLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLENBQUM7S0FBQTtJQUVhLHFCQUFxQixDQUFDLE9BQU87O1lBQ3pDLEtBQUssTUFBTSxTQUFTLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDNUMsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7YUFDckY7UUFDSCxDQUFDO0tBQUE7Q0FDRixDQUFBOztZQTlCNkIsV0FBVztZQUFnQyxvQkFBb0I7O0FBbEJoRixpQkFBaUI7SUFEN0IsVUFBVSxFQUFFO0dBQ0EsaUJBQWlCLENBZ0Q3QjtTQWhEWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGZXRjaENsaWVudCwgSUZldGNoT3B0aW9ucywgVGVuYW50T3B0aW9uc1NlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTbXNHYXRld2F5U2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2F0ZWdvcnkgPSAnbWVzc2FnaW5nJztcbiAgcHJpdmF0ZSByZWFkb25seSBiYXNlUGF0aCA9ICdzZXJ2aWNlL3JlZ2lzdGVyL21lc3NhZ2luZyc7XG4gIHByaXZhdGUgcHJvdmlkZXJUZW1wbGF0ZXMgPSB7XG4gICAgY2VwQ29uZmlnOiB7XG4gICAgICAnc21zLnNlbmRlckFkZHJlc3MnOiAnY3VtdWxvY2l0eScsXG4gICAgICAnc21zLnNlbmRlck5hbWUnOiAnY3VtdWxvY2l0eSdcbiAgICB9LFxuICAgIG9wZW5pdDoge1xuICAgICAgcHJvdmlkZXI6ICdvcGVuaXQnLFxuICAgICAgJ29wZW5pdC5iYXNlVXJsJzogJ2h0dHBzOi8vc21zLnBsdXNzZXJ2ZXIuY29tL3B1dC5waHAnXG4gICAgfSxcbiAgICBzbXM3Nzoge1xuICAgICAgcHJvdmlkZXI6ICdzbXM3NycsXG4gICAgICAnc21zNzcudXJsJzogJ2h0dHBzOi8vZ2F0ZXdheS5zbXM3Ny5pby9hcGkvc21zJ1xuICAgIH1cbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsaWVudDogRmV0Y2hDbGllbnQsIHByaXZhdGUgdGVuYW50T3B0aW9uc1NlcnZpY2U6IFRlbmFudE9wdGlvbnNTZXJ2aWNlKSB7fVxuXG4gIGdldFByb3ZpZGVyQ29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLnRlbmFudE9wdGlvbnNTZXJ2aWNlLmRldGFpbCh7IGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LCBrZXk6ICcnIH0pO1xuICB9XG5cbiAgYXN5bmMgc2F2ZVByb3ZpZGVyQ29uZmlnKG5ld0NvbmZpZykge1xuICAgIGNvbnN0IHByb3ZpZGVyVGVtcGxhdGUgPSB0aGlzLnByb3ZpZGVyVGVtcGxhdGVzW25ld0NvbmZpZy5wcm92aWRlcl07XG4gICAgY29uc3QgeyBjZXBDb25maWcgfSA9IHRoaXMucHJvdmlkZXJUZW1wbGF0ZXM7XG4gICAgT2JqZWN0LmFzc2lnbihuZXdDb25maWcsIHByb3ZpZGVyVGVtcGxhdGUsIGNlcENvbmZpZyk7XG5cbiAgICBjb25zdCBjb25maWc6IElGZXRjaE9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShuZXdDb25maWcpXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuZmV0Y2godGhpcy5iYXNlUGF0aCwgY29uZmlnKTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVByb3ZpZGVyQ29uZmlnKGNvbmZpZykge1xuICAgIGNvbnN0IHByb3ZpZGVyVGVtcGxhdGUgPSB0aGlzLnByb3ZpZGVyVGVtcGxhdGVzW2NvbmZpZy5wcm92aWRlcl07XG4gICAgT2JqZWN0LmFzc2lnbihjb25maWcsIHByb3ZpZGVyVGVtcGxhdGUpO1xuICAgIHJldHVybiB0aGlzLmRlbGV0ZVByb3ZpZGVyT3B0aW9ucyhjb25maWcpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBkZWxldGVQcm92aWRlck9wdGlvbnMob3B0aW9ucykge1xuICAgIGZvciAoY29uc3Qgb3B0aW9uS2V5IG9mIE9iamVjdC5rZXlzKG9wdGlvbnMpKSB7XG4gICAgICBhd2FpdCB0aGlzLnRlbmFudE9wdGlvbnNTZXJ2aWNlLmRlbGV0ZSh7IGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LCBrZXk6IG9wdGlvbktleSB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==