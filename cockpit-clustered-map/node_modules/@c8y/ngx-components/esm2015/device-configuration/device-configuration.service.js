import * as tslib_1 from "tslib";
import { EventEmitter, Injectable } from '@angular/core';
import { EventBinaryService, EventService, IEvent, IManagedObject, InventoryBinaryService, InventoryService, IOperation, OperationService } from '@c8y/client';
import { AlertService, gettext } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
let DeviceConfigurationService = class DeviceConfigurationService {
    constructor(eventService, eventBinaryService, operationService, alertService, inventoryService, inventoryBinaryService, translateService) {
        this.eventService = eventService;
        this.eventBinaryService = eventBinaryService;
        this.operationService = operationService;
        this.alertService = alertService;
        this.inventoryService = inventoryService;
        this.inventoryBinaryService = inventoryBinaryService;
        this.translateService = translateService;
        this.dateFrom = new Date(0);
        this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
        this.repositoryConfigListUpdated = new EventEmitter();
    }
    getLatestConfigurationEvent(deviceId, type) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const filter = {
                source: deviceId,
                type,
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                pageSize: 1
            };
            const { data } = yield this.eventService.list(filter);
            return data[0];
        });
    }
    getEventConfigurationBinary(event) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let binary;
            try {
                const res = yield this.eventBinaryService.download(event);
                binary = res.text();
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return binary;
        });
    }
    createUploadConfigFileOperation(device, configurationType) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let operation;
            const operationText = gettext('Retrieve {{ configurationType }} configuration snapshot from device {{ deviceName }}');
            const operationCfg = {
                deviceId: device.id,
                c8y_UploadConfigFile: {
                    type: configurationType
                },
                description: this.translateService.instant(operationText, {
                    configurationType,
                    deviceName: device.name
                })
            };
            try {
                const { data } = yield this.operationService.create(operationCfg);
                operation = data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return operation;
        });
    }
    getLatestConfigFileOperation(deviceId, configType, operationType) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const filter = {
                deviceId,
                fragmentType: operationType,
                dateFrom: this.dateFrom.toISOString(),
                dateTo: this.dateTo.toISOString(),
                revert: true,
                pageSize: 2000
            };
            const { data } = yield this.operationService.list(filter);
            return data.find(op => op[operationType].type === configType);
        });
    }
    getSnapshotsFromRepository(deviceType, configurationType) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let query;
            const filter = {
                pageSize: 2000,
                withTotalPages: true
            };
            query = {
                __filter: {
                    __and: [
                        {
                            type: 'c8y_ConfigurationDump'
                        },
                        {
                            __or: [
                                { configurationType: { __eq: configurationType } },
                                {
                                    __not: {
                                        __has: 'configurationType'
                                    }
                                }
                            ]
                        }
                    ]
                },
                __orderby: [{ configurationType: -1, name: 1 }]
            };
            if (deviceType) {
                const deviceTypeFilter = {
                    __or: [
                        { deviceType: { __eq: deviceType } },
                        {
                            __not: {
                                __has: 'deviceType'
                            }
                        }
                    ]
                };
                query.__filter.__and.push(deviceTypeFilter);
            }
            return (yield this.inventoryService.listQuery(query, filter)).data;
        });
    }
    createDownloadConfigFileOperation(device, configurationType, binaryUrl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let operation;
            const operationText = gettext('Send configuration {{ configurationType }} to device {{ deviceName }}');
            const operationCfg = {
                deviceId: device.id,
                c8y_DownloadConfigFile: {
                    url: binaryUrl,
                    type: configurationType
                },
                description: this.translateService.instant(operationText, {
                    configurationType,
                    deviceName: device.name
                })
            };
            try {
                const { data } = yield this.operationService.create(operationCfg);
                operation = data;
            }
            catch (ex) {
                this.alertService.addServerFailure(ex);
            }
            return operation;
        });
    }
    getConfigurationBinaryFile(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let binary;
            const moId = this.inventoryBinaryService.getIdFromUrl(url);
            if (moId) {
                const binaryMO = (yield this.inventoryService.detail(moId)).data;
                const res = yield this.inventoryBinaryService.download(binaryMO);
                binary = yield res.text();
            }
            else {
                binary = this.fetchExternalBinary(url);
            }
            return binary;
        });
    }
    saveToConfigurationRepository(config) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const mo = {};
            Object.assign(mo, {
                name: config.name,
                type: 'c8y_ConfigurationDump',
                deviceType: config.deviceType,
                configurationType: config.configurationType,
                c8y_Global: {}
            });
            const response = yield this.inventoryBinaryService.create(new Blob([config.binary]), {
                c8y_Global: {}
            });
            mo.url = response.data.self;
            return this.inventoryService.create(mo);
        });
    }
    updateRepositoryConfigList() {
        this.repositoryConfigListUpdated.emit();
    }
    fetchExternalBinary(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let configBinary;
            try {
                const res = yield fetch(url);
                if (res.status === 200) {
                    configBinary = yield res.text();
                }
            }
            catch (ex) {
                // do nothing
            }
            return configBinary;
        });
    }
};
DeviceConfigurationService.ctorParameters = () => [
    { type: EventService },
    { type: EventBinaryService },
    { type: OperationService },
    { type: AlertService },
    { type: InventoryService },
    { type: InventoryBinaryService },
    { type: TranslateService }
];
DeviceConfigurationService = tslib_1.__decorate([
    Injectable()
], DeviceConfigurationService);
export { DeviceConfigurationService };
//# sourceMappingURL=data:application/json;base64,