import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { DeviceConfigurationOperation } from './device-configuration.model';
import { IManagedObject, IOperation, OperationStatus, Realtime, UserService } from '@c8y/client';
import { DeviceConfigurationService } from './device-configuration.service';
import { saveAs } from 'file-saver/FileSaver';
import { BsModalService } from 'ngx-bootstrap/modal';
import { SaveToRepositoryComponent } from './save-to-repository.component';
import { cloneDeep } from 'lodash-es';
import { AppStateService } from '@c8y/ngx-components';
let ConfigurationPreviewComponent = class ConfigurationPreviewComponent {
    constructor(deviceConfigurationService, realtime, bsModal, user, appState) {
        this.deviceConfigurationService = deviceConfigurationService;
        this.realtime = realtime;
        this.bsModal = bsModal;
        this.user = user;
        this.appState = appState;
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.operationToTrigger === DeviceConfigurationOperation.UPLOAD_CONFIG) {
                const configOperation = yield this.getOperation();
                this.updateOperation(configOperation);
            }
            const operationsChannel = `/operations/${this.device.id}`;
            this.operationsSubscription = this.realtime
                .observable(operationsChannel)
                .subscribe(({ data }) => {
                this.updateOperation(data);
            });
        });
    }
    createDeviceOperation() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
                this.operation = yield this.deviceConfigurationService.createDownloadConfigFileOperation(this.device, this.configurationType, this.configSnapshot.binaryUrl);
            }
            if (this.operationToTrigger === DeviceConfigurationOperation.UPLOAD_CONFIG) {
                this.operation = yield this.deviceConfigurationService.createUploadConfigFileOperation(this.device, this.configurationType);
            }
        });
    }
    showOperation() {
        if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
            return !!this.operation;
        }
        return (this.operation &&
            [OperationStatus.PENDING, OperationStatus.EXECUTING, OperationStatus.FAILED].includes(this.operation.status));
    }
    showBinary() {
        if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
            return true;
        }
        return !this.showOperation();
    }
    isCreateOperationDisabled() {
        return (this.operation &&
            [OperationStatus.PENDING, OperationStatus.EXECUTING].includes(this.operation.status));
    }
    updateOperation(operation) {
        if (operation &&
            operation[this.operationToTrigger] &&
            operation[this.operationToTrigger].type &&
            operation[this.operationToTrigger].type === this.configurationType) {
            this.operation = operation;
        }
    }
    getOperation() {
        return this.deviceConfigurationService.getLatestConfigFileOperation(this.device.id, this.configurationType, this.operationToTrigger);
    }
    download() {
        const blob = new Blob([this.configSnapshot.binary]);
        const fileName = this.configSnapshot.name;
        saveAs(blob, fileName);
    }
    saveToRepository() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const initialState = {
                configSnapshot: cloneDeep(this.configSnapshot)
            };
            const modal = this.bsModal.show(SaveToRepositoryComponent, {
                class: 'modal-sm',
                initialState,
                ignoreBackdropClick: true
            }).content;
            try {
                yield modal.result;
                this.deviceConfigurationService.updateRepositoryConfigList();
                modal.close();
            }
            catch (ex) {
                // do nothing
            }
        });
    }
    hasPermission() {
        return this.user.hasAnyRole(this.appState.currentUser.value, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_CREATE'
        ]);
    }
    ngOnDestroy() {
        this.operationsSubscription.unsubscribe();
    }
};
ConfigurationPreviewComponent.ctorParameters = () => [
    { type: DeviceConfigurationService },
    { type: Realtime },
    { type: BsModalService },
    { type: UserService },
    { type: AppStateService }
];
tslib_1.__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "device", void 0);
tslib_1.__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "configurationType", void 0);
tslib_1.__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "configSnapshot", void 0);
tslib_1.__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "canSaveSnapshot", void 0);
tslib_1.__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "actionButtonText", void 0);
tslib_1.__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "actionButtonIcon", void 0);
tslib_1.__decorate([
    Input()
], ConfigurationPreviewComponent.prototype, "operationToTrigger", void 0);
ConfigurationPreviewComponent = tslib_1.__decorate([
    Component({
        selector: 'c8y-device-configuration-preview',
        template: "<div *ngIf=\"configSnapshot\">\n  <div class=\"content-flex-55 p-b-16\">\n    <div class=\"col-5 p-t-4\">\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Configuration</span>\n      <span *ngIf=\"configSnapshot.name; else emptyText\">\n        <strong>{{ configSnapshot.name }}</strong>\n      </span>\n      <ng-template #emptyText> --- </ng-template>\n    </div>\n    <div class=\"col-4 p-t-4\">\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Last updated</span>\n      <small *ngIf=\"configSnapshot.time; else emptyDate\">\n        {{ configSnapshot.time | date: 'medium' }}\n      </small>\n      <ng-template #emptyDate> --- </ng-template>\n    </div>\n    <div class=\"col-3\">\n      <button\n        class=\"btn btn-default btn-sm pull-right\"\n        type=\"button\"\n        title=\"{{ actionButtonText | translate }}\"\n        (click)=\"createDeviceOperation()\"\n        [disabled]=\"isCreateOperationDisabled()\"\n      >\n        <i [c8yIcon]=\"actionButtonIcon\"></i> {{ actionButtonText | translate }}\n      </button>\n    </div>\n  </div>\n  <div class=\"c8y-empty-state text-left\" *ngIf=\"!configSnapshot.binary && showBinary()\">\n    <h1 [c8yIcon]=\"'file-image-o'\"></h1>\n    <p>\n      <strong translate>No preview available.</strong><br />\n      <small translate>Could not fetch the file.</small>\n    </p>\n  </div>\n  <div *ngIf=\"configSnapshot.binary && showBinary()\">\n    <c8y-source-code-preview\n      [text]=\"configSnapshot.binary\"\n      [isDisabled]=\"true\"\n    ></c8y-source-code-preview>\n    <div *ngIf=\"canSaveSnapshot\" class=\"top-p-md\">\n      <button\n        type=\"button\"\n        class=\"btn btn-primary btn-sm pull-right left-m-sm\"\n        (click)=\"download()\"\n        translate\n      >\n        Download\n      </button>\n      <button\n        *ngIf=\"hasPermission()\"\n        type=\"button\"\n        class=\"btn btn-default btn-sm pull-right\"\n        (click)=\"saveToRepository()\"\n        translate\n      >\n        Save to repository\n      </button>\n    </div>\n  </div>\n  <div *ngIf=\"showOperation()\">\n    <c8y-device-configuration-operation\n      [operation]=\"operation\"\n    ></c8y-device-configuration-operation>\n  </div>\n</div>\n"
    })
], ConfigurationPreviewComponent);
export { ConfigurationPreviewComponent };
//# sourceMappingURL=data:application/json;base64,