import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ViewContext } from '@c8y/ngx-components';
import { CopyActionComponent } from './copy-action.component';
import { DashboardBridgeService } from './dashboard-bridge.service';
import { PasteActionComponent } from './paste-action.component';
let Ng1DashboardActionFactoryService = class Ng1DashboardActionFactoryService {
    constructor(dashboardBridgeService) {
        this.dashboardBridgeService = dashboardBridgeService;
    }
    get(activeRoute) {
        const actions = [];
        const data = !activeRoute.parent || activeRoute.snapshot.data.context
            ? activeRoute.snapshot.data
            : activeRoute.parent.snapshot.data;
        const { contextData } = data;
        const isDashboard = contextData && activeRoute.snapshot.data.dashboard;
        const canPaste = contextData &&
            [ViewContext.Device, ViewContext.Group].includes(data.context) &&
            this.dashboardBridgeService.dashboardClipboard;
        if (isDashboard) {
            actions.push({
                priority: -20,
                placement: 'more',
                template: CopyActionComponent
            });
        }
        if (canPaste) {
            actions.push({
                priority: -10,
                placement: 'more',
                template: PasteActionComponent
            });
        }
        return actions;
    }
};
Ng1DashboardActionFactoryService.ctorParameters = () => [
    { type: DashboardBridgeService }
];
Ng1DashboardActionFactoryService = tslib_1.__decorate([
    Injectable()
], Ng1DashboardActionFactoryService);
export { Ng1DashboardActionFactoryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLWFjdGlvbnMuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvdXBncmFkZS8iLCJzb3VyY2VzIjpbImRhc2hib2FyZC9kYXNoYm9hcmQtYWN0aW9ucy5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBbUMsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHaEUsSUFBYSxnQ0FBZ0MsR0FBN0MsTUFBYSxnQ0FBZ0M7SUFDM0MsWUFBb0Isc0JBQThDO1FBQTlDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7SUFBRyxDQUFDO0lBRXRFLEdBQUcsQ0FBQyxXQUE0QjtRQUM5QixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbkIsTUFBTSxJQUFJLEdBQ1IsQ0FBQyxXQUFXLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDdEQsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSTtZQUMzQixDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDN0IsTUFBTSxXQUFXLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN2RSxNQUFNLFFBQVEsR0FDWixXQUFXO1lBQ1gsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUM5RCxJQUFJLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQUM7UUFFakQsSUFBSSxXQUFXLEVBQUU7WUFDZixPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNYLFFBQVEsRUFBRSxDQUFDLEVBQUU7Z0JBQ2IsU0FBUyxFQUFFLE1BQU07Z0JBQ2pCLFFBQVEsRUFBRSxtQkFBbUI7YUFDYixDQUFDLENBQUM7U0FDckI7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1gsUUFBUSxFQUFFLENBQUMsRUFBRTtnQkFDYixTQUFTLEVBQUUsTUFBTTtnQkFDakIsUUFBUSxFQUFFLG9CQUFvQjthQUNkLENBQUMsQ0FBQztTQUNyQjtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRixDQUFBOztZQWpDNkMsc0JBQXNCOztBQUR2RCxnQ0FBZ0M7SUFENUMsVUFBVSxFQUFFO0dBQ0EsZ0NBQWdDLENBa0M1QztTQWxDWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBBY3Rpb25CYXJGYWN0b3J5LCBBY3Rpb25CYXJJdGVtLCBWaWV3Q29udGV4dCB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgQ29weUFjdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vY29weS1hY3Rpb24uY29tcG9uZW50JztcbmltcG9ydCB7IERhc2hib2FyZEJyaWRnZVNlcnZpY2UgfSBmcm9tICcuL2Rhc2hib2FyZC1icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBQYXN0ZUFjdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vcGFzdGUtYWN0aW9uLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZzFEYXNoYm9hcmRBY3Rpb25GYWN0b3J5U2VydmljZSBpbXBsZW1lbnRzIEFjdGlvbkJhckZhY3Rvcnkge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhc2hib2FyZEJyaWRnZVNlcnZpY2U6IERhc2hib2FyZEJyaWRnZVNlcnZpY2UpIHt9XG5cbiAgZ2V0KGFjdGl2ZVJvdXRlPzogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBjb25zdCBhY3Rpb25zID0gW107XG4gICAgY29uc3QgZGF0YSA9XG4gICAgICAhYWN0aXZlUm91dGUucGFyZW50IHx8IGFjdGl2ZVJvdXRlLnNuYXBzaG90LmRhdGEuY29udGV4dFxuICAgICAgICA/IGFjdGl2ZVJvdXRlLnNuYXBzaG90LmRhdGFcbiAgICAgICAgOiBhY3RpdmVSb3V0ZS5wYXJlbnQuc25hcHNob3QuZGF0YTtcbiAgICBjb25zdCB7IGNvbnRleHREYXRhIH0gPSBkYXRhO1xuICAgIGNvbnN0IGlzRGFzaGJvYXJkID0gY29udGV4dERhdGEgJiYgYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YS5kYXNoYm9hcmQ7XG4gICAgY29uc3QgY2FuUGFzdGUgPVxuICAgICAgY29udGV4dERhdGEgJiZcbiAgICAgIFtWaWV3Q29udGV4dC5EZXZpY2UsIFZpZXdDb250ZXh0Lkdyb3VwXS5pbmNsdWRlcyhkYXRhLmNvbnRleHQpICYmXG4gICAgICB0aGlzLmRhc2hib2FyZEJyaWRnZVNlcnZpY2UuZGFzaGJvYXJkQ2xpcGJvYXJkO1xuXG4gICAgaWYgKGlzRGFzaGJvYXJkKSB7XG4gICAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogLTIwLFxuICAgICAgICBwbGFjZW1lbnQ6ICdtb3JlJyxcbiAgICAgICAgdGVtcGxhdGU6IENvcHlBY3Rpb25Db21wb25lbnRcbiAgICAgIH0gYXMgQWN0aW9uQmFySXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKGNhblBhc3RlKSB7XG4gICAgICBhY3Rpb25zLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogLTEwLFxuICAgICAgICBwbGFjZW1lbnQ6ICdtb3JlJyxcbiAgICAgICAgdGVtcGxhdGU6IFBhc3RlQWN0aW9uQ29tcG9uZW50XG4gICAgICB9IGFzIEFjdGlvbkJhckl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb25zO1xuICB9XG59XG4iXX0=