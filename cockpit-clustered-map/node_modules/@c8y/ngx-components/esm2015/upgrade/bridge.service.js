import { ActionService, AppStateService, EmptyComponent, RouterService, ViewContext, gettext } from '@c8y/ngx-components';
import { BehaviorSubject, combineLatest, from, fromEventPattern, of } from 'rxjs';
import { debounceTime, filter, map, merge, startWith, switchMap } from 'rxjs/operators';
import { ActivationEnd } from '@angular/router';
import { FetchClient } from '@c8y/client';
import { NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { ViewContextLegacyParameter } from './ng1/views.provider';
export class BridgeService {
    constructor(injector, appState, fetchClient, router, ngZone, routerService, actionService) {
        this.injector = injector;
        this.appState = appState;
        this.fetchClient = fetchClient;
        this.router = router;
        this.ngZone = ngZone;
        this.routerService = routerService;
        this.actionService = actionService;
        this.$liveTabs = new BehaviorSubject([]);
        this.fixE2eIssues();
        this.$ng1RouteChangeSuccess = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeSuccess');
        this.$ng1RouteChangeStart = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeStart');
        this.hookAuth();
        this.hookLanguage();
        this.hookTabs();
        this.hookNavigator();
        this.hookUserMenu();
        this.hookViewProvider();
        this.router.initialNavigation();
        this.ng1Routes();
    }
    hookViewProvider() {
        const c8yViews = this.injector.get('c8yViews');
        c8yViews.contextViews.subscribe(cfg => this.addRoute(cfg));
    }
    addRoute(cfg) {
        this.routerService.addRoute({
            label: cfg.label || cfg.name,
            path: cfg.path,
            icon: cfg.icon,
            context: ViewContext[cfg.contextKey],
            priority: cfg.priority,
            component: EmptyComponent,
            data: {
                showIf: cfg.showIf
                    ? ngxRoute => {
                        const params = Object.assign({}, ngxRoute.params, { [ViewContextLegacyParameter[cfg.contextKey]]: ngxRoute.params.id });
                        const showIfResult = this.injector.invoke(cfg.showIf, undefined, {
                            $routeParams: params
                        });
                        // make sure showIf result is a promise with boolean result:
                        return this.injector
                            .get('$q')
                            .when(showIfResult)
                            .then(Boolean);
                    }
                    : undefined
            }
        });
        if (cfg.runPhase) {
            this.router.navigateByUrl(this.router.url);
        }
    }
    ng1Routes() {
        const template = '';
        const fallbackRoutes = [];
        // tslint:disable-next-line: forin
        for (const context in ViewContext) {
            const path = ViewContext[context].match(/(\w+)\//)[1];
            const regexp = new RegExp(`^/${path}/(?:([^/]+)).*$`);
            fallbackRoutes.push({
                keys: [{ name: ViewContextLegacyParameter[context], optional: false }],
                regexp,
                template
            });
        }
        /**
         * When asset detail routes (/device/:id,  /group/:id) are matched in Angular Router, ngRoute in
         * angular.js must also have matching generic routes so that the ids can be extracted from the paths and
         * injected in multiple calls (showIf, c8yActions, etc) as properties of $routeParams.
         *
         * The function in src/ngRoute/route.js (angular.js) where the routes are matched is called parseRoute(). This
         * function calls angular.forEach and in turn this function checks for the presence of a forEach method before
         * trying object key iteration.
         * By attaching a non enumerable forEach method to the routes object we guarantee that the fallback generic routes
         * are only matched after any other registered through $routeProvider.when.
         */
        const $route = this.injector.get('$route');
        Object.defineProperty($route.routes, 'forEach', {
            // make non enumerable
            value: function forEach(iterator, context) {
                // tslint:disable-next-line: forin
                for (const key in this) {
                    iterator.call(context, this[key], key, this);
                }
                fallbackRoutes.forEach(r => iterator.call(context, r));
            }
        });
        /**
         * Some functions use the current context. As some parts are upgraded and some not, the following updates the
         * angularjs getContext function to resolve always the right context.
         */
        const c8yUiUtil = this.injector.get('c8yUiUtil');
        const _getContext = c8yUiUtil.getContext;
        this.router.events
            .pipe(filter(event => event instanceof ActivationEnd))
            .subscribe((event) => {
            if (event.snapshot.routeConfig.path === '**') {
                c8yUiUtil.getContext = _getContext;
            }
            else if (event.snapshot.data && event.snapshot.data.context) {
                c8yUiUtil.getContext = () => {
                    return {
                        context: event.snapshot.data.context.replace('/:id', ''),
                        id: event.snapshot.data.contextData.id
                    };
                };
            }
            else {
                c8yUiUtil.getContext = () => ({ context: null, id: null });
            }
        });
    }
    fixE2eIssues() {
        try {
            const { ngZone } = this;
            const { Utils } = window.org.cometd;
            const timeoutFn = Utils.setTimeout;
            // tslint:disable-next-line:only-arrow-functions
            Utils.setTimeout = function (...args) {
                return ngZone.runOutsideAngular(() => timeoutFn.apply(Utils, args));
            };
        }
        catch (e) {
            // do nothing
        }
        try {
            const { ace } = window;
            const editFn = ace.edit;
            const { ngZone } = this;
            // tslint:disable-next-line:only-arrow-functions
            ace.edit = function (...args) {
                return ngZone.runOutsideAngular(() => editFn.apply(ace, args));
            };
        }
        catch (e) {
            // do nothing
        }
    }
    setToken(token, tfa, type = 'Basic') {
        const c8yAuth = this.injector.get('c8yAuth');
        if (type === 'Basic') {
            c8yAuth.onSetToken({ token, type });
            if (tfa) {
                c8yAuth.setTFAToken(tfa);
            }
        }
        else {
            c8yAuth.authReady();
        }
    }
    hookAuth() {
        this.appState.currentUser.subscribe(u => {
            if (u) {
                const { headers } = this.fetchClient.getFetchOptions({});
                this.injector.get('c8yAuth').headers = () => this.fetchClient.getFetchOptions({}).headers;
                if (headers.Authorization) {
                    const token = headers.Authorization.match(/basic\s(.*)$/i)[1];
                    if (token) {
                        this.setToken(token, headers.tfatoken);
                    }
                }
                else {
                    this.setToken(undefined, headers.tfatoken, 'Oauth');
                }
                this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: true });
            }
            else {
                this.injector.get('$rootScope').$emit('authStateChange', { hasAuth: false });
            }
        });
    }
    hookLanguage() {
        let first = true;
        this.appState
            .map(store => store.lang)
            .subscribe(lang => {
            this.injector.get('c8yLocales').switchToLanguage(lang);
            if (!first) {
                this.injector.get('$rootScope').$apply();
            }
            first = false;
        });
    }
    hookTabs() {
        // Just for instantiation of the c8yAction service
        this.injector.get('c8yActions');
        const $location = this.injector.get('$location');
        const c8yTabs = this.injector.get('c8yTabs');
        let liveTabs = [];
        c8yTabs.addTab = tab => {
            liveTabs.push(Object.assign({}, tab, { label: tab.label || tab.name, path: decodeURIComponent(tab.path) }));
            this.$liveTabs.next(liveTabs);
        };
        this.$ng1RouteChangeStart.subscribe(e => {
            liveTabs = [];
            this.$liveTabs.next(liveTabs);
        });
        this.$ng1RouteChangeSuccess
            .subscribe(e => {
            const path = $location.path();
            if (this.router.url !== path) {
                this.router.navigate(path.split('/'), {
                    queryParams: $location.search(),
                    skipLocationChange: true
                });
            }
            if (this.actionService) {
                this.actionService.refresh();
            }
        });
        this.$routeChanges = this.$ng1RouteChangeSuccess.pipe(merge(this.fromNg1Event(c8yTabs, c8yTabs.EVENT_UPDATE), of(1)), debounceTime(100));
    }
    hookNavigator() {
        this.navigationNodes$ = this.injector.get('c8yNavigator').rootNodes$;
    }
    getTabs() {
        const onlyVisible = ({ show }) => show;
        const upgradeTab = tab => (Object.assign({}, tab, { label: tab.label || tab.name, path: decodeURIComponent(tab.path) }));
        const routeTabs = this.$routeChanges.pipe(switchMap(() => {
            const routes = this.injector.get('c8yTabs').routeTabs;
            const visibilityPromise = Promise.all(routes.map(({ checkingVisibility }) => checkingVisibility));
            return visibilityPromise.then(() => routes.filter(onlyVisible).map(upgradeTab));
        }), startWith([]));
        return combineLatest(routeTabs, this.$liveTabs).pipe(map(([route, live]) => route.concat(live)));
    }
    getQuickLinks() {
        const c8yQuickLinks = this.injector.get('c8yQuickLinks');
        return c8yQuickLinks.list();
    }
    getActionBarItems() {
        const c8yActionBar = this.injector.get('c8yActionBar');
        const $rootScope = this.injector.get('$rootScope');
        const getActionBarElements = () => c8yActionBar.elements.map(element => ({
            priority: element.getAttribute('action-bar-priority') || 0,
            template: element,
            placement: element.getAttribute('action-bar-position') || 'right'
        }));
        return this.fromNg1Event($rootScope, 'c8yActionBarChanged').pipe(startWith(1), map(getActionBarElements));
    }
    getBreadcrumbs() {
        const $location = this.injector.get('$location');
        const path = $location.path();
        const c8yBreadcrumbs = this.injector.get('c8yBreadcrumbs');
        const breadcrumbs = c8yBreadcrumbs.get(path) || {};
        const breadcrumbsData = breadcrumbs.data ? this.injector.invoke(breadcrumbs.data) : of([]);
        return from(breadcrumbsData).pipe(map((value) => {
            value = value.concat(c8yBreadcrumbs.getLiveBreadcrumbs());
            return value.map(items => ({ items: items.slice(0, items.length - 1) }));
        }));
    }
    getSearch() {
        const c8ySearch = this.injector.get('c8ySearch');
        return c8ySearch.list().map(item => {
            return {
                icon: 'search',
                name: item.name,
                term: '',
                onSearch() {
                    if (this.term) {
                        c8ySearch.search(this.term);
                    }
                }
            };
        });
    }
    getActions() {
        const registeredActions = this.injector.get('c8yActions').registeredActions;
        return of(registeredActions
            .filter(action => !action.hidden)
            .map(action => ({
            // The priority was reversed: Aligned it to dashboard, high first, low last.
            priority: (action.priority || 0) * -1,
            label: action.text,
            icon: action.icon,
            disabled: action.disabled,
            action: () => {
                this.injector.invoke(action.action, action);
            }
        })));
    }
    fromNg1Event(obj, evt) {
        let stopListening;
        function add(handler) {
            stopListening = obj.$on(evt, handler);
        }
        return fromEventPattern(add, () => stopListening());
    }
    hookUserMenu() {
        const userMenuService = this.injector.get('c8yUserMenuService');
        const c8yAccessDenied = this.injector.get('c8yAccessDenied');
        userMenuService.add({
            icon: 'exclamation-triangle',
            priority: 10,
            label: gettext('Access denied requests'),
            click: c8yAccessDenied.showAccessDeniedRequestsList
        });
    }
}
export function bridgeServiceFactory(injector, appState, fetchClient, router, ngZone, routerService, actionService) {
    return new BridgeService(injector, appState, fetchClient, router, ngZone, routerService, actionService);
}
export const bridgeServiceProvider = {
    provide: BridgeService,
    useFactory: bridgeServiceFactory,
    deps: ['$injector', AppStateService, FetchClient, Router, NgZone, RouterService, ActionService]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJpZGdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJicmlkZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsYUFBYSxFQUNiLGVBQWUsRUFHZixjQUFjLEVBQ2QsYUFBYSxFQUdiLFdBQVcsRUFDWCxPQUFPLEVBRVIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQ0wsZUFBZSxFQUdmLGFBQWEsRUFDYixJQUFJLEVBQ0osZ0JBQWdCLEVBQ2hCLEVBQUUsRUFDSCxNQUFNLE1BQU0sQ0FBQztBQUNkLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQVEsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxFLE1BQU0sT0FBTyxhQUFhO0lBTXhCLFlBQ1MsUUFBYSxFQUNaLFFBQXlCLEVBQ3pCLFdBQXdCLEVBQ3pCLE1BQWMsRUFDYixNQUFjLEVBQ2QsYUFBNEIsRUFDNUIsYUFBNEI7UUFON0IsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUNaLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3pCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3pCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDYixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2Qsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsa0JBQWEsR0FB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QUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQzFHLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRztJQUNuQyxPQUFPLEVBQUUsYUFBYTtJQUN0QixVQUFVLEVBQUUsb0JBQW9CO0lBQ2hDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLGFBQWEsQ0FBQztDQUNoRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWN0aW9uLFxuICBBY3Rpb25CYXJJdGVtLFxuICBBY3Rpb25TZXJ2aWNlLFxuICBBcHBTdGF0ZVNlcnZpY2UsXG4gIEJyZWFkY3J1bWIsXG4gIEJyZWFkY3J1bWJJdGVtLFxuICBFbXB0eUNvbXBvbmVudCxcbiAgUm91dGVyU2VydmljZSxcbiAgU2VhcmNoLFxuICBUYWIsXG4gIFZpZXdDb250ZXh0LFxuICBnZXR0ZXh0LFxuICBEb2NMaW5rXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgQmVoYXZpb3JTdWJqZWN0LFxuICBPYnNlcnZhYmxlLFxuICBTdWJqZWN0LFxuICBjb21iaW5lTGF0ZXN0LFxuICBmcm9tLFxuICBmcm9tRXZlbnRQYXR0ZXJuLFxuICBvZlxufSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZmlsdGVyLCBtYXAsIG1lcmdlLCBza2lwLCBzdGFydFdpdGgsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQWN0aXZhdGlvbkVuZCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBGZXRjaENsaWVudCB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFZpZXdDb250ZXh0TGVnYWN5UGFyYW1ldGVyIH0gZnJvbSAnLi9uZzEvdmlld3MucHJvdmlkZXInO1xuXG5leHBvcnQgY2xhc3MgQnJpZGdlU2VydmljZSB7XG4gICRyb3V0ZUNoYW5nZXM6IE9ic2VydmFibGU8YW55PjtcbiAgJG5nMVJvdXRlQ2hhbmdlU3VjY2VzczogT2JzZXJ2YWJsZTxhbnk+O1xuICAkbmcxUm91dGVDaGFuZ2VTdGFydDogT2JzZXJ2YWJsZTxhbnk+O1xuICAkbGl2ZVRhYnM6IFN1YmplY3Q8VGFiW10+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChbXSk7XG4gIG5hdmlnYXRpb25Ob2RlcyQ6IE9ic2VydmFibGU8YW55PjtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGluamVjdG9yOiBhbnksXG4gICAgcHJpdmF0ZSBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgZmV0Y2hDbGllbnQ6IEZldGNoQ2xpZW50LFxuICAgIHB1YmxpYyByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgcm91dGVyU2VydmljZTogUm91dGVyU2VydmljZSxcbiAgICBwcml2YXRlIGFjdGlvblNlcnZpY2U6IEFjdGlvblNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5maXhFMmVJc3N1ZXMoKTtcbiAgICB0aGlzLiRuZzFSb3V0ZUNoYW5nZVN1Y2Nlc3MgPSB0aGlzLmZyb21OZzFFdmVudChcbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KCckcm9vdFNjb3BlJyksXG4gICAgICAnJHJvdXRlQ2hhbmdlU3VjY2VzcydcbiAgICApO1xuICAgIHRoaXMuJG5nMVJvdXRlQ2hhbmdlU3RhcnQgPSB0aGlzLmZyb21OZzFFdmVudChcbiAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KCckcm9vdFNjb3BlJyksXG4gICAgICAnJHJvdXRlQ2hhbmdlU3RhcnQnXG4gICAgKTtcbiAgICB0aGlzLmhvb2tBdXRoKCk7XG4gICAgdGhpcy5ob29rTGFuZ3VhZ2UoKTtcbiAgICB0aGlzLmhvb2tUYWJzKCk7XG4gICAgdGhpcy5ob29rTmF2aWdhdG9yKCk7XG4gICAgdGhpcy5ob29rVXNlck1lbnUoKTtcbiAgICB0aGlzLmhvb2tWaWV3UHJvdmlkZXIoKTtcbiAgICB0aGlzLnJvdXRlci5pbml0aWFsTmF2aWdhdGlvbigpO1xuICAgIHRoaXMubmcxUm91dGVzKCk7XG4gIH1cblxuICBob29rVmlld1Byb3ZpZGVyKCkge1xuICAgIGNvbnN0IGM4eVZpZXdzID0gdGhpcy5pbmplY3Rvci5nZXQoJ2M4eVZpZXdzJyk7XG4gICAgYzh5Vmlld3MuY29udGV4dFZpZXdzLnN1YnNjcmliZShjZmcgPT4gdGhpcy5hZGRSb3V0ZShjZmcpKTtcbiAgfVxuXG4gIGFkZFJvdXRlKGNmZykge1xuICAgIHRoaXMucm91dGVyU2VydmljZS5hZGRSb3V0ZSh7XG4gICAgICBsYWJlbDogY2ZnLmxhYmVsIHx8IGNmZy5uYW1lLFxuICAgICAgcGF0aDogY2ZnLnBhdGgsXG4gICAgICBpY29uOiBjZmcuaWNvbixcbiAgICAgIGNvbnRleHQ6IFZpZXdDb250ZXh0W2NmZy5jb250ZXh0S2V5XSBhcyBWaWV3Q29udGV4dCxcbiAgICAgIHByaW9yaXR5OiBjZmcucHJpb3JpdHksXG4gICAgICBjb21wb25lbnQ6IEVtcHR5Q29tcG9uZW50LFxuICAgICAgZGF0YToge1xuICAgICAgICBzaG93SWY6IGNmZy5zaG93SWZcbiAgICAgICAgICA/IG5neFJvdXRlID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIC4uLm5neFJvdXRlLnBhcmFtcyxcbiAgICAgICAgICAgICAgICBbVmlld0NvbnRleHRMZWdhY3lQYXJhbWV0ZXJbY2ZnLmNvbnRleHRLZXldXTogbmd4Um91dGUucGFyYW1zLmlkXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGNvbnN0IHNob3dJZlJlc3VsdCA9IHRoaXMuaW5qZWN0b3IuaW52b2tlKGNmZy5zaG93SWYsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgICRyb3V0ZVBhcmFtczogcGFyYW1zXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgc2hvd0lmIHJlc3VsdCBpcyBhIHByb21pc2Ugd2l0aCBib29sZWFuIHJlc3VsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5qZWN0b3JcbiAgICAgICAgICAgICAgICAuZ2V0KCckcScpXG4gICAgICAgICAgICAgICAgLndoZW4oc2hvd0lmUmVzdWx0KVxuICAgICAgICAgICAgICAgIC50aGVuKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGNmZy5ydW5QaGFzZSkge1xuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh0aGlzLnJvdXRlci51cmwpO1xuICAgIH1cbiAgfVxuXG4gIG5nMVJvdXRlcygpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9ICcnO1xuICAgIGNvbnN0IGZhbGxiYWNrUm91dGVzID0gW107XG5cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGZvcmluXG4gICAgZm9yIChjb25zdCBjb250ZXh0IGluIFZpZXdDb250ZXh0KSB7XG4gICAgICBjb25zdCBwYXRoID0gVmlld0NvbnRleHRbY29udGV4dF0ubWF0Y2goLyhcXHcrKVxcLy8pWzFdO1xuICAgICAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cChgXi8ke3BhdGh9Lyg/OihbXi9dKykpLiokYCk7XG4gICAgICBmYWxsYmFja1JvdXRlcy5wdXNoKHtcbiAgICAgICAga2V5czogW3sgbmFtZTogVmlld0NvbnRleHRMZWdhY3lQYXJhbWV0ZXJbY29udGV4dF0sIG9wdGlvbmFsOiBmYWxzZSB9XSxcbiAgICAgICAgcmVnZXhwLFxuICAgICAgICB0ZW1wbGF0ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBhc3NldCBkZXRhaWwgcm91dGVzICgvZGV2aWNlLzppZCwgIC9ncm91cC86aWQpIGFyZSBtYXRjaGVkIGluIEFuZ3VsYXIgUm91dGVyLCBuZ1JvdXRlIGluXG4gICAgICogYW5ndWxhci5qcyBtdXN0IGFsc28gaGF2ZSBtYXRjaGluZyBnZW5lcmljIHJvdXRlcyBzbyB0aGF0IHRoZSBpZHMgY2FuIGJlIGV4dHJhY3RlZCBmcm9tIHRoZSBwYXRocyBhbmRcbiAgICAgKiBpbmplY3RlZCBpbiBtdWx0aXBsZSBjYWxscyAoc2hvd0lmLCBjOHlBY3Rpb25zLCBldGMpIGFzIHByb3BlcnRpZXMgb2YgJHJvdXRlUGFyYW1zLlxuICAgICAqXG4gICAgICogVGhlIGZ1bmN0aW9uIGluIHNyYy9uZ1JvdXRlL3JvdXRlLmpzIChhbmd1bGFyLmpzKSB3aGVyZSB0aGUgcm91dGVzIGFyZSBtYXRjaGVkIGlzIGNhbGxlZCBwYXJzZVJvdXRlKCkuIFRoaXNcbiAgICAgKiBmdW5jdGlvbiBjYWxscyBhbmd1bGFyLmZvckVhY2ggYW5kIGluIHR1cm4gdGhpcyBmdW5jdGlvbiBjaGVja3MgZm9yIHRoZSBwcmVzZW5jZSBvZiBhIGZvckVhY2ggbWV0aG9kIGJlZm9yZVxuICAgICAqIHRyeWluZyBvYmplY3Qga2V5IGl0ZXJhdGlvbi5cbiAgICAgKiBCeSBhdHRhY2hpbmcgYSBub24gZW51bWVyYWJsZSBmb3JFYWNoIG1ldGhvZCB0byB0aGUgcm91dGVzIG9iamVjdCB3ZSBndWFyYW50ZWUgdGhhdCB0aGUgZmFsbGJhY2sgZ2VuZXJpYyByb3V0ZXNcbiAgICAgKiBhcmUgb25seSBtYXRjaGVkIGFmdGVyIGFueSBvdGhlciByZWdpc3RlcmVkIHRocm91Z2ggJHJvdXRlUHJvdmlkZXIud2hlbi5cbiAgICAgKi9cbiAgICBjb25zdCAkcm91dGUgPSB0aGlzLmluamVjdG9yLmdldCgnJHJvdXRlJyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KCRyb3V0ZS5yb3V0ZXMsICdmb3JFYWNoJywge1xuICAgICAgLy8gbWFrZSBub24gZW51bWVyYWJsZVxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBmb3JpblxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCB0aGlzW2tleV0sIGtleSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZmFsbGJhY2tSb3V0ZXMuZm9yRWFjaChyID0+IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgcikpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU29tZSBmdW5jdGlvbnMgdXNlIHRoZSBjdXJyZW50IGNvbnRleHQuIEFzIHNvbWUgcGFydHMgYXJlIHVwZ3JhZGVkIGFuZCBzb21lIG5vdCwgdGhlIGZvbGxvd2luZyB1cGRhdGVzIHRoZVxuICAgICAqIGFuZ3VsYXJqcyBnZXRDb250ZXh0IGZ1bmN0aW9uIHRvIHJlc29sdmUgYWx3YXlzIHRoZSByaWdodCBjb250ZXh0LlxuICAgICAqL1xuICAgIGNvbnN0IGM4eVVpVXRpbCA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlVaVV0aWwnKTtcbiAgICBjb25zdCBfZ2V0Q29udGV4dCA9IGM4eVVpVXRpbC5nZXRDb250ZXh0O1xuICAgIHRoaXMucm91dGVyLmV2ZW50c1xuICAgICAgLnBpcGUoZmlsdGVyKGV2ZW50ID0+IGV2ZW50IGluc3RhbmNlb2YgQWN0aXZhdGlvbkVuZCkpXG4gICAgICAuc3Vic2NyaWJlKChldmVudDogQWN0aXZhdGlvbkVuZCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQuc25hcHNob3Qucm91dGVDb25maWcucGF0aCA9PT0gJyoqJykge1xuICAgICAgICAgIGM4eVVpVXRpbC5nZXRDb250ZXh0ID0gX2dldENvbnRleHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuc25hcHNob3QuZGF0YSAmJiBldmVudC5zbmFwc2hvdC5kYXRhLmNvbnRleHQpIHtcbiAgICAgICAgICBjOHlVaVV0aWwuZ2V0Q29udGV4dCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGNvbnRleHQ6IGV2ZW50LnNuYXBzaG90LmRhdGEuY29udGV4dC5yZXBsYWNlKCcvOmlkJywgJycpLFxuICAgICAgICAgICAgICBpZDogZXZlbnQuc25hcHNob3QuZGF0YS5jb250ZXh0RGF0YS5pZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGM4eVVpVXRpbC5nZXRDb250ZXh0ID0gKCkgPT4gKHsgY29udGV4dDogbnVsbCwgaWQ6IG51bGwgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgZml4RTJlSXNzdWVzKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IG5nWm9uZSB9ID0gdGhpcztcbiAgICAgIGNvbnN0IHsgVXRpbHMgfSA9ICh3aW5kb3cgYXMgYW55KS5vcmcuY29tZXRkO1xuICAgICAgY29uc3QgdGltZW91dEZuID0gVXRpbHMuc2V0VGltZW91dDtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmx5LWFycm93LWZ1bmN0aW9uc1xuICAgICAgVXRpbHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aW1lb3V0Rm4uYXBwbHkoVXRpbHMsIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGFjZSB9ID0gd2luZG93IGFzIGFueTtcbiAgICAgIGNvbnN0IGVkaXRGbiA9IGFjZS5lZGl0O1xuICAgICAgY29uc3QgeyBuZ1pvbmUgfSA9IHRoaXM7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6b25seS1hcnJvdy1mdW5jdGlvbnNcbiAgICAgIGFjZS5lZGl0ID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICByZXR1cm4gbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGVkaXRGbi5hcHBseShhY2UsIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH1cbiAgfVxuXG4gIHNldFRva2VuKHRva2VuPzogc3RyaW5nLCB0ZmE/OiBzdHJpbmcsIHR5cGUgPSAnQmFzaWMnKSB7XG4gICAgY29uc3QgYzh5QXV0aCA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlBdXRoJyk7XG4gICAgaWYgKHR5cGUgPT09ICdCYXNpYycpIHtcbiAgICAgIGM4eUF1dGgub25TZXRUb2tlbih7IHRva2VuLCB0eXBlIH0pO1xuICAgICAgaWYgKHRmYSkge1xuICAgICAgICBjOHlBdXRoLnNldFRGQVRva2VuKHRmYSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGM4eUF1dGguYXV0aFJlYWR5KCk7XG4gICAgfVxuICB9XG5cbiAgaG9va0F1dGgoKSB7XG4gICAgdGhpcy5hcHBTdGF0ZS5jdXJyZW50VXNlci5zdWJzY3JpYmUodSA9PiB7XG4gICAgICBpZiAodSkge1xuICAgICAgICBjb25zdCB7IGhlYWRlcnMgfSA9IHRoaXMuZmV0Y2hDbGllbnQuZ2V0RmV0Y2hPcHRpb25zKHt9KTtcbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoJ2M4eUF1dGgnKS5oZWFkZXJzID0gKCkgPT4gdGhpcy5mZXRjaENsaWVudC5nZXRGZXRjaE9wdGlvbnMoe30pLmhlYWRlcnM7XG4gICAgICAgIGlmIChoZWFkZXJzLkF1dGhvcml6YXRpb24pIHtcbiAgICAgICAgICBjb25zdCB0b2tlbiA9IGhlYWRlcnMuQXV0aG9yaXphdGlvbi5tYXRjaCgvYmFzaWNcXHMoLiopJC9pKVsxXTtcbiAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VG9rZW4odG9rZW4sIGhlYWRlcnMudGZhdG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFRva2VuKHVuZGVmaW5lZCwgaGVhZGVycy50ZmF0b2tlbiwgJ09hdXRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoJyRyb290U2NvcGUnKS4kZW1pdCgnYXV0aFN0YXRlQ2hhbmdlJywgeyBoYXNBdXRoOiB0cnVlIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbmplY3Rvci5nZXQoJyRyb290U2NvcGUnKS4kZW1pdCgnYXV0aFN0YXRlQ2hhbmdlJywgeyBoYXNBdXRoOiBmYWxzZSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGhvb2tMYW5ndWFnZSgpIHtcbiAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgIHRoaXMuYXBwU3RhdGVcbiAgICAgIC5tYXAoc3RvcmUgPT4gc3RvcmUubGFuZylcbiAgICAgIC5zdWJzY3JpYmUobGFuZyA9PiB7XG4gICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlMb2NhbGVzJykuc3dpdGNoVG9MYW5ndWFnZShsYW5nKTtcbiAgICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICAgIHRoaXMuaW5qZWN0b3IuZ2V0KCckcm9vdFNjb3BlJykuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgIH0pO1xuICB9XG5cbiAgaG9va1RhYnMoKSB7XG4gICAgLy8gSnVzdCBmb3IgaW5zdGFudGlhdGlvbiBvZiB0aGUgYzh5QWN0aW9uIHNlcnZpY2VcbiAgICB0aGlzLmluamVjdG9yLmdldCgnYzh5QWN0aW9ucycpO1xuICAgIGNvbnN0ICRsb2NhdGlvbiA9IHRoaXMuaW5qZWN0b3IuZ2V0KCckbG9jYXRpb24nKTtcbiAgICBjb25zdCBjOHlUYWJzID0gdGhpcy5pbmplY3Rvci5nZXQoJ2M4eVRhYnMnKTtcbiAgICBsZXQgbGl2ZVRhYnMgPSBbXTtcbiAgICBjOHlUYWJzLmFkZFRhYiA9IHRhYiA9PiB7XG4gICAgICBsaXZlVGFicy5wdXNoKHtcbiAgICAgICAgLi4udGFiLFxuICAgICAgICBsYWJlbDogdGFiLmxhYmVsIHx8IHRhYi5uYW1lLFxuICAgICAgICBwYXRoOiBkZWNvZGVVUklDb21wb25lbnQodGFiLnBhdGgpXG4gICAgICB9KTtcbiAgICAgIHRoaXMuJGxpdmVUYWJzLm5leHQobGl2ZVRhYnMpO1xuICAgIH07XG4gICAgdGhpcy4kbmcxUm91dGVDaGFuZ2VTdGFydC5zdWJzY3JpYmUoZSA9PiB7XG4gICAgICBsaXZlVGFicyA9IFtdO1xuICAgICAgdGhpcy4kbGl2ZVRhYnMubmV4dChsaXZlVGFicyk7XG4gICAgfSk7XG4gICAgdGhpcy4kbmcxUm91dGVDaGFuZ2VTdWNjZXNzXG4gICAgICAuc3Vic2NyaWJlKGUgPT4ge1xuICAgICAgICBjb25zdCBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcbiAgICAgICAgaWYgKHRoaXMucm91dGVyLnVybCAhPT0gcGF0aCkge1xuICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKHBhdGguc3BsaXQoJy8nKSwge1xuICAgICAgICAgICAgcXVlcnlQYXJhbXM6ICRsb2NhdGlvbi5zZWFyY2goKSxcbiAgICAgICAgICAgIHNraXBMb2NhdGlvbkNoYW5nZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFjdGlvblNlcnZpY2UpIHtcbiAgICAgICAgICB0aGlzLmFjdGlvblNlcnZpY2UucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB0aGlzLiRyb3V0ZUNoYW5nZXMgPSB0aGlzLiRuZzFSb3V0ZUNoYW5nZVN1Y2Nlc3MucGlwZShcbiAgICAgIG1lcmdlKHRoaXMuZnJvbU5nMUV2ZW50KGM4eVRhYnMsIGM4eVRhYnMuRVZFTlRfVVBEQVRFKSwgb2YoMSkpLFxuICAgICAgZGVib3VuY2VUaW1lKDEwMClcbiAgICApO1xuICB9XG5cbiAgaG9va05hdmlnYXRvcigpIHtcbiAgICB0aGlzLm5hdmlnYXRpb25Ob2RlcyQgPSB0aGlzLmluamVjdG9yLmdldCgnYzh5TmF2aWdhdG9yJykucm9vdE5vZGVzJDtcbiAgfVxuXG4gIGdldFRhYnMoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBvbmx5VmlzaWJsZSA9ICh7IHNob3cgfSkgPT4gc2hvdztcbiAgICBjb25zdCB1cGdyYWRlVGFiID0gdGFiID0+ICh7XG4gICAgICAuLi50YWIsXG4gICAgICBsYWJlbDogdGFiLmxhYmVsIHx8IHRhYi5uYW1lLFxuICAgICAgcGF0aDogZGVjb2RlVVJJQ29tcG9uZW50KHRhYi5wYXRoKVxuICAgIH0pO1xuICAgIGNvbnN0IHJvdXRlVGFicyA9IHRoaXMuJHJvdXRlQ2hhbmdlcy5waXBlKFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHtcbiAgICAgICAgY29uc3Qgcm91dGVzID0gdGhpcy5pbmplY3Rvci5nZXQoJ2M4eVRhYnMnKS5yb3V0ZVRhYnM7XG4gICAgICAgIGNvbnN0IHZpc2liaWxpdHlQcm9taXNlID0gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgcm91dGVzLm1hcCgoeyBjaGVja2luZ1Zpc2liaWxpdHkgfSkgPT4gY2hlY2tpbmdWaXNpYmlsaXR5KVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdmlzaWJpbGl0eVByb21pc2UudGhlbigoKSA9PiByb3V0ZXMuZmlsdGVyKG9ubHlWaXNpYmxlKS5tYXAodXBncmFkZVRhYikpO1xuICAgICAgfSksXG4gICAgICBzdGFydFdpdGgoW10pXG4gICAgKTtcbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChyb3V0ZVRhYnMsIHRoaXMuJGxpdmVUYWJzKS5waXBlKFxuICAgICAgbWFwKChbcm91dGUsIGxpdmVdKSA9PiByb3V0ZS5jb25jYXQobGl2ZSkpXG4gICAgKTtcbiAgfVxuXG4gIGdldFF1aWNrTGlua3MoKTogUHJvbWlzZTxEb2NMaW5rW10+IHtcbiAgICBjb25zdCBjOHlRdWlja0xpbmtzID0gdGhpcy5pbmplY3Rvci5nZXQoJ2M4eVF1aWNrTGlua3MnKTtcbiAgICByZXR1cm4gYzh5UXVpY2tMaW5rcy5saXN0KCk7XG4gIH1cblxuICBnZXRBY3Rpb25CYXJJdGVtcygpOiBPYnNlcnZhYmxlPEFjdGlvbkJhckl0ZW0+IHtcbiAgICBjb25zdCBjOHlBY3Rpb25CYXIgPSB0aGlzLmluamVjdG9yLmdldCgnYzh5QWN0aW9uQmFyJyk7XG4gICAgY29uc3QgJHJvb3RTY29wZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KCckcm9vdFNjb3BlJyk7XG4gICAgY29uc3QgZ2V0QWN0aW9uQmFyRWxlbWVudHMgPSAoKSA9PlxuICAgICAgYzh5QWN0aW9uQmFyLmVsZW1lbnRzLm1hcChlbGVtZW50ID0+ICh7XG4gICAgICAgIHByaW9yaXR5OiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYWN0aW9uLWJhci1wcmlvcml0eScpIHx8IDAsXG4gICAgICAgIHRlbXBsYXRlOiBlbGVtZW50LFxuICAgICAgICBwbGFjZW1lbnQ6IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhY3Rpb24tYmFyLXBvc2l0aW9uJykgfHwgJ3JpZ2h0J1xuICAgICAgfSkpO1xuICAgIHJldHVybiB0aGlzLmZyb21OZzFFdmVudCgkcm9vdFNjb3BlLCAnYzh5QWN0aW9uQmFyQ2hhbmdlZCcpLnBpcGUoXG4gICAgICBzdGFydFdpdGgoMSksXG4gICAgICBtYXAoZ2V0QWN0aW9uQmFyRWxlbWVudHMpXG4gICAgKTtcbiAgfVxuXG4gIGdldEJyZWFkY3J1bWJzKCk6IE9ic2VydmFibGU8QnJlYWRjcnVtYltdPiB7XG4gICAgY29uc3QgJGxvY2F0aW9uID0gdGhpcy5pbmplY3Rvci5nZXQoJyRsb2NhdGlvbicpO1xuICAgIGNvbnN0IHBhdGggPSAkbG9jYXRpb24ucGF0aCgpO1xuICAgIGNvbnN0IGM4eUJyZWFkY3J1bWJzID0gdGhpcy5pbmplY3Rvci5nZXQoJ2M4eUJyZWFkY3J1bWJzJyk7XG4gICAgY29uc3QgYnJlYWRjcnVtYnMgPSBjOHlCcmVhZGNydW1icy5nZXQocGF0aCkgfHwge307XG4gICAgY29uc3QgYnJlYWRjcnVtYnNEYXRhID0gYnJlYWRjcnVtYnMuZGF0YSA/IHRoaXMuaW5qZWN0b3IuaW52b2tlKGJyZWFkY3J1bWJzLmRhdGEpIDogb2YoW10pO1xuICAgIHJldHVybiBmcm9tKGJyZWFkY3J1bWJzRGF0YSkucGlwZShcbiAgICAgIG1hcCgodmFsdWU6IGFueVtdKSA9PiB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuY29uY2F0KGM4eUJyZWFkY3J1bWJzLmdldExpdmVCcmVhZGNydW1icygpKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcChcbiAgICAgICAgICBpdGVtcyA9PiAoeyBpdGVtczogaXRlbXMuc2xpY2UoMCwgaXRlbXMubGVuZ3RoIC0gMSkgYXMgQnJlYWRjcnVtYkl0ZW1bXSB9IGFzIEJyZWFkY3J1bWIpXG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBnZXRTZWFyY2goKTogU2VhcmNoW10ge1xuICAgIGNvbnN0IGM4eVNlYXJjaCA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlTZWFyY2gnKTtcbiAgICByZXR1cm4gYzh5U2VhcmNoLmxpc3QoKS5tYXAoaXRlbSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpY29uOiAnc2VhcmNoJyxcbiAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICB0ZXJtOiAnJyxcbiAgICAgICAgb25TZWFyY2goKSB7XG4gICAgICAgICAgaWYgKHRoaXMudGVybSkge1xuICAgICAgICAgICAgYzh5U2VhcmNoLnNlYXJjaCh0aGlzLnRlcm0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBhcyBTZWFyY2g7XG4gICAgfSk7XG4gIH1cblxuICBnZXRBY3Rpb25zKCk6IE9ic2VydmFibGU8QWN0aW9uPiB7XG4gICAgY29uc3QgcmVnaXN0ZXJlZEFjdGlvbnMgPSB0aGlzLmluamVjdG9yLmdldCgnYzh5QWN0aW9ucycpLnJlZ2lzdGVyZWRBY3Rpb25zO1xuICAgIHJldHVybiBvZihcbiAgICAgIHJlZ2lzdGVyZWRBY3Rpb25zXG4gICAgICAgIC5maWx0ZXIoYWN0aW9uID0+ICFhY3Rpb24uaGlkZGVuKVxuICAgICAgICAubWFwKGFjdGlvbiA9PiAoe1xuICAgICAgICAgIC8vIFRoZSBwcmlvcml0eSB3YXMgcmV2ZXJzZWQ6IEFsaWduZWQgaXQgdG8gZGFzaGJvYXJkLCBoaWdoIGZpcnN0LCBsb3cgbGFzdC5cbiAgICAgICAgICBwcmlvcml0eTogKGFjdGlvbi5wcmlvcml0eSB8fCAwKSAqIC0xLFxuICAgICAgICAgIGxhYmVsOiBhY3Rpb24udGV4dCxcbiAgICAgICAgICBpY29uOiBhY3Rpb24uaWNvbixcbiAgICAgICAgICBkaXNhYmxlZDogYWN0aW9uLmRpc2FibGVkLFxuICAgICAgICAgIGFjdGlvbjogKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbmplY3Rvci5pbnZva2UoYWN0aW9uLmFjdGlvbiwgYWN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKVxuICAgICk7XG4gIH1cblxuICBmcm9tTmcxRXZlbnQob2JqLCBldnQpIHtcbiAgICBsZXQgc3RvcExpc3RlbmluZztcbiAgICBmdW5jdGlvbiBhZGQoaGFuZGxlcikge1xuICAgICAgc3RvcExpc3RlbmluZyA9IG9iai4kb24oZXZ0LCBoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21FdmVudFBhdHRlcm4oYWRkLCAoKSA9PiBzdG9wTGlzdGVuaW5nKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBob29rVXNlck1lbnUoKSB7XG4gICAgY29uc3QgdXNlck1lbnVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoJ2M4eVVzZXJNZW51U2VydmljZScpO1xuICAgIGNvbnN0IGM4eUFjY2Vzc0RlbmllZCA9IHRoaXMuaW5qZWN0b3IuZ2V0KCdjOHlBY2Nlc3NEZW5pZWQnKTtcbiAgICB1c2VyTWVudVNlcnZpY2UuYWRkKHtcbiAgICAgIGljb246ICdleGNsYW1hdGlvbi10cmlhbmdsZScsXG4gICAgICBwcmlvcml0eTogMTAsXG4gICAgICBsYWJlbDogZ2V0dGV4dCgnQWNjZXNzIGRlbmllZCByZXF1ZXN0cycpLFxuICAgICAgY2xpY2s6IGM4eUFjY2Vzc0RlbmllZC5zaG93QWNjZXNzRGVuaWVkUmVxdWVzdHNMaXN0XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJyaWRnZVNlcnZpY2VGYWN0b3J5KFxuICBpbmplY3RvcjogYW55LFxuICBhcHBTdGF0ZTogQXBwU3RhdGVTZXJ2aWNlLFxuICBmZXRjaENsaWVudDogRmV0Y2hDbGllbnQsXG4gIHJvdXRlcjogUm91dGVyLFxuICBuZ1pvbmU6IE5nWm9uZSxcbiAgcm91dGVyU2VydmljZTogUm91dGVyU2VydmljZSxcbiAgYWN0aW9uU2VydmljZTogQWN0aW9uU2VydmljZVxuKSB7XG4gIHJldHVybiBuZXcgQnJpZGdlU2VydmljZShpbmplY3RvciwgYXBwU3RhdGUsIGZldGNoQ2xpZW50LCByb3V0ZXIsIG5nWm9uZSwgcm91dGVyU2VydmljZSwgYWN0aW9uU2VydmljZSk7XG59XG5cbmV4cG9ydCBjb25zdCBicmlkZ2VTZXJ2aWNlUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IEJyaWRnZVNlcnZpY2UsXG4gIHVzZUZhY3Rvcnk6IGJyaWRnZVNlcnZpY2VGYWN0b3J5LFxuICBkZXBzOiBbJyRpbmplY3RvcicsIEFwcFN0YXRlU2VydmljZSwgRmV0Y2hDbGllbnQsIFJvdXRlciwgTmdab25lLCBSb3V0ZXJTZXJ2aWNlLCBBY3Rpb25TZXJ2aWNlXVxufTtcbiJdfQ==