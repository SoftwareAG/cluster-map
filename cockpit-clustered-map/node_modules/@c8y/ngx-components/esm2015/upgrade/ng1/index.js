import { NgZone } from '@angular/core';
import { downgradeInjectable } from '@angular/upgrade/static';
import * as angular from 'angular';
import { c8yAlertDecorator } from './alert.decorator';
import { appLogsAutoRefreshComponent, bootstrapComponent, dataGridComponent, impactProviderSettingsComponent, userTotpComponent } from './downgraded.components';
import { alertsService, apiService, appStateService, bridgeService, docsService, headerService, passwordService, serverMessagesService, translateService, userMenuService } from './downgraded.services';
import { gettextCatalogDecorator } from './gettextCatalog.decorator';
import { groupTypesHierarchyNavigatorDecorator } from './groupsHierarchyNavigator.decorator';
import { c8yNg1HttpInterceptor } from './http.interceptor';
import { c8yNavigatorProvider } from './navigator.provider';
import { rootComponent } from './root.component';
import { c8yTitleDecorator } from './title.decorator';
import { c8yViewsProvider } from './views.provider';
const NAME = 'c8y.upgrade';
window.preventNg1Bootstrap = true;
angular
    .module(NAME, [])
    .config($httpProvider => {
    'ngInject';
    const ng1InterceptorIndex = $httpProvider.interceptors.indexOf('c8yLoadingIndicator');
    if (ng1InterceptorIndex > -1) {
        $httpProvider.interceptors.splice(ng1InterceptorIndex, 1);
    }
    $httpProvider.interceptors.push(c8yNg1HttpInterceptor);
})
    .component('c8yUiRoot', rootComponent)
    .directive('c8yBootstrap', bootstrapComponent)
    .factory('c8yBridgeService', bridgeService)
    .factory('c8yAppStateService', appStateService)
    .factory('c8yHeaderService', headerService)
    .factory('c8yUserMenuService', userMenuService)
    .decorator('c8yTitle', c8yTitleDecorator)
    .factory('c8yAlert', alertsService)
    .decorator('c8yAlert', c8yAlertDecorator)
    .decorator('groupTypesHierarchyNavigator', groupTypesHierarchyNavigatorDecorator) // prevents loading the groups
    .factory('c8yApiService', apiService)
    .factory('c8yDocs', docsService)
    .service('c8yPasswordConfirm', passwordService);
angular
    .module('c8y.ui')
    .provider('c8yNavigator', c8yNavigatorProvider)
    .provider('c8yViews', c8yViewsProvider)
    .directive('c8yUserTotpRevoke', userTotpComponent)
    .directive('c8yAppLogsAutoRefresh', appLogsAutoRefreshComponent)
    .directive('c8yImpactProviderSettings', impactProviderSettingsComponent)
    .directive('c8yDataGrid', dataGridComponent)
    .factory('c8yTranslate', translateService)
    .decorator('gettextCatalog', gettextCatalogDecorator)
    .factory('c8yServerMessages', serverMessagesService)
    .factory('ngZone', downgradeInjectable(NgZone));
export const ng1Modules = ['app', NAME];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3VwZ3JhZGUvIiwic291cmNlcyI6WyJuZzEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEtBQUssT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQ0wsMkJBQTJCLEVBQzNCLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIsK0JBQStCLEVBQy9CLGlCQUFpQixFQUNsQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFDTCxhQUFhLEVBQ2IsVUFBVSxFQUNWLGVBQWUsRUFDZixhQUFhLEVBQ2IsV0FBVyxFQUNYLGFBQWEsRUFDYixlQUFlLEVBQ2YscUJBQXFCLEVBQ3JCLGdCQUFnQixFQUNoQixlQUFlLEVBQ2hCLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDckUsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDN0YsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDM0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXBELE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQztBQUMxQixNQUFjLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO0FBRTNDLE9BQU87S0FDSixNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztLQUNoQixNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7SUFDdEIsVUFBVSxDQUFDO0lBRVgsTUFBTSxtQkFBbUIsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3RGLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDNUIsYUFBYSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0Q7SUFDRCxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3pELENBQUMsQ0FBQztLQUNELFNBQVMsQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDO0tBQ3JDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUM7S0FDN0MsT0FBTyxDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQztLQUMxQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsZUFBZSxDQUFDO0tBQzlDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxhQUFhLENBQUM7S0FDMUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGVBQWUsQ0FBQztLQUM5QyxTQUFTLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDO0tBQ3hDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDO0tBQ2xDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUM7S0FDeEMsU0FBUyxDQUFDLDhCQUE4QixFQUFFLHFDQUFxQyxDQUFDLENBQUMsOEJBQThCO0tBQy9HLE9BQU8sQ0FBQyxlQUFlLEVBQUUsVUFBVSxDQUFDO0tBQ3BDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDO0tBQy9CLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUVsRCxPQUFPO0tBQ0osTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUNoQixRQUFRLENBQUMsY0FBYyxFQUFFLG9CQUFvQixDQUFDO0tBQzlDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUM7S0FDdEMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLGlCQUFpQixDQUFDO0tBQ2pELFNBQVMsQ0FBQyx1QkFBdUIsRUFBRSwyQkFBMkIsQ0FBQztLQUMvRCxTQUFTLENBQUMsMkJBQTJCLEVBQUUsK0JBQStCLENBQUM7S0FDdkUsU0FBUyxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQztLQUMzQyxPQUFPLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDO0tBQ3pDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSx1QkFBdUIsQ0FBQztLQUNwRCxPQUFPLENBQUMsbUJBQW1CLEVBQUUscUJBQXFCLENBQUM7S0FDbkQsT0FBTyxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBRWxELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZG93bmdyYWRlSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL3VwZ3JhZGUvc3RhdGljJztcbmltcG9ydCAqIGFzIGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgeyBjOHlBbGVydERlY29yYXRvciB9IGZyb20gJy4vYWxlcnQuZGVjb3JhdG9yJztcbmltcG9ydCB7XG4gIGFwcExvZ3NBdXRvUmVmcmVzaENvbXBvbmVudCxcbiAgYm9vdHN0cmFwQ29tcG9uZW50LFxuICBkYXRhR3JpZENvbXBvbmVudCxcbiAgaW1wYWN0UHJvdmlkZXJTZXR0aW5nc0NvbXBvbmVudCxcbiAgdXNlclRvdHBDb21wb25lbnRcbn0gZnJvbSAnLi9kb3duZ3JhZGVkLmNvbXBvbmVudHMnO1xuaW1wb3J0IHtcbiAgYWxlcnRzU2VydmljZSxcbiAgYXBpU2VydmljZSxcbiAgYXBwU3RhdGVTZXJ2aWNlLFxuICBicmlkZ2VTZXJ2aWNlLFxuICBkb2NzU2VydmljZSxcbiAgaGVhZGVyU2VydmljZSxcbiAgcGFzc3dvcmRTZXJ2aWNlLFxuICBzZXJ2ZXJNZXNzYWdlc1NlcnZpY2UsXG4gIHRyYW5zbGF0ZVNlcnZpY2UsXG4gIHVzZXJNZW51U2VydmljZVxufSBmcm9tICcuL2Rvd25ncmFkZWQuc2VydmljZXMnO1xuaW1wb3J0IHsgZ2V0dGV4dENhdGFsb2dEZWNvcmF0b3IgfSBmcm9tICcuL2dldHRleHRDYXRhbG9nLmRlY29yYXRvcic7XG5pbXBvcnQgeyBncm91cFR5cGVzSGllcmFyY2h5TmF2aWdhdG9yRGVjb3JhdG9yIH0gZnJvbSAnLi9ncm91cHNIaWVyYXJjaHlOYXZpZ2F0b3IuZGVjb3JhdG9yJztcbmltcG9ydCB7IGM4eU5nMUh0dHBJbnRlcmNlcHRvciB9IGZyb20gJy4vaHR0cC5pbnRlcmNlcHRvcic7XG5pbXBvcnQgeyBjOHlOYXZpZ2F0b3JQcm92aWRlciB9IGZyb20gJy4vbmF2aWdhdG9yLnByb3ZpZGVyJztcbmltcG9ydCB7IHJvb3RDb21wb25lbnQgfSBmcm9tICcuL3Jvb3QuY29tcG9uZW50JztcbmltcG9ydCB7IGM4eVRpdGxlRGVjb3JhdG9yIH0gZnJvbSAnLi90aXRsZS5kZWNvcmF0b3InO1xuaW1wb3J0IHsgYzh5Vmlld3NQcm92aWRlciB9IGZyb20gJy4vdmlld3MucHJvdmlkZXInO1xuXG5jb25zdCBOQU1FID0gJ2M4eS51cGdyYWRlJztcbih3aW5kb3cgYXMgYW55KS5wcmV2ZW50TmcxQm9vdHN0cmFwID0gdHJ1ZTtcblxuYW5ndWxhclxuICAubW9kdWxlKE5BTUUsIFtdKVxuICAuY29uZmlnKCRodHRwUHJvdmlkZXIgPT4ge1xuICAgICduZ0luamVjdCc7XG5cbiAgICBjb25zdCBuZzFJbnRlcmNlcHRvckluZGV4ID0gJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMuaW5kZXhPZignYzh5TG9hZGluZ0luZGljYXRvcicpO1xuICAgIGlmIChuZzFJbnRlcmNlcHRvckluZGV4ID4gLTEpIHtcbiAgICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnNwbGljZShuZzFJbnRlcmNlcHRvckluZGV4LCAxKTtcbiAgICB9XG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaChjOHlOZzFIdHRwSW50ZXJjZXB0b3IpO1xuICB9KVxuICAuY29tcG9uZW50KCdjOHlVaVJvb3QnLCByb290Q29tcG9uZW50KVxuICAuZGlyZWN0aXZlKCdjOHlCb290c3RyYXAnLCBib290c3RyYXBDb21wb25lbnQpXG4gIC5mYWN0b3J5KCdjOHlCcmlkZ2VTZXJ2aWNlJywgYnJpZGdlU2VydmljZSlcbiAgLmZhY3RvcnkoJ2M4eUFwcFN0YXRlU2VydmljZScsIGFwcFN0YXRlU2VydmljZSlcbiAgLmZhY3RvcnkoJ2M4eUhlYWRlclNlcnZpY2UnLCBoZWFkZXJTZXJ2aWNlKVxuICAuZmFjdG9yeSgnYzh5VXNlck1lbnVTZXJ2aWNlJywgdXNlck1lbnVTZXJ2aWNlKVxuICAuZGVjb3JhdG9yKCdjOHlUaXRsZScsIGM4eVRpdGxlRGVjb3JhdG9yKVxuICAuZmFjdG9yeSgnYzh5QWxlcnQnLCBhbGVydHNTZXJ2aWNlKVxuICAuZGVjb3JhdG9yKCdjOHlBbGVydCcsIGM4eUFsZXJ0RGVjb3JhdG9yKVxuICAuZGVjb3JhdG9yKCdncm91cFR5cGVzSGllcmFyY2h5TmF2aWdhdG9yJywgZ3JvdXBUeXBlc0hpZXJhcmNoeU5hdmlnYXRvckRlY29yYXRvcikgLy8gcHJldmVudHMgbG9hZGluZyB0aGUgZ3JvdXBzXG4gIC5mYWN0b3J5KCdjOHlBcGlTZXJ2aWNlJywgYXBpU2VydmljZSlcbiAgLmZhY3RvcnkoJ2M4eURvY3MnLCBkb2NzU2VydmljZSlcbiAgLnNlcnZpY2UoJ2M4eVBhc3N3b3JkQ29uZmlybScsIHBhc3N3b3JkU2VydmljZSk7XG5cbmFuZ3VsYXJcbiAgLm1vZHVsZSgnYzh5LnVpJylcbiAgLnByb3ZpZGVyKCdjOHlOYXZpZ2F0b3InLCBjOHlOYXZpZ2F0b3JQcm92aWRlcilcbiAgLnByb3ZpZGVyKCdjOHlWaWV3cycsIGM4eVZpZXdzUHJvdmlkZXIpXG4gIC5kaXJlY3RpdmUoJ2M4eVVzZXJUb3RwUmV2b2tlJywgdXNlclRvdHBDb21wb25lbnQpXG4gIC5kaXJlY3RpdmUoJ2M4eUFwcExvZ3NBdXRvUmVmcmVzaCcsIGFwcExvZ3NBdXRvUmVmcmVzaENvbXBvbmVudClcbiAgLmRpcmVjdGl2ZSgnYzh5SW1wYWN0UHJvdmlkZXJTZXR0aW5ncycsIGltcGFjdFByb3ZpZGVyU2V0dGluZ3NDb21wb25lbnQpXG4gIC5kaXJlY3RpdmUoJ2M4eURhdGFHcmlkJywgZGF0YUdyaWRDb21wb25lbnQpXG4gIC5mYWN0b3J5KCdjOHlUcmFuc2xhdGUnLCB0cmFuc2xhdGVTZXJ2aWNlKVxuICAuZGVjb3JhdG9yKCdnZXR0ZXh0Q2F0YWxvZycsIGdldHRleHRDYXRhbG9nRGVjb3JhdG9yKVxuICAuZmFjdG9yeSgnYzh5U2VydmVyTWVzc2FnZXMnLCBzZXJ2ZXJNZXNzYWdlc1NlcnZpY2UpXG4gIC5mYWN0b3J5KCduZ1pvbmUnLCBkb3duZ3JhZGVJbmplY3RhYmxlKE5nWm9uZSkpO1xuXG5leHBvcnQgY29uc3QgbmcxTW9kdWxlcyA9IFsnYXBwJywgTkFNRV07XG4iXX0=