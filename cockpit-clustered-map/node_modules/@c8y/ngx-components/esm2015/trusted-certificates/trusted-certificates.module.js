import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule, CoreModule, HOOK_NAVIGATOR_NODES } from '@c8y/ngx-components';
import { TrustedCertificatesComponent } from './trusted-certificates.component';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { AddTrustedCertificateComponent } from './add-trusted-certificate.component';
import { ButtonsModule } from 'ngx-bootstrap/buttons';
import { ReactiveFormsModule } from '@angular/forms';
import { TrustedCertificatesNavigationFactory } from './trusted-certificates-navigation.factory';
import { TrustedCertificatesGuard } from './trusted-certificates.guard';
const trustedCertificatesRoutes = [
    {
        path: 'trusted-certificates',
        component: TrustedCertificatesComponent,
        canActivate: [TrustedCertificatesGuard]
    }
];
let TrustedCertificatesModule = class TrustedCertificatesModule {
};
TrustedCertificatesModule = tslib_1.__decorate([
    NgModule({
        declarations: [TrustedCertificatesComponent, AddTrustedCertificateComponent],
        exports: [],
        imports: [
            CoreModule,
            CommonModule,
            RouterModule.forRoot(trustedCertificatesRoutes, { useHash: true }),
            BsDropdownModule.forRoot(),
            TooltipModule,
            ReactiveFormsModule,
            ButtonsModule,
            PopoverModule
        ],
        entryComponents: [TrustedCertificatesComponent, AddTrustedCertificateComponent],
        providers: [
            {
                provide: HOOK_NAVIGATOR_NODES,
                useClass: TrustedCertificatesNavigationFactory,
                multi: true
            },
            TrustedCertificatesGuard
        ]
    })
], TrustedCertificatesModule);
export { TrustedCertificatesModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1c3RlZC1jZXJ0aWZpY2F0ZXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGM4eS9uZ3gtY29tcG9uZW50cy90cnVzdGVkLWNlcnRpZmljYXRlcy8iLCJzb3VyY2VzIjpbInRydXN0ZWQtY2VydGlmaWNhdGVzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQVMsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNqRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUV4RSxNQUFNLHlCQUF5QixHQUFZO0lBQ3pDO1FBQ0UsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixTQUFTLEVBQUUsNEJBQTRCO1FBQ3ZDLFdBQVcsRUFBRSxDQUFDLHdCQUF3QixDQUFDO0tBQ3hDO0NBQ0YsQ0FBQztBQXlCRixJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUF5QjtDQUFHLENBQUE7QUFBNUIseUJBQXlCO0lBdkJyQyxRQUFRLENBQUM7UUFDUixZQUFZLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSw4QkFBOEIsQ0FBQztRQUM1RSxPQUFPLEVBQUUsRUFBRTtRQUNYLE9BQU8sRUFBRTtZQUNQLFVBQVU7WUFDVixZQUFZO1lBQ1osWUFBWSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNsRSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7WUFDMUIsYUFBYTtZQUNiLG1CQUFtQjtZQUNuQixhQUFhO1lBQ2IsYUFBYTtTQUNkO1FBQ0QsZUFBZSxFQUFFLENBQUMsNEJBQTRCLEVBQUUsOEJBQThCLENBQUM7UUFDL0UsU0FBUyxFQUFFO1lBQ1Q7Z0JBQ0UsT0FBTyxFQUFFLG9CQUFvQjtnQkFDN0IsUUFBUSxFQUFFLG9DQUFvQztnQkFDOUMsS0FBSyxFQUFFLElBQUk7YUFDWjtZQUNELHdCQUF3QjtTQUN6QjtLQUNGLENBQUM7R0FDVyx5QkFBeUIsQ0FBRztTQUE1Qix5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGUsIFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUsIENvcmVNb2R1bGUsIEhPT0tfTkFWSUdBVE9SX05PREVTIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBUcnVzdGVkQ2VydGlmaWNhdGVzQ29tcG9uZW50IH0gZnJvbSAnLi90cnVzdGVkLWNlcnRpZmljYXRlcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQnNEcm9wZG93bk1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvZHJvcGRvd24nO1xuaW1wb3J0IHsgUG9wb3Zlck1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvcG9wb3Zlcic7XG5pbXBvcnQgeyBUb29sdGlwTW9kdWxlIH0gZnJvbSAnbmd4LWJvb3RzdHJhcC90b29sdGlwJztcbmltcG9ydCB7IEFkZFRydXN0ZWRDZXJ0aWZpY2F0ZUNvbXBvbmVudCB9IGZyb20gJy4vYWRkLXRydXN0ZWQtY2VydGlmaWNhdGUuY29tcG9uZW50JztcbmltcG9ydCB7IEJ1dHRvbnNNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL2J1dHRvbnMnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFRydXN0ZWRDZXJ0aWZpY2F0ZXNOYXZpZ2F0aW9uRmFjdG9yeSB9IGZyb20gJy4vdHJ1c3RlZC1jZXJ0aWZpY2F0ZXMtbmF2aWdhdGlvbi5mYWN0b3J5JztcbmltcG9ydCB7IFRydXN0ZWRDZXJ0aWZpY2F0ZXNHdWFyZCB9IGZyb20gJy4vdHJ1c3RlZC1jZXJ0aWZpY2F0ZXMuZ3VhcmQnO1xuXG5jb25zdCB0cnVzdGVkQ2VydGlmaWNhdGVzUm91dGVzOiBSb3V0ZVtdID0gW1xuICB7XG4gICAgcGF0aDogJ3RydXN0ZWQtY2VydGlmaWNhdGVzJyxcbiAgICBjb21wb25lbnQ6IFRydXN0ZWRDZXJ0aWZpY2F0ZXNDb21wb25lbnQsXG4gICAgY2FuQWN0aXZhdGU6IFtUcnVzdGVkQ2VydGlmaWNhdGVzR3VhcmRdXG4gIH1cbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1RydXN0ZWRDZXJ0aWZpY2F0ZXNDb21wb25lbnQsIEFkZFRydXN0ZWRDZXJ0aWZpY2F0ZUNvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29yZU1vZHVsZSxcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgUm91dGVyTW9kdWxlLmZvclJvb3QodHJ1c3RlZENlcnRpZmljYXRlc1JvdXRlcywgeyB1c2VIYXNoOiB0cnVlIH0pLFxuICAgIEJzRHJvcGRvd25Nb2R1bGUuZm9yUm9vdCgpLFxuICAgIFRvb2x0aXBNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBCdXR0b25zTW9kdWxlLFxuICAgIFBvcG92ZXJNb2R1bGVcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbVHJ1c3RlZENlcnRpZmljYXRlc0NvbXBvbmVudCwgQWRkVHJ1c3RlZENlcnRpZmljYXRlQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSE9PS19OQVZJR0FUT1JfTk9ERVMsXG4gICAgICB1c2VDbGFzczogVHJ1c3RlZENlcnRpZmljYXRlc05hdmlnYXRpb25GYWN0b3J5LFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIFRydXN0ZWRDZXJ0aWZpY2F0ZXNHdWFyZFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFRydXN0ZWRDZXJ0aWZpY2F0ZXNNb2R1bGUge31cbiJdfQ==