import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { AddressSpaceNode, AddressSpaceService, NodeNavigationData } from './address-space.service';
import { OpcuaService } from './opcuaService';
import { AlertService } from '@c8y/ngx-components';
import { DynamicDataSource } from './dynamic-data-source';
import { NestedTreeControl } from '@angular/cdk/tree';
import { clone } from 'lodash';
let OpcuaAddressSpaceTreeComponent = class OpcuaAddressSpaceTreeComponent {
    constructor(addressSpaceService, opcuaService, alertService) {
        this.addressSpaceService = addressSpaceService;
        this.opcuaService = opcuaService;
        this.alertService = alertService;
        this.focusEmitter = new EventEmitter();
        this.selectedNode = new EventEmitter();
        this.dataSource = null;
        this.loading = false;
        this.getChildren = (node) => (node.expanded ? node.children : []);
        this.hasChild = (_, _nodeData) => this.addressSpaceService.childrenAvailable(_nodeData.references);
    }
    set moId(id) {
        this._moId = id || undefined;
    }
    ngOnInit() {
        this.nodeNavDataSubscription = this.addressSpaceService
            .getNodeNavData$()
            .subscribe(nodeNavData => this.openNode(nodeNavData));
        this.subscriptionRef = this.focusEmitter.subscribe(node => {
            this.focused = this.isFocusedNode(node) ? undefined : node;
        });
    }
    ngOnDestroy() {
        // clean up the address-space-tree
        this.addressSpaceService.resetTreeToRootNode();
        if (this.nodeNavDataSubscription && !this.nodeNavDataSubscription.closed) {
            this.nodeNavDataSubscription.unsubscribe();
        }
        if (this.subscriptionRef && !this.subscriptionRef.closed) {
            this.subscriptionRef.unsubscribe();
        }
    }
    openNode(nodeNavData) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { node, selectedAncestorIds } = nodeNavData;
            let nodeId;
            // We just set the nodeId when the selectedAncestorIds variable an empty array.
            // If selectedAncestorIds contain any id we assume that the tree should be travsersed beginning
            // from the root node.
            if (node && node.nodeId && selectedAncestorIds && selectedAncestorIds.length === 0) {
                nodeId = node.nodeId;
            }
            // Always recreate the tree when routing to a specific nested node,
            // because previous modifications to the tree-structure could cause errors
            // while traversing with 'old' tree-data
            // -----------------
            // setupTree is able to handle nodeId = undefined
            yield this.setupTree(nodeId);
            if (!selectedAncestorIds || selectedAncestorIds.length === 0) {
                return;
            }
            if (nodeNavData && this.dataSource) {
                const clonedAncestors = clone(selectedAncestorIds);
                clonedAncestors.shift();
                const n = yield this.dataSource.toggleNode(this.dataSource.data[0], true);
                this.setChildNodes(n.children, clonedAncestors);
                this.toggleFocusedNode(node);
            }
        });
    }
    setChildNodes(nodes, ids) {
        if (nodes) {
            ids.forEach((id) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const match = nodes.find(n => n.nodeId === id);
                if (match && ids.length > 0) {
                    const idx = ids.findIndex(value => value === id);
                    if (idx >= 0) {
                        ids.splice(idx, 1);
                    }
                    const toggledNode = yield this.dataSource.toggleNode(match, true);
                    this.setChildNodes(toggledNode.children, ids);
                }
            }));
        }
    }
    setupTree(nodeId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.loading = true;
            if (!this._moId || this._moId.length === 0) {
                this._moId = this.opcuaService.getMoId();
            }
            // addressSpaceService.getNode returns either the root node of the server (moId)
            // or if nodeId !== undefined the node with given nodeId
            const res = yield this.addressSpaceService.getNode(this._moId, nodeId);
            if (res) {
                if (res.status !== 200) {
                    const data = res.json ? yield res.json() : undefined;
                    this.alertService.addServerFailure({ data, res });
                    this.dataSource = undefined;
                }
                else {
                    const rootNode = (yield res.json());
                    this.nestedTreeControl = new NestedTreeControl(this.getChildren);
                    this.dataSource = new DynamicDataSource(this.nestedTreeControl, this.addressSpaceService, this._moId);
                    this.dataSource.data = [rootNode];
                }
                this.loading = false;
            }
            else {
                this.loading = false;
            }
        });
    }
    getMoId() {
        if (!this._moId || this._moId.length === 0) {
            return this.opcuaService.getMoId();
        }
        return this._moId;
    }
    getIcon(nodeClassName) {
        return this.addressSpaceService.getIcon(nodeClassName);
    }
    toggleFocusedNode(node) {
        const relativePath = [];
        this.getRelativePath(node, relativePath);
        node.relativePath = relativePath;
        this.selectedNode.emit(node);
        this.focused = this.isFocusedNode(node) ? undefined : node;
    }
    isFocusedNode(node) {
        if (this.focused) {
            return node.nodeId === this.focused.nodeId;
        }
        return false;
    }
    getRelativePath(node, relativePath) {
        if (node.parentNode) {
            relativePath.unshift(node.browseName);
            this.getRelativePath(node.parentNode, relativePath);
        }
    }
};
OpcuaAddressSpaceTreeComponent.ctorParameters = () => [
    { type: AddressSpaceService },
    { type: OpcuaService },
    { type: AlertService }
];
tslib_1.__decorate([
    Input()
], OpcuaAddressSpaceTreeComponent.prototype, "moId", null);
tslib_1.__decorate([
    Input()
], OpcuaAddressSpaceTreeComponent.prototype, "node", void 0);
tslib_1.__decorate([
    Input()
], OpcuaAddressSpaceTreeComponent.prototype, "focusEmitter", void 0);
tslib_1.__decorate([
    Output()
], OpcuaAddressSpaceTreeComponent.prototype, "selectedNode", void 0);
OpcuaAddressSpaceTreeComponent = tslib_1.__decorate([
    Component({
        selector: 'opcua-address-space-tree',
        template: "<div class=\"card-block\" *ngIf=\"dataSource && !loading\">\n  <cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"nestedTreeControl\">\n    <!-- This is the tree node template for leaf nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" (click)=\"toggleFocusedNode(node)\"\n    [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\">\n      <span>\n        <i class=\"right-m-xs\" \n        [c8yIcon]=\"getIcon(node.nodeClassName)\" \n        [ngClass]=\"{'strong':isFocusedNode(node)}\" \n        style=\"cursor: pointer\"></i>\n        {{node.displayName}}\n      </span>\n    </cdk-nested-tree-node>\n    <!-- This is the tree node template for expandable nodes -->\n    <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\">\n      <div class=\"flex-row\">\n        <button cdkTreeNodeToggle class=\"btn-clean text-primary right-m-xs\" [disabled]=\"node.currentlyLoadingChildren\">\n          <i class=\"fa\" [ngClass]=\"{'fa-plus-square': !node.expanded, 'fa-minus-square': node.expanded}\"></i>\n        </button>\n        <i class=\"right-m-xs\" [c8yIcon]=\"getIcon(node.nodeClassName)\" [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\"></i>\n        <span (click)=\"toggleFocusedNode(node)\" [ngClass]=\"{'strong':isFocusedNode(node)}\" style=\"cursor: pointer\"> {{node.displayName}} </span>\n        <span class=\"left-m-xs\" [style.visibility]=\"node.currentlyLoadingChildren ? 'visible': 'hidden'\">\n          <i class=\"fa fa-circle-o-notch fa-spin\"></i>\n        </span>\n      </div>\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </cdk-nested-tree-node>\n  </cdk-tree>\n</div>\n<div style=\"padding: 8px;\" *ngIf=\"loading\">\n  <div class=\"spinner\" style=\"position: relative\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n<div class=\"alert alert-info m-t-16\" *ngIf=\"!dataSource && !loading\" translate>\n  No source data available to fetch address space.\n</div>"
    })
], OpcuaAddressSpaceTreeComponent);
export { OpcuaAddressSpaceTreeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWEtYWRkcmVzcy1zcGFjZS10cmVlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjOHkvbmd4LWNvbXBvbmVudHMvcHJvdG9jb2wtb3BjdWEvIiwic291cmNlcyI6WyJvcGN1YS1hZGRyZXNzLXNwYWNlLXRyZWUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQVUsWUFBWSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxtQkFBbUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLEtBQUssRUFBYSxNQUFNLFFBQVEsQ0FBQztBQVExQyxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUE4QjtJQWdCekMsWUFDVSxtQkFBd0MsRUFDeEMsWUFBMEIsRUFDMUIsWUFBMEI7UUFGMUIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQVozQixpQkFBWSxHQUFtQyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUNuRixpQkFBWSxHQUFtQyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQUU5RixlQUFVLEdBQXNCLElBQUksQ0FBQztRQUVyQyxZQUFPLEdBQVksS0FBSyxDQUFDO1FBVXpCLGdCQUFXLEdBQUcsQ0FBQyxJQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FB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UUFDcEMsd2tFQUF3RDtLQUN6RCxDQUFDO0dBQ1csOEJBQThCLENBZ0sxQztTQWhLWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFkZHJlc3NTcGFjZU5vZGUsIEFkZHJlc3NTcGFjZVNlcnZpY2UsIE5vZGVOYXZpZ2F0aW9uRGF0YSB9IGZyb20gJy4vYWRkcmVzcy1zcGFjZS5zZXJ2aWNlJztcbmltcG9ydCB7IE9wY3VhU2VydmljZSB9IGZyb20gJy4vb3BjdWFTZXJ2aWNlJztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgRHluYW1pY0RhdGFTb3VyY2UgfSBmcm9tICcuL2R5bmFtaWMtZGF0YS1zb3VyY2UnO1xuaW1wb3J0IHsgTmVzdGVkVHJlZUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQgeyBjbG9uZSwgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgcmVsYXRpdmUgfSBmcm9tICdwYXRoJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnb3BjdWEtYWRkcmVzcy1zcGFjZS10cmVlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL29wY3VhLWFkZHJlc3Mtc3BhY2UtdHJlZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgT3BjdWFBZGRyZXNzU3BhY2VUcmVlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKVxuICBzZXQgbW9JZChpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5fbW9JZCA9IGlkIHx8IHVuZGVmaW5lZDtcbiAgfVxuXG4gIEBJbnB1dCgpIG5vZGU7XG4gIEBJbnB1dCgpIGZvY3VzRW1pdHRlcjogRXZlbnRFbWl0dGVyPEFkZHJlc3NTcGFjZU5vZGU+ID0gbmV3IEV2ZW50RW1pdHRlcjxBZGRyZXNzU3BhY2VOb2RlPigpO1xuICBAT3V0cHV0KCkgc2VsZWN0ZWROb2RlOiBFdmVudEVtaXR0ZXI8QWRkcmVzc1NwYWNlTm9kZT4gPSBuZXcgRXZlbnRFbWl0dGVyPEFkZHJlc3NTcGFjZU5vZGU+KCk7XG4gIG5lc3RlZFRyZWVDb250cm9sOiBOZXN0ZWRUcmVlQ29udHJvbDxBZGRyZXNzU3BhY2VOb2RlPjtcbiAgZGF0YVNvdXJjZTogRHluYW1pY0RhdGFTb3VyY2UgPSBudWxsO1xuICBmb2N1c2VkOiBBZGRyZXNzU3BhY2VOb2RlO1xuICBsb2FkaW5nOiBib29sZWFuID0gZmFsc2U7XG4gIHN1YnNjcmlwdGlvblJlZjogU3Vic2NyaXB0aW9uO1xuICBub2RlTmF2RGF0YVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIF9tb0lkOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWRkcmVzc1NwYWNlU2VydmljZTogQWRkcmVzc1NwYWNlU2VydmljZSxcbiAgICBwcml2YXRlIG9wY3VhU2VydmljZTogT3BjdWFTZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2VcbiAgKSB7fVxuXG4gIGdldENoaWxkcmVuID0gKG5vZGU6IEFkZHJlc3NTcGFjZU5vZGUpID0+IChub2RlLmV4cGFuZGVkID8gbm9kZS5jaGlsZHJlbiA6IFtdKTtcbiAgaGFzQ2hpbGQgPSAoXzogbnVtYmVyLCBfbm9kZURhdGE6IEFkZHJlc3NTcGFjZU5vZGUpID0+XG4gICAgdGhpcy5hZGRyZXNzU3BhY2VTZXJ2aWNlLmNoaWxkcmVuQXZhaWxhYmxlKF9ub2RlRGF0YS5yZWZlcmVuY2VzKVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMubm9kZU5hdkRhdGFTdWJzY3JpcHRpb24gPSB0aGlzLmFkZHJlc3NTcGFjZVNlcnZpY2VcbiAgICAgIC5nZXROb2RlTmF2RGF0YSQoKVxuICAgICAgLnN1YnNjcmliZShub2RlTmF2RGF0YSA9PiB0aGlzLm9wZW5Ob2RlKG5vZGVOYXZEYXRhKSk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25SZWYgPSB0aGlzLmZvY3VzRW1pdHRlci5zdWJzY3JpYmUobm9kZSA9PiB7XG4gICAgICB0aGlzLmZvY3VzZWQgPSB0aGlzLmlzRm9jdXNlZE5vZGUobm9kZSkgPyB1bmRlZmluZWQgOiBub2RlO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgLy8gY2xlYW4gdXAgdGhlIGFkZHJlc3Mtc3BhY2UtdHJlZVxuICAgIHRoaXMuYWRkcmVzc1NwYWNlU2VydmljZS5yZXNldFRyZWVUb1Jvb3ROb2RlKCk7XG5cbiAgICBpZiAodGhpcy5ub2RlTmF2RGF0YVN1YnNjcmlwdGlvbiAmJiAhdGhpcy5ub2RlTmF2RGF0YVN1YnNjcmlwdGlvbi5jbG9zZWQpIHtcbiAgICAgIHRoaXMubm9kZU5hdkRhdGFTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25SZWYgJiYgIXRoaXMuc3Vic2NyaXB0aW9uUmVmLmNsb3NlZCkge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25SZWYudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBvcGVuTm9kZShub2RlTmF2RGF0YTogTm9kZU5hdmlnYXRpb25EYXRhKSB7XG4gICAgY29uc3QgeyBub2RlLCBzZWxlY3RlZEFuY2VzdG9ySWRzIH0gPSBub2RlTmF2RGF0YTtcbiAgICBsZXQgbm9kZUlkO1xuXG4gICAgLy8gV2UganVzdCBzZXQgdGhlIG5vZGVJZCB3aGVuIHRoZSBzZWxlY3RlZEFuY2VzdG9ySWRzIHZhcmlhYmxlIGFuIGVtcHR5IGFycmF5LlxuICAgIC8vIElmIHNlbGVjdGVkQW5jZXN0b3JJZHMgY29udGFpbiBhbnkgaWQgd2UgYXNzdW1lIHRoYXQgdGhlIHRyZWUgc2hvdWxkIGJlIHRyYXZzZXJzZWQgYmVnaW5uaW5nXG4gICAgLy8gZnJvbSB0aGUgcm9vdCBub2RlLlxuICAgIGlmIChub2RlICYmIG5vZGUubm9kZUlkICYmIHNlbGVjdGVkQW5jZXN0b3JJZHMgJiYgc2VsZWN0ZWRBbmNlc3Rvcklkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIG5vZGVJZCA9IG5vZGUubm9kZUlkO1xuICAgIH1cbiAgICAvLyBBbHdheXMgcmVjcmVhdGUgdGhlIHRyZWUgd2hlbiByb3V0aW5nIHRvIGEgc3BlY2lmaWMgbmVzdGVkIG5vZGUsXG4gICAgLy8gYmVjYXVzZSBwcmV2aW91cyBtb2RpZmljYXRpb25zIHRvIHRoZSB0cmVlLXN0cnVjdHVyZSBjb3VsZCBjYXVzZSBlcnJvcnNcbiAgICAvLyB3aGlsZSB0cmF2ZXJzaW5nIHdpdGggJ29sZCcgdHJlZS1kYXRhXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBzZXR1cFRyZWUgaXMgYWJsZSB0byBoYW5kbGUgbm9kZUlkID0gdW5kZWZpbmVkXG4gICAgYXdhaXQgdGhpcy5zZXR1cFRyZWUobm9kZUlkKTtcblxuICAgIGlmICghc2VsZWN0ZWRBbmNlc3RvcklkcyB8fCBzZWxlY3RlZEFuY2VzdG9ySWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChub2RlTmF2RGF0YSAmJiB0aGlzLmRhdGFTb3VyY2UpIHtcbiAgICAgIGNvbnN0IGNsb25lZEFuY2VzdG9ycyA9IGNsb25lKHNlbGVjdGVkQW5jZXN0b3JJZHMpO1xuICAgICAgY2xvbmVkQW5jZXN0b3JzLnNoaWZ0KCk7XG5cbiAgICAgIGNvbnN0IG4gPSBhd2FpdCB0aGlzLmRhdGFTb3VyY2UudG9nZ2xlTm9kZSh0aGlzLmRhdGFTb3VyY2UuZGF0YVswXSwgdHJ1ZSk7XG4gICAgICB0aGlzLnNldENoaWxkTm9kZXMobi5jaGlsZHJlbiwgY2xvbmVkQW5jZXN0b3JzKTtcblxuICAgICAgdGhpcy50b2dnbGVGb2N1c2VkTm9kZShub2RlKTtcbiAgICB9XG4gIH1cblxuICBzZXRDaGlsZE5vZGVzKG5vZGVzOiBBZGRyZXNzU3BhY2VOb2RlW10sIGlkczogc3RyaW5nW10pIHtcbiAgICBpZiAobm9kZXMpIHtcbiAgICAgIGlkcy5mb3JFYWNoKGFzeW5jIGlkID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBub2Rlcy5maW5kKG4gPT4gbi5ub2RlSWQgPT09IGlkKTtcbiAgICAgICAgaWYgKG1hdGNoICYmIGlkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgaWR4ID0gaWRzLmZpbmRJbmRleCh2YWx1ZSA9PiB2YWx1ZSA9PT0gaWQpO1xuICAgICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgaWRzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB0b2dnbGVkTm9kZSA9IGF3YWl0IHRoaXMuZGF0YVNvdXJjZS50b2dnbGVOb2RlKG1hdGNoLCB0cnVlKTtcbiAgICAgICAgICB0aGlzLnNldENoaWxkTm9kZXModG9nZ2xlZE5vZGUuY2hpbGRyZW4sIGlkcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNldHVwVHJlZShub2RlSWQ/OiBzdHJpbmcpIHtcbiAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgaWYgKCF0aGlzLl9tb0lkIHx8IHRoaXMuX21vSWQubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLl9tb0lkID0gdGhpcy5vcGN1YVNlcnZpY2UuZ2V0TW9JZCgpO1xuICAgIH1cblxuICAgIC8vIGFkZHJlc3NTcGFjZVNlcnZpY2UuZ2V0Tm9kZSByZXR1cm5zIGVpdGhlciB0aGUgcm9vdCBub2RlIG9mIHRoZSBzZXJ2ZXIgKG1vSWQpXG4gICAgLy8gb3IgaWYgbm9kZUlkICE9PSB1bmRlZmluZWQgdGhlIG5vZGUgd2l0aCBnaXZlbiBub2RlSWRcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmFkZHJlc3NTcGFjZVNlcnZpY2UuZ2V0Tm9kZSh0aGlzLl9tb0lkLCBub2RlSWQpO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHJlcy5qc29uID8gYXdhaXQgcmVzLmpzb24oKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuYWRkU2VydmVyRmFpbHVyZSh7IGRhdGEsIHJlcyB9KTtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgcm9vdE5vZGUgPSAoYXdhaXQgcmVzLmpzb24oKSkgYXMgQWRkcmVzc1NwYWNlTm9kZTtcbiAgICAgICAgdGhpcy5uZXN0ZWRUcmVlQ29udHJvbCA9IG5ldyBOZXN0ZWRUcmVlQ29udHJvbDxBZGRyZXNzU3BhY2VOb2RlPih0aGlzLmdldENoaWxkcmVuKTtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlID0gbmV3IER5bmFtaWNEYXRhU291cmNlKFxuICAgICAgICAgIHRoaXMubmVzdGVkVHJlZUNvbnRyb2wsXG4gICAgICAgICAgdGhpcy5hZGRyZXNzU3BhY2VTZXJ2aWNlLFxuICAgICAgICAgIHRoaXMuX21vSWRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlLmRhdGEgPSBbcm9vdE5vZGVdO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGdldE1vSWQoKSB7XG4gICAgaWYgKCF0aGlzLl9tb0lkIHx8IHRoaXMuX21vSWQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcGN1YVNlcnZpY2UuZ2V0TW9JZCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbW9JZDtcbiAgfVxuXG4gIGdldEljb24obm9kZUNsYXNzTmFtZSkge1xuICAgIHJldHVybiB0aGlzLmFkZHJlc3NTcGFjZVNlcnZpY2UuZ2V0SWNvbihub2RlQ2xhc3NOYW1lKTtcbiAgfVxuXG4gIHRvZ2dsZUZvY3VzZWROb2RlKG5vZGUpIHtcbiAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBbXTtcbiAgICB0aGlzLmdldFJlbGF0aXZlUGF0aChub2RlLCByZWxhdGl2ZVBhdGgpO1xuICAgIG5vZGUucmVsYXRpdmVQYXRoID0gcmVsYXRpdmVQYXRoO1xuXG4gICAgdGhpcy5zZWxlY3RlZE5vZGUuZW1pdChub2RlKTtcbiAgICB0aGlzLmZvY3VzZWQgPSB0aGlzLmlzRm9jdXNlZE5vZGUobm9kZSkgPyB1bmRlZmluZWQgOiBub2RlO1xuICB9XG5cbiAgaXNGb2N1c2VkTm9kZShub2RlOiBBZGRyZXNzU3BhY2VOb2RlKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNlZCkge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZUlkID09PSB0aGlzLmZvY3VzZWQubm9kZUlkO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIGdldFJlbGF0aXZlUGF0aChub2RlOiBBZGRyZXNzU3BhY2VOb2RlLCByZWxhdGl2ZVBhdGg6IHN0cmluZ1tdKSB7XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgcmVsYXRpdmVQYXRoLnVuc2hpZnQobm9kZS5icm93c2VOYW1lKTtcbiAgICAgIHRoaXMuZ2V0UmVsYXRpdmVQYXRoKG5vZGUucGFyZW50Tm9kZSwgcmVsYXRpdmVQYXRoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==