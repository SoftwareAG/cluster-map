import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { IManagedObject, InventoryService } from '@c8y/client';
import { gettext } from '@c8y/ngx-components';
let OpcuaAutoApplySettingsComponent = class OpcuaAutoApplySettingsComponent {
    constructor(inventoryService) {
        this.inventoryService = inventoryService;
        this.opcuaServers = [];
        this.selected = [];
        this.constraints = {
            browsePathMatchesRegex: '',
            matchesNodeIds: [],
            serverObjectHasFragment: '',
            matchesServerIds: []
        };
        this.placeholderSelectServerIds = gettext('Select server IDs from list');
    }
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.inventoryService.list({
                pageSize: 1000,
                withTotalPages: true,
                type: 'c8y_OpcuaServer'
            });
            this.opcuaServers = data;
            this.selected = [];
            const { matchesServerIds } = this.constraints;
            data.forEach(server => {
                if (matchesServerIds &&
                    matchesServerIds.length > 0 &&
                    matchesServerIds.find(itemId => itemId === server.id)) {
                    this.selected.push(server);
                }
            });
        });
    }
    set model(model) {
        if (model && model.applyConstraints) {
            this.constraints = model.applyConstraints;
        }
        this._model = model;
    }
    get model() {
        return this._model;
    }
    serverIdsSelected(items) {
        if (this.constraints) {
            this.constraints.matchesServerIds = items.map((item) => item.id);
        }
        this.selected = items;
    }
    onChangeNodeId(event) {
        if (event.target.checked) {
            this.showRootNodes = true;
            this.add();
        }
        else {
            this.showRootNodes = false;
            this.constraints.matchesNodeIds = [];
        }
    }
    add() {
        this.constraints.matchesNodeIds.push('');
    }
    remove(index) {
        this.constraints.matchesNodeIds.splice(index, 1);
    }
    trackByFn(index, item) {
        return index;
    }
};
OpcuaAutoApplySettingsComponent.ctorParameters = () => [
    { type: InventoryService }
];
tslib_1.__decorate([
    Input()
], OpcuaAutoApplySettingsComponent.prototype, "model", null);
OpcuaAutoApplySettingsComponent = tslib_1.__decorate([
    Component({
        selector: 'opcua-auto-apply',
        template: "<div class=\"row\">\n  <div class=\"col-md-4\">\n    <p translate>\n      Specifying auto-apply constraints allows you to limit the scope where the device types are\n      applied, for example by specifying a set of possible servers or node IDs.\n    </p>\n    <p translate>\n      If no constraints are set, device types are applied at any fitting location on the OPC UA\n      server.\n    </p>\n  </div>\n\n  <div class=\"col-md-6\">\n    <ul class=\"list-group\" style=\"box-shadow: none;\">\n      <!-- Limit device type to a set of servers -->\n      <li class=\"list-group-item\">\n        <label class=\"c8y-checkbox\">\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.matchesServerIds.length > 0\"\n            (change)=\"$event.target.checked ? (showServerIds = true) : (showServerIds = false)\"\n          />\n          <span></span>\n          <strong class=\"m-l-8\" translate>Limit device type to a set of servers</strong>\n        </label>\n        <div\n          class=\"collapse\"\n          [collapse]=\"!showServerIds && constraints.matchesServerIds.length < 1\"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <c8y-select\n              [items]=\"opcuaServers\"\n              [selected]=\"selected\"\n              [placeholder]=\"placeholderSelectServerIds\"\n              (onChange)=\"serverIdsSelected($event)\"\n            >\n            </c8y-select>\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type scope in the address space -->\n      <li class=\"list-group-item\">\n        <label class=\"c8y-checkbox\">\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.browsePathMatchesRegex.length > 0\"\n            (change)=\"$event.target.checked ? (showBrowsePath = true) : (showBrowsePath = false)\"\n          />\n          <span></span>\n          <strong class=\"m-l-8\" translate>Limit device type scope in the address space</strong>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"!showBrowsePath && constraints.browsePathMatchesRegex.length < 1\"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <input\n              name=\"browsePath\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} /objects/devices/.*\"\n              [(ngModel)]=\"constraints.browsePathMatchesRegex\"\n              ngDefaultControl\n            />\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type to servers with a certain fragment-->\n      <li class=\"list-group-item\">\n        <label class=\"c8y-checkbox\">\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.serverObjectHasFragment.length > 0\"\n            (change)=\"\n              $event.target.checked ? (showServerFragment = true) : (showServerFragment = false)\n            \"\n          />\n          <span></span>\n          <strong class=\"m-l-8\" translate\n            >Limit device type to servers with a certain fragment</strong\n          >\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"!showServerFragment && constraints.serverObjectHasFragment.length < 1\"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <input\n              name=\"serverFragment\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} c8y_SomeServerMarker\"\n              [(ngModel)]=\"constraints.serverObjectHasFragment\"\n              ngDefaultControl\n            />\n          </c8y-form-group>\n        </div>\n      </li>\n      <!-- Limit device type to a specific root node ID -->\n      <li class=\"list-group-item\">\n        <label class=\"c8y-checkbox\">\n          <input\n            type=\"checkbox\"\n            [checked]=\"constraints.matchesNodeIds.length > 0\"\n            (change)=\"onChangeNodeId($event)\"\n          />\n          <span></span>\n          <strong class=\"m-l-8\" translate>Limit device type to specific root nodes ID</strong>\n        </label>\n        <div\n          class=\"collapse\"\n          [isAnimated]=\"true\"\n          [collapse]=\"!showRootNodes && constraints.matchesNodeIds.length < 1\"\n        >\n          <c8y-form-group class=\"m-t-8 m-b-8\">\n            <ul c8yInputGroupListContainer class=\"list-unstyled\">\n              <li\n                class=\"m-b-8\"\n                *ngFor=\"let item of constraints.matchesNodeIds; let i = index; trackBy: trackByFn\"\n              >\n                <c8y-input-group-list [index]=\"i\" (onAdd)=\"add()\" (onRemove)=\"remove($event)\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"{{ 'e.g.' | translate }} nodeId\"\n                    [(ngModel)]=\"constraints.matchesNodeIds[i]\"\n                    [required]=\"true\"\n                  />\n                </c8y-input-group-list>\n              </li>\n            </ul>\n          </c8y-form-group>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n"
    })
], OpcuaAutoApplySettingsComponent);
export { OpcuaAutoApplySettingsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BjdWEtYXV0by1hcHBseS1zZXR0aW5ncy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYzh5L25neC1jb21wb25lbnRzL3Byb3RvY29sLW9wY3VhLyIsInNvdXJjZXMiOlsib3BjdWEtYXV0by1hcHBseS1zZXR0aW5ncy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBTTlDLElBQWEsK0JBQStCLEdBQTVDLE1BQWEsK0JBQStCO0lBZ0IxQyxZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQWZ0RCxpQkFBWSxHQUFxQixFQUFFLENBQUM7UUFDcEMsYUFBUSxHQUFxQixFQUFFLENBQUM7UUFDaEMsZ0JBQVcsR0FBeUI7WUFDbEMsc0JBQXNCLEVBQUUsRUFBRTtZQUMxQixjQUFjLEVBQUUsRUFBRTtZQUNsQix1QkFBdUIsRUFBRSxFQUFFO1lBQzNCLGdCQUFnQixFQUFFLEVBQUU7U0FDckIsQ0FBQztRQUNGLCtCQUEwQixHQUFXLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0lBT25CLENBQUM7SUFFcEQsUUFBUTs7WUFDWixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO2dCQUNoRCxRQUFRLEVBQUUsSUFBSTtnQkFDZCxjQUFjLEVBQUUsSUFBSTtnQkFDcEIsSUFBSSxFQUFFLGlCQUFpQjthQUN4QixDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUVuQixNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBRTlDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3BCLElBQ0UsZ0JBQWdCO29CQUNoQixnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQztvQkFDM0IsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFDckQ7b0JBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQzVCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7SUFFUSxJQUFJLEtBQUssQ0FBQyxLQUFLO1FBQ3RCLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTtZQUNuQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxnQkFBd0MsQ0FBQztTQUNuRTtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELGlCQUFpQixDQUFDLEtBQXVCO1FBQ3ZDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFvQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDbEY7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQUs7UUFDbEIsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUN4QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUMxQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDWjthQUFNO1lBQ0wsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7WUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQztJQUVELEdBQUc7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO1FBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQVUsRUFBRSxJQUFTO1FBQzdCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGLENBQUE7O1lBaEV1QyxnQkFBZ0I7O0FBeUI3QztJQUFSLEtBQUssRUFBRTs0REFLUDtBQTlDVSwrQkFBK0I7SUFKM0MsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGtCQUFrQjtRQUM1QixrdEtBQXlEO0tBQzFELENBQUM7R0FDVywrQkFBK0IsQ0FnRjNDO1NBaEZZLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0b0FwcGx5Q29uc3RyYWludHMgfSBmcm9tICcuL29wY3VhLXByb3RvY29sLWRldmljZS10eXBlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJTWFuYWdlZE9iamVjdCwgSW52ZW50b3J5U2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnb3BjdWEtYXV0by1hcHBseScsXG4gIHRlbXBsYXRlVXJsOiAnLi9vcGN1YS1hdXRvLWFwcGx5LXNldHRpbmdzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBPcGN1YUF1dG9BcHBseVNldHRpbmdzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgb3BjdWFTZXJ2ZXJzOiBJTWFuYWdlZE9iamVjdFtdID0gW107XG4gIHNlbGVjdGVkOiBJTWFuYWdlZE9iamVjdFtdID0gW107XG4gIGNvbnN0cmFpbnRzOiBBdXRvQXBwbHlDb25zdHJhaW50cyA9IHtcbiAgICBicm93c2VQYXRoTWF0Y2hlc1JlZ2V4OiAnJyxcbiAgICBtYXRjaGVzTm9kZUlkczogW10sXG4gICAgc2VydmVyT2JqZWN0SGFzRnJhZ21lbnQ6ICcnLFxuICAgIG1hdGNoZXNTZXJ2ZXJJZHM6IFtdXG4gIH07XG4gIHBsYWNlaG9sZGVyU2VsZWN0U2VydmVySWRzOiBzdHJpbmcgPSBnZXR0ZXh0KCdTZWxlY3Qgc2VydmVyIElEcyBmcm9tIGxpc3QnKTtcbiAgc2hvd1NlcnZlcklkczogYm9vbGVhbjtcbiAgc2hvd0Jyb3dzZVBhdGg6IGJvb2xlYW47XG4gIHNob3dTZXJ2ZXJGcmFnbWVudDogYm9vbGVhbjtcbiAgc2hvd1Jvb3ROb2RlczogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfbW9kZWw6IElNYW5hZ2VkT2JqZWN0O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZSkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuaW52ZW50b3J5U2VydmljZS5saXN0KHtcbiAgICAgIHBhZ2VTaXplOiAxMDAwLFxuICAgICAgd2l0aFRvdGFsUGFnZXM6IHRydWUsXG4gICAgICB0eXBlOiAnYzh5X09wY3VhU2VydmVyJ1xuICAgIH0pO1xuXG4gICAgdGhpcy5vcGN1YVNlcnZlcnMgPSBkYXRhO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBbXTtcblxuICAgIGNvbnN0IHsgbWF0Y2hlc1NlcnZlcklkcyB9ID0gdGhpcy5jb25zdHJhaW50cztcblxuICAgIGRhdGEuZm9yRWFjaChzZXJ2ZXIgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBtYXRjaGVzU2VydmVySWRzICYmXG4gICAgICAgIG1hdGNoZXNTZXJ2ZXJJZHMubGVuZ3RoID4gMCAmJlxuICAgICAgICBtYXRjaGVzU2VydmVySWRzLmZpbmQoaXRlbUlkID0+IGl0ZW1JZCA9PT0gc2VydmVyLmlkKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQucHVzaChzZXJ2ZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IG1vZGVsKG1vZGVsKSB7XG4gICAgaWYgKG1vZGVsICYmIG1vZGVsLmFwcGx5Q29uc3RyYWludHMpIHtcbiAgICAgIHRoaXMuY29uc3RyYWludHMgPSBtb2RlbC5hcHBseUNvbnN0cmFpbnRzIGFzIEF1dG9BcHBseUNvbnN0cmFpbnRzO1xuICAgIH1cbiAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xuICB9XG5cbiAgZ2V0IG1vZGVsKCkge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgfVxuXG4gIHNlcnZlcklkc1NlbGVjdGVkKGl0ZW1zOiBJTWFuYWdlZE9iamVjdFtdKSB7XG4gICAgaWYgKHRoaXMuY29uc3RyYWludHMpIHtcbiAgICAgIHRoaXMuY29uc3RyYWludHMubWF0Y2hlc1NlcnZlcklkcyA9IGl0ZW1zLm1hcCgoaXRlbTogSU1hbmFnZWRPYmplY3QpID0+IGl0ZW0uaWQpO1xuICAgIH1cbiAgICB0aGlzLnNlbGVjdGVkID0gaXRlbXM7XG4gIH1cblxuICBvbkNoYW5nZU5vZGVJZChldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgdGhpcy5zaG93Um9vdE5vZGVzID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWRkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd1Jvb3ROb2RlcyA9IGZhbHNlO1xuICAgICAgdGhpcy5jb25zdHJhaW50cy5tYXRjaGVzTm9kZUlkcyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIGFkZCgpIHtcbiAgICB0aGlzLmNvbnN0cmFpbnRzLm1hdGNoZXNOb2RlSWRzLnB1c2goJycpO1xuICB9XG5cbiAgcmVtb3ZlKGluZGV4KSB7XG4gICAgdGhpcy5jb25zdHJhaW50cy5tYXRjaGVzTm9kZUlkcy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG5cbiAgdHJhY2tCeUZuKGluZGV4OiBhbnksIGl0ZW06IGFueSkge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxufVxuIl19