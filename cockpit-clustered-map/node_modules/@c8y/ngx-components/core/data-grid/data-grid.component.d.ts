import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, QueryList } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ColumnDirective } from './column/column.directive';
import { CellRendererSpec } from './column/cell-renderer';
import { FilteringFormRendererSpec, FilteringModifier } from './column/filtering-form-renderer';
import { ActionControl, BuiltInActionType, BulkActionControl, Column, DataGrid, DisplayOptions, FilteringActionType, Pagination, Row, ServerSideDataCallback, SortOrder } from './data-grid.model';
import { GridDataSource } from './grid-data-source';
export declare class DataGridComponent implements DataGrid, OnChanges, AfterViewInit {
    private sanitizer;
    private hostRef;
    private cd;
    title: string;
    loadingItemsLabel: string;
    noMatchingItemsLabel: string;
    columns: Column[];
    _columns: any;
    dataSource: GridDataSource;
    rows: Row[];
    _rows: any;
    filteringLabelsParams: {
        filteredItemsCount: number;
        allItemsCount: number;
    };
    pagination: Pagination;
    paginationLabelParams: {
        pageFirstItemIdx: number;
        pageLastItemIdx: number;
        itemsTotal: number;
    };
    readonly possiblePageSizes: number[];
    readonly minPossiblePageSize: number;
    _pagination: any;
    serverSideDataCallback: ServerSideDataCallback;
    _serverSideDataCallback: any;
    selectable: boolean;
    _selectable: any;
    selectionPrimaryKey: string;
    _selectionPrimaryKey: any;
    displayOptions: DisplayOptions;
    _displayOptions: any;
    actionControls: ActionControl[];
    _actionControls: any;
    bulkActionControls: BulkActionControl[];
    _bulkActionControls: any;
    rowMouseOver: EventEmitter<object>;
    rowMouseLeave: EventEmitter<object>;
    rowClick: EventEmitter<object>;
    itemsSelect: EventEmitter<string[]>;
    columnRenderers: QueryList<ColumnDirective>;
    columnNames: any[];
    styles: {
        tableCursor: string;
        gridTemplateColumns: any;
    };
    searchText$: EventEmitter<string>;
    searchText: string;
    filteringApplied: boolean;
    totalPagesCount: number;
    selectedItemIds: string[];
    currentPageSelectionState: {
        allSelected: boolean;
        allDeselected: boolean;
    };
    builtInActionType: {
        Edit: BuiltInActionType;
        Delete: BuiltInActionType;
        Export: BuiltInActionType;
    };
    resizeHandleMouseDown$: EventEmitter<any>;
    resizeHandleContainerMouseMove$: EventEmitter<any>;
    resizeHandleContainerMouseUp$: EventEmitter<any>;
    private headerBeingResized;
    private thRefs;
    private thEls;
    private unsubscribe$;
    constructor(sanitizer: DomSanitizer, hostRef: ElementRef, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    trackByName(index: any, item: any): any;
    resolveCellValue(row: any, path: any): any;
    changeSortOrder(columnName: any): void;
    updateSorting(columnNames: string[], sortOrder: SortOrder): void;
    applyFilter(columnName: any, dropdown: any, filteringModifier: any): void;
    resetFilter(columnName: any, dropdown: any): void;
    clearFilters(): void;
    updateFiltering(columnNames: string[], action: {
        type: FilteringActionType;
        payload?: {
            filteringModifier: FilteringModifier;
        };
    }): void;
    updateFilteringApplied(): void;
    isColumnFilteringApplied(column: Column): boolean;
    updatePagination({ itemsPerPage, page }: {
        itemsPerPage: any;
        page: any;
    }): void;
    reload(): void;
    getCellRendererSpec({ value, row, columnName }: {
        value: any;
        row: any;
        columnName: any;
    }): CellRendererSpec;
    getHeaderCellRendererSpec({ value, columnName }: {
        value: any;
        columnName: any;
    }): CellRendererSpec;
    getFilteringFormRendererSpec({ column, dropdown }: {
        column: any;
        dropdown: any;
    }): FilteringFormRendererSpec;
    setAllItemsSelected(selected: any): void;
    setAllItemsInCurrentPageSelected(selected: any): void;
    setItemsSelected(items: any[], selected: any): void;
    isItemSelected(item: any): boolean;
    onColumnDrop({ previousIndex, currentIndex }: {
        previousIndex: any;
        currentIndex: any;
    }): void;
    updateGridColumnsSize(): void;
    private updateColumns;
    private withColumnDefaults;
    private updateColumnNames;
    private setupResizeHandle;
    private clearMouseHighlights;
    private _getCellRendererSpec;
    private getColumnRenderer;
    private loadData;
    private updateFilteringLabelsParams;
    private updatePaginationLabelParams;
}
