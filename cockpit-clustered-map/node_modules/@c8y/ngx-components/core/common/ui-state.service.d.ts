import { BehaviorSubject } from 'rxjs';
import { StateService } from './state-service.abstract';
import { OptionsService } from './options.service';
import { FetchClient } from '@c8y/client';
import { ApplicationService, IUser, ICurrentTenant } from '@c8y/client';
import { ApiService } from '@c8y/ngx-components/api';
export declare class AppStateService extends StateService {
    private applicationService;
    apiService: ApiService;
    private options;
    private fetchClient;
    state$: BehaviorSubject<any>;
    currentSupportUserName: BehaviorSubject<string | null>;
    currentUser: BehaviorSubject<IUser | null>;
    currentTenant: BehaviorSubject<ICurrentTenant | null>;
    constructor(applicationService: ApplicationService, apiService: ApiService, options: OptionsService, fetchClient: FetchClient);
    assignApplicationKeyToDefaultHeaders(): void;
    /**
     * Returns the current state.
     */
    readonly state: any;
    getLangs(): any;
    /**
     * Returns the correct UI version. In hybrid mode for angular and ngx.
     */
    readonly uiVersion: any;
    /**
     * Loads the app manifest. If no access -> throw an error to verify app access.
     */
    loadManifest(): Promise<void>;
    /**
     * Checks current users application list and matches it against given application name.
     * Returns true if application is in the list.
     * @param name application name
     */
    isApplicationAvailable(name: string): Promise<boolean>;
    /**
     * Sets current user (including support user).
     * @param userInfo Info about current user and support user to be set.
     */
    setUser(userInfo: {
        user: IUser;
        supportUserName: string;
    }): void;
    private getCurrentContextPath;
    private loadDefaultOptions;
    private showIncompatibleVersionsError;
}
