(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('rxjs'), require('rxjs/operators'), require('lodash-es'), require('@c8y/ngx-components/api'), require('@c8y/client'), require('@ngx-translate/core'), require('lodash'), require('@angular/common'), require('@angular/common/http'), require('!file-loader?name=assets/locales/angular/af-NA.js!@angular/common/locales/af-NA.js'), require('!file-loader?name=assets/locales/angular/af.js!@angular/common/locales/af.js'), require('!file-loader?name=assets/locales/angular/agq.js!@angular/common/locales/agq.js'), require('!file-loader?name=assets/locales/angular/ak.js!@angular/common/locales/ak.js'), require('!file-loader?name=assets/locales/angular/am.js!@angular/common/locales/am.js'), require('!file-loader?name=assets/locales/angular/ar-AE.js!@angular/common/locales/ar-AE.js'), require('!file-loader?name=assets/locales/angular/ar-BH.js!@angular/common/locales/ar-BH.js'), require('!file-loader?name=assets/locales/angular/ar-DJ.js!@angular/common/locales/ar-DJ.js'), require('!file-loader?name=assets/locales/angular/ar-DZ.js!@angular/common/locales/ar-DZ.js'), require('!file-loader?name=assets/locales/angular/ar-EG.js!@angular/common/locales/ar-EG.js'), require('!file-loader?name=assets/locales/angular/ar-EH.js!@angular/common/locales/ar-EH.js'), require('!file-loader?name=assets/locales/angular/ar-ER.js!@angular/common/locales/ar-ER.js'), require('!file-loader?name=assets/locales/angular/ar-IL.js!@angular/common/locales/ar-IL.js'), require('!file-loader?name=assets/locales/angular/ar-IQ.js!@angular/common/locales/ar-IQ.js'), require('!file-loader?name=assets/locales/angular/ar-JO.js!@angular/common/locales/ar-JO.js'), require('!file-loader?name=assets/locales/angular/ar-KM.js!@angular/common/locales/ar-KM.js'), require('!file-loader?name=assets/locales/angular/ar-KW.js!@angular/common/locales/ar-KW.js'), require('!file-loader?name=assets/locales/angular/ar-LB.js!@angular/common/locales/ar-LB.js'), require('!file-loader?name=assets/locales/angular/ar-LY.js!@angular/common/locales/ar-LY.js'), require('!file-loader?name=assets/locales/angular/ar-MA.js!@angular/common/locales/ar-MA.js'), require('!file-loader?name=assets/locales/angular/ar-MR.js!@angular/common/locales/ar-MR.js'), require('!file-loader?name=assets/locales/angular/ar-OM.js!@angular/common/locales/ar-OM.js'), require('!file-loader?name=assets/locales/angular/ar-PS.js!@angular/common/locales/ar-PS.js'), require('!file-loader?name=assets/locales/angular/ar-QA.js!@angular/common/locales/ar-QA.js'), require('!file-loader?name=assets/locales/angular/ar-SA.js!@angular/common/locales/ar-SA.js'), require('!file-loader?name=assets/locales/angular/ar-SD.js!@angular/common/locales/ar-SD.js'), require('!file-loader?name=assets/locales/angular/ar-SO.js!@angular/common/locales/ar-SO.js'), require('!file-loader?name=assets/locales/angular/ar-SS.js!@angular/common/locales/ar-SS.js'), require('!file-loader?name=assets/locales/angular/ar-SY.js!@angular/common/locales/ar-SY.js'), require('!file-loader?name=assets/locales/angular/ar-TD.js!@angular/common/locales/ar-TD.js'), require('!file-loader?name=assets/locales/angular/ar-TN.js!@angular/common/locales/ar-TN.js'), require('!file-loader?name=assets/locales/angular/ar-YE.js!@angular/common/locales/ar-YE.js'), require('!file-loader?name=assets/locales/angular/ar.js!@angular/common/locales/ar.js'), require('!file-loader?name=assets/locales/angular/as.js!@angular/common/locales/as.js'), require('!file-loader?name=assets/locales/angular/asa.js!@angular/common/locales/asa.js'), require('!file-loader?name=assets/locales/angular/ast.js!@angular/common/locales/ast.js'), require('!file-loader?name=assets/locales/angular/az-Cyrl.js!@angular/common/locales/az-Cyrl.js'), require('!file-loader?name=assets/locales/angular/az-Latn.js!@angular/common/locales/az-Latn.js'), require('!file-loader?name=assets/locales/angular/az.js!@angular/common/locales/az.js'), require('!file-loader?name=assets/locales/angular/bas.js!@angular/common/locales/bas.js'), require('!file-loader?name=assets/locales/angular/be.js!@angular/common/locales/be.js'), require('!file-loader?name=assets/locales/angular/bem.js!@angular/common/locales/bem.js'), require('!file-loader?name=assets/locales/angular/bez.js!@angular/common/locales/bez.js'), require('!file-loader?name=assets/locales/angular/bg.js!@angular/common/locales/bg.js'), require('!file-loader?name=assets/locales/angular/bm.js!@angular/common/locales/bm.js'), require('!file-loader?name=assets/locales/angular/bn-IN.js!@angular/common/locales/bn-IN.js'), require('!file-loader?name=assets/locales/angular/bn.js!@angular/common/locales/bn.js'), require('!file-loader?name=assets/locales/angular/bo-IN.js!@angular/common/locales/bo-IN.js'), require('!file-loader?name=assets/locales/angular/bo.js!@angular/common/locales/bo.js'), require('!file-loader?name=assets/locales/angular/br.js!@angular/common/locales/br.js'), require('!file-loader?name=assets/locales/angular/brx.js!@angular/common/locales/brx.js'), require('!file-loader?name=assets/locales/angular/bs-Cyrl.js!@angular/common/locales/bs-Cyrl.js'), require('!file-loader?name=assets/locales/angular/bs-Latn.js!@angular/common/locales/bs-Latn.js'), require('!file-loader?name=assets/locales/angular/bs.js!@angular/common/locales/bs.js'), require('!file-loader?name=assets/locales/angular/ca-AD.js!@angular/common/locales/ca-AD.js'), require('!file-loader?name=assets/locales/angular/ca-ES-VALENCIA.js!@angular/common/locales/ca-ES-VALENCIA.js'), require('!file-loader?name=assets/locales/angular/ca-FR.js!@angular/common/locales/ca-FR.js'), require('!file-loader?name=assets/locales/angular/ca-IT.js!@angular/common/locales/ca-IT.js'), require('!file-loader?name=assets/locales/angular/ca.js!@angular/common/locales/ca.js'), require('!file-loader?name=assets/locales/angular/ccp-IN.js!@angular/common/locales/ccp-IN.js'), require('!file-loader?name=assets/locales/angular/ccp.js!@angular/common/locales/ccp.js'), require('!file-loader?name=assets/locales/angular/ce.js!@angular/common/locales/ce.js'), require('!file-loader?name=assets/locales/angular/cgg.js!@angular/common/locales/cgg.js'), require('!file-loader?name=assets/locales/angular/chr.js!@angular/common/locales/chr.js'), require('!file-loader?name=assets/locales/angular/ckb-IR.js!@angular/common/locales/ckb-IR.js'), require('!file-loader?name=assets/locales/angular/ckb.js!@angular/common/locales/ckb.js'), require('!file-loader?name=assets/locales/angular/cs.js!@angular/common/locales/cs.js'), require('!file-loader?name=assets/locales/angular/cu.js!@angular/common/locales/cu.js'), require('!file-loader?name=assets/locales/angular/cy.js!@angular/common/locales/cy.js'), require('!file-loader?name=assets/locales/angular/da-GL.js!@angular/common/locales/da-GL.js'), require('!file-loader?name=assets/locales/angular/da.js!@angular/common/locales/da.js'), require('!file-loader?name=assets/locales/angular/dav.js!@angular/common/locales/dav.js'), require('!file-loader?name=assets/locales/angular/de-AT.js!@angular/common/locales/de-AT.js'), require('!file-loader?name=assets/locales/angular/de-BE.js!@angular/common/locales/de-BE.js'), require('!file-loader?name=assets/locales/angular/de-CH.js!@angular/common/locales/de-CH.js'), require('!file-loader?name=assets/locales/angular/de-IT.js!@angular/common/locales/de-IT.js'), require('!file-loader?name=assets/locales/angular/de-LI.js!@angular/common/locales/de-LI.js'), require('!file-loader?name=assets/locales/angular/de-LU.js!@angular/common/locales/de-LU.js'), require('!file-loader?name=assets/locales/angular/de.js!@angular/common/locales/de.js'), require('!file-loader?name=assets/locales/angular/dje.js!@angular/common/locales/dje.js'), require('!file-loader?name=assets/locales/angular/dsb.js!@angular/common/locales/dsb.js'), require('!file-loader?name=assets/locales/angular/dua.js!@angular/common/locales/dua.js'), require('!file-loader?name=assets/locales/angular/dyo.js!@angular/common/locales/dyo.js'), require('!file-loader?name=assets/locales/angular/dz.js!@angular/common/locales/dz.js'), require('!file-loader?name=assets/locales/angular/ebu.js!@angular/common/locales/ebu.js'), require('!file-loader?name=assets/locales/angular/ee-TG.js!@angular/common/locales/ee-TG.js'), require('!file-loader?name=assets/locales/angular/ee.js!@angular/common/locales/ee.js'), require('!file-loader?name=assets/locales/angular/el-CY.js!@angular/common/locales/el-CY.js'), require('!file-loader?name=assets/locales/angular/el.js!@angular/common/locales/el.js'), require('!file-loader?name=assets/locales/angular/en-001.js!@angular/common/locales/en-001.js'), require('!file-loader?name=assets/locales/angular/en-150.js!@angular/common/locales/en-150.js'), require('!file-loader?name=assets/locales/angular/en-AG.js!@angular/common/locales/en-AG.js'), require('!file-loader?name=assets/locales/angular/en-AI.js!@angular/common/locales/en-AI.js'), require('!file-loader?name=assets/locales/angular/en-AS.js!@angular/common/locales/en-AS.js'), require('!file-loader?name=assets/locales/angular/en-AT.js!@angular/common/locales/en-AT.js'), require('!file-loader?name=assets/locales/angular/en-AU.js!@angular/common/locales/en-AU.js'), require('!file-loader?name=assets/locales/angular/en-BB.js!@angular/common/locales/en-BB.js'), require('!file-loader?name=assets/locales/angular/en-BE.js!@angular/common/locales/en-BE.js'), require('!file-loader?name=assets/locales/angular/en-BI.js!@angular/common/locales/en-BI.js'), require('!file-loader?name=assets/locales/angular/en-BM.js!@angular/common/locales/en-BM.js'), require('!file-loader?name=assets/locales/angular/en-BS.js!@angular/common/locales/en-BS.js'), require('!file-loader?name=assets/locales/angular/en-BW.js!@angular/common/locales/en-BW.js'), require('!file-loader?name=assets/locales/angular/en-BZ.js!@angular/common/locales/en-BZ.js'), require('!file-loader?name=assets/locales/angular/en-CA.js!@angular/common/locales/en-CA.js'), require('!file-loader?name=assets/locales/angular/en-CC.js!@angular/common/locales/en-CC.js'), require('!file-loader?name=assets/locales/angular/en-CH.js!@angular/common/locales/en-CH.js'), require('!file-loader?name=assets/locales/angular/en-CK.js!@angular/common/locales/en-CK.js'), require('!file-loader?name=assets/locales/angular/en-CM.js!@angular/common/locales/en-CM.js'), require('!file-loader?name=assets/locales/angular/en-CX.js!@angular/common/locales/en-CX.js'), require('!file-loader?name=assets/locales/angular/en-CY.js!@angular/common/locales/en-CY.js'), require('!file-loader?name=assets/locales/angular/en-DE.js!@angular/common/locales/en-DE.js'), require('!file-loader?name=assets/locales/angular/en-DG.js!@angular/common/locales/en-DG.js'), require('!file-loader?name=assets/locales/angular/en-DK.js!@angular/common/locales/en-DK.js'), require('!file-loader?name=assets/locales/angular/en-DM.js!@angular/common/locales/en-DM.js'), require('!file-loader?name=assets/locales/angular/en-ER.js!@angular/common/locales/en-ER.js'), require('!file-loader?name=assets/locales/angular/en-FI.js!@angular/common/locales/en-FI.js'), require('!file-loader?name=assets/locales/angular/en-FJ.js!@angular/common/locales/en-FJ.js'), require('!file-loader?name=assets/locales/angular/en-FK.js!@angular/common/locales/en-FK.js'), require('!file-loader?name=assets/locales/angular/en-FM.js!@angular/common/locales/en-FM.js'), require('!file-loader?name=assets/locales/angular/en-GB.js!@angular/common/locales/en-GB.js'), require('!file-loader?name=assets/locales/angular/en-GD.js!@angular/common/locales/en-GD.js'), require('!file-loader?name=assets/locales/angular/en-GG.js!@angular/common/locales/en-GG.js'), require('!file-loader?name=assets/locales/angular/en-GH.js!@angular/common/locales/en-GH.js'), require('!file-loader?name=assets/locales/angular/en-GI.js!@angular/common/locales/en-GI.js'), require('!file-loader?name=assets/locales/angular/en-GM.js!@angular/common/locales/en-GM.js'), require('!file-loader?name=assets/locales/angular/en-GU.js!@angular/common/locales/en-GU.js'), require('!file-loader?name=assets/locales/angular/en-GY.js!@angular/common/locales/en-GY.js'), require('!file-loader?name=assets/locales/angular/en-HK.js!@angular/common/locales/en-HK.js'), require('!file-loader?name=assets/locales/angular/en-IE.js!@angular/common/locales/en-IE.js'), require('!file-loader?name=assets/locales/angular/en-IL.js!@angular/common/locales/en-IL.js'), require('!file-loader?name=assets/locales/angular/en-IM.js!@angular/common/locales/en-IM.js'), require('!file-loader?name=assets/locales/angular/en-IN.js!@angular/common/locales/en-IN.js'), require('!file-loader?name=assets/locales/angular/en-IO.js!@angular/common/locales/en-IO.js'), require('!file-loader?name=assets/locales/angular/en-JE.js!@angular/common/locales/en-JE.js'), require('!file-loader?name=assets/locales/angular/en-JM.js!@angular/common/locales/en-JM.js'), require('!file-loader?name=assets/locales/angular/en-KE.js!@angular/common/locales/en-KE.js'), require('!file-loader?name=assets/locales/angular/en-KI.js!@angular/common/locales/en-KI.js'), require('!file-loader?name=assets/locales/angular/en-KN.js!@angular/common/locales/en-KN.js'), require('!file-loader?name=assets/locales/angular/en-KY.js!@angular/common/locales/en-KY.js'), require('!file-loader?name=assets/locales/angular/en-LC.js!@angular/common/locales/en-LC.js'), require('!file-loader?name=assets/locales/angular/en-LR.js!@angular/common/locales/en-LR.js'), require('!file-loader?name=assets/locales/angular/en-LS.js!@angular/common/locales/en-LS.js'), require('!file-loader?name=assets/locales/angular/en-MG.js!@angular/common/locales/en-MG.js'), require('!file-loader?name=assets/locales/angular/en-MH.js!@angular/common/locales/en-MH.js'), require('!file-loader?name=assets/locales/angular/en-MO.js!@angular/common/locales/en-MO.js'), require('!file-loader?name=assets/locales/angular/en-MP.js!@angular/common/locales/en-MP.js'), require('!file-loader?name=assets/locales/angular/en-MS.js!@angular/common/locales/en-MS.js'), require('!file-loader?name=assets/locales/angular/en-MT.js!@angular/common/locales/en-MT.js'), require('!file-loader?name=assets/locales/angular/en-MU.js!@angular/common/locales/en-MU.js'), require('!file-loader?name=assets/locales/angular/en-MW.js!@angular/common/locales/en-MW.js'), require('!file-loader?name=assets/locales/angular/en-MY.js!@angular/common/locales/en-MY.js'), require('!file-loader?name=assets/locales/angular/en-NA.js!@angular/common/locales/en-NA.js'), require('!file-loader?name=assets/locales/angular/en-NF.js!@angular/common/locales/en-NF.js'), require('!file-loader?name=assets/locales/angular/en-NG.js!@angular/common/locales/en-NG.js'), require('!file-loader?name=assets/locales/angular/en-NL.js!@angular/common/locales/en-NL.js'), require('!file-loader?name=assets/locales/angular/en-NR.js!@angular/common/locales/en-NR.js'), require('!file-loader?name=assets/locales/angular/en-NU.js!@angular/common/locales/en-NU.js'), require('!file-loader?name=assets/locales/angular/en-NZ.js!@angular/common/locales/en-NZ.js'), require('!file-loader?name=assets/locales/angular/en-PG.js!@angular/common/locales/en-PG.js'), require('!file-loader?name=assets/locales/angular/en-PH.js!@angular/common/locales/en-PH.js'), require('!file-loader?name=assets/locales/angular/en-PK.js!@angular/common/locales/en-PK.js'), require('!file-loader?name=assets/locales/angular/en-PN.js!@angular/common/locales/en-PN.js'), require('!file-loader?name=assets/locales/angular/en-PR.js!@angular/common/locales/en-PR.js'), require('!file-loader?name=assets/locales/angular/en-PW.js!@angular/common/locales/en-PW.js'), require('!file-loader?name=assets/locales/angular/en-RW.js!@angular/common/locales/en-RW.js'), require('!file-loader?name=assets/locales/angular/en-SB.js!@angular/common/locales/en-SB.js'), require('!file-loader?name=assets/locales/angular/en-SC.js!@angular/common/locales/en-SC.js'), require('!file-loader?name=assets/locales/angular/en-SD.js!@angular/common/locales/en-SD.js'), require('!file-loader?name=assets/locales/angular/en-SE.js!@angular/common/locales/en-SE.js'), require('!file-loader?name=assets/locales/angular/en-SG.js!@angular/common/locales/en-SG.js'), require('!file-loader?name=assets/locales/angular/en-SH.js!@angular/common/locales/en-SH.js'), require('!file-loader?name=assets/locales/angular/en-SI.js!@angular/common/locales/en-SI.js'), require('!file-loader?name=assets/locales/angular/en-SL.js!@angular/common/locales/en-SL.js'), require('!file-loader?name=assets/locales/angular/en-SS.js!@angular/common/locales/en-SS.js'), require('!file-loader?name=assets/locales/angular/en-SX.js!@angular/common/locales/en-SX.js'), require('!file-loader?name=assets/locales/angular/en-SZ.js!@angular/common/locales/en-SZ.js'), require('!file-loader?name=assets/locales/angular/en-TC.js!@angular/common/locales/en-TC.js'), require('!file-loader?name=assets/locales/angular/en-TK.js!@angular/common/locales/en-TK.js'), require('!file-loader?name=assets/locales/angular/en-TO.js!@angular/common/locales/en-TO.js'), require('!file-loader?name=assets/locales/angular/en-TT.js!@angular/common/locales/en-TT.js'), require('!file-loader?name=assets/locales/angular/en-TV.js!@angular/common/locales/en-TV.js'), require('!file-loader?name=assets/locales/angular/en-TZ.js!@angular/common/locales/en-TZ.js'), require('!file-loader?name=assets/locales/angular/en-UG.js!@angular/common/locales/en-UG.js'), require('!file-loader?name=assets/locales/angular/en-UM.js!@angular/common/locales/en-UM.js'), require('!file-loader?name=assets/locales/angular/en-US-POSIX.js!@angular/common/locales/en-US-POSIX.js'), require('!file-loader?name=assets/locales/angular/en-VC.js!@angular/common/locales/en-VC.js'), require('!file-loader?name=assets/locales/angular/en-VG.js!@angular/common/locales/en-VG.js'), require('!file-loader?name=assets/locales/angular/en-VI.js!@angular/common/locales/en-VI.js'), require('!file-loader?name=assets/locales/angular/en-VU.js!@angular/common/locales/en-VU.js'), require('!file-loader?name=assets/locales/angular/en-WS.js!@angular/common/locales/en-WS.js'), require('!file-loader?name=assets/locales/angular/en-ZA.js!@angular/common/locales/en-ZA.js'), require('!file-loader?name=assets/locales/angular/en-ZM.js!@angular/common/locales/en-ZM.js'), require('!file-loader?name=assets/locales/angular/en-ZW.js!@angular/common/locales/en-ZW.js'), require('!file-loader?name=assets/locales/angular/en.js!@angular/common/locales/en.js'), require('!file-loader?name=assets/locales/angular/eo.js!@angular/common/locales/eo.js'), require('!file-loader?name=assets/locales/angular/es-419.js!@angular/common/locales/es-419.js'), require('!file-loader?name=assets/locales/angular/es-AR.js!@angular/common/locales/es-AR.js'), require('!file-loader?name=assets/locales/angular/es-BO.js!@angular/common/locales/es-BO.js'), require('!file-loader?name=assets/locales/angular/es-BR.js!@angular/common/locales/es-BR.js'), require('!file-loader?name=assets/locales/angular/es-BZ.js!@angular/common/locales/es-BZ.js'), require('!file-loader?name=assets/locales/angular/es-CL.js!@angular/common/locales/es-CL.js'), require('!file-loader?name=assets/locales/angular/es-CO.js!@angular/common/locales/es-CO.js'), require('!file-loader?name=assets/locales/angular/es-CR.js!@angular/common/locales/es-CR.js'), require('!file-loader?name=assets/locales/angular/es-CU.js!@angular/common/locales/es-CU.js'), require('!file-loader?name=assets/locales/angular/es-DO.js!@angular/common/locales/es-DO.js'), require('!file-loader?name=assets/locales/angular/es-EA.js!@angular/common/locales/es-EA.js'), require('!file-loader?name=assets/locales/angular/es-EC.js!@angular/common/locales/es-EC.js'), require('!file-loader?name=assets/locales/angular/es-GQ.js!@angular/common/locales/es-GQ.js'), require('!file-loader?name=assets/locales/angular/es-GT.js!@angular/common/locales/es-GT.js'), require('!file-loader?name=assets/locales/angular/es-HN.js!@angular/common/locales/es-HN.js'), require('!file-loader?name=assets/locales/angular/es-IC.js!@angular/common/locales/es-IC.js'), require('!file-loader?name=assets/locales/angular/es-MX.js!@angular/common/locales/es-MX.js'), require('!file-loader?name=assets/locales/angular/es-NI.js!@angular/common/locales/es-NI.js'), require('!file-loader?name=assets/locales/angular/es-PA.js!@angular/common/locales/es-PA.js'), require('!file-loader?name=assets/locales/angular/es-PE.js!@angular/common/locales/es-PE.js'), require('!file-loader?name=assets/locales/angular/es-PH.js!@angular/common/locales/es-PH.js'), require('!file-loader?name=assets/locales/angular/es-PR.js!@angular/common/locales/es-PR.js'), require('!file-loader?name=assets/locales/angular/es-PY.js!@angular/common/locales/es-PY.js'), require('!file-loader?name=assets/locales/angular/es-SV.js!@angular/common/locales/es-SV.js'), require('!file-loader?name=assets/locales/angular/es-US.js!@angular/common/locales/es-US.js'), require('!file-loader?name=assets/locales/angular/es-UY.js!@angular/common/locales/es-UY.js'), require('!file-loader?name=assets/locales/angular/es-VE.js!@angular/common/locales/es-VE.js'), require('!file-loader?name=assets/locales/angular/es.js!@angular/common/locales/es.js'), require('!file-loader?name=assets/locales/angular/et.js!@angular/common/locales/et.js'), require('!file-loader?name=assets/locales/angular/eu.js!@angular/common/locales/eu.js'), require('!file-loader?name=assets/locales/angular/ewo.js!@angular/common/locales/ewo.js'), require('!file-loader?name=assets/locales/angular/fa-AF.js!@angular/common/locales/fa-AF.js'), require('!file-loader?name=assets/locales/angular/fa.js!@angular/common/locales/fa.js'), require('!file-loader?name=assets/locales/angular/ff-CM.js!@angular/common/locales/ff-CM.js'), require('!file-loader?name=assets/locales/angular/ff-GN.js!@angular/common/locales/ff-GN.js'), require('!file-loader?name=assets/locales/angular/ff-MR.js!@angular/common/locales/ff-MR.js'), require('!file-loader?name=assets/locales/angular/ff.js!@angular/common/locales/ff.js'), require('!file-loader?name=assets/locales/angular/fi.js!@angular/common/locales/fi.js'), require('!file-loader?name=assets/locales/angular/fil.js!@angular/common/locales/fil.js'), require('!file-loader?name=assets/locales/angular/fo-DK.js!@angular/common/locales/fo-DK.js'), require('!file-loader?name=assets/locales/angular/fo.js!@angular/common/locales/fo.js'), require('!file-loader?name=assets/locales/angular/fr-BE.js!@angular/common/locales/fr-BE.js'), require('!file-loader?name=assets/locales/angular/fr-BF.js!@angular/common/locales/fr-BF.js'), require('!file-loader?name=assets/locales/angular/fr-BI.js!@angular/common/locales/fr-BI.js'), require('!file-loader?name=assets/locales/angular/fr-BJ.js!@angular/common/locales/fr-BJ.js'), require('!file-loader?name=assets/locales/angular/fr-BL.js!@angular/common/locales/fr-BL.js'), require('!file-loader?name=assets/locales/angular/fr-CA.js!@angular/common/locales/fr-CA.js'), require('!file-loader?name=assets/locales/angular/fr-CD.js!@angular/common/locales/fr-CD.js'), require('!file-loader?name=assets/locales/angular/fr-CF.js!@angular/common/locales/fr-CF.js'), require('!file-loader?name=assets/locales/angular/fr-CG.js!@angular/common/locales/fr-CG.js'), require('!file-loader?name=assets/locales/angular/fr-CH.js!@angular/common/locales/fr-CH.js'), require('!file-loader?name=assets/locales/angular/fr-CI.js!@angular/common/locales/fr-CI.js'), require('!file-loader?name=assets/locales/angular/fr-CM.js!@angular/common/locales/fr-CM.js'), require('!file-loader?name=assets/locales/angular/fr-DJ.js!@angular/common/locales/fr-DJ.js'), require('!file-loader?name=assets/locales/angular/fr-DZ.js!@angular/common/locales/fr-DZ.js'), require('!file-loader?name=assets/locales/angular/fr-GA.js!@angular/common/locales/fr-GA.js'), require('!file-loader?name=assets/locales/angular/fr-GF.js!@angular/common/locales/fr-GF.js'), require('!file-loader?name=assets/locales/angular/fr-GN.js!@angular/common/locales/fr-GN.js'), require('!file-loader?name=assets/locales/angular/fr-GP.js!@angular/common/locales/fr-GP.js'), require('!file-loader?name=assets/locales/angular/fr-GQ.js!@angular/common/locales/fr-GQ.js'), require('!file-loader?name=assets/locales/angular/fr-HT.js!@angular/common/locales/fr-HT.js'), require('!file-loader?name=assets/locales/angular/fr-KM.js!@angular/common/locales/fr-KM.js'), require('!file-loader?name=assets/locales/angular/fr-LU.js!@angular/common/locales/fr-LU.js'), require('!file-loader?name=assets/locales/angular/fr-MA.js!@angular/common/locales/fr-MA.js'), require('!file-loader?name=assets/locales/angular/fr-MC.js!@angular/common/locales/fr-MC.js'), require('!file-loader?name=assets/locales/angular/fr-MF.js!@angular/common/locales/fr-MF.js'), require('!file-loader?name=assets/locales/angular/fr-MG.js!@angular/common/locales/fr-MG.js'), require('!file-loader?name=assets/locales/angular/fr-ML.js!@angular/common/locales/fr-ML.js'), require('!file-loader?name=assets/locales/angular/fr-MQ.js!@angular/common/locales/fr-MQ.js'), require('!file-loader?name=assets/locales/angular/fr-MR.js!@angular/common/locales/fr-MR.js'), require('!file-loader?name=assets/locales/angular/fr-MU.js!@angular/common/locales/fr-MU.js'), require('!file-loader?name=assets/locales/angular/fr-NC.js!@angular/common/locales/fr-NC.js'), require('!file-loader?name=assets/locales/angular/fr-NE.js!@angular/common/locales/fr-NE.js'), require('!file-loader?name=assets/locales/angular/fr-PF.js!@angular/common/locales/fr-PF.js'), require('!file-loader?name=assets/locales/angular/fr-PM.js!@angular/common/locales/fr-PM.js'), require('!file-loader?name=assets/locales/angular/fr-RE.js!@angular/common/locales/fr-RE.js'), require('!file-loader?name=assets/locales/angular/fr-RW.js!@angular/common/locales/fr-RW.js'), require('!file-loader?name=assets/locales/angular/fr-SC.js!@angular/common/locales/fr-SC.js'), require('!file-loader?name=assets/locales/angular/fr-SN.js!@angular/common/locales/fr-SN.js'), require('!file-loader?name=assets/locales/angular/fr-SY.js!@angular/common/locales/fr-SY.js'), require('!file-loader?name=assets/locales/angular/fr-TD.js!@angular/common/locales/fr-TD.js'), require('!file-loader?name=assets/locales/angular/fr-TG.js!@angular/common/locales/fr-TG.js'), require('!file-loader?name=assets/locales/angular/fr-TN.js!@angular/common/locales/fr-TN.js'), require('!file-loader?name=assets/locales/angular/fr-VU.js!@angular/common/locales/fr-VU.js'), require('!file-loader?name=assets/locales/angular/fr-WF.js!@angular/common/locales/fr-WF.js'), require('!file-loader?name=assets/locales/angular/fr-YT.js!@angular/common/locales/fr-YT.js'), require('!file-loader?name=assets/locales/angular/fr.js!@angular/common/locales/fr.js'), require('!file-loader?name=assets/locales/angular/fur.js!@angular/common/locales/fur.js'), require('!file-loader?name=assets/locales/angular/fy.js!@angular/common/locales/fy.js'), require('!file-loader?name=assets/locales/angular/ga.js!@angular/common/locales/ga.js'), require('!file-loader?name=assets/locales/angular/gd.js!@angular/common/locales/gd.js'), require('!file-loader?name=assets/locales/angular/gl.js!@angular/common/locales/gl.js'), require('!file-loader?name=assets/locales/angular/gsw-FR.js!@angular/common/locales/gsw-FR.js'), require('!file-loader?name=assets/locales/angular/gsw-LI.js!@angular/common/locales/gsw-LI.js'), require('!file-loader?name=assets/locales/angular/gsw.js!@angular/common/locales/gsw.js'), require('!file-loader?name=assets/locales/angular/gu.js!@angular/common/locales/gu.js'), require('!file-loader?name=assets/locales/angular/guz.js!@angular/common/locales/guz.js'), require('!file-loader?name=assets/locales/angular/gv.js!@angular/common/locales/gv.js'), require('!file-loader?name=assets/locales/angular/ha-GH.js!@angular/common/locales/ha-GH.js'), require('!file-loader?name=assets/locales/angular/ha-NE.js!@angular/common/locales/ha-NE.js'), require('!file-loader?name=assets/locales/angular/ha.js!@angular/common/locales/ha.js'), require('!file-loader?name=assets/locales/angular/haw.js!@angular/common/locales/haw.js'), require('!file-loader?name=assets/locales/angular/he.js!@angular/common/locales/he.js'), require('!file-loader?name=assets/locales/angular/hi.js!@angular/common/locales/hi.js'), require('!file-loader?name=assets/locales/angular/hr-BA.js!@angular/common/locales/hr-BA.js'), require('!file-loader?name=assets/locales/angular/hr.js!@angular/common/locales/hr.js'), require('!file-loader?name=assets/locales/angular/hsb.js!@angular/common/locales/hsb.js'), require('!file-loader?name=assets/locales/angular/hu.js!@angular/common/locales/hu.js'), require('!file-loader?name=assets/locales/angular/hy.js!@angular/common/locales/hy.js'), require('!file-loader?name=assets/locales/angular/id.js!@angular/common/locales/id.js'), require('!file-loader?name=assets/locales/angular/ig.js!@angular/common/locales/ig.js'), require('!file-loader?name=assets/locales/angular/ii.js!@angular/common/locales/ii.js'), require('!file-loader?name=assets/locales/angular/is.js!@angular/common/locales/is.js'), require('!file-loader?name=assets/locales/angular/it-CH.js!@angular/common/locales/it-CH.js'), require('!file-loader?name=assets/locales/angular/it-SM.js!@angular/common/locales/it-SM.js'), require('!file-loader?name=assets/locales/angular/it-VA.js!@angular/common/locales/it-VA.js'), require('!file-loader?name=assets/locales/angular/it.js!@angular/common/locales/it.js'), require('!file-loader?name=assets/locales/angular/ja.js!@angular/common/locales/ja.js'), require('!file-loader?name=assets/locales/angular/jgo.js!@angular/common/locales/jgo.js'), require('!file-loader?name=assets/locales/angular/jmc.js!@angular/common/locales/jmc.js'), require('!file-loader?name=assets/locales/angular/ka.js!@angular/common/locales/ka.js'), require('!file-loader?name=assets/locales/angular/kab.js!@angular/common/locales/kab.js'), require('!file-loader?name=assets/locales/angular/kam.js!@angular/common/locales/kam.js'), require('!file-loader?name=assets/locales/angular/kde.js!@angular/common/locales/kde.js'), require('!file-loader?name=assets/locales/angular/kea.js!@angular/common/locales/kea.js'), require('!file-loader?name=assets/locales/angular/khq.js!@angular/common/locales/khq.js'), require('!file-loader?name=assets/locales/angular/ki.js!@angular/common/locales/ki.js'), require('!file-loader?name=assets/locales/angular/kk.js!@angular/common/locales/kk.js'), require('!file-loader?name=assets/locales/angular/kkj.js!@angular/common/locales/kkj.js'), require('!file-loader?name=assets/locales/angular/kl.js!@angular/common/locales/kl.js'), require('!file-loader?name=assets/locales/angular/kln.js!@angular/common/locales/kln.js'), require('!file-loader?name=assets/locales/angular/km.js!@angular/common/locales/km.js'), require('!file-loader?name=assets/locales/angular/kn.js!@angular/common/locales/kn.js'), require('!file-loader?name=assets/locales/angular/ko-KP.js!@angular/common/locales/ko-KP.js'), require('!file-loader?name=assets/locales/angular/ko.js!@angular/common/locales/ko.js'), require('!file-loader?name=assets/locales/angular/kok.js!@angular/common/locales/kok.js'), require('!file-loader?name=assets/locales/angular/ks.js!@angular/common/locales/ks.js'), require('!file-loader?name=assets/locales/angular/ksb.js!@angular/common/locales/ksb.js'), require('!file-loader?name=assets/locales/angular/ksf.js!@angular/common/locales/ksf.js'), require('!file-loader?name=assets/locales/angular/ksh.js!@angular/common/locales/ksh.js'), require('!file-loader?name=assets/locales/angular/kw.js!@angular/common/locales/kw.js'), require('!file-loader?name=assets/locales/angular/ky.js!@angular/common/locales/ky.js'), require('!file-loader?name=assets/locales/angular/lag.js!@angular/common/locales/lag.js'), require('!file-loader?name=assets/locales/angular/lb.js!@angular/common/locales/lb.js'), require('!file-loader?name=assets/locales/angular/lg.js!@angular/common/locales/lg.js'), require('!file-loader?name=assets/locales/angular/lkt.js!@angular/common/locales/lkt.js'), require('!file-loader?name=assets/locales/angular/ln-AO.js!@angular/common/locales/ln-AO.js'), require('!file-loader?name=assets/locales/angular/ln-CF.js!@angular/common/locales/ln-CF.js'), require('!file-loader?name=assets/locales/angular/ln-CG.js!@angular/common/locales/ln-CG.js'), require('!file-loader?name=assets/locales/angular/ln.js!@angular/common/locales/ln.js'), require('!file-loader?name=assets/locales/angular/lo.js!@angular/common/locales/lo.js'), require('!file-loader?name=assets/locales/angular/lrc-IQ.js!@angular/common/locales/lrc-IQ.js'), require('!file-loader?name=assets/locales/angular/lrc.js!@angular/common/locales/lrc.js'), require('!file-loader?name=assets/locales/angular/lt.js!@angular/common/locales/lt.js'), require('!file-loader?name=assets/locales/angular/lu.js!@angular/common/locales/lu.js'), require('!file-loader?name=assets/locales/angular/luo.js!@angular/common/locales/luo.js'), require('!file-loader?name=assets/locales/angular/luy.js!@angular/common/locales/luy.js'), require('!file-loader?name=assets/locales/angular/lv.js!@angular/common/locales/lv.js'), require('!file-loader?name=assets/locales/angular/mas-TZ.js!@angular/common/locales/mas-TZ.js'), require('!file-loader?name=assets/locales/angular/mas.js!@angular/common/locales/mas.js'), require('!file-loader?name=assets/locales/angular/mer.js!@angular/common/locales/mer.js'), require('!file-loader?name=assets/locales/angular/mfe.js!@angular/common/locales/mfe.js'), require('!file-loader?name=assets/locales/angular/mg.js!@angular/common/locales/mg.js'), require('!file-loader?name=assets/locales/angular/mgh.js!@angular/common/locales/mgh.js'), require('!file-loader?name=assets/locales/angular/mgo.js!@angular/common/locales/mgo.js'), require('!file-loader?name=assets/locales/angular/mk.js!@angular/common/locales/mk.js'), require('!file-loader?name=assets/locales/angular/ml.js!@angular/common/locales/ml.js'), require('!file-loader?name=assets/locales/angular/mn.js!@angular/common/locales/mn.js'), require('!file-loader?name=assets/locales/angular/mr.js!@angular/common/locales/mr.js'), require('!file-loader?name=assets/locales/angular/ms-BN.js!@angular/common/locales/ms-BN.js'), require('!file-loader?name=assets/locales/angular/ms-SG.js!@angular/common/locales/ms-SG.js'), require('!file-loader?name=assets/locales/angular/ms.js!@angular/common/locales/ms.js'), require('!file-loader?name=assets/locales/angular/mt.js!@angular/common/locales/mt.js'), require('!file-loader?name=assets/locales/angular/mua.js!@angular/common/locales/mua.js'), require('!file-loader?name=assets/locales/angular/my.js!@angular/common/locales/my.js'), require('!file-loader?name=assets/locales/angular/mzn.js!@angular/common/locales/mzn.js'), require('!file-loader?name=assets/locales/angular/naq.js!@angular/common/locales/naq.js'), require('!file-loader?name=assets/locales/angular/nb-SJ.js!@angular/common/locales/nb-SJ.js'), require('!file-loader?name=assets/locales/angular/nb.js!@angular/common/locales/nb.js'), require('!file-loader?name=assets/locales/angular/nd.js!@angular/common/locales/nd.js'), require('!file-loader?name=assets/locales/angular/nds-NL.js!@angular/common/locales/nds-NL.js'), require('!file-loader?name=assets/locales/angular/nds.js!@angular/common/locales/nds.js'), require('!file-loader?name=assets/locales/angular/ne-IN.js!@angular/common/locales/ne-IN.js'), require('!file-loader?name=assets/locales/angular/ne.js!@angular/common/locales/ne.js'), require('!file-loader?name=assets/locales/angular/nl-AW.js!@angular/common/locales/nl-AW.js'), require('!file-loader?name=assets/locales/angular/nl-BE.js!@angular/common/locales/nl-BE.js'), require('!file-loader?name=assets/locales/angular/nl-BQ.js!@angular/common/locales/nl-BQ.js'), require('!file-loader?name=assets/locales/angular/nl-CW.js!@angular/common/locales/nl-CW.js'), require('!file-loader?name=assets/locales/angular/nl-SR.js!@angular/common/locales/nl-SR.js'), require('!file-loader?name=assets/locales/angular/nl-SX.js!@angular/common/locales/nl-SX.js'), require('!file-loader?name=assets/locales/angular/nl.js!@angular/common/locales/nl.js'), require('!file-loader?name=assets/locales/angular/nmg.js!@angular/common/locales/nmg.js'), require('!file-loader?name=assets/locales/angular/nn.js!@angular/common/locales/nn.js'), require('!file-loader?name=assets/locales/angular/nnh.js!@angular/common/locales/nnh.js'), require('!file-loader?name=assets/locales/angular/nus.js!@angular/common/locales/nus.js'), require('!file-loader?name=assets/locales/angular/nyn.js!@angular/common/locales/nyn.js'), require('!file-loader?name=assets/locales/angular/om-KE.js!@angular/common/locales/om-KE.js'), require('!file-loader?name=assets/locales/angular/om.js!@angular/common/locales/om.js'), require('!file-loader?name=assets/locales/angular/or.js!@angular/common/locales/or.js'), require('!file-loader?name=assets/locales/angular/os-RU.js!@angular/common/locales/os-RU.js'), require('!file-loader?name=assets/locales/angular/os.js!@angular/common/locales/os.js'), require('!file-loader?name=assets/locales/angular/pa-Arab.js!@angular/common/locales/pa-Arab.js'), require('!file-loader?name=assets/locales/angular/pa-Guru.js!@angular/common/locales/pa-Guru.js'), require('!file-loader?name=assets/locales/angular/pa.js!@angular/common/locales/pa.js'), require('!file-loader?name=assets/locales/angular/pl.js!@angular/common/locales/pl.js'), require('!file-loader?name=assets/locales/angular/prg.js!@angular/common/locales/prg.js'), require('!file-loader?name=assets/locales/angular/ps.js!@angular/common/locales/ps.js'), require('!file-loader?name=assets/locales/angular/pt-AO.js!@angular/common/locales/pt-AO.js'), require('!file-loader?name=assets/locales/angular/pt-CH.js!@angular/common/locales/pt-CH.js'), require('!file-loader?name=assets/locales/angular/pt-CV.js!@angular/common/locales/pt-CV.js'), require('!file-loader?name=assets/locales/angular/pt-GQ.js!@angular/common/locales/pt-GQ.js'), require('!file-loader?name=assets/locales/angular/pt-GW.js!@angular/common/locales/pt-GW.js'), require('!file-loader?name=assets/locales/angular/pt-LU.js!@angular/common/locales/pt-LU.js'), require('!file-loader?name=assets/locales/angular/pt-MO.js!@angular/common/locales/pt-MO.js'), require('!file-loader?name=assets/locales/angular/pt-MZ.js!@angular/common/locales/pt-MZ.js'), require('!file-loader?name=assets/locales/angular/pt-PT.js!@angular/common/locales/pt-PT.js'), require('!file-loader?name=assets/locales/angular/pt-ST.js!@angular/common/locales/pt-ST.js'), require('!file-loader?name=assets/locales/angular/pt-TL.js!@angular/common/locales/pt-TL.js'), require('!file-loader?name=assets/locales/angular/pt.js!@angular/common/locales/pt.js'), require('!file-loader?name=assets/locales/angular/qu-BO.js!@angular/common/locales/qu-BO.js'), require('!file-loader?name=assets/locales/angular/qu-EC.js!@angular/common/locales/qu-EC.js'), require('!file-loader?name=assets/locales/angular/qu.js!@angular/common/locales/qu.js'), require('!file-loader?name=assets/locales/angular/rm.js!@angular/common/locales/rm.js'), require('!file-loader?name=assets/locales/angular/rn.js!@angular/common/locales/rn.js'), require('!file-loader?name=assets/locales/angular/ro-MD.js!@angular/common/locales/ro-MD.js'), require('!file-loader?name=assets/locales/angular/ro.js!@angular/common/locales/ro.js'), require('!file-loader?name=assets/locales/angular/rof.js!@angular/common/locales/rof.js'), require('!file-loader?name=assets/locales/angular/root.js!@angular/common/locales/root.js'), require('!file-loader?name=assets/locales/angular/ru-BY.js!@angular/common/locales/ru-BY.js'), require('!file-loader?name=assets/locales/angular/ru-KG.js!@angular/common/locales/ru-KG.js'), require('!file-loader?name=assets/locales/angular/ru-KZ.js!@angular/common/locales/ru-KZ.js'), require('!file-loader?name=assets/locales/angular/ru-MD.js!@angular/common/locales/ru-MD.js'), require('!file-loader?name=assets/locales/angular/ru-UA.js!@angular/common/locales/ru-UA.js'), require('!file-loader?name=assets/locales/angular/ru.js!@angular/common/locales/ru.js'), require('!file-loader?name=assets/locales/angular/rw.js!@angular/common/locales/rw.js'), require('!file-loader?name=assets/locales/angular/rwk.js!@angular/common/locales/rwk.js'), require('!file-loader?name=assets/locales/angular/sah.js!@angular/common/locales/sah.js'), require('!file-loader?name=assets/locales/angular/saq.js!@angular/common/locales/saq.js'), require('!file-loader?name=assets/locales/angular/sbp.js!@angular/common/locales/sbp.js'), require('!file-loader?name=assets/locales/angular/sd.js!@angular/common/locales/sd.js'), require('!file-loader?name=assets/locales/angular/se-FI.js!@angular/common/locales/se-FI.js'), require('!file-loader?name=assets/locales/angular/se-SE.js!@angular/common/locales/se-SE.js'), require('!file-loader?name=assets/locales/angular/se.js!@angular/common/locales/se.js'), require('!file-loader?name=assets/locales/angular/seh.js!@angular/common/locales/seh.js'), require('!file-loader?name=assets/locales/angular/ses.js!@angular/common/locales/ses.js'), require('!file-loader?name=assets/locales/angular/sg.js!@angular/common/locales/sg.js'), require('!file-loader?name=assets/locales/angular/shi-Latn.js!@angular/common/locales/shi-Latn.js'), require('!file-loader?name=assets/locales/angular/shi-Tfng.js!@angular/common/locales/shi-Tfng.js'), require('!file-loader?name=assets/locales/angular/shi.js!@angular/common/locales/shi.js'), require('!file-loader?name=assets/locales/angular/si.js!@angular/common/locales/si.js'), require('!file-loader?name=assets/locales/angular/sk.js!@angular/common/locales/sk.js'), require('!file-loader?name=assets/locales/angular/sl.js!@angular/common/locales/sl.js'), require('!file-loader?name=assets/locales/angular/smn.js!@angular/common/locales/smn.js'), require('!file-loader?name=assets/locales/angular/sn.js!@angular/common/locales/sn.js'), require('!file-loader?name=assets/locales/angular/so-DJ.js!@angular/common/locales/so-DJ.js'), require('!file-loader?name=assets/locales/angular/so-ET.js!@angular/common/locales/so-ET.js'), require('!file-loader?name=assets/locales/angular/so-KE.js!@angular/common/locales/so-KE.js'), require('!file-loader?name=assets/locales/angular/so.js!@angular/common/locales/so.js'), require('!file-loader?name=assets/locales/angular/sq-MK.js!@angular/common/locales/sq-MK.js'), require('!file-loader?name=assets/locales/angular/sq-XK.js!@angular/common/locales/sq-XK.js'), require('!file-loader?name=assets/locales/angular/sq.js!@angular/common/locales/sq.js'), require('!file-loader?name=assets/locales/angular/sr-Cyrl-BA.js!@angular/common/locales/sr-Cyrl-BA.js'), require('!file-loader?name=assets/locales/angular/sr-Cyrl-ME.js!@angular/common/locales/sr-Cyrl-ME.js'), require('!file-loader?name=assets/locales/angular/sr-Cyrl-XK.js!@angular/common/locales/sr-Cyrl-XK.js'), require('!file-loader?name=assets/locales/angular/sr-Cyrl.js!@angular/common/locales/sr-Cyrl.js'), require('!file-loader?name=assets/locales/angular/sr-Latn-BA.js!@angular/common/locales/sr-Latn-BA.js'), require('!file-loader?name=assets/locales/angular/sr-Latn-ME.js!@angular/common/locales/sr-Latn-ME.js'), require('!file-loader?name=assets/locales/angular/sr-Latn-XK.js!@angular/common/locales/sr-Latn-XK.js'), require('!file-loader?name=assets/locales/angular/sr-Latn.js!@angular/common/locales/sr-Latn.js'), require('!file-loader?name=assets/locales/angular/sr.js!@angular/common/locales/sr.js'), require('!file-loader?name=assets/locales/angular/sv-AX.js!@angular/common/locales/sv-AX.js'), require('!file-loader?name=assets/locales/angular/sv-FI.js!@angular/common/locales/sv-FI.js'), require('!file-loader?name=assets/locales/angular/sv.js!@angular/common/locales/sv.js'), require('!file-loader?name=assets/locales/angular/sw-CD.js!@angular/common/locales/sw-CD.js'), require('!file-loader?name=assets/locales/angular/sw-KE.js!@angular/common/locales/sw-KE.js'), require('!file-loader?name=assets/locales/angular/sw-UG.js!@angular/common/locales/sw-UG.js'), require('!file-loader?name=assets/locales/angular/sw.js!@angular/common/locales/sw.js'), require('!file-loader?name=assets/locales/angular/ta-LK.js!@angular/common/locales/ta-LK.js'), require('!file-loader?name=assets/locales/angular/ta-MY.js!@angular/common/locales/ta-MY.js'), require('!file-loader?name=assets/locales/angular/ta-SG.js!@angular/common/locales/ta-SG.js'), require('!file-loader?name=assets/locales/angular/ta.js!@angular/common/locales/ta.js'), require('!file-loader?name=assets/locales/angular/te.js!@angular/common/locales/te.js'), require('!file-loader?name=assets/locales/angular/teo-KE.js!@angular/common/locales/teo-KE.js'), require('!file-loader?name=assets/locales/angular/teo.js!@angular/common/locales/teo.js'), require('!file-loader?name=assets/locales/angular/tg.js!@angular/common/locales/tg.js'), require('!file-loader?name=assets/locales/angular/th.js!@angular/common/locales/th.js'), require('!file-loader?name=assets/locales/angular/ti-ER.js!@angular/common/locales/ti-ER.js'), require('!file-loader?name=assets/locales/angular/ti.js!@angular/common/locales/ti.js'), require('!file-loader?name=assets/locales/angular/tk.js!@angular/common/locales/tk.js'), require('!file-loader?name=assets/locales/angular/to.js!@angular/common/locales/to.js'), require('!file-loader?name=assets/locales/angular/tr-CY.js!@angular/common/locales/tr-CY.js'), require('!file-loader?name=assets/locales/angular/tr.js!@angular/common/locales/tr.js'), require('!file-loader?name=assets/locales/angular/tt.js!@angular/common/locales/tt.js'), require('!file-loader?name=assets/locales/angular/twq.js!@angular/common/locales/twq.js'), require('!file-loader?name=assets/locales/angular/tzm.js!@angular/common/locales/tzm.js'), require('!file-loader?name=assets/locales/angular/ug.js!@angular/common/locales/ug.js'), require('!file-loader?name=assets/locales/angular/uk.js!@angular/common/locales/uk.js'), require('!file-loader?name=assets/locales/angular/ur-IN.js!@angular/common/locales/ur-IN.js'), require('!file-loader?name=assets/locales/angular/ur.js!@angular/common/locales/ur.js'), require('!file-loader?name=assets/locales/angular/uz-Arab.js!@angular/common/locales/uz-Arab.js'), require('!file-loader?name=assets/locales/angular/uz-Cyrl.js!@angular/common/locales/uz-Cyrl.js'), require('!file-loader?name=assets/locales/angular/uz-Latn.js!@angular/common/locales/uz-Latn.js'), require('!file-loader?name=assets/locales/angular/uz.js!@angular/common/locales/uz.js'), require('!file-loader?name=assets/locales/angular/vai-Latn.js!@angular/common/locales/vai-Latn.js'), require('!file-loader?name=assets/locales/angular/vai-Vaii.js!@angular/common/locales/vai-Vaii.js'), require('!file-loader?name=assets/locales/angular/vai.js!@angular/common/locales/vai.js'), require('!file-loader?name=assets/locales/angular/vi.js!@angular/common/locales/vi.js'), require('!file-loader?name=assets/locales/angular/vo.js!@angular/common/locales/vo.js'), require('!file-loader?name=assets/locales/angular/vun.js!@angular/common/locales/vun.js'), require('!file-loader?name=assets/locales/angular/wae.js!@angular/common/locales/wae.js'), require('!file-loader?name=assets/locales/angular/wo.js!@angular/common/locales/wo.js'), require('!file-loader?name=assets/locales/angular/xog.js!@angular/common/locales/xog.js'), require('!file-loader?name=assets/locales/angular/yav.js!@angular/common/locales/yav.js'), require('!file-loader?name=assets/locales/angular/yi.js!@angular/common/locales/yi.js'), require('!file-loader?name=assets/locales/angular/yo-BJ.js!@angular/common/locales/yo-BJ.js'), require('!file-loader?name=assets/locales/angular/yo.js!@angular/common/locales/yo.js'), require('!file-loader?name=assets/locales/angular/yue-Hans.js!@angular/common/locales/yue-Hans.js'), require('!file-loader?name=assets/locales/angular/yue-Hant.js!@angular/common/locales/yue-Hant.js'), require('!file-loader?name=assets/locales/angular/yue.js!@angular/common/locales/yue.js'), require('!file-loader?name=assets/locales/angular/zgh.js!@angular/common/locales/zgh.js'), require('!file-loader?name=assets/locales/angular/zh-Hans-HK.js!@angular/common/locales/zh-Hans-HK.js'), require('!file-loader?name=assets/locales/angular/zh-Hans-MO.js!@angular/common/locales/zh-Hans-MO.js'), require('!file-loader?name=assets/locales/angular/zh-Hans-SG.js!@angular/common/locales/zh-Hans-SG.js'), require('!file-loader?name=assets/locales/angular/zh-Hans.js!@angular/common/locales/zh-Hans.js'), require('!file-loader?name=assets/locales/angular/zh-Hant-HK.js!@angular/common/locales/zh-Hant-HK.js'), require('!file-loader?name=assets/locales/angular/zh-Hant-MO.js!@angular/common/locales/zh-Hant-MO.js'), require('!file-loader?name=assets/locales/angular/zh-Hant.js!@angular/common/locales/zh-Hant.js'), require('!file-loader?name=assets/locales/angular/zh.js!@angular/common/locales/zh.js'), require('!file-loader?name=assets/locales/angular/zu.js!@angular/common/locales/zu.js'), require('ngx-bootstrap/collapse'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/tooltip'), require('@angular/forms'), require('@angular/platform-browser'), require('ngx-bootstrap/modal'), require('ngx-bootstrap/popover'), require('libphonenumber-js/max'), require('@angular/upgrade/static'), require('@angular/cdk/table'), require('@angular/cdk/drag-drop'), require('ngx-bootstrap/pagination'), require('@angular/cdk/stepper')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components', ['exports', '@angular/core', '@angular/router', 'rxjs', 'rxjs/operators', 'lodash-es', '@c8y/ngx-components/api', '@c8y/client', '@ngx-translate/core', 'lodash', '@angular/common', '@angular/common/http', '!file-loader?name=assets/locales/angular/af-NA.js!@angular/common/locales/af-NA.js', '!file-loader?name=assets/locales/angular/af.js!@angular/common/locales/af.js', '!file-loader?name=assets/locales/angular/agq.js!@angular/common/locales/agq.js', '!file-loader?name=assets/locales/angular/ak.js!@angular/common/locales/ak.js', '!file-loader?name=assets/locales/angular/am.js!@angular/common/locales/am.js', '!file-loader?name=assets/locales/angular/ar-AE.js!@angular/common/locales/ar-AE.js', '!file-loader?name=assets/locales/angular/ar-BH.js!@angular/common/locales/ar-BH.js', '!file-loader?name=assets/locales/angular/ar-DJ.js!@angular/common/locales/ar-DJ.js', '!file-loader?name=assets/locales/angular/ar-DZ.js!@angular/common/locales/ar-DZ.js', '!file-loader?name=assets/locales/angular/ar-EG.js!@angular/common/locales/ar-EG.js', '!file-loader?name=assets/locales/angular/ar-EH.js!@angular/common/locales/ar-EH.js', '!file-loader?name=assets/locales/angular/ar-ER.js!@angular/common/locales/ar-ER.js', '!file-loader?name=assets/locales/angular/ar-IL.js!@angular/common/locales/ar-IL.js', '!file-loader?name=assets/locales/angular/ar-IQ.js!@angular/common/locales/ar-IQ.js', '!file-loader?name=assets/locales/angular/ar-JO.js!@angular/common/locales/ar-JO.js', '!file-loader?name=assets/locales/angular/ar-KM.js!@angular/common/locales/ar-KM.js', '!file-loader?name=assets/locales/angular/ar-KW.js!@angular/common/locales/ar-KW.js', '!file-loader?name=assets/locales/angular/ar-LB.js!@angular/common/locales/ar-LB.js', '!file-loader?name=assets/locales/angular/ar-LY.js!@angular/common/locales/ar-LY.js', '!file-loader?name=assets/locales/angular/ar-MA.js!@angular/common/locales/ar-MA.js', '!file-loader?name=assets/locales/angular/ar-MR.js!@angular/common/locales/ar-MR.js', '!file-loader?name=assets/locales/angular/ar-OM.js!@angular/common/locales/ar-OM.js', '!file-loader?name=assets/locales/angular/ar-PS.js!@angular/common/locales/ar-PS.js', '!file-loader?name=assets/locales/angular/ar-QA.js!@angular/common/locales/ar-QA.js', '!file-loader?name=assets/locales/angular/ar-SA.js!@angular/common/locales/ar-SA.js', '!file-loader?name=assets/locales/angular/ar-SD.js!@angular/common/locales/ar-SD.js', '!file-loader?name=assets/locales/angular/ar-SO.js!@angular/common/locales/ar-SO.js', '!file-loader?name=assets/locales/angular/ar-SS.js!@angular/common/locales/ar-SS.js', '!file-loader?name=assets/locales/angular/ar-SY.js!@angular/common/locales/ar-SY.js', '!file-loader?name=assets/locales/angular/ar-TD.js!@angular/common/locales/ar-TD.js', '!file-loader?name=assets/locales/angular/ar-TN.js!@angular/common/locales/ar-TN.js', '!file-loader?name=assets/locales/angular/ar-YE.js!@angular/common/locales/ar-YE.js', '!file-loader?name=assets/locales/angular/ar.js!@angular/common/locales/ar.js', '!file-loader?name=assets/locales/angular/as.js!@angular/common/locales/as.js', '!file-loader?name=assets/locales/angular/asa.js!@angular/common/locales/asa.js', '!file-loader?name=assets/locales/angular/ast.js!@angular/common/locales/ast.js', '!file-loader?name=assets/locales/angular/az-Cyrl.js!@angular/common/locales/az-Cyrl.js', '!file-loader?name=assets/locales/angular/az-Latn.js!@angular/common/locales/az-Latn.js', '!file-loader?name=assets/locales/angular/az.js!@angular/common/locales/az.js', '!file-loader?name=assets/locales/angular/bas.js!@angular/common/locales/bas.js', '!file-loader?name=assets/locales/angular/be.js!@angular/common/locales/be.js', '!file-loader?name=assets/locales/angular/bem.js!@angular/common/locales/bem.js', '!file-loader?name=assets/locales/angular/bez.js!@angular/common/locales/bez.js', '!file-loader?name=assets/locales/angular/bg.js!@angular/common/locales/bg.js', '!file-loader?name=assets/locales/angular/bm.js!@angular/common/locales/bm.js', '!file-loader?name=assets/locales/angular/bn-IN.js!@angular/common/locales/bn-IN.js', '!file-loader?name=assets/locales/angular/bn.js!@angular/common/locales/bn.js', '!file-loader?name=assets/locales/angular/bo-IN.js!@angular/common/locales/bo-IN.js', '!file-loader?name=assets/locales/angular/bo.js!@angular/common/locales/bo.js', '!file-loader?name=assets/locales/angular/br.js!@angular/common/locales/br.js', '!file-loader?name=assets/locales/angular/brx.js!@angular/common/locales/brx.js', '!file-loader?name=assets/locales/angular/bs-Cyrl.js!@angular/common/locales/bs-Cyrl.js', '!file-loader?name=assets/locales/angular/bs-Latn.js!@angular/common/locales/bs-Latn.js', '!file-loader?name=assets/locales/angular/bs.js!@angular/common/locales/bs.js', '!file-loader?name=assets/locales/angular/ca-AD.js!@angular/common/locales/ca-AD.js', '!file-loader?name=assets/locales/angular/ca-ES-VALENCIA.js!@angular/common/locales/ca-ES-VALENCIA.js', '!file-loader?name=assets/locales/angular/ca-FR.js!@angular/common/locales/ca-FR.js', '!file-loader?name=assets/locales/angular/ca-IT.js!@angular/common/locales/ca-IT.js', '!file-loader?name=assets/locales/angular/ca.js!@angular/common/locales/ca.js', '!file-loader?name=assets/locales/angular/ccp-IN.js!@angular/common/locales/ccp-IN.js', '!file-loader?name=assets/locales/angular/ccp.js!@angular/common/locales/ccp.js', '!file-loader?name=assets/locales/angular/ce.js!@angular/common/locales/ce.js', '!file-loader?name=assets/locales/angular/cgg.js!@angular/common/locales/cgg.js', '!file-loader?name=assets/locales/angular/chr.js!@angular/common/locales/chr.js', '!file-loader?name=assets/locales/angular/ckb-IR.js!@angular/common/locales/ckb-IR.js', '!file-loader?name=assets/locales/angular/ckb.js!@angular/common/locales/ckb.js', '!file-loader?name=assets/locales/angular/cs.js!@angular/common/locales/cs.js', '!file-loader?name=assets/locales/angular/cu.js!@angular/common/locales/cu.js', '!file-loader?name=assets/locales/angular/cy.js!@angular/common/locales/cy.js', '!file-loader?name=assets/locales/angular/da-GL.js!@angular/common/locales/da-GL.js', '!file-loader?name=assets/locales/angular/da.js!@angular/common/locales/da.js', '!file-loader?name=assets/locales/angular/dav.js!@angular/common/locales/dav.js', '!file-loader?name=assets/locales/angular/de-AT.js!@angular/common/locales/de-AT.js', '!file-loader?name=assets/locales/angular/de-BE.js!@angular/common/locales/de-BE.js', '!file-loader?name=assets/locales/angular/de-CH.js!@angular/common/locales/de-CH.js', '!file-loader?name=assets/locales/angular/de-IT.js!@angular/common/locales/de-IT.js', '!file-loader?name=assets/locales/angular/de-LI.js!@angular/common/locales/de-LI.js', '!file-loader?name=assets/locales/angular/de-LU.js!@angular/common/locales/de-LU.js', '!file-loader?name=assets/locales/angular/de.js!@angular/common/locales/de.js', '!file-loader?name=assets/locales/angular/dje.js!@angular/common/locales/dje.js', '!file-loader?name=assets/locales/angular/dsb.js!@angular/common/locales/dsb.js', '!file-loader?name=assets/locales/angular/dua.js!@angular/common/locales/dua.js', '!file-loader?name=assets/locales/angular/dyo.js!@angular/common/locales/dyo.js', '!file-loader?name=assets/locales/angular/dz.js!@angular/common/locales/dz.js', '!file-loader?name=assets/locales/angular/ebu.js!@angular/common/locales/ebu.js', '!file-loader?name=assets/locales/angular/ee-TG.js!@angular/common/locales/ee-TG.js', '!file-loader?name=assets/locales/angular/ee.js!@angular/common/locales/ee.js', '!file-loader?name=assets/locales/angular/el-CY.js!@angular/common/locales/el-CY.js', '!file-loader?name=assets/locales/angular/el.js!@angular/common/locales/el.js', '!file-loader?name=assets/locales/angular/en-001.js!@angular/common/locales/en-001.js', '!file-loader?name=assets/locales/angular/en-150.js!@angular/common/locales/en-150.js', '!file-loader?name=assets/locales/angular/en-AG.js!@angular/common/locales/en-AG.js', '!file-loader?name=assets/locales/angular/en-AI.js!@angular/common/locales/en-AI.js', '!file-loader?name=assets/locales/angular/en-AS.js!@angular/common/locales/en-AS.js', '!file-loader?name=assets/locales/angular/en-AT.js!@angular/common/locales/en-AT.js', '!file-loader?name=assets/locales/angular/en-AU.js!@angular/common/locales/en-AU.js', '!file-loader?name=assets/locales/angular/en-BB.js!@angular/common/locales/en-BB.js', '!file-loader?name=assets/locales/angular/en-BE.js!@angular/common/locales/en-BE.js', '!file-loader?name=assets/locales/angular/en-BI.js!@angular/common/locales/en-BI.js', '!file-loader?name=assets/locales/angular/en-BM.js!@angular/common/locales/en-BM.js', '!file-loader?name=assets/locales/angular/en-BS.js!@angular/common/locales/en-BS.js', '!file-loader?name=assets/locales/angular/en-BW.js!@angular/common/locales/en-BW.js', '!file-loader?name=assets/locales/angular/en-BZ.js!@angular/common/locales/en-BZ.js', '!file-loader?name=assets/locales/angular/en-CA.js!@angular/common/locales/en-CA.js', '!file-loader?name=assets/locales/angular/en-CC.js!@angular/common/locales/en-CC.js', '!file-loader?name=assets/locales/angular/en-CH.js!@angular/common/locales/en-CH.js', '!file-loader?name=assets/locales/angular/en-CK.js!@angular/common/locales/en-CK.js', '!file-loader?name=assets/locales/angular/en-CM.js!@angular/common/locales/en-CM.js', '!file-loader?name=assets/locales/angular/en-CX.js!@angular/common/locales/en-CX.js', '!file-loader?name=assets/locales/angular/en-CY.js!@angular/common/locales/en-CY.js', '!file-loader?name=assets/locales/angular/en-DE.js!@angular/common/locales/en-DE.js', '!file-loader?name=assets/locales/angular/en-DG.js!@angular/common/locales/en-DG.js', '!file-loader?name=assets/locales/angular/en-DK.js!@angular/common/locales/en-DK.js', '!file-loader?name=assets/locales/angular/en-DM.js!@angular/common/locales/en-DM.js', '!file-loader?name=assets/locales/angular/en-ER.js!@angular/common/locales/en-ER.js', '!file-loader?name=assets/locales/angular/en-FI.js!@angular/common/locales/en-FI.js', '!file-loader?name=assets/locales/angular/en-FJ.js!@angular/common/locales/en-FJ.js', '!file-loader?name=assets/locales/angular/en-FK.js!@angular/common/locales/en-FK.js', '!file-loader?name=assets/locales/angular/en-FM.js!@angular/common/locales/en-FM.js', '!file-loader?name=assets/locales/angular/en-GB.js!@angular/common/locales/en-GB.js', '!file-loader?name=assets/locales/angular/en-GD.js!@angular/common/locales/en-GD.js', '!file-loader?name=assets/locales/angular/en-GG.js!@angular/common/locales/en-GG.js', '!file-loader?name=assets/locales/angular/en-GH.js!@angular/common/locales/en-GH.js', '!file-loader?name=assets/locales/angular/en-GI.js!@angular/common/locales/en-GI.js', '!file-loader?name=assets/locales/angular/en-GM.js!@angular/common/locales/en-GM.js', '!file-loader?name=assets/locales/angular/en-GU.js!@angular/common/locales/en-GU.js', '!file-loader?name=assets/locales/angular/en-GY.js!@angular/common/locales/en-GY.js', '!file-loader?name=assets/locales/angular/en-HK.js!@angular/common/locales/en-HK.js', '!file-loader?name=assets/locales/angular/en-IE.js!@angular/common/locales/en-IE.js', '!file-loader?name=assets/locales/angular/en-IL.js!@angular/common/locales/en-IL.js', '!file-loader?name=assets/locales/angular/en-IM.js!@angular/common/locales/en-IM.js', '!file-loader?name=assets/locales/angular/en-IN.js!@angular/common/locales/en-IN.js', '!file-loader?name=assets/locales/angular/en-IO.js!@angular/common/locales/en-IO.js', '!file-loader?name=assets/locales/angular/en-JE.js!@angular/common/locales/en-JE.js', '!file-loader?name=assets/locales/angular/en-JM.js!@angular/common/locales/en-JM.js', '!file-loader?name=assets/locales/angular/en-KE.js!@angular/common/locales/en-KE.js', '!file-loader?name=assets/locales/angular/en-KI.js!@angular/common/locales/en-KI.js', '!file-loader?name=assets/locales/angular/en-KN.js!@angular/common/locales/en-KN.js', '!file-loader?name=assets/locales/angular/en-KY.js!@angular/common/locales/en-KY.js', '!file-loader?name=assets/locales/angular/en-LC.js!@angular/common/locales/en-LC.js', '!file-loader?name=assets/locales/angular/en-LR.js!@angular/common/locales/en-LR.js', '!file-loader?name=assets/locales/angular/en-LS.js!@angular/common/locales/en-LS.js', '!file-loader?name=assets/locales/angular/en-MG.js!@angular/common/locales/en-MG.js', '!file-loader?name=assets/locales/angular/en-MH.js!@angular/common/locales/en-MH.js', '!file-loader?name=assets/locales/angular/en-MO.js!@angular/common/locales/en-MO.js', '!file-loader?name=assets/locales/angular/en-MP.js!@angular/common/locales/en-MP.js', '!file-loader?name=assets/locales/angular/en-MS.js!@angular/common/locales/en-MS.js', '!file-loader?name=assets/locales/angular/en-MT.js!@angular/common/locales/en-MT.js', '!file-loader?name=assets/locales/angular/en-MU.js!@angular/common/locales/en-MU.js', '!file-loader?name=assets/locales/angular/en-MW.js!@angular/common/locales/en-MW.js', '!file-loader?name=assets/locales/angular/en-MY.js!@angular/common/locales/en-MY.js', '!file-loader?name=assets/locales/angular/en-NA.js!@angular/common/locales/en-NA.js', '!file-loader?name=assets/locales/angular/en-NF.js!@angular/common/locales/en-NF.js', '!file-loader?name=assets/locales/angular/en-NG.js!@angular/common/locales/en-NG.js', '!file-loader?name=assets/locales/angular/en-NL.js!@angular/common/locales/en-NL.js', '!file-loader?name=assets/locales/angular/en-NR.js!@angular/common/locales/en-NR.js', '!file-loader?name=assets/locales/angular/en-NU.js!@angular/common/locales/en-NU.js', '!file-loader?name=assets/locales/angular/en-NZ.js!@angular/common/locales/en-NZ.js', '!file-loader?name=assets/locales/angular/en-PG.js!@angular/common/locales/en-PG.js', '!file-loader?name=assets/locales/angular/en-PH.js!@angular/common/locales/en-PH.js', '!file-loader?name=assets/locales/angular/en-PK.js!@angular/common/locales/en-PK.js', '!file-loader?name=assets/locales/angular/en-PN.js!@angular/common/locales/en-PN.js', '!file-loader?name=assets/locales/angular/en-PR.js!@angular/common/locales/en-PR.js', '!file-loader?name=assets/locales/angular/en-PW.js!@angular/common/locales/en-PW.js', '!file-loader?name=assets/locales/angular/en-RW.js!@angular/common/locales/en-RW.js', '!file-loader?name=assets/locales/angular/en-SB.js!@angular/common/locales/en-SB.js', '!file-loader?name=assets/locales/angular/en-SC.js!@angular/common/locales/en-SC.js', '!file-loader?name=assets/locales/angular/en-SD.js!@angular/common/locales/en-SD.js', '!file-loader?name=assets/locales/angular/en-SE.js!@angular/common/locales/en-SE.js', '!file-loader?name=assets/locales/angular/en-SG.js!@angular/common/locales/en-SG.js', '!file-loader?name=assets/locales/angular/en-SH.js!@angular/common/locales/en-SH.js', '!file-loader?name=assets/locales/angular/en-SI.js!@angular/common/locales/en-SI.js', '!file-loader?name=assets/locales/angular/en-SL.js!@angular/common/locales/en-SL.js', '!file-loader?name=assets/locales/angular/en-SS.js!@angular/common/locales/en-SS.js', '!file-loader?name=assets/locales/angular/en-SX.js!@angular/common/locales/en-SX.js', '!file-loader?name=assets/locales/angular/en-SZ.js!@angular/common/locales/en-SZ.js', '!file-loader?name=assets/locales/angular/en-TC.js!@angular/common/locales/en-TC.js', '!file-loader?name=assets/locales/angular/en-TK.js!@angular/common/locales/en-TK.js', '!file-loader?name=assets/locales/angular/en-TO.js!@angular/common/locales/en-TO.js', '!file-loader?name=assets/locales/angular/en-TT.js!@angular/common/locales/en-TT.js', '!file-loader?name=assets/locales/angular/en-TV.js!@angular/common/locales/en-TV.js', '!file-loader?name=assets/locales/angular/en-TZ.js!@angular/common/locales/en-TZ.js', '!file-loader?name=assets/locales/angular/en-UG.js!@angular/common/locales/en-UG.js', '!file-loader?name=assets/locales/angular/en-UM.js!@angular/common/locales/en-UM.js', '!file-loader?name=assets/locales/angular/en-US-POSIX.js!@angular/common/locales/en-US-POSIX.js', '!file-loader?name=assets/locales/angular/en-VC.js!@angular/common/locales/en-VC.js', '!file-loader?name=assets/locales/angular/en-VG.js!@angular/common/locales/en-VG.js', '!file-loader?name=assets/locales/angular/en-VI.js!@angular/common/locales/en-VI.js', '!file-loader?name=assets/locales/angular/en-VU.js!@angular/common/locales/en-VU.js', '!file-loader?name=assets/locales/angular/en-WS.js!@angular/common/locales/en-WS.js', '!file-loader?name=assets/locales/angular/en-ZA.js!@angular/common/locales/en-ZA.js', '!file-loader?name=assets/locales/angular/en-ZM.js!@angular/common/locales/en-ZM.js', '!file-loader?name=assets/locales/angular/en-ZW.js!@angular/common/locales/en-ZW.js', '!file-loader?name=assets/locales/angular/en.js!@angular/common/locales/en.js', '!file-loader?name=assets/locales/angular/eo.js!@angular/common/locales/eo.js', '!file-loader?name=assets/locales/angular/es-419.js!@angular/common/locales/es-419.js', '!file-loader?name=assets/locales/angular/es-AR.js!@angular/common/locales/es-AR.js', '!file-loader?name=assets/locales/angular/es-BO.js!@angular/common/locales/es-BO.js', '!file-loader?name=assets/locales/angular/es-BR.js!@angular/common/locales/es-BR.js', '!file-loader?name=assets/locales/angular/es-BZ.js!@angular/common/locales/es-BZ.js', '!file-loader?name=assets/locales/angular/es-CL.js!@angular/common/locales/es-CL.js', '!file-loader?name=assets/locales/angular/es-CO.js!@angular/common/locales/es-CO.js', '!file-loader?name=assets/locales/angular/es-CR.js!@angular/common/locales/es-CR.js', '!file-loader?name=assets/locales/angular/es-CU.js!@angular/common/locales/es-CU.js', '!file-loader?name=assets/locales/angular/es-DO.js!@angular/common/locales/es-DO.js', '!file-loader?name=assets/locales/angular/es-EA.js!@angular/common/locales/es-EA.js', '!file-loader?name=assets/locales/angular/es-EC.js!@angular/common/locales/es-EC.js', '!file-loader?name=assets/locales/angular/es-GQ.js!@angular/common/locales/es-GQ.js', '!file-loader?name=assets/locales/angular/es-GT.js!@angular/common/locales/es-GT.js', '!file-loader?name=assets/locales/angular/es-HN.js!@angular/common/locales/es-HN.js', '!file-loader?name=assets/locales/angular/es-IC.js!@angular/common/locales/es-IC.js', '!file-loader?name=assets/locales/angular/es-MX.js!@angular/common/locales/es-MX.js', '!file-loader?name=assets/locales/angular/es-NI.js!@angular/common/locales/es-NI.js', '!file-loader?name=assets/locales/angular/es-PA.js!@angular/common/locales/es-PA.js', '!file-loader?name=assets/locales/angular/es-PE.js!@angular/common/locales/es-PE.js', '!file-loader?name=assets/locales/angular/es-PH.js!@angular/common/locales/es-PH.js', '!file-loader?name=assets/locales/angular/es-PR.js!@angular/common/locales/es-PR.js', '!file-loader?name=assets/locales/angular/es-PY.js!@angular/common/locales/es-PY.js', '!file-loader?name=assets/locales/angular/es-SV.js!@angular/common/locales/es-SV.js', '!file-loader?name=assets/locales/angular/es-US.js!@angular/common/locales/es-US.js', '!file-loader?name=assets/locales/angular/es-UY.js!@angular/common/locales/es-UY.js', '!file-loader?name=assets/locales/angular/es-VE.js!@angular/common/locales/es-VE.js', '!file-loader?name=assets/locales/angular/es.js!@angular/common/locales/es.js', '!file-loader?name=assets/locales/angular/et.js!@angular/common/locales/et.js', '!file-loader?name=assets/locales/angular/eu.js!@angular/common/locales/eu.js', '!file-loader?name=assets/locales/angular/ewo.js!@angular/common/locales/ewo.js', '!file-loader?name=assets/locales/angular/fa-AF.js!@angular/common/locales/fa-AF.js', '!file-loader?name=assets/locales/angular/fa.js!@angular/common/locales/fa.js', '!file-loader?name=assets/locales/angular/ff-CM.js!@angular/common/locales/ff-CM.js', '!file-loader?name=assets/locales/angular/ff-GN.js!@angular/common/locales/ff-GN.js', '!file-loader?name=assets/locales/angular/ff-MR.js!@angular/common/locales/ff-MR.js', '!file-loader?name=assets/locales/angular/ff.js!@angular/common/locales/ff.js', '!file-loader?name=assets/locales/angular/fi.js!@angular/common/locales/fi.js', '!file-loader?name=assets/locales/angular/fil.js!@angular/common/locales/fil.js', '!file-loader?name=assets/locales/angular/fo-DK.js!@angular/common/locales/fo-DK.js', '!file-loader?name=assets/locales/angular/fo.js!@angular/common/locales/fo.js', '!file-loader?name=assets/locales/angular/fr-BE.js!@angular/common/locales/fr-BE.js', '!file-loader?name=assets/locales/angular/fr-BF.js!@angular/common/locales/fr-BF.js', '!file-loader?name=assets/locales/angular/fr-BI.js!@angular/common/locales/fr-BI.js', '!file-loader?name=assets/locales/angular/fr-BJ.js!@angular/common/locales/fr-BJ.js', '!file-loader?name=assets/locales/angular/fr-BL.js!@angular/common/locales/fr-BL.js', '!file-loader?name=assets/locales/angular/fr-CA.js!@angular/common/locales/fr-CA.js', '!file-loader?name=assets/locales/angular/fr-CD.js!@angular/common/locales/fr-CD.js', '!file-loader?name=assets/locales/angular/fr-CF.js!@angular/common/locales/fr-CF.js', '!file-loader?name=assets/locales/angular/fr-CG.js!@angular/common/locales/fr-CG.js', '!file-loader?name=assets/locales/angular/fr-CH.js!@angular/common/locales/fr-CH.js', '!file-loader?name=assets/locales/angular/fr-CI.js!@angular/common/locales/fr-CI.js', '!file-loader?name=assets/locales/angular/fr-CM.js!@angular/common/locales/fr-CM.js', '!file-loader?name=assets/locales/angular/fr-DJ.js!@angular/common/locales/fr-DJ.js', '!file-loader?name=assets/locales/angular/fr-DZ.js!@angular/common/locales/fr-DZ.js', '!file-loader?name=assets/locales/angular/fr-GA.js!@angular/common/locales/fr-GA.js', '!file-loader?name=assets/locales/angular/fr-GF.js!@angular/common/locales/fr-GF.js', '!file-loader?name=assets/locales/angular/fr-GN.js!@angular/common/locales/fr-GN.js', '!file-loader?name=assets/locales/angular/fr-GP.js!@angular/common/locales/fr-GP.js', '!file-loader?name=assets/locales/angular/fr-GQ.js!@angular/common/locales/fr-GQ.js', '!file-loader?name=assets/locales/angular/fr-HT.js!@angular/common/locales/fr-HT.js', '!file-loader?name=assets/locales/angular/fr-KM.js!@angular/common/locales/fr-KM.js', '!file-loader?name=assets/locales/angular/fr-LU.js!@angular/common/locales/fr-LU.js', '!file-loader?name=assets/locales/angular/fr-MA.js!@angular/common/locales/fr-MA.js', '!file-loader?name=assets/locales/angular/fr-MC.js!@angular/common/locales/fr-MC.js', '!file-loader?name=assets/locales/angular/fr-MF.js!@angular/common/locales/fr-MF.js', '!file-loader?name=assets/locales/angular/fr-MG.js!@angular/common/locales/fr-MG.js', '!file-loader?name=assets/locales/angular/fr-ML.js!@angular/common/locales/fr-ML.js', '!file-loader?name=assets/locales/angular/fr-MQ.js!@angular/common/locales/fr-MQ.js', '!file-loader?name=assets/locales/angular/fr-MR.js!@angular/common/locales/fr-MR.js', '!file-loader?name=assets/locales/angular/fr-MU.js!@angular/common/locales/fr-MU.js', '!file-loader?name=assets/locales/angular/fr-NC.js!@angular/common/locales/fr-NC.js', '!file-loader?name=assets/locales/angular/fr-NE.js!@angular/common/locales/fr-NE.js', '!file-loader?name=assets/locales/angular/fr-PF.js!@angular/common/locales/fr-PF.js', '!file-loader?name=assets/locales/angular/fr-PM.js!@angular/common/locales/fr-PM.js', '!file-loader?name=assets/locales/angular/fr-RE.js!@angular/common/locales/fr-RE.js', '!file-loader?name=assets/locales/angular/fr-RW.js!@angular/common/locales/fr-RW.js', '!file-loader?name=assets/locales/angular/fr-SC.js!@angular/common/locales/fr-SC.js', '!file-loader?name=assets/locales/angular/fr-SN.js!@angular/common/locales/fr-SN.js', '!file-loader?name=assets/locales/angular/fr-SY.js!@angular/common/locales/fr-SY.js', '!file-loader?name=assets/locales/angular/fr-TD.js!@angular/common/locales/fr-TD.js', '!file-loader?name=assets/locales/angular/fr-TG.js!@angular/common/locales/fr-TG.js', '!file-loader?name=assets/locales/angular/fr-TN.js!@angular/common/locales/fr-TN.js', '!file-loader?name=assets/locales/angular/fr-VU.js!@angular/common/locales/fr-VU.js', '!file-loader?name=assets/locales/angular/fr-WF.js!@angular/common/locales/fr-WF.js', '!file-loader?name=assets/locales/angular/fr-YT.js!@angular/common/locales/fr-YT.js', '!file-loader?name=assets/locales/angular/fr.js!@angular/common/locales/fr.js', '!file-loader?name=assets/locales/angular/fur.js!@angular/common/locales/fur.js', '!file-loader?name=assets/locales/angular/fy.js!@angular/common/locales/fy.js', '!file-loader?name=assets/locales/angular/ga.js!@angular/common/locales/ga.js', '!file-loader?name=assets/locales/angular/gd.js!@angular/common/locales/gd.js', '!file-loader?name=assets/locales/angular/gl.js!@angular/common/locales/gl.js', '!file-loader?name=assets/locales/angular/gsw-FR.js!@angular/common/locales/gsw-FR.js', '!file-loader?name=assets/locales/angular/gsw-LI.js!@angular/common/locales/gsw-LI.js', '!file-loader?name=assets/locales/angular/gsw.js!@angular/common/locales/gsw.js', '!file-loader?name=assets/locales/angular/gu.js!@angular/common/locales/gu.js', '!file-loader?name=assets/locales/angular/guz.js!@angular/common/locales/guz.js', '!file-loader?name=assets/locales/angular/gv.js!@angular/common/locales/gv.js', '!file-loader?name=assets/locales/angular/ha-GH.js!@angular/common/locales/ha-GH.js', '!file-loader?name=assets/locales/angular/ha-NE.js!@angular/common/locales/ha-NE.js', '!file-loader?name=assets/locales/angular/ha.js!@angular/common/locales/ha.js', '!file-loader?name=assets/locales/angular/haw.js!@angular/common/locales/haw.js', '!file-loader?name=assets/locales/angular/he.js!@angular/common/locales/he.js', '!file-loader?name=assets/locales/angular/hi.js!@angular/common/locales/hi.js', '!file-loader?name=assets/locales/angular/hr-BA.js!@angular/common/locales/hr-BA.js', '!file-loader?name=assets/locales/angular/hr.js!@angular/common/locales/hr.js', '!file-loader?name=assets/locales/angular/hsb.js!@angular/common/locales/hsb.js', '!file-loader?name=assets/locales/angular/hu.js!@angular/common/locales/hu.js', '!file-loader?name=assets/locales/angular/hy.js!@angular/common/locales/hy.js', '!file-loader?name=assets/locales/angular/id.js!@angular/common/locales/id.js', '!file-loader?name=assets/locales/angular/ig.js!@angular/common/locales/ig.js', '!file-loader?name=assets/locales/angular/ii.js!@angular/common/locales/ii.js', '!file-loader?name=assets/locales/angular/is.js!@angular/common/locales/is.js', '!file-loader?name=assets/locales/angular/it-CH.js!@angular/common/locales/it-CH.js', '!file-loader?name=assets/locales/angular/it-SM.js!@angular/common/locales/it-SM.js', '!file-loader?name=assets/locales/angular/it-VA.js!@angular/common/locales/it-VA.js', '!file-loader?name=assets/locales/angular/it.js!@angular/common/locales/it.js', '!file-loader?name=assets/locales/angular/ja.js!@angular/common/locales/ja.js', '!file-loader?name=assets/locales/angular/jgo.js!@angular/common/locales/jgo.js', '!file-loader?name=assets/locales/angular/jmc.js!@angular/common/locales/jmc.js', '!file-loader?name=assets/locales/angular/ka.js!@angular/common/locales/ka.js', '!file-loader?name=assets/locales/angular/kab.js!@angular/common/locales/kab.js', '!file-loader?name=assets/locales/angular/kam.js!@angular/common/locales/kam.js', '!file-loader?name=assets/locales/angular/kde.js!@angular/common/locales/kde.js', '!file-loader?name=assets/locales/angular/kea.js!@angular/common/locales/kea.js', '!file-loader?name=assets/locales/angular/khq.js!@angular/common/locales/khq.js', '!file-loader?name=assets/locales/angular/ki.js!@angular/common/locales/ki.js', '!file-loader?name=assets/locales/angular/kk.js!@angular/common/locales/kk.js', '!file-loader?name=assets/locales/angular/kkj.js!@angular/common/locales/kkj.js', '!file-loader?name=assets/locales/angular/kl.js!@angular/common/locales/kl.js', '!file-loader?name=assets/locales/angular/kln.js!@angular/common/locales/kln.js', '!file-loader?name=assets/locales/angular/km.js!@angular/common/locales/km.js', '!file-loader?name=assets/locales/angular/kn.js!@angular/common/locales/kn.js', '!file-loader?name=assets/locales/angular/ko-KP.js!@angular/common/locales/ko-KP.js', '!file-loader?name=assets/locales/angular/ko.js!@angular/common/locales/ko.js', '!file-loader?name=assets/locales/angular/kok.js!@angular/common/locales/kok.js', '!file-loader?name=assets/locales/angular/ks.js!@angular/common/locales/ks.js', '!file-loader?name=assets/locales/angular/ksb.js!@angular/common/locales/ksb.js', '!file-loader?name=assets/locales/angular/ksf.js!@angular/common/locales/ksf.js', '!file-loader?name=assets/locales/angular/ksh.js!@angular/common/locales/ksh.js', '!file-loader?name=assets/locales/angular/kw.js!@angular/common/locales/kw.js', '!file-loader?name=assets/locales/angular/ky.js!@angular/common/locales/ky.js', '!file-loader?name=assets/locales/angular/lag.js!@angular/common/locales/lag.js', '!file-loader?name=assets/locales/angular/lb.js!@angular/common/locales/lb.js', '!file-loader?name=assets/locales/angular/lg.js!@angular/common/locales/lg.js', '!file-loader?name=assets/locales/angular/lkt.js!@angular/common/locales/lkt.js', '!file-loader?name=assets/locales/angular/ln-AO.js!@angular/common/locales/ln-AO.js', '!file-loader?name=assets/locales/angular/ln-CF.js!@angular/common/locales/ln-CF.js', '!file-loader?name=assets/locales/angular/ln-CG.js!@angular/common/locales/ln-CG.js', '!file-loader?name=assets/locales/angular/ln.js!@angular/common/locales/ln.js', '!file-loader?name=assets/locales/angular/lo.js!@angular/common/locales/lo.js', '!file-loader?name=assets/locales/angular/lrc-IQ.js!@angular/common/locales/lrc-IQ.js', '!file-loader?name=assets/locales/angular/lrc.js!@angular/common/locales/lrc.js', '!file-loader?name=assets/locales/angular/lt.js!@angular/common/locales/lt.js', '!file-loader?name=assets/locales/angular/lu.js!@angular/common/locales/lu.js', '!file-loader?name=assets/locales/angular/luo.js!@angular/common/locales/luo.js', '!file-loader?name=assets/locales/angular/luy.js!@angular/common/locales/luy.js', '!file-loader?name=assets/locales/angular/lv.js!@angular/common/locales/lv.js', '!file-loader?name=assets/locales/angular/mas-TZ.js!@angular/common/locales/mas-TZ.js', '!file-loader?name=assets/locales/angular/mas.js!@angular/common/locales/mas.js', '!file-loader?name=assets/locales/angular/mer.js!@angular/common/locales/mer.js', '!file-loader?name=assets/locales/angular/mfe.js!@angular/common/locales/mfe.js', '!file-loader?name=assets/locales/angular/mg.js!@angular/common/locales/mg.js', '!file-loader?name=assets/locales/angular/mgh.js!@angular/common/locales/mgh.js', '!file-loader?name=assets/locales/angular/mgo.js!@angular/common/locales/mgo.js', '!file-loader?name=assets/locales/angular/mk.js!@angular/common/locales/mk.js', '!file-loader?name=assets/locales/angular/ml.js!@angular/common/locales/ml.js', '!file-loader?name=assets/locales/angular/mn.js!@angular/common/locales/mn.js', '!file-loader?name=assets/locales/angular/mr.js!@angular/common/locales/mr.js', '!file-loader?name=assets/locales/angular/ms-BN.js!@angular/common/locales/ms-BN.js', '!file-loader?name=assets/locales/angular/ms-SG.js!@angular/common/locales/ms-SG.js', '!file-loader?name=assets/locales/angular/ms.js!@angular/common/locales/ms.js', '!file-loader?name=assets/locales/angular/mt.js!@angular/common/locales/mt.js', '!file-loader?name=assets/locales/angular/mua.js!@angular/common/locales/mua.js', '!file-loader?name=assets/locales/angular/my.js!@angular/common/locales/my.js', '!file-loader?name=assets/locales/angular/mzn.js!@angular/common/locales/mzn.js', '!file-loader?name=assets/locales/angular/naq.js!@angular/common/locales/naq.js', '!file-loader?name=assets/locales/angular/nb-SJ.js!@angular/common/locales/nb-SJ.js', '!file-loader?name=assets/locales/angular/nb.js!@angular/common/locales/nb.js', '!file-loader?name=assets/locales/angular/nd.js!@angular/common/locales/nd.js', '!file-loader?name=assets/locales/angular/nds-NL.js!@angular/common/locales/nds-NL.js', '!file-loader?name=assets/locales/angular/nds.js!@angular/common/locales/nds.js', '!file-loader?name=assets/locales/angular/ne-IN.js!@angular/common/locales/ne-IN.js', '!file-loader?name=assets/locales/angular/ne.js!@angular/common/locales/ne.js', '!file-loader?name=assets/locales/angular/nl-AW.js!@angular/common/locales/nl-AW.js', '!file-loader?name=assets/locales/angular/nl-BE.js!@angular/common/locales/nl-BE.js', '!file-loader?name=assets/locales/angular/nl-BQ.js!@angular/common/locales/nl-BQ.js', '!file-loader?name=assets/locales/angular/nl-CW.js!@angular/common/locales/nl-CW.js', '!file-loader?name=assets/locales/angular/nl-SR.js!@angular/common/locales/nl-SR.js', '!file-loader?name=assets/locales/angular/nl-SX.js!@angular/common/locales/nl-SX.js', '!file-loader?name=assets/locales/angular/nl.js!@angular/common/locales/nl.js', '!file-loader?name=assets/locales/angular/nmg.js!@angular/common/locales/nmg.js', '!file-loader?name=assets/locales/angular/nn.js!@angular/common/locales/nn.js', '!file-loader?name=assets/locales/angular/nnh.js!@angular/common/locales/nnh.js', '!file-loader?name=assets/locales/angular/nus.js!@angular/common/locales/nus.js', '!file-loader?name=assets/locales/angular/nyn.js!@angular/common/locales/nyn.js', '!file-loader?name=assets/locales/angular/om-KE.js!@angular/common/locales/om-KE.js', '!file-loader?name=assets/locales/angular/om.js!@angular/common/locales/om.js', '!file-loader?name=assets/locales/angular/or.js!@angular/common/locales/or.js', '!file-loader?name=assets/locales/angular/os-RU.js!@angular/common/locales/os-RU.js', '!file-loader?name=assets/locales/angular/os.js!@angular/common/locales/os.js', '!file-loader?name=assets/locales/angular/pa-Arab.js!@angular/common/locales/pa-Arab.js', '!file-loader?name=assets/locales/angular/pa-Guru.js!@angular/common/locales/pa-Guru.js', '!file-loader?name=assets/locales/angular/pa.js!@angular/common/locales/pa.js', '!file-loader?name=assets/locales/angular/pl.js!@angular/common/locales/pl.js', '!file-loader?name=assets/locales/angular/prg.js!@angular/common/locales/prg.js', '!file-loader?name=assets/locales/angular/ps.js!@angular/common/locales/ps.js', '!file-loader?name=assets/locales/angular/pt-AO.js!@angular/common/locales/pt-AO.js', '!file-loader?name=assets/locales/angular/pt-CH.js!@angular/common/locales/pt-CH.js', '!file-loader?name=assets/locales/angular/pt-CV.js!@angular/common/locales/pt-CV.js', '!file-loader?name=assets/locales/angular/pt-GQ.js!@angular/common/locales/pt-GQ.js', '!file-loader?name=assets/locales/angular/pt-GW.js!@angular/common/locales/pt-GW.js', '!file-loader?name=assets/locales/angular/pt-LU.js!@angular/common/locales/pt-LU.js', '!file-loader?name=assets/locales/angular/pt-MO.js!@angular/common/locales/pt-MO.js', '!file-loader?name=assets/locales/angular/pt-MZ.js!@angular/common/locales/pt-MZ.js', '!file-loader?name=assets/locales/angular/pt-PT.js!@angular/common/locales/pt-PT.js', '!file-loader?name=assets/locales/angular/pt-ST.js!@angular/common/locales/pt-ST.js', '!file-loader?name=assets/locales/angular/pt-TL.js!@angular/common/locales/pt-TL.js', '!file-loader?name=assets/locales/angular/pt.js!@angular/common/locales/pt.js', '!file-loader?name=assets/locales/angular/qu-BO.js!@angular/common/locales/qu-BO.js', '!file-loader?name=assets/locales/angular/qu-EC.js!@angular/common/locales/qu-EC.js', '!file-loader?name=assets/locales/angular/qu.js!@angular/common/locales/qu.js', '!file-loader?name=assets/locales/angular/rm.js!@angular/common/locales/rm.js', '!file-loader?name=assets/locales/angular/rn.js!@angular/common/locales/rn.js', '!file-loader?name=assets/locales/angular/ro-MD.js!@angular/common/locales/ro-MD.js', '!file-loader?name=assets/locales/angular/ro.js!@angular/common/locales/ro.js', '!file-loader?name=assets/locales/angular/rof.js!@angular/common/locales/rof.js', '!file-loader?name=assets/locales/angular/root.js!@angular/common/locales/root.js', '!file-loader?name=assets/locales/angular/ru-BY.js!@angular/common/locales/ru-BY.js', '!file-loader?name=assets/locales/angular/ru-KG.js!@angular/common/locales/ru-KG.js', '!file-loader?name=assets/locales/angular/ru-KZ.js!@angular/common/locales/ru-KZ.js', '!file-loader?name=assets/locales/angular/ru-MD.js!@angular/common/locales/ru-MD.js', '!file-loader?name=assets/locales/angular/ru-UA.js!@angular/common/locales/ru-UA.js', '!file-loader?name=assets/locales/angular/ru.js!@angular/common/locales/ru.js', '!file-loader?name=assets/locales/angular/rw.js!@angular/common/locales/rw.js', '!file-loader?name=assets/locales/angular/rwk.js!@angular/common/locales/rwk.js', '!file-loader?name=assets/locales/angular/sah.js!@angular/common/locales/sah.js', '!file-loader?name=assets/locales/angular/saq.js!@angular/common/locales/saq.js', '!file-loader?name=assets/locales/angular/sbp.js!@angular/common/locales/sbp.js', '!file-loader?name=assets/locales/angular/sd.js!@angular/common/locales/sd.js', '!file-loader?name=assets/locales/angular/se-FI.js!@angular/common/locales/se-FI.js', '!file-loader?name=assets/locales/angular/se-SE.js!@angular/common/locales/se-SE.js', '!file-loader?name=assets/locales/angular/se.js!@angular/common/locales/se.js', '!file-loader?name=assets/locales/angular/seh.js!@angular/common/locales/seh.js', '!file-loader?name=assets/locales/angular/ses.js!@angular/common/locales/ses.js', '!file-loader?name=assets/locales/angular/sg.js!@angular/common/locales/sg.js', '!file-loader?name=assets/locales/angular/shi-Latn.js!@angular/common/locales/shi-Latn.js', '!file-loader?name=assets/locales/angular/shi-Tfng.js!@angular/common/locales/shi-Tfng.js', '!file-loader?name=assets/locales/angular/shi.js!@angular/common/locales/shi.js', '!file-loader?name=assets/locales/angular/si.js!@angular/common/locales/si.js', '!file-loader?name=assets/locales/angular/sk.js!@angular/common/locales/sk.js', '!file-loader?name=assets/locales/angular/sl.js!@angular/common/locales/sl.js', '!file-loader?name=assets/locales/angular/smn.js!@angular/common/locales/smn.js', '!file-loader?name=assets/locales/angular/sn.js!@angular/common/locales/sn.js', '!file-loader?name=assets/locales/angular/so-DJ.js!@angular/common/locales/so-DJ.js', '!file-loader?name=assets/locales/angular/so-ET.js!@angular/common/locales/so-ET.js', '!file-loader?name=assets/locales/angular/so-KE.js!@angular/common/locales/so-KE.js', '!file-loader?name=assets/locales/angular/so.js!@angular/common/locales/so.js', '!file-loader?name=assets/locales/angular/sq-MK.js!@angular/common/locales/sq-MK.js', '!file-loader?name=assets/locales/angular/sq-XK.js!@angular/common/locales/sq-XK.js', '!file-loader?name=assets/locales/angular/sq.js!@angular/common/locales/sq.js', '!file-loader?name=assets/locales/angular/sr-Cyrl-BA.js!@angular/common/locales/sr-Cyrl-BA.js', '!file-loader?name=assets/locales/angular/sr-Cyrl-ME.js!@angular/common/locales/sr-Cyrl-ME.js', '!file-loader?name=assets/locales/angular/sr-Cyrl-XK.js!@angular/common/locales/sr-Cyrl-XK.js', '!file-loader?name=assets/locales/angular/sr-Cyrl.js!@angular/common/locales/sr-Cyrl.js', '!file-loader?name=assets/locales/angular/sr-Latn-BA.js!@angular/common/locales/sr-Latn-BA.js', '!file-loader?name=assets/locales/angular/sr-Latn-ME.js!@angular/common/locales/sr-Latn-ME.js', '!file-loader?name=assets/locales/angular/sr-Latn-XK.js!@angular/common/locales/sr-Latn-XK.js', '!file-loader?name=assets/locales/angular/sr-Latn.js!@angular/common/locales/sr-Latn.js', '!file-loader?name=assets/locales/angular/sr.js!@angular/common/locales/sr.js', '!file-loader?name=assets/locales/angular/sv-AX.js!@angular/common/locales/sv-AX.js', '!file-loader?name=assets/locales/angular/sv-FI.js!@angular/common/locales/sv-FI.js', '!file-loader?name=assets/locales/angular/sv.js!@angular/common/locales/sv.js', '!file-loader?name=assets/locales/angular/sw-CD.js!@angular/common/locales/sw-CD.js', '!file-loader?name=assets/locales/angular/sw-KE.js!@angular/common/locales/sw-KE.js', '!file-loader?name=assets/locales/angular/sw-UG.js!@angular/common/locales/sw-UG.js', '!file-loader?name=assets/locales/angular/sw.js!@angular/common/locales/sw.js', '!file-loader?name=assets/locales/angular/ta-LK.js!@angular/common/locales/ta-LK.js', '!file-loader?name=assets/locales/angular/ta-MY.js!@angular/common/locales/ta-MY.js', '!file-loader?name=assets/locales/angular/ta-SG.js!@angular/common/locales/ta-SG.js', '!file-loader?name=assets/locales/angular/ta.js!@angular/common/locales/ta.js', '!file-loader?name=assets/locales/angular/te.js!@angular/common/locales/te.js', '!file-loader?name=assets/locales/angular/teo-KE.js!@angular/common/locales/teo-KE.js', '!file-loader?name=assets/locales/angular/teo.js!@angular/common/locales/teo.js', '!file-loader?name=assets/locales/angular/tg.js!@angular/common/locales/tg.js', '!file-loader?name=assets/locales/angular/th.js!@angular/common/locales/th.js', '!file-loader?name=assets/locales/angular/ti-ER.js!@angular/common/locales/ti-ER.js', '!file-loader?name=assets/locales/angular/ti.js!@angular/common/locales/ti.js', '!file-loader?name=assets/locales/angular/tk.js!@angular/common/locales/tk.js', '!file-loader?name=assets/locales/angular/to.js!@angular/common/locales/to.js', '!file-loader?name=assets/locales/angular/tr-CY.js!@angular/common/locales/tr-CY.js', '!file-loader?name=assets/locales/angular/tr.js!@angular/common/locales/tr.js', '!file-loader?name=assets/locales/angular/tt.js!@angular/common/locales/tt.js', '!file-loader?name=assets/locales/angular/twq.js!@angular/common/locales/twq.js', '!file-loader?name=assets/locales/angular/tzm.js!@angular/common/locales/tzm.js', '!file-loader?name=assets/locales/angular/ug.js!@angular/common/locales/ug.js', '!file-loader?name=assets/locales/angular/uk.js!@angular/common/locales/uk.js', '!file-loader?name=assets/locales/angular/ur-IN.js!@angular/common/locales/ur-IN.js', '!file-loader?name=assets/locales/angular/ur.js!@angular/common/locales/ur.js', '!file-loader?name=assets/locales/angular/uz-Arab.js!@angular/common/locales/uz-Arab.js', '!file-loader?name=assets/locales/angular/uz-Cyrl.js!@angular/common/locales/uz-Cyrl.js', '!file-loader?name=assets/locales/angular/uz-Latn.js!@angular/common/locales/uz-Latn.js', '!file-loader?name=assets/locales/angular/uz.js!@angular/common/locales/uz.js', '!file-loader?name=assets/locales/angular/vai-Latn.js!@angular/common/locales/vai-Latn.js', '!file-loader?name=assets/locales/angular/vai-Vaii.js!@angular/common/locales/vai-Vaii.js', '!file-loader?name=assets/locales/angular/vai.js!@angular/common/locales/vai.js', '!file-loader?name=assets/locales/angular/vi.js!@angular/common/locales/vi.js', '!file-loader?name=assets/locales/angular/vo.js!@angular/common/locales/vo.js', '!file-loader?name=assets/locales/angular/vun.js!@angular/common/locales/vun.js', '!file-loader?name=assets/locales/angular/wae.js!@angular/common/locales/wae.js', '!file-loader?name=assets/locales/angular/wo.js!@angular/common/locales/wo.js', '!file-loader?name=assets/locales/angular/xog.js!@angular/common/locales/xog.js', '!file-loader?name=assets/locales/angular/yav.js!@angular/common/locales/yav.js', '!file-loader?name=assets/locales/angular/yi.js!@angular/common/locales/yi.js', '!file-loader?name=assets/locales/angular/yo-BJ.js!@angular/common/locales/yo-BJ.js', '!file-loader?name=assets/locales/angular/yo.js!@angular/common/locales/yo.js', '!file-loader?name=assets/locales/angular/yue-Hans.js!@angular/common/locales/yue-Hans.js', '!file-loader?name=assets/locales/angular/yue-Hant.js!@angular/common/locales/yue-Hant.js', '!file-loader?name=assets/locales/angular/yue.js!@angular/common/locales/yue.js', '!file-loader?name=assets/locales/angular/zgh.js!@angular/common/locales/zgh.js', '!file-loader?name=assets/locales/angular/zh-Hans-HK.js!@angular/common/locales/zh-Hans-HK.js', '!file-loader?name=assets/locales/angular/zh-Hans-MO.js!@angular/common/locales/zh-Hans-MO.js', '!file-loader?name=assets/locales/angular/zh-Hans-SG.js!@angular/common/locales/zh-Hans-SG.js', '!file-loader?name=assets/locales/angular/zh-Hans.js!@angular/common/locales/zh-Hans.js', '!file-loader?name=assets/locales/angular/zh-Hant-HK.js!@angular/common/locales/zh-Hant-HK.js', '!file-loader?name=assets/locales/angular/zh-Hant-MO.js!@angular/common/locales/zh-Hant-MO.js', '!file-loader?name=assets/locales/angular/zh-Hant.js!@angular/common/locales/zh-Hant.js', '!file-loader?name=assets/locales/angular/zh.js!@angular/common/locales/zh.js', '!file-loader?name=assets/locales/angular/zu.js!@angular/common/locales/zu.js', 'ngx-bootstrap/collapse', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/tooltip', '@angular/forms', '@angular/platform-browser', 'ngx-bootstrap/modal', 'ngx-bootstrap/popover', 'libphonenumber-js/max', '@angular/upgrade/static', '@angular/cdk/table', '@angular/cdk/drag-drop', 'ngx-bootstrap/pagination', '@angular/cdk/stepper'], factory) :
    (global = global || self, factory((global.c8y = global.c8y || {}, global.c8y['ngx-components'] = {}), global.ng.core, global.ng.router, global.rxjs, global.rxjs.operators, global.lodashEs, global.c8y['ngx-components'].api, global.client, global.core$1, global.lodash, global.ng.common, global.ng.common.http, global.afNA_js, global.af_js, global.agq_js, global.ak_js, global.am_js, global.arAE_js, global.arBH_js, global.arDJ_js, global.arDZ_js, global.arEG_js, global.arEH_js, global.arER_js, global.arIL_js, global.arIQ_js, global.arJO_js, global.arKM_js, global.arKW_js, global.arLB_js, global.arLY_js, global.arMA_js, global.arMR_js, global.arOM_js, global.arPS_js, global.arQA_js, global.arSA_js, global.arSD_js, global.arSO_js, global.arSS_js, global.arSY_js, global.arTD_js, global.arTN_js, global.arYE_js, global.ar_js, global.as_js, global.asa_js, global.ast_js, global.azCyrl_js, global.azLatn_js, global.az_js, global.bas_js, global.be_js, global.bem_js, global.bez_js, global.bg_js, global.bm_js, global.bnIN_js, global.bn_js, global.boIN_js, global.bo_js, global.br_js, global.brx_js, global.bsCyrl_js, global.bsLatn_js, global.bs_js, global.caAD_js, global.caESVALENCIA_js, global.caFR_js, global.caIT_js, global.ca_js, global.ccpIN_js, global.ccp_js, global.ce_js, global.cgg_js, global.chr_js, global.ckbIR_js, global.ckb_js, global.cs_js, global.cu_js, global.cy_js, global.daGL_js, global.da_js, global.dav_js, global.deAT_js, global.deBE_js, global.deCH_js, global.deIT_js, global.deLI_js, global.deLU_js, global.de_js, global.dje_js, global.dsb_js, global.dua_js, global.dyo_js, global.dz_js, global.ebu_js, global.eeTG_js, global.ee_js, global.elCY_js, global.el_js, global.en001_js, global.en150_js, global.enAG_js, global.enAI_js, global.enAS_js, global.enAT_js, global.enAU_js, global.enBB_js, global.enBE_js, global.enBI_js, global.enBM_js, global.enBS_js, global.enBW_js, global.enBZ_js, global.enCA_js, global.enCC_js, global.enCH_js, global.enCK_js, global.enCM_js, global.enCX_js, global.enCY_js, global.enDE_js, global.enDG_js, global.enDK_js, global.enDM_js, global.enER_js, global.enFI_js, global.enFJ_js, global.enFK_js, global.enFM_js, global.enGB_js, global.enGD_js, global.enGG_js, global.enGH_js, global.enGI_js, global.enGM_js, global.enGU_js, global.enGY_js, global.enHK_js, global.enIE_js, global.enIL_js, global.enIM_js, global.enIN_js, global.enIO_js, global.enJE_js, global.enJM_js, global.enKE_js, global.enKI_js, global.enKN_js, global.enKY_js, global.enLC_js, global.enLR_js, global.enLS_js, global.enMG_js, global.enMH_js, global.enMO_js, global.enMP_js, global.enMS_js, global.enMT_js, global.enMU_js, global.enMW_js, global.enMY_js, global.enNA_js, global.enNF_js, global.enNG_js, global.enNL_js, global.enNR_js, global.enNU_js, global.enNZ_js, global.enPG_js, global.enPH_js, global.enPK_js, global.enPN_js, global.enPR_js, global.enPW_js, global.enRW_js, global.enSB_js, global.enSC_js, global.enSD_js, global.enSE_js, global.enSG_js, global.enSH_js, global.enSI_js, global.enSL_js, global.enSS_js, global.enSX_js, global.enSZ_js, global.enTC_js, global.enTK_js, global.enTO_js, global.enTT_js, global.enTV_js, global.enTZ_js, global.enUG_js, global.enUM_js, global.enUSPOSIX_js, global.enVC_js, global.enVG_js, global.enVI_js, global.enVU_js, global.enWS_js, global.enZA_js, global.enZM_js, global.enZW_js, global.en_js, global.eo_js, global.es419_js, global.esAR_js, global.esBO_js, global.esBR_js, global.esBZ_js, global.esCL_js, global.esCO_js, global.esCR_js, global.esCU_js, global.esDO_js, global.esEA_js, global.esEC_js, global.esGQ_js, global.esGT_js, global.esHN_js, global.esIC_js, global.esMX_js, global.esNI_js, global.esPA_js, global.esPE_js, global.esPH_js, global.esPR_js, global.esPY_js, global.esSV_js, global.esUS_js, global.esUY_js, global.esVE_js, global.es_js, global.et_js, global.eu_js, global.ewo_js, global.faAF_js, global.fa_js, global.ffCM_js, global.ffGN_js, global.ffMR_js, global.ff_js, global.fi_js, global.fil_js, global.foDK_js, global.fo_js, global.frBE_js, global.frBF_js, global.frBI_js, global.frBJ_js, global.frBL_js, global.frCA_js, global.frCD_js, global.frCF_js, global.frCG_js, global.frCH_js, global.frCI_js, global.frCM_js, global.frDJ_js, global.frDZ_js, global.frGA_js, global.frGF_js, global.frGN_js, global.frGP_js, global.frGQ_js, global.frHT_js, global.frKM_js, global.frLU_js, global.frMA_js, global.frMC_js, global.frMF_js, global.frMG_js, global.frML_js, global.frMQ_js, global.frMR_js, global.frMU_js, global.frNC_js, global.frNE_js, global.frPF_js, global.frPM_js, global.frRE_js, global.frRW_js, global.frSC_js, global.frSN_js, global.frSY_js, global.frTD_js, global.frTG_js, global.frTN_js, global.frVU_js, global.frWF_js, global.frYT_js, global.fr_js, global.fur_js, global.fy_js, global.ga_js, global.gd_js, global.gl_js, global.gswFR_js, global.gswLI_js, global.gsw_js, global.gu_js, global.guz_js, global.gv_js, global.haGH_js, global.haNE_js, global.ha_js, global.haw_js, global.he_js, global.hi_js, global.hrBA_js, global.hr_js, global.hsb_js, global.hu_js, global.hy_js, global.id_js, global.ig_js, global.ii_js, global.is_js, global.itCH_js, global.itSM_js, global.itVA_js, global.it_js, global.ja_js, global.jgo_js, global.jmc_js, global.ka_js, global.kab_js, global.kam_js, global.kde_js, global.kea_js, global.khq_js, global.ki_js, global.kk_js, global.kkj_js, global.kl_js, global.kln_js, global.km_js, global.kn_js, global.koKP_js, global.ko_js, global.kok_js, global.ks_js, global.ksb_js, global.ksf_js, global.ksh_js, global.kw_js, global.ky_js, global.lag_js, global.lb_js, global.lg_js, global.lkt_js, global.lnAO_js, global.lnCF_js, global.lnCG_js, global.ln_js, global.lo_js, global.lrcIQ_js, global.lrc_js, global.lt_js, global.lu_js, global.luo_js, global.luy_js, global.lv_js, global.masTZ_js, global.mas_js, global.mer_js, global.mfe_js, global.mg_js, global.mgh_js, global.mgo_js, global.mk_js, global.ml_js, global.mn_js, global.mr_js, global.msBN_js, global.msSG_js, global.ms_js, global.mt_js, global.mua_js, global.my_js, global.mzn_js, global.naq_js, global.nbSJ_js, global.nb_js, global.nd_js, global.ndsNL_js, global.nds_js, global.neIN_js, global.ne_js, global.nlAW_js, global.nlBE_js, global.nlBQ_js, global.nlCW_js, global.nlSR_js, global.nlSX_js, global.nl_js, global.nmg_js, global.nn_js, global.nnh_js, global.nus_js, global.nyn_js, global.omKE_js, global.om_js, global.or_js, global.osRU_js, global.os_js, global.paArab_js, global.paGuru_js, global.pa_js, global.pl_js, global.prg_js, global.ps_js, global.ptAO_js, global.ptCH_js, global.ptCV_js, global.ptGQ_js, global.ptGW_js, global.ptLU_js, global.ptMO_js, global.ptMZ_js, global.ptPT_js, global.ptST_js, global.ptTL_js, global.pt_js, global.quBO_js, global.quEC_js, global.qu_js, global.rm_js, global.rn_js, global.roMD_js, global.ro_js, global.rof_js, global.root_js, global.ruBY_js, global.ruKG_js, global.ruKZ_js, global.ruMD_js, global.ruUA_js, global.ru_js, global.rw_js, global.rwk_js, global.sah_js, global.saq_js, global.sbp_js, global.sd_js, global.seFI_js, global.seSE_js, global.se_js, global.seh_js, global.ses_js, global.sg_js, global.shiLatn_js, global.shiTfng_js, global.shi_js, global.si_js, global.sk_js, global.sl_js, global.smn_js, global.sn_js, global.soDJ_js, global.soET_js, global.soKE_js, global.so_js, global.sqMK_js, global.sqXK_js, global.sq_js, global.srCyrlBA_js, global.srCyrlME_js, global.srCyrlXK_js, global.srCyrl_js, global.srLatnBA_js, global.srLatnME_js, global.srLatnXK_js, global.srLatn_js, global.sr_js, global.svAX_js, global.svFI_js, global.sv_js, global.swCD_js, global.swKE_js, global.swUG_js, global.sw_js, global.taLK_js, global.taMY_js, global.taSG_js, global.ta_js, global.te_js, global.teoKE_js, global.teo_js, global.tg_js, global.th_js, global.tiER_js, global.ti_js, global.tk_js, global.to_js, global.trCY_js, global.tr_js, global.tt_js, global.twq_js, global.tzm_js, global.ug_js, global.uk_js, global.urIN_js, global.ur_js, global.uzArab_js, global.uzCyrl_js, global.uzLatn_js, global.uz_js, global.vaiLatn_js, global.vaiVaii_js, global.vai_js, global.vi_js, global.vo_js, global.vun_js, global.wae_js, global.wo_js, global.xog_js, global.yav_js, global.yi_js, global.yoBJ_js, global.yo_js, global.yueHans_js, global.yueHant_js, global.yue_js, global.zgh_js, global.zhHansHK_js, global.zhHansMO_js, global.zhHansSG_js, global.zhHans_js, global.zhHantHK_js, global.zhHantMO_js, global.zhHant_js, global.zh_js, global.zu_js, global.collapse, global.dropdown, global.tooltip, global.ng.forms, global.ng.platformBrowser, global.modal, global.popover, global.max, global.ng.upgrade.static, global.ng.cdk.table, global.ng.cdk['drag-drop'], global.pagination, global.ng.cdk.stepper));
}(this, (function (exports, core, router, rxjs, operators, lodashEs, api, client, core$1, lodash, common, http, afNA_js, af_js, agq_js, ak_js, am_js, arAE_js, arBH_js, arDJ_js, arDZ_js, arEG_js, arEH_js, arER_js, arIL_js, arIQ_js, arJO_js, arKM_js, arKW_js, arLB_js, arLY_js, arMA_js, arMR_js, arOM_js, arPS_js, arQA_js, arSA_js, arSD_js, arSO_js, arSS_js, arSY_js, arTD_js, arTN_js, arYE_js, ar_js, as_js, asa_js, ast_js, azCyrl_js, azLatn_js, az_js, bas_js, be_js, bem_js, bez_js, bg_js, bm_js, bnIN_js, bn_js, boIN_js, bo_js, br_js, brx_js, bsCyrl_js, bsLatn_js, bs_js, caAD_js, caESVALENCIA_js, caFR_js, caIT_js, ca_js, ccpIN_js, ccp_js, ce_js, cgg_js, chr_js, ckbIR_js, ckb_js, cs_js, cu_js, cy_js, daGL_js, da_js, dav_js, deAT_js, deBE_js, deCH_js, deIT_js, deLI_js, deLU_js, de_js, dje_js, dsb_js, dua_js, dyo_js, dz_js, ebu_js, eeTG_js, ee_js, elCY_js, el_js, en001_js, en150_js, enAG_js, enAI_js, enAS_js, enAT_js, enAU_js, enBB_js, enBE_js, enBI_js, enBM_js, enBS_js, enBW_js, enBZ_js, enCA_js, enCC_js, enCH_js, enCK_js, enCM_js, enCX_js, enCY_js, enDE_js, enDG_js, enDK_js, enDM_js, enER_js, enFI_js, enFJ_js, enFK_js, enFM_js, enGB_js, enGD_js, enGG_js, enGH_js, enGI_js, enGM_js, enGU_js, enGY_js, enHK_js, enIE_js, enIL_js, enIM_js, enIN_js, enIO_js, enJE_js, enJM_js, enKE_js, enKI_js, enKN_js, enKY_js, enLC_js, enLR_js, enLS_js, enMG_js, enMH_js, enMO_js, enMP_js, enMS_js, enMT_js, enMU_js, enMW_js, enMY_js, enNA_js, enNF_js, enNG_js, enNL_js, enNR_js, enNU_js, enNZ_js, enPG_js, enPH_js, enPK_js, enPN_js, enPR_js, enPW_js, enRW_js, enSB_js, enSC_js, enSD_js, enSE_js, enSG_js, enSH_js, enSI_js, enSL_js, enSS_js, enSX_js, enSZ_js, enTC_js, enTK_js, enTO_js, enTT_js, enTV_js, enTZ_js, enUG_js, enUM_js, enUSPOSIX_js, enVC_js, enVG_js, enVI_js, enVU_js, enWS_js, enZA_js, enZM_js, enZW_js, en_js, eo_js, es419_js, esAR_js, esBO_js, esBR_js, esBZ_js, esCL_js, esCO_js, esCR_js, esCU_js, esDO_js, esEA_js, esEC_js, esGQ_js, esGT_js, esHN_js, esIC_js, esMX_js, esNI_js, esPA_js, esPE_js, esPH_js, esPR_js, esPY_js, esSV_js, esUS_js, esUY_js, esVE_js, es_js, et_js, eu_js, ewo_js, faAF_js, fa_js, ffCM_js, ffGN_js, ffMR_js, ff_js, fi_js, fil_js, foDK_js, fo_js, frBE_js, frBF_js, frBI_js, frBJ_js, frBL_js, frCA_js, frCD_js, frCF_js, frCG_js, frCH_js, frCI_js, frCM_js, frDJ_js, frDZ_js, frGA_js, frGF_js, frGN_js, frGP_js, frGQ_js, frHT_js, frKM_js, frLU_js, frMA_js, frMC_js, frMF_js, frMG_js, frML_js, frMQ_js, frMR_js, frMU_js, frNC_js, frNE_js, frPF_js, frPM_js, frRE_js, frRW_js, frSC_js, frSN_js, frSY_js, frTD_js, frTG_js, frTN_js, frVU_js, frWF_js, frYT_js, fr_js, fur_js, fy_js, ga_js, gd_js, gl_js, gswFR_js, gswLI_js, gsw_js, gu_js, guz_js, gv_js, haGH_js, haNE_js, ha_js, haw_js, he_js, hi_js, hrBA_js, hr_js, hsb_js, hu_js, hy_js, id_js, ig_js, ii_js, is_js, itCH_js, itSM_js, itVA_js, it_js, ja_js, jgo_js, jmc_js, ka_js, kab_js, kam_js, kde_js, kea_js, khq_js, ki_js, kk_js, kkj_js, kl_js, kln_js, km_js, kn_js, koKP_js, ko_js, kok_js, ks_js, ksb_js, ksf_js, ksh_js, kw_js, ky_js, lag_js, lb_js, lg_js, lkt_js, lnAO_js, lnCF_js, lnCG_js, ln_js, lo_js, lrcIQ_js, lrc_js, lt_js, lu_js, luo_js, luy_js, lv_js, masTZ_js, mas_js, mer_js, mfe_js, mg_js, mgh_js, mgo_js, mk_js, ml_js, mn_js, mr_js, msBN_js, msSG_js, ms_js, mt_js, mua_js, my_js, mzn_js, naq_js, nbSJ_js, nb_js, nd_js, ndsNL_js, nds_js, neIN_js, ne_js, nlAW_js, nlBE_js, nlBQ_js, nlCW_js, nlSR_js, nlSX_js, nl_js, nmg_js, nn_js, nnh_js, nus_js, nyn_js, omKE_js, om_js, or_js, osRU_js, os_js, paArab_js, paGuru_js, pa_js, pl_js, prg_js, ps_js, ptAO_js, ptCH_js, ptCV_js, ptGQ_js, ptGW_js, ptLU_js, ptMO_js, ptMZ_js, ptPT_js, ptST_js, ptTL_js, pt_js, quBO_js, quEC_js, qu_js, rm_js, rn_js, roMD_js, ro_js, rof_js, root_js, ruBY_js, ruKG_js, ruKZ_js, ruMD_js, ruUA_js, ru_js, rw_js, rwk_js, sah_js, saq_js, sbp_js, sd_js, seFI_js, seSE_js, se_js, seh_js, ses_js, sg_js, shiLatn_js, shiTfng_js, shi_js, si_js, sk_js, sl_js, smn_js, sn_js, soDJ_js, soET_js, soKE_js, so_js, sqMK_js, sqXK_js, sq_js, srCyrlBA_js, srCyrlME_js, srCyrlXK_js, srCyrl_js, srLatnBA_js, srLatnME_js, srLatnXK_js, srLatn_js, sr_js, svAX_js, svFI_js, sv_js, swCD_js, swKE_js, swUG_js, sw_js, taLK_js, taMY_js, taSG_js, ta_js, te_js, teoKE_js, teo_js, tg_js, th_js, tiER_js, ti_js, tk_js, to_js, trCY_js, tr_js, tt_js, twq_js, tzm_js, ug_js, uk_js, urIN_js, ur_js, uzArab_js, uzCyrl_js, uzLatn_js, uz_js, vaiLatn_js, vaiVaii_js, vai_js, vi_js, vo_js, vun_js, wae_js, wo_js, xog_js, yav_js, yi_js, yoBJ_js, yo_js, yueHans_js, yueHant_js, yue_js, zgh_js, zhHansHK_js, zhHansMO_js, zhHansSG_js, zhHans_js, zhHantHK_js, zhHantMO_js, zhHant_js, zh_js, zu_js, collapse, dropdown, tooltip, forms, platformBrowser, modal, popover, max, _static, table, dragDrop, pagination, stepper) { 'use strict';

    afNA_js = afNA_js && afNA_js.hasOwnProperty('default') ? afNA_js['default'] : afNA_js;
    af_js = af_js && af_js.hasOwnProperty('default') ? af_js['default'] : af_js;
    agq_js = agq_js && agq_js.hasOwnProperty('default') ? agq_js['default'] : agq_js;
    ak_js = ak_js && ak_js.hasOwnProperty('default') ? ak_js['default'] : ak_js;
    am_js = am_js && am_js.hasOwnProperty('default') ? am_js['default'] : am_js;
    arAE_js = arAE_js && arAE_js.hasOwnProperty('default') ? arAE_js['default'] : arAE_js;
    arBH_js = arBH_js && arBH_js.hasOwnProperty('default') ? arBH_js['default'] : arBH_js;
    arDJ_js = arDJ_js && arDJ_js.hasOwnProperty('default') ? arDJ_js['default'] : arDJ_js;
    arDZ_js = arDZ_js && arDZ_js.hasOwnProperty('default') ? arDZ_js['default'] : arDZ_js;
    arEG_js = arEG_js && arEG_js.hasOwnProperty('default') ? arEG_js['default'] : arEG_js;
    arEH_js = arEH_js && arEH_js.hasOwnProperty('default') ? arEH_js['default'] : arEH_js;
    arER_js = arER_js && arER_js.hasOwnProperty('default') ? arER_js['default'] : arER_js;
    arIL_js = arIL_js && arIL_js.hasOwnProperty('default') ? arIL_js['default'] : arIL_js;
    arIQ_js = arIQ_js && arIQ_js.hasOwnProperty('default') ? arIQ_js['default'] : arIQ_js;
    arJO_js = arJO_js && arJO_js.hasOwnProperty('default') ? arJO_js['default'] : arJO_js;
    arKM_js = arKM_js && arKM_js.hasOwnProperty('default') ? arKM_js['default'] : arKM_js;
    arKW_js = arKW_js && arKW_js.hasOwnProperty('default') ? arKW_js['default'] : arKW_js;
    arLB_js = arLB_js && arLB_js.hasOwnProperty('default') ? arLB_js['default'] : arLB_js;
    arLY_js = arLY_js && arLY_js.hasOwnProperty('default') ? arLY_js['default'] : arLY_js;
    arMA_js = arMA_js && arMA_js.hasOwnProperty('default') ? arMA_js['default'] : arMA_js;
    arMR_js = arMR_js && arMR_js.hasOwnProperty('default') ? arMR_js['default'] : arMR_js;
    arOM_js = arOM_js && arOM_js.hasOwnProperty('default') ? arOM_js['default'] : arOM_js;
    arPS_js = arPS_js && arPS_js.hasOwnProperty('default') ? arPS_js['default'] : arPS_js;
    arQA_js = arQA_js && arQA_js.hasOwnProperty('default') ? arQA_js['default'] : arQA_js;
    arSA_js = arSA_js && arSA_js.hasOwnProperty('default') ? arSA_js['default'] : arSA_js;
    arSD_js = arSD_js && arSD_js.hasOwnProperty('default') ? arSD_js['default'] : arSD_js;
    arSO_js = arSO_js && arSO_js.hasOwnProperty('default') ? arSO_js['default'] : arSO_js;
    arSS_js = arSS_js && arSS_js.hasOwnProperty('default') ? arSS_js['default'] : arSS_js;
    arSY_js = arSY_js && arSY_js.hasOwnProperty('default') ? arSY_js['default'] : arSY_js;
    arTD_js = arTD_js && arTD_js.hasOwnProperty('default') ? arTD_js['default'] : arTD_js;
    arTN_js = arTN_js && arTN_js.hasOwnProperty('default') ? arTN_js['default'] : arTN_js;
    arYE_js = arYE_js && arYE_js.hasOwnProperty('default') ? arYE_js['default'] : arYE_js;
    ar_js = ar_js && ar_js.hasOwnProperty('default') ? ar_js['default'] : ar_js;
    as_js = as_js && as_js.hasOwnProperty('default') ? as_js['default'] : as_js;
    asa_js = asa_js && asa_js.hasOwnProperty('default') ? asa_js['default'] : asa_js;
    ast_js = ast_js && ast_js.hasOwnProperty('default') ? ast_js['default'] : ast_js;
    azCyrl_js = azCyrl_js && azCyrl_js.hasOwnProperty('default') ? azCyrl_js['default'] : azCyrl_js;
    azLatn_js = azLatn_js && azLatn_js.hasOwnProperty('default') ? azLatn_js['default'] : azLatn_js;
    az_js = az_js && az_js.hasOwnProperty('default') ? az_js['default'] : az_js;
    bas_js = bas_js && bas_js.hasOwnProperty('default') ? bas_js['default'] : bas_js;
    be_js = be_js && be_js.hasOwnProperty('default') ? be_js['default'] : be_js;
    bem_js = bem_js && bem_js.hasOwnProperty('default') ? bem_js['default'] : bem_js;
    bez_js = bez_js && bez_js.hasOwnProperty('default') ? bez_js['default'] : bez_js;
    bg_js = bg_js && bg_js.hasOwnProperty('default') ? bg_js['default'] : bg_js;
    bm_js = bm_js && bm_js.hasOwnProperty('default') ? bm_js['default'] : bm_js;
    bnIN_js = bnIN_js && bnIN_js.hasOwnProperty('default') ? bnIN_js['default'] : bnIN_js;
    bn_js = bn_js && bn_js.hasOwnProperty('default') ? bn_js['default'] : bn_js;
    boIN_js = boIN_js && boIN_js.hasOwnProperty('default') ? boIN_js['default'] : boIN_js;
    bo_js = bo_js && bo_js.hasOwnProperty('default') ? bo_js['default'] : bo_js;
    br_js = br_js && br_js.hasOwnProperty('default') ? br_js['default'] : br_js;
    brx_js = brx_js && brx_js.hasOwnProperty('default') ? brx_js['default'] : brx_js;
    bsCyrl_js = bsCyrl_js && bsCyrl_js.hasOwnProperty('default') ? bsCyrl_js['default'] : bsCyrl_js;
    bsLatn_js = bsLatn_js && bsLatn_js.hasOwnProperty('default') ? bsLatn_js['default'] : bsLatn_js;
    bs_js = bs_js && bs_js.hasOwnProperty('default') ? bs_js['default'] : bs_js;
    caAD_js = caAD_js && caAD_js.hasOwnProperty('default') ? caAD_js['default'] : caAD_js;
    caESVALENCIA_js = caESVALENCIA_js && caESVALENCIA_js.hasOwnProperty('default') ? caESVALENCIA_js['default'] : caESVALENCIA_js;
    caFR_js = caFR_js && caFR_js.hasOwnProperty('default') ? caFR_js['default'] : caFR_js;
    caIT_js = caIT_js && caIT_js.hasOwnProperty('default') ? caIT_js['default'] : caIT_js;
    ca_js = ca_js && ca_js.hasOwnProperty('default') ? ca_js['default'] : ca_js;
    ccpIN_js = ccpIN_js && ccpIN_js.hasOwnProperty('default') ? ccpIN_js['default'] : ccpIN_js;
    ccp_js = ccp_js && ccp_js.hasOwnProperty('default') ? ccp_js['default'] : ccp_js;
    ce_js = ce_js && ce_js.hasOwnProperty('default') ? ce_js['default'] : ce_js;
    cgg_js = cgg_js && cgg_js.hasOwnProperty('default') ? cgg_js['default'] : cgg_js;
    chr_js = chr_js && chr_js.hasOwnProperty('default') ? chr_js['default'] : chr_js;
    ckbIR_js = ckbIR_js && ckbIR_js.hasOwnProperty('default') ? ckbIR_js['default'] : ckbIR_js;
    ckb_js = ckb_js && ckb_js.hasOwnProperty('default') ? ckb_js['default'] : ckb_js;
    cs_js = cs_js && cs_js.hasOwnProperty('default') ? cs_js['default'] : cs_js;
    cu_js = cu_js && cu_js.hasOwnProperty('default') ? cu_js['default'] : cu_js;
    cy_js = cy_js && cy_js.hasOwnProperty('default') ? cy_js['default'] : cy_js;
    daGL_js = daGL_js && daGL_js.hasOwnProperty('default') ? daGL_js['default'] : daGL_js;
    da_js = da_js && da_js.hasOwnProperty('default') ? da_js['default'] : da_js;
    dav_js = dav_js && dav_js.hasOwnProperty('default') ? dav_js['default'] : dav_js;
    deAT_js = deAT_js && deAT_js.hasOwnProperty('default') ? deAT_js['default'] : deAT_js;
    deBE_js = deBE_js && deBE_js.hasOwnProperty('default') ? deBE_js['default'] : deBE_js;
    deCH_js = deCH_js && deCH_js.hasOwnProperty('default') ? deCH_js['default'] : deCH_js;
    deIT_js = deIT_js && deIT_js.hasOwnProperty('default') ? deIT_js['default'] : deIT_js;
    deLI_js = deLI_js && deLI_js.hasOwnProperty('default') ? deLI_js['default'] : deLI_js;
    deLU_js = deLU_js && deLU_js.hasOwnProperty('default') ? deLU_js['default'] : deLU_js;
    de_js = de_js && de_js.hasOwnProperty('default') ? de_js['default'] : de_js;
    dje_js = dje_js && dje_js.hasOwnProperty('default') ? dje_js['default'] : dje_js;
    dsb_js = dsb_js && dsb_js.hasOwnProperty('default') ? dsb_js['default'] : dsb_js;
    dua_js = dua_js && dua_js.hasOwnProperty('default') ? dua_js['default'] : dua_js;
    dyo_js = dyo_js && dyo_js.hasOwnProperty('default') ? dyo_js['default'] : dyo_js;
    dz_js = dz_js && dz_js.hasOwnProperty('default') ? dz_js['default'] : dz_js;
    ebu_js = ebu_js && ebu_js.hasOwnProperty('default') ? ebu_js['default'] : ebu_js;
    eeTG_js = eeTG_js && eeTG_js.hasOwnProperty('default') ? eeTG_js['default'] : eeTG_js;
    ee_js = ee_js && ee_js.hasOwnProperty('default') ? ee_js['default'] : ee_js;
    elCY_js = elCY_js && elCY_js.hasOwnProperty('default') ? elCY_js['default'] : elCY_js;
    el_js = el_js && el_js.hasOwnProperty('default') ? el_js['default'] : el_js;
    en001_js = en001_js && en001_js.hasOwnProperty('default') ? en001_js['default'] : en001_js;
    en150_js = en150_js && en150_js.hasOwnProperty('default') ? en150_js['default'] : en150_js;
    enAG_js = enAG_js && enAG_js.hasOwnProperty('default') ? enAG_js['default'] : enAG_js;
    enAI_js = enAI_js && enAI_js.hasOwnProperty('default') ? enAI_js['default'] : enAI_js;
    enAS_js = enAS_js && enAS_js.hasOwnProperty('default') ? enAS_js['default'] : enAS_js;
    enAT_js = enAT_js && enAT_js.hasOwnProperty('default') ? enAT_js['default'] : enAT_js;
    enAU_js = enAU_js && enAU_js.hasOwnProperty('default') ? enAU_js['default'] : enAU_js;
    enBB_js = enBB_js && enBB_js.hasOwnProperty('default') ? enBB_js['default'] : enBB_js;
    enBE_js = enBE_js && enBE_js.hasOwnProperty('default') ? enBE_js['default'] : enBE_js;
    enBI_js = enBI_js && enBI_js.hasOwnProperty('default') ? enBI_js['default'] : enBI_js;
    enBM_js = enBM_js && enBM_js.hasOwnProperty('default') ? enBM_js['default'] : enBM_js;
    enBS_js = enBS_js && enBS_js.hasOwnProperty('default') ? enBS_js['default'] : enBS_js;
    enBW_js = enBW_js && enBW_js.hasOwnProperty('default') ? enBW_js['default'] : enBW_js;
    enBZ_js = enBZ_js && enBZ_js.hasOwnProperty('default') ? enBZ_js['default'] : enBZ_js;
    enCA_js = enCA_js && enCA_js.hasOwnProperty('default') ? enCA_js['default'] : enCA_js;
    enCC_js = enCC_js && enCC_js.hasOwnProperty('default') ? enCC_js['default'] : enCC_js;
    enCH_js = enCH_js && enCH_js.hasOwnProperty('default') ? enCH_js['default'] : enCH_js;
    enCK_js = enCK_js && enCK_js.hasOwnProperty('default') ? enCK_js['default'] : enCK_js;
    enCM_js = enCM_js && enCM_js.hasOwnProperty('default') ? enCM_js['default'] : enCM_js;
    enCX_js = enCX_js && enCX_js.hasOwnProperty('default') ? enCX_js['default'] : enCX_js;
    enCY_js = enCY_js && enCY_js.hasOwnProperty('default') ? enCY_js['default'] : enCY_js;
    enDE_js = enDE_js && enDE_js.hasOwnProperty('default') ? enDE_js['default'] : enDE_js;
    enDG_js = enDG_js && enDG_js.hasOwnProperty('default') ? enDG_js['default'] : enDG_js;
    enDK_js = enDK_js && enDK_js.hasOwnProperty('default') ? enDK_js['default'] : enDK_js;
    enDM_js = enDM_js && enDM_js.hasOwnProperty('default') ? enDM_js['default'] : enDM_js;
    enER_js = enER_js && enER_js.hasOwnProperty('default') ? enER_js['default'] : enER_js;
    enFI_js = enFI_js && enFI_js.hasOwnProperty('default') ? enFI_js['default'] : enFI_js;
    enFJ_js = enFJ_js && enFJ_js.hasOwnProperty('default') ? enFJ_js['default'] : enFJ_js;
    enFK_js = enFK_js && enFK_js.hasOwnProperty('default') ? enFK_js['default'] : enFK_js;
    enFM_js = enFM_js && enFM_js.hasOwnProperty('default') ? enFM_js['default'] : enFM_js;
    enGB_js = enGB_js && enGB_js.hasOwnProperty('default') ? enGB_js['default'] : enGB_js;
    enGD_js = enGD_js && enGD_js.hasOwnProperty('default') ? enGD_js['default'] : enGD_js;
    enGG_js = enGG_js && enGG_js.hasOwnProperty('default') ? enGG_js['default'] : enGG_js;
    enGH_js = enGH_js && enGH_js.hasOwnProperty('default') ? enGH_js['default'] : enGH_js;
    enGI_js = enGI_js && enGI_js.hasOwnProperty('default') ? enGI_js['default'] : enGI_js;
    enGM_js = enGM_js && enGM_js.hasOwnProperty('default') ? enGM_js['default'] : enGM_js;
    enGU_js = enGU_js && enGU_js.hasOwnProperty('default') ? enGU_js['default'] : enGU_js;
    enGY_js = enGY_js && enGY_js.hasOwnProperty('default') ? enGY_js['default'] : enGY_js;
    enHK_js = enHK_js && enHK_js.hasOwnProperty('default') ? enHK_js['default'] : enHK_js;
    enIE_js = enIE_js && enIE_js.hasOwnProperty('default') ? enIE_js['default'] : enIE_js;
    enIL_js = enIL_js && enIL_js.hasOwnProperty('default') ? enIL_js['default'] : enIL_js;
    enIM_js = enIM_js && enIM_js.hasOwnProperty('default') ? enIM_js['default'] : enIM_js;
    enIN_js = enIN_js && enIN_js.hasOwnProperty('default') ? enIN_js['default'] : enIN_js;
    enIO_js = enIO_js && enIO_js.hasOwnProperty('default') ? enIO_js['default'] : enIO_js;
    enJE_js = enJE_js && enJE_js.hasOwnProperty('default') ? enJE_js['default'] : enJE_js;
    enJM_js = enJM_js && enJM_js.hasOwnProperty('default') ? enJM_js['default'] : enJM_js;
    enKE_js = enKE_js && enKE_js.hasOwnProperty('default') ? enKE_js['default'] : enKE_js;
    enKI_js = enKI_js && enKI_js.hasOwnProperty('default') ? enKI_js['default'] : enKI_js;
    enKN_js = enKN_js && enKN_js.hasOwnProperty('default') ? enKN_js['default'] : enKN_js;
    enKY_js = enKY_js && enKY_js.hasOwnProperty('default') ? enKY_js['default'] : enKY_js;
    enLC_js = enLC_js && enLC_js.hasOwnProperty('default') ? enLC_js['default'] : enLC_js;
    enLR_js = enLR_js && enLR_js.hasOwnProperty('default') ? enLR_js['default'] : enLR_js;
    enLS_js = enLS_js && enLS_js.hasOwnProperty('default') ? enLS_js['default'] : enLS_js;
    enMG_js = enMG_js && enMG_js.hasOwnProperty('default') ? enMG_js['default'] : enMG_js;
    enMH_js = enMH_js && enMH_js.hasOwnProperty('default') ? enMH_js['default'] : enMH_js;
    enMO_js = enMO_js && enMO_js.hasOwnProperty('default') ? enMO_js['default'] : enMO_js;
    enMP_js = enMP_js && enMP_js.hasOwnProperty('default') ? enMP_js['default'] : enMP_js;
    enMS_js = enMS_js && enMS_js.hasOwnProperty('default') ? enMS_js['default'] : enMS_js;
    enMT_js = enMT_js && enMT_js.hasOwnProperty('default') ? enMT_js['default'] : enMT_js;
    enMU_js = enMU_js && enMU_js.hasOwnProperty('default') ? enMU_js['default'] : enMU_js;
    enMW_js = enMW_js && enMW_js.hasOwnProperty('default') ? enMW_js['default'] : enMW_js;
    enMY_js = enMY_js && enMY_js.hasOwnProperty('default') ? enMY_js['default'] : enMY_js;
    enNA_js = enNA_js && enNA_js.hasOwnProperty('default') ? enNA_js['default'] : enNA_js;
    enNF_js = enNF_js && enNF_js.hasOwnProperty('default') ? enNF_js['default'] : enNF_js;
    enNG_js = enNG_js && enNG_js.hasOwnProperty('default') ? enNG_js['default'] : enNG_js;
    enNL_js = enNL_js && enNL_js.hasOwnProperty('default') ? enNL_js['default'] : enNL_js;
    enNR_js = enNR_js && enNR_js.hasOwnProperty('default') ? enNR_js['default'] : enNR_js;
    enNU_js = enNU_js && enNU_js.hasOwnProperty('default') ? enNU_js['default'] : enNU_js;
    enNZ_js = enNZ_js && enNZ_js.hasOwnProperty('default') ? enNZ_js['default'] : enNZ_js;
    enPG_js = enPG_js && enPG_js.hasOwnProperty('default') ? enPG_js['default'] : enPG_js;
    enPH_js = enPH_js && enPH_js.hasOwnProperty('default') ? enPH_js['default'] : enPH_js;
    enPK_js = enPK_js && enPK_js.hasOwnProperty('default') ? enPK_js['default'] : enPK_js;
    enPN_js = enPN_js && enPN_js.hasOwnProperty('default') ? enPN_js['default'] : enPN_js;
    enPR_js = enPR_js && enPR_js.hasOwnProperty('default') ? enPR_js['default'] : enPR_js;
    enPW_js = enPW_js && enPW_js.hasOwnProperty('default') ? enPW_js['default'] : enPW_js;
    enRW_js = enRW_js && enRW_js.hasOwnProperty('default') ? enRW_js['default'] : enRW_js;
    enSB_js = enSB_js && enSB_js.hasOwnProperty('default') ? enSB_js['default'] : enSB_js;
    enSC_js = enSC_js && enSC_js.hasOwnProperty('default') ? enSC_js['default'] : enSC_js;
    enSD_js = enSD_js && enSD_js.hasOwnProperty('default') ? enSD_js['default'] : enSD_js;
    enSE_js = enSE_js && enSE_js.hasOwnProperty('default') ? enSE_js['default'] : enSE_js;
    enSG_js = enSG_js && enSG_js.hasOwnProperty('default') ? enSG_js['default'] : enSG_js;
    enSH_js = enSH_js && enSH_js.hasOwnProperty('default') ? enSH_js['default'] : enSH_js;
    enSI_js = enSI_js && enSI_js.hasOwnProperty('default') ? enSI_js['default'] : enSI_js;
    enSL_js = enSL_js && enSL_js.hasOwnProperty('default') ? enSL_js['default'] : enSL_js;
    enSS_js = enSS_js && enSS_js.hasOwnProperty('default') ? enSS_js['default'] : enSS_js;
    enSX_js = enSX_js && enSX_js.hasOwnProperty('default') ? enSX_js['default'] : enSX_js;
    enSZ_js = enSZ_js && enSZ_js.hasOwnProperty('default') ? enSZ_js['default'] : enSZ_js;
    enTC_js = enTC_js && enTC_js.hasOwnProperty('default') ? enTC_js['default'] : enTC_js;
    enTK_js = enTK_js && enTK_js.hasOwnProperty('default') ? enTK_js['default'] : enTK_js;
    enTO_js = enTO_js && enTO_js.hasOwnProperty('default') ? enTO_js['default'] : enTO_js;
    enTT_js = enTT_js && enTT_js.hasOwnProperty('default') ? enTT_js['default'] : enTT_js;
    enTV_js = enTV_js && enTV_js.hasOwnProperty('default') ? enTV_js['default'] : enTV_js;
    enTZ_js = enTZ_js && enTZ_js.hasOwnProperty('default') ? enTZ_js['default'] : enTZ_js;
    enUG_js = enUG_js && enUG_js.hasOwnProperty('default') ? enUG_js['default'] : enUG_js;
    enUM_js = enUM_js && enUM_js.hasOwnProperty('default') ? enUM_js['default'] : enUM_js;
    enUSPOSIX_js = enUSPOSIX_js && enUSPOSIX_js.hasOwnProperty('default') ? enUSPOSIX_js['default'] : enUSPOSIX_js;
    enVC_js = enVC_js && enVC_js.hasOwnProperty('default') ? enVC_js['default'] : enVC_js;
    enVG_js = enVG_js && enVG_js.hasOwnProperty('default') ? enVG_js['default'] : enVG_js;
    enVI_js = enVI_js && enVI_js.hasOwnProperty('default') ? enVI_js['default'] : enVI_js;
    enVU_js = enVU_js && enVU_js.hasOwnProperty('default') ? enVU_js['default'] : enVU_js;
    enWS_js = enWS_js && enWS_js.hasOwnProperty('default') ? enWS_js['default'] : enWS_js;
    enZA_js = enZA_js && enZA_js.hasOwnProperty('default') ? enZA_js['default'] : enZA_js;
    enZM_js = enZM_js && enZM_js.hasOwnProperty('default') ? enZM_js['default'] : enZM_js;
    enZW_js = enZW_js && enZW_js.hasOwnProperty('default') ? enZW_js['default'] : enZW_js;
    en_js = en_js && en_js.hasOwnProperty('default') ? en_js['default'] : en_js;
    eo_js = eo_js && eo_js.hasOwnProperty('default') ? eo_js['default'] : eo_js;
    es419_js = es419_js && es419_js.hasOwnProperty('default') ? es419_js['default'] : es419_js;
    esAR_js = esAR_js && esAR_js.hasOwnProperty('default') ? esAR_js['default'] : esAR_js;
    esBO_js = esBO_js && esBO_js.hasOwnProperty('default') ? esBO_js['default'] : esBO_js;
    esBR_js = esBR_js && esBR_js.hasOwnProperty('default') ? esBR_js['default'] : esBR_js;
    esBZ_js = esBZ_js && esBZ_js.hasOwnProperty('default') ? esBZ_js['default'] : esBZ_js;
    esCL_js = esCL_js && esCL_js.hasOwnProperty('default') ? esCL_js['default'] : esCL_js;
    esCO_js = esCO_js && esCO_js.hasOwnProperty('default') ? esCO_js['default'] : esCO_js;
    esCR_js = esCR_js && esCR_js.hasOwnProperty('default') ? esCR_js['default'] : esCR_js;
    esCU_js = esCU_js && esCU_js.hasOwnProperty('default') ? esCU_js['default'] : esCU_js;
    esDO_js = esDO_js && esDO_js.hasOwnProperty('default') ? esDO_js['default'] : esDO_js;
    esEA_js = esEA_js && esEA_js.hasOwnProperty('default') ? esEA_js['default'] : esEA_js;
    esEC_js = esEC_js && esEC_js.hasOwnProperty('default') ? esEC_js['default'] : esEC_js;
    esGQ_js = esGQ_js && esGQ_js.hasOwnProperty('default') ? esGQ_js['default'] : esGQ_js;
    esGT_js = esGT_js && esGT_js.hasOwnProperty('default') ? esGT_js['default'] : esGT_js;
    esHN_js = esHN_js && esHN_js.hasOwnProperty('default') ? esHN_js['default'] : esHN_js;
    esIC_js = esIC_js && esIC_js.hasOwnProperty('default') ? esIC_js['default'] : esIC_js;
    esMX_js = esMX_js && esMX_js.hasOwnProperty('default') ? esMX_js['default'] : esMX_js;
    esNI_js = esNI_js && esNI_js.hasOwnProperty('default') ? esNI_js['default'] : esNI_js;
    esPA_js = esPA_js && esPA_js.hasOwnProperty('default') ? esPA_js['default'] : esPA_js;
    esPE_js = esPE_js && esPE_js.hasOwnProperty('default') ? esPE_js['default'] : esPE_js;
    esPH_js = esPH_js && esPH_js.hasOwnProperty('default') ? esPH_js['default'] : esPH_js;
    esPR_js = esPR_js && esPR_js.hasOwnProperty('default') ? esPR_js['default'] : esPR_js;
    esPY_js = esPY_js && esPY_js.hasOwnProperty('default') ? esPY_js['default'] : esPY_js;
    esSV_js = esSV_js && esSV_js.hasOwnProperty('default') ? esSV_js['default'] : esSV_js;
    esUS_js = esUS_js && esUS_js.hasOwnProperty('default') ? esUS_js['default'] : esUS_js;
    esUY_js = esUY_js && esUY_js.hasOwnProperty('default') ? esUY_js['default'] : esUY_js;
    esVE_js = esVE_js && esVE_js.hasOwnProperty('default') ? esVE_js['default'] : esVE_js;
    es_js = es_js && es_js.hasOwnProperty('default') ? es_js['default'] : es_js;
    et_js = et_js && et_js.hasOwnProperty('default') ? et_js['default'] : et_js;
    eu_js = eu_js && eu_js.hasOwnProperty('default') ? eu_js['default'] : eu_js;
    ewo_js = ewo_js && ewo_js.hasOwnProperty('default') ? ewo_js['default'] : ewo_js;
    faAF_js = faAF_js && faAF_js.hasOwnProperty('default') ? faAF_js['default'] : faAF_js;
    fa_js = fa_js && fa_js.hasOwnProperty('default') ? fa_js['default'] : fa_js;
    ffCM_js = ffCM_js && ffCM_js.hasOwnProperty('default') ? ffCM_js['default'] : ffCM_js;
    ffGN_js = ffGN_js && ffGN_js.hasOwnProperty('default') ? ffGN_js['default'] : ffGN_js;
    ffMR_js = ffMR_js && ffMR_js.hasOwnProperty('default') ? ffMR_js['default'] : ffMR_js;
    ff_js = ff_js && ff_js.hasOwnProperty('default') ? ff_js['default'] : ff_js;
    fi_js = fi_js && fi_js.hasOwnProperty('default') ? fi_js['default'] : fi_js;
    fil_js = fil_js && fil_js.hasOwnProperty('default') ? fil_js['default'] : fil_js;
    foDK_js = foDK_js && foDK_js.hasOwnProperty('default') ? foDK_js['default'] : foDK_js;
    fo_js = fo_js && fo_js.hasOwnProperty('default') ? fo_js['default'] : fo_js;
    frBE_js = frBE_js && frBE_js.hasOwnProperty('default') ? frBE_js['default'] : frBE_js;
    frBF_js = frBF_js && frBF_js.hasOwnProperty('default') ? frBF_js['default'] : frBF_js;
    frBI_js = frBI_js && frBI_js.hasOwnProperty('default') ? frBI_js['default'] : frBI_js;
    frBJ_js = frBJ_js && frBJ_js.hasOwnProperty('default') ? frBJ_js['default'] : frBJ_js;
    frBL_js = frBL_js && frBL_js.hasOwnProperty('default') ? frBL_js['default'] : frBL_js;
    frCA_js = frCA_js && frCA_js.hasOwnProperty('default') ? frCA_js['default'] : frCA_js;
    frCD_js = frCD_js && frCD_js.hasOwnProperty('default') ? frCD_js['default'] : frCD_js;
    frCF_js = frCF_js && frCF_js.hasOwnProperty('default') ? frCF_js['default'] : frCF_js;
    frCG_js = frCG_js && frCG_js.hasOwnProperty('default') ? frCG_js['default'] : frCG_js;
    frCH_js = frCH_js && frCH_js.hasOwnProperty('default') ? frCH_js['default'] : frCH_js;
    frCI_js = frCI_js && frCI_js.hasOwnProperty('default') ? frCI_js['default'] : frCI_js;
    frCM_js = frCM_js && frCM_js.hasOwnProperty('default') ? frCM_js['default'] : frCM_js;
    frDJ_js = frDJ_js && frDJ_js.hasOwnProperty('default') ? frDJ_js['default'] : frDJ_js;
    frDZ_js = frDZ_js && frDZ_js.hasOwnProperty('default') ? frDZ_js['default'] : frDZ_js;
    frGA_js = frGA_js && frGA_js.hasOwnProperty('default') ? frGA_js['default'] : frGA_js;
    frGF_js = frGF_js && frGF_js.hasOwnProperty('default') ? frGF_js['default'] : frGF_js;
    frGN_js = frGN_js && frGN_js.hasOwnProperty('default') ? frGN_js['default'] : frGN_js;
    frGP_js = frGP_js && frGP_js.hasOwnProperty('default') ? frGP_js['default'] : frGP_js;
    frGQ_js = frGQ_js && frGQ_js.hasOwnProperty('default') ? frGQ_js['default'] : frGQ_js;
    frHT_js = frHT_js && frHT_js.hasOwnProperty('default') ? frHT_js['default'] : frHT_js;
    frKM_js = frKM_js && frKM_js.hasOwnProperty('default') ? frKM_js['default'] : frKM_js;
    frLU_js = frLU_js && frLU_js.hasOwnProperty('default') ? frLU_js['default'] : frLU_js;
    frMA_js = frMA_js && frMA_js.hasOwnProperty('default') ? frMA_js['default'] : frMA_js;
    frMC_js = frMC_js && frMC_js.hasOwnProperty('default') ? frMC_js['default'] : frMC_js;
    frMF_js = frMF_js && frMF_js.hasOwnProperty('default') ? frMF_js['default'] : frMF_js;
    frMG_js = frMG_js && frMG_js.hasOwnProperty('default') ? frMG_js['default'] : frMG_js;
    frML_js = frML_js && frML_js.hasOwnProperty('default') ? frML_js['default'] : frML_js;
    frMQ_js = frMQ_js && frMQ_js.hasOwnProperty('default') ? frMQ_js['default'] : frMQ_js;
    frMR_js = frMR_js && frMR_js.hasOwnProperty('default') ? frMR_js['default'] : frMR_js;
    frMU_js = frMU_js && frMU_js.hasOwnProperty('default') ? frMU_js['default'] : frMU_js;
    frNC_js = frNC_js && frNC_js.hasOwnProperty('default') ? frNC_js['default'] : frNC_js;
    frNE_js = frNE_js && frNE_js.hasOwnProperty('default') ? frNE_js['default'] : frNE_js;
    frPF_js = frPF_js && frPF_js.hasOwnProperty('default') ? frPF_js['default'] : frPF_js;
    frPM_js = frPM_js && frPM_js.hasOwnProperty('default') ? frPM_js['default'] : frPM_js;
    frRE_js = frRE_js && frRE_js.hasOwnProperty('default') ? frRE_js['default'] : frRE_js;
    frRW_js = frRW_js && frRW_js.hasOwnProperty('default') ? frRW_js['default'] : frRW_js;
    frSC_js = frSC_js && frSC_js.hasOwnProperty('default') ? frSC_js['default'] : frSC_js;
    frSN_js = frSN_js && frSN_js.hasOwnProperty('default') ? frSN_js['default'] : frSN_js;
    frSY_js = frSY_js && frSY_js.hasOwnProperty('default') ? frSY_js['default'] : frSY_js;
    frTD_js = frTD_js && frTD_js.hasOwnProperty('default') ? frTD_js['default'] : frTD_js;
    frTG_js = frTG_js && frTG_js.hasOwnProperty('default') ? frTG_js['default'] : frTG_js;
    frTN_js = frTN_js && frTN_js.hasOwnProperty('default') ? frTN_js['default'] : frTN_js;
    frVU_js = frVU_js && frVU_js.hasOwnProperty('default') ? frVU_js['default'] : frVU_js;
    frWF_js = frWF_js && frWF_js.hasOwnProperty('default') ? frWF_js['default'] : frWF_js;
    frYT_js = frYT_js && frYT_js.hasOwnProperty('default') ? frYT_js['default'] : frYT_js;
    fr_js = fr_js && fr_js.hasOwnProperty('default') ? fr_js['default'] : fr_js;
    fur_js = fur_js && fur_js.hasOwnProperty('default') ? fur_js['default'] : fur_js;
    fy_js = fy_js && fy_js.hasOwnProperty('default') ? fy_js['default'] : fy_js;
    ga_js = ga_js && ga_js.hasOwnProperty('default') ? ga_js['default'] : ga_js;
    gd_js = gd_js && gd_js.hasOwnProperty('default') ? gd_js['default'] : gd_js;
    gl_js = gl_js && gl_js.hasOwnProperty('default') ? gl_js['default'] : gl_js;
    gswFR_js = gswFR_js && gswFR_js.hasOwnProperty('default') ? gswFR_js['default'] : gswFR_js;
    gswLI_js = gswLI_js && gswLI_js.hasOwnProperty('default') ? gswLI_js['default'] : gswLI_js;
    gsw_js = gsw_js && gsw_js.hasOwnProperty('default') ? gsw_js['default'] : gsw_js;
    gu_js = gu_js && gu_js.hasOwnProperty('default') ? gu_js['default'] : gu_js;
    guz_js = guz_js && guz_js.hasOwnProperty('default') ? guz_js['default'] : guz_js;
    gv_js = gv_js && gv_js.hasOwnProperty('default') ? gv_js['default'] : gv_js;
    haGH_js = haGH_js && haGH_js.hasOwnProperty('default') ? haGH_js['default'] : haGH_js;
    haNE_js = haNE_js && haNE_js.hasOwnProperty('default') ? haNE_js['default'] : haNE_js;
    ha_js = ha_js && ha_js.hasOwnProperty('default') ? ha_js['default'] : ha_js;
    haw_js = haw_js && haw_js.hasOwnProperty('default') ? haw_js['default'] : haw_js;
    he_js = he_js && he_js.hasOwnProperty('default') ? he_js['default'] : he_js;
    hi_js = hi_js && hi_js.hasOwnProperty('default') ? hi_js['default'] : hi_js;
    hrBA_js = hrBA_js && hrBA_js.hasOwnProperty('default') ? hrBA_js['default'] : hrBA_js;
    hr_js = hr_js && hr_js.hasOwnProperty('default') ? hr_js['default'] : hr_js;
    hsb_js = hsb_js && hsb_js.hasOwnProperty('default') ? hsb_js['default'] : hsb_js;
    hu_js = hu_js && hu_js.hasOwnProperty('default') ? hu_js['default'] : hu_js;
    hy_js = hy_js && hy_js.hasOwnProperty('default') ? hy_js['default'] : hy_js;
    id_js = id_js && id_js.hasOwnProperty('default') ? id_js['default'] : id_js;
    ig_js = ig_js && ig_js.hasOwnProperty('default') ? ig_js['default'] : ig_js;
    ii_js = ii_js && ii_js.hasOwnProperty('default') ? ii_js['default'] : ii_js;
    is_js = is_js && is_js.hasOwnProperty('default') ? is_js['default'] : is_js;
    itCH_js = itCH_js && itCH_js.hasOwnProperty('default') ? itCH_js['default'] : itCH_js;
    itSM_js = itSM_js && itSM_js.hasOwnProperty('default') ? itSM_js['default'] : itSM_js;
    itVA_js = itVA_js && itVA_js.hasOwnProperty('default') ? itVA_js['default'] : itVA_js;
    it_js = it_js && it_js.hasOwnProperty('default') ? it_js['default'] : it_js;
    ja_js = ja_js && ja_js.hasOwnProperty('default') ? ja_js['default'] : ja_js;
    jgo_js = jgo_js && jgo_js.hasOwnProperty('default') ? jgo_js['default'] : jgo_js;
    jmc_js = jmc_js && jmc_js.hasOwnProperty('default') ? jmc_js['default'] : jmc_js;
    ka_js = ka_js && ka_js.hasOwnProperty('default') ? ka_js['default'] : ka_js;
    kab_js = kab_js && kab_js.hasOwnProperty('default') ? kab_js['default'] : kab_js;
    kam_js = kam_js && kam_js.hasOwnProperty('default') ? kam_js['default'] : kam_js;
    kde_js = kde_js && kde_js.hasOwnProperty('default') ? kde_js['default'] : kde_js;
    kea_js = kea_js && kea_js.hasOwnProperty('default') ? kea_js['default'] : kea_js;
    khq_js = khq_js && khq_js.hasOwnProperty('default') ? khq_js['default'] : khq_js;
    ki_js = ki_js && ki_js.hasOwnProperty('default') ? ki_js['default'] : ki_js;
    kk_js = kk_js && kk_js.hasOwnProperty('default') ? kk_js['default'] : kk_js;
    kkj_js = kkj_js && kkj_js.hasOwnProperty('default') ? kkj_js['default'] : kkj_js;
    kl_js = kl_js && kl_js.hasOwnProperty('default') ? kl_js['default'] : kl_js;
    kln_js = kln_js && kln_js.hasOwnProperty('default') ? kln_js['default'] : kln_js;
    km_js = km_js && km_js.hasOwnProperty('default') ? km_js['default'] : km_js;
    kn_js = kn_js && kn_js.hasOwnProperty('default') ? kn_js['default'] : kn_js;
    koKP_js = koKP_js && koKP_js.hasOwnProperty('default') ? koKP_js['default'] : koKP_js;
    ko_js = ko_js && ko_js.hasOwnProperty('default') ? ko_js['default'] : ko_js;
    kok_js = kok_js && kok_js.hasOwnProperty('default') ? kok_js['default'] : kok_js;
    ks_js = ks_js && ks_js.hasOwnProperty('default') ? ks_js['default'] : ks_js;
    ksb_js = ksb_js && ksb_js.hasOwnProperty('default') ? ksb_js['default'] : ksb_js;
    ksf_js = ksf_js && ksf_js.hasOwnProperty('default') ? ksf_js['default'] : ksf_js;
    ksh_js = ksh_js && ksh_js.hasOwnProperty('default') ? ksh_js['default'] : ksh_js;
    kw_js = kw_js && kw_js.hasOwnProperty('default') ? kw_js['default'] : kw_js;
    ky_js = ky_js && ky_js.hasOwnProperty('default') ? ky_js['default'] : ky_js;
    lag_js = lag_js && lag_js.hasOwnProperty('default') ? lag_js['default'] : lag_js;
    lb_js = lb_js && lb_js.hasOwnProperty('default') ? lb_js['default'] : lb_js;
    lg_js = lg_js && lg_js.hasOwnProperty('default') ? lg_js['default'] : lg_js;
    lkt_js = lkt_js && lkt_js.hasOwnProperty('default') ? lkt_js['default'] : lkt_js;
    lnAO_js = lnAO_js && lnAO_js.hasOwnProperty('default') ? lnAO_js['default'] : lnAO_js;
    lnCF_js = lnCF_js && lnCF_js.hasOwnProperty('default') ? lnCF_js['default'] : lnCF_js;
    lnCG_js = lnCG_js && lnCG_js.hasOwnProperty('default') ? lnCG_js['default'] : lnCG_js;
    ln_js = ln_js && ln_js.hasOwnProperty('default') ? ln_js['default'] : ln_js;
    lo_js = lo_js && lo_js.hasOwnProperty('default') ? lo_js['default'] : lo_js;
    lrcIQ_js = lrcIQ_js && lrcIQ_js.hasOwnProperty('default') ? lrcIQ_js['default'] : lrcIQ_js;
    lrc_js = lrc_js && lrc_js.hasOwnProperty('default') ? lrc_js['default'] : lrc_js;
    lt_js = lt_js && lt_js.hasOwnProperty('default') ? lt_js['default'] : lt_js;
    lu_js = lu_js && lu_js.hasOwnProperty('default') ? lu_js['default'] : lu_js;
    luo_js = luo_js && luo_js.hasOwnProperty('default') ? luo_js['default'] : luo_js;
    luy_js = luy_js && luy_js.hasOwnProperty('default') ? luy_js['default'] : luy_js;
    lv_js = lv_js && lv_js.hasOwnProperty('default') ? lv_js['default'] : lv_js;
    masTZ_js = masTZ_js && masTZ_js.hasOwnProperty('default') ? masTZ_js['default'] : masTZ_js;
    mas_js = mas_js && mas_js.hasOwnProperty('default') ? mas_js['default'] : mas_js;
    mer_js = mer_js && mer_js.hasOwnProperty('default') ? mer_js['default'] : mer_js;
    mfe_js = mfe_js && mfe_js.hasOwnProperty('default') ? mfe_js['default'] : mfe_js;
    mg_js = mg_js && mg_js.hasOwnProperty('default') ? mg_js['default'] : mg_js;
    mgh_js = mgh_js && mgh_js.hasOwnProperty('default') ? mgh_js['default'] : mgh_js;
    mgo_js = mgo_js && mgo_js.hasOwnProperty('default') ? mgo_js['default'] : mgo_js;
    mk_js = mk_js && mk_js.hasOwnProperty('default') ? mk_js['default'] : mk_js;
    ml_js = ml_js && ml_js.hasOwnProperty('default') ? ml_js['default'] : ml_js;
    mn_js = mn_js && mn_js.hasOwnProperty('default') ? mn_js['default'] : mn_js;
    mr_js = mr_js && mr_js.hasOwnProperty('default') ? mr_js['default'] : mr_js;
    msBN_js = msBN_js && msBN_js.hasOwnProperty('default') ? msBN_js['default'] : msBN_js;
    msSG_js = msSG_js && msSG_js.hasOwnProperty('default') ? msSG_js['default'] : msSG_js;
    ms_js = ms_js && ms_js.hasOwnProperty('default') ? ms_js['default'] : ms_js;
    mt_js = mt_js && mt_js.hasOwnProperty('default') ? mt_js['default'] : mt_js;
    mua_js = mua_js && mua_js.hasOwnProperty('default') ? mua_js['default'] : mua_js;
    my_js = my_js && my_js.hasOwnProperty('default') ? my_js['default'] : my_js;
    mzn_js = mzn_js && mzn_js.hasOwnProperty('default') ? mzn_js['default'] : mzn_js;
    naq_js = naq_js && naq_js.hasOwnProperty('default') ? naq_js['default'] : naq_js;
    nbSJ_js = nbSJ_js && nbSJ_js.hasOwnProperty('default') ? nbSJ_js['default'] : nbSJ_js;
    nb_js = nb_js && nb_js.hasOwnProperty('default') ? nb_js['default'] : nb_js;
    nd_js = nd_js && nd_js.hasOwnProperty('default') ? nd_js['default'] : nd_js;
    ndsNL_js = ndsNL_js && ndsNL_js.hasOwnProperty('default') ? ndsNL_js['default'] : ndsNL_js;
    nds_js = nds_js && nds_js.hasOwnProperty('default') ? nds_js['default'] : nds_js;
    neIN_js = neIN_js && neIN_js.hasOwnProperty('default') ? neIN_js['default'] : neIN_js;
    ne_js = ne_js && ne_js.hasOwnProperty('default') ? ne_js['default'] : ne_js;
    nlAW_js = nlAW_js && nlAW_js.hasOwnProperty('default') ? nlAW_js['default'] : nlAW_js;
    nlBE_js = nlBE_js && nlBE_js.hasOwnProperty('default') ? nlBE_js['default'] : nlBE_js;
    nlBQ_js = nlBQ_js && nlBQ_js.hasOwnProperty('default') ? nlBQ_js['default'] : nlBQ_js;
    nlCW_js = nlCW_js && nlCW_js.hasOwnProperty('default') ? nlCW_js['default'] : nlCW_js;
    nlSR_js = nlSR_js && nlSR_js.hasOwnProperty('default') ? nlSR_js['default'] : nlSR_js;
    nlSX_js = nlSX_js && nlSX_js.hasOwnProperty('default') ? nlSX_js['default'] : nlSX_js;
    nl_js = nl_js && nl_js.hasOwnProperty('default') ? nl_js['default'] : nl_js;
    nmg_js = nmg_js && nmg_js.hasOwnProperty('default') ? nmg_js['default'] : nmg_js;
    nn_js = nn_js && nn_js.hasOwnProperty('default') ? nn_js['default'] : nn_js;
    nnh_js = nnh_js && nnh_js.hasOwnProperty('default') ? nnh_js['default'] : nnh_js;
    nus_js = nus_js && nus_js.hasOwnProperty('default') ? nus_js['default'] : nus_js;
    nyn_js = nyn_js && nyn_js.hasOwnProperty('default') ? nyn_js['default'] : nyn_js;
    omKE_js = omKE_js && omKE_js.hasOwnProperty('default') ? omKE_js['default'] : omKE_js;
    om_js = om_js && om_js.hasOwnProperty('default') ? om_js['default'] : om_js;
    or_js = or_js && or_js.hasOwnProperty('default') ? or_js['default'] : or_js;
    osRU_js = osRU_js && osRU_js.hasOwnProperty('default') ? osRU_js['default'] : osRU_js;
    os_js = os_js && os_js.hasOwnProperty('default') ? os_js['default'] : os_js;
    paArab_js = paArab_js && paArab_js.hasOwnProperty('default') ? paArab_js['default'] : paArab_js;
    paGuru_js = paGuru_js && paGuru_js.hasOwnProperty('default') ? paGuru_js['default'] : paGuru_js;
    pa_js = pa_js && pa_js.hasOwnProperty('default') ? pa_js['default'] : pa_js;
    pl_js = pl_js && pl_js.hasOwnProperty('default') ? pl_js['default'] : pl_js;
    prg_js = prg_js && prg_js.hasOwnProperty('default') ? prg_js['default'] : prg_js;
    ps_js = ps_js && ps_js.hasOwnProperty('default') ? ps_js['default'] : ps_js;
    ptAO_js = ptAO_js && ptAO_js.hasOwnProperty('default') ? ptAO_js['default'] : ptAO_js;
    ptCH_js = ptCH_js && ptCH_js.hasOwnProperty('default') ? ptCH_js['default'] : ptCH_js;
    ptCV_js = ptCV_js && ptCV_js.hasOwnProperty('default') ? ptCV_js['default'] : ptCV_js;
    ptGQ_js = ptGQ_js && ptGQ_js.hasOwnProperty('default') ? ptGQ_js['default'] : ptGQ_js;
    ptGW_js = ptGW_js && ptGW_js.hasOwnProperty('default') ? ptGW_js['default'] : ptGW_js;
    ptLU_js = ptLU_js && ptLU_js.hasOwnProperty('default') ? ptLU_js['default'] : ptLU_js;
    ptMO_js = ptMO_js && ptMO_js.hasOwnProperty('default') ? ptMO_js['default'] : ptMO_js;
    ptMZ_js = ptMZ_js && ptMZ_js.hasOwnProperty('default') ? ptMZ_js['default'] : ptMZ_js;
    ptPT_js = ptPT_js && ptPT_js.hasOwnProperty('default') ? ptPT_js['default'] : ptPT_js;
    ptST_js = ptST_js && ptST_js.hasOwnProperty('default') ? ptST_js['default'] : ptST_js;
    ptTL_js = ptTL_js && ptTL_js.hasOwnProperty('default') ? ptTL_js['default'] : ptTL_js;
    pt_js = pt_js && pt_js.hasOwnProperty('default') ? pt_js['default'] : pt_js;
    quBO_js = quBO_js && quBO_js.hasOwnProperty('default') ? quBO_js['default'] : quBO_js;
    quEC_js = quEC_js && quEC_js.hasOwnProperty('default') ? quEC_js['default'] : quEC_js;
    qu_js = qu_js && qu_js.hasOwnProperty('default') ? qu_js['default'] : qu_js;
    rm_js = rm_js && rm_js.hasOwnProperty('default') ? rm_js['default'] : rm_js;
    rn_js = rn_js && rn_js.hasOwnProperty('default') ? rn_js['default'] : rn_js;
    roMD_js = roMD_js && roMD_js.hasOwnProperty('default') ? roMD_js['default'] : roMD_js;
    ro_js = ro_js && ro_js.hasOwnProperty('default') ? ro_js['default'] : ro_js;
    rof_js = rof_js && rof_js.hasOwnProperty('default') ? rof_js['default'] : rof_js;
    root_js = root_js && root_js.hasOwnProperty('default') ? root_js['default'] : root_js;
    ruBY_js = ruBY_js && ruBY_js.hasOwnProperty('default') ? ruBY_js['default'] : ruBY_js;
    ruKG_js = ruKG_js && ruKG_js.hasOwnProperty('default') ? ruKG_js['default'] : ruKG_js;
    ruKZ_js = ruKZ_js && ruKZ_js.hasOwnProperty('default') ? ruKZ_js['default'] : ruKZ_js;
    ruMD_js = ruMD_js && ruMD_js.hasOwnProperty('default') ? ruMD_js['default'] : ruMD_js;
    ruUA_js = ruUA_js && ruUA_js.hasOwnProperty('default') ? ruUA_js['default'] : ruUA_js;
    ru_js = ru_js && ru_js.hasOwnProperty('default') ? ru_js['default'] : ru_js;
    rw_js = rw_js && rw_js.hasOwnProperty('default') ? rw_js['default'] : rw_js;
    rwk_js = rwk_js && rwk_js.hasOwnProperty('default') ? rwk_js['default'] : rwk_js;
    sah_js = sah_js && sah_js.hasOwnProperty('default') ? sah_js['default'] : sah_js;
    saq_js = saq_js && saq_js.hasOwnProperty('default') ? saq_js['default'] : saq_js;
    sbp_js = sbp_js && sbp_js.hasOwnProperty('default') ? sbp_js['default'] : sbp_js;
    sd_js = sd_js && sd_js.hasOwnProperty('default') ? sd_js['default'] : sd_js;
    seFI_js = seFI_js && seFI_js.hasOwnProperty('default') ? seFI_js['default'] : seFI_js;
    seSE_js = seSE_js && seSE_js.hasOwnProperty('default') ? seSE_js['default'] : seSE_js;
    se_js = se_js && se_js.hasOwnProperty('default') ? se_js['default'] : se_js;
    seh_js = seh_js && seh_js.hasOwnProperty('default') ? seh_js['default'] : seh_js;
    ses_js = ses_js && ses_js.hasOwnProperty('default') ? ses_js['default'] : ses_js;
    sg_js = sg_js && sg_js.hasOwnProperty('default') ? sg_js['default'] : sg_js;
    shiLatn_js = shiLatn_js && shiLatn_js.hasOwnProperty('default') ? shiLatn_js['default'] : shiLatn_js;
    shiTfng_js = shiTfng_js && shiTfng_js.hasOwnProperty('default') ? shiTfng_js['default'] : shiTfng_js;
    shi_js = shi_js && shi_js.hasOwnProperty('default') ? shi_js['default'] : shi_js;
    si_js = si_js && si_js.hasOwnProperty('default') ? si_js['default'] : si_js;
    sk_js = sk_js && sk_js.hasOwnProperty('default') ? sk_js['default'] : sk_js;
    sl_js = sl_js && sl_js.hasOwnProperty('default') ? sl_js['default'] : sl_js;
    smn_js = smn_js && smn_js.hasOwnProperty('default') ? smn_js['default'] : smn_js;
    sn_js = sn_js && sn_js.hasOwnProperty('default') ? sn_js['default'] : sn_js;
    soDJ_js = soDJ_js && soDJ_js.hasOwnProperty('default') ? soDJ_js['default'] : soDJ_js;
    soET_js = soET_js && soET_js.hasOwnProperty('default') ? soET_js['default'] : soET_js;
    soKE_js = soKE_js && soKE_js.hasOwnProperty('default') ? soKE_js['default'] : soKE_js;
    so_js = so_js && so_js.hasOwnProperty('default') ? so_js['default'] : so_js;
    sqMK_js = sqMK_js && sqMK_js.hasOwnProperty('default') ? sqMK_js['default'] : sqMK_js;
    sqXK_js = sqXK_js && sqXK_js.hasOwnProperty('default') ? sqXK_js['default'] : sqXK_js;
    sq_js = sq_js && sq_js.hasOwnProperty('default') ? sq_js['default'] : sq_js;
    srCyrlBA_js = srCyrlBA_js && srCyrlBA_js.hasOwnProperty('default') ? srCyrlBA_js['default'] : srCyrlBA_js;
    srCyrlME_js = srCyrlME_js && srCyrlME_js.hasOwnProperty('default') ? srCyrlME_js['default'] : srCyrlME_js;
    srCyrlXK_js = srCyrlXK_js && srCyrlXK_js.hasOwnProperty('default') ? srCyrlXK_js['default'] : srCyrlXK_js;
    srCyrl_js = srCyrl_js && srCyrl_js.hasOwnProperty('default') ? srCyrl_js['default'] : srCyrl_js;
    srLatnBA_js = srLatnBA_js && srLatnBA_js.hasOwnProperty('default') ? srLatnBA_js['default'] : srLatnBA_js;
    srLatnME_js = srLatnME_js && srLatnME_js.hasOwnProperty('default') ? srLatnME_js['default'] : srLatnME_js;
    srLatnXK_js = srLatnXK_js && srLatnXK_js.hasOwnProperty('default') ? srLatnXK_js['default'] : srLatnXK_js;
    srLatn_js = srLatn_js && srLatn_js.hasOwnProperty('default') ? srLatn_js['default'] : srLatn_js;
    sr_js = sr_js && sr_js.hasOwnProperty('default') ? sr_js['default'] : sr_js;
    svAX_js = svAX_js && svAX_js.hasOwnProperty('default') ? svAX_js['default'] : svAX_js;
    svFI_js = svFI_js && svFI_js.hasOwnProperty('default') ? svFI_js['default'] : svFI_js;
    sv_js = sv_js && sv_js.hasOwnProperty('default') ? sv_js['default'] : sv_js;
    swCD_js = swCD_js && swCD_js.hasOwnProperty('default') ? swCD_js['default'] : swCD_js;
    swKE_js = swKE_js && swKE_js.hasOwnProperty('default') ? swKE_js['default'] : swKE_js;
    swUG_js = swUG_js && swUG_js.hasOwnProperty('default') ? swUG_js['default'] : swUG_js;
    sw_js = sw_js && sw_js.hasOwnProperty('default') ? sw_js['default'] : sw_js;
    taLK_js = taLK_js && taLK_js.hasOwnProperty('default') ? taLK_js['default'] : taLK_js;
    taMY_js = taMY_js && taMY_js.hasOwnProperty('default') ? taMY_js['default'] : taMY_js;
    taSG_js = taSG_js && taSG_js.hasOwnProperty('default') ? taSG_js['default'] : taSG_js;
    ta_js = ta_js && ta_js.hasOwnProperty('default') ? ta_js['default'] : ta_js;
    te_js = te_js && te_js.hasOwnProperty('default') ? te_js['default'] : te_js;
    teoKE_js = teoKE_js && teoKE_js.hasOwnProperty('default') ? teoKE_js['default'] : teoKE_js;
    teo_js = teo_js && teo_js.hasOwnProperty('default') ? teo_js['default'] : teo_js;
    tg_js = tg_js && tg_js.hasOwnProperty('default') ? tg_js['default'] : tg_js;
    th_js = th_js && th_js.hasOwnProperty('default') ? th_js['default'] : th_js;
    tiER_js = tiER_js && tiER_js.hasOwnProperty('default') ? tiER_js['default'] : tiER_js;
    ti_js = ti_js && ti_js.hasOwnProperty('default') ? ti_js['default'] : ti_js;
    tk_js = tk_js && tk_js.hasOwnProperty('default') ? tk_js['default'] : tk_js;
    to_js = to_js && to_js.hasOwnProperty('default') ? to_js['default'] : to_js;
    trCY_js = trCY_js && trCY_js.hasOwnProperty('default') ? trCY_js['default'] : trCY_js;
    tr_js = tr_js && tr_js.hasOwnProperty('default') ? tr_js['default'] : tr_js;
    tt_js = tt_js && tt_js.hasOwnProperty('default') ? tt_js['default'] : tt_js;
    twq_js = twq_js && twq_js.hasOwnProperty('default') ? twq_js['default'] : twq_js;
    tzm_js = tzm_js && tzm_js.hasOwnProperty('default') ? tzm_js['default'] : tzm_js;
    ug_js = ug_js && ug_js.hasOwnProperty('default') ? ug_js['default'] : ug_js;
    uk_js = uk_js && uk_js.hasOwnProperty('default') ? uk_js['default'] : uk_js;
    urIN_js = urIN_js && urIN_js.hasOwnProperty('default') ? urIN_js['default'] : urIN_js;
    ur_js = ur_js && ur_js.hasOwnProperty('default') ? ur_js['default'] : ur_js;
    uzArab_js = uzArab_js && uzArab_js.hasOwnProperty('default') ? uzArab_js['default'] : uzArab_js;
    uzCyrl_js = uzCyrl_js && uzCyrl_js.hasOwnProperty('default') ? uzCyrl_js['default'] : uzCyrl_js;
    uzLatn_js = uzLatn_js && uzLatn_js.hasOwnProperty('default') ? uzLatn_js['default'] : uzLatn_js;
    uz_js = uz_js && uz_js.hasOwnProperty('default') ? uz_js['default'] : uz_js;
    vaiLatn_js = vaiLatn_js && vaiLatn_js.hasOwnProperty('default') ? vaiLatn_js['default'] : vaiLatn_js;
    vaiVaii_js = vaiVaii_js && vaiVaii_js.hasOwnProperty('default') ? vaiVaii_js['default'] : vaiVaii_js;
    vai_js = vai_js && vai_js.hasOwnProperty('default') ? vai_js['default'] : vai_js;
    vi_js = vi_js && vi_js.hasOwnProperty('default') ? vi_js['default'] : vi_js;
    vo_js = vo_js && vo_js.hasOwnProperty('default') ? vo_js['default'] : vo_js;
    vun_js = vun_js && vun_js.hasOwnProperty('default') ? vun_js['default'] : vun_js;
    wae_js = wae_js && wae_js.hasOwnProperty('default') ? wae_js['default'] : wae_js;
    wo_js = wo_js && wo_js.hasOwnProperty('default') ? wo_js['default'] : wo_js;
    xog_js = xog_js && xog_js.hasOwnProperty('default') ? xog_js['default'] : xog_js;
    yav_js = yav_js && yav_js.hasOwnProperty('default') ? yav_js['default'] : yav_js;
    yi_js = yi_js && yi_js.hasOwnProperty('default') ? yi_js['default'] : yi_js;
    yoBJ_js = yoBJ_js && yoBJ_js.hasOwnProperty('default') ? yoBJ_js['default'] : yoBJ_js;
    yo_js = yo_js && yo_js.hasOwnProperty('default') ? yo_js['default'] : yo_js;
    yueHans_js = yueHans_js && yueHans_js.hasOwnProperty('default') ? yueHans_js['default'] : yueHans_js;
    yueHant_js = yueHant_js && yueHant_js.hasOwnProperty('default') ? yueHant_js['default'] : yueHant_js;
    yue_js = yue_js && yue_js.hasOwnProperty('default') ? yue_js['default'] : yue_js;
    zgh_js = zgh_js && zgh_js.hasOwnProperty('default') ? zgh_js['default'] : zgh_js;
    zhHansHK_js = zhHansHK_js && zhHansHK_js.hasOwnProperty('default') ? zhHansHK_js['default'] : zhHansHK_js;
    zhHansMO_js = zhHansMO_js && zhHansMO_js.hasOwnProperty('default') ? zhHansMO_js['default'] : zhHansMO_js;
    zhHansSG_js = zhHansSG_js && zhHansSG_js.hasOwnProperty('default') ? zhHansSG_js['default'] : zhHansSG_js;
    zhHans_js = zhHans_js && zhHans_js.hasOwnProperty('default') ? zhHans_js['default'] : zhHans_js;
    zhHantHK_js = zhHantHK_js && zhHantHK_js.hasOwnProperty('default') ? zhHantHK_js['default'] : zhHantHK_js;
    zhHantMO_js = zhHantMO_js && zhHantMO_js.hasOwnProperty('default') ? zhHantMO_js['default'] : zhHantMO_js;
    zhHant_js = zhHant_js && zhHant_js.hasOwnProperty('default') ? zhHant_js['default'] : zhHant_js;
    zh_js = zh_js && zh_js.hasOwnProperty('default') ? zh_js['default'] : zh_js;
    zu_js = zu_js && zu_js.hasOwnProperty('default') ? zu_js['default'] : zu_js;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function fromTrigger(router$1, refresh, factories) {
        return router$1.events.pipe(operators.filter(function (evt) { return evt instanceof router.NavigationEnd; }), operators.merge(refresh), operators.startWith(1), operators.switchMap(function () { return fromFactories(factories, router$1); }));
    }
    function fromFactories(factories, router, withFirstEmpty) {
        if (withFirstEmpty === void 0) { withFirstEmpty = true; }
        return !Array.isArray(factories) || factories.length < 1
            ? rxjs.of([])
            : rxjs.defer(function () {
                var factoryObservables = resolveInjectedFactories(factories).map(function (f) {
                    return toObservable(Array.isArray(f) ? f : f && lodashEs.isFunction(f.get) ? f.get(getActivatedRoute(router)) : [f], withFirstEmpty);
                });
                return rxjs.combineLatest.apply(void 0, __spread(factoryObservables));
            }).pipe(operators.map(function (results) { return sortByPriority([].concat.apply([], __spread(results))); }));
    }
    function resolveInjectedFactories(factories) {
        return lodashEs.flatten(factories.map(function (f) { return (lodashEs.isFunction(f) ? f() : [f]); }));
    }
    function stateToFactory(componentsState) {
        var components$ = componentsState.pipe(operators.map(function (componentSet) { return Array.from(componentSet); }));
        return { get: function () { return components$; } };
    }
    function sortByPriority(items) {
        return lodashEs.sortBy(items, 'priority');
    }
    function toObservable(factoryResult, withFirstEmpty) {
        var observable;
        if (!factoryResult) {
            return rxjs.of([]);
        }
        else if (typeof factoryResult.then === 'function' || rxjs.isObservable(factoryResult)) {
            if (withFirstEmpty) {
                var forceObservable = rxjs.from(factoryResult);
                var withEmptyFirst = forceObservable.pipe(operators.startWith([]));
                observable = rxjs.race(forceObservable, withEmptyFirst);
            }
            else {
                observable = rxjs.from(factoryResult);
            }
        }
        else {
            observable = rxjs.of(factoryResult);
        }
        return observable.pipe(operators.map(function (result) { return (Array.isArray(result) ? result : [result]).filter(function (item) { return !!item; }); }));
    }
    /**
     * Helper function to get the activated route in
     * a service (as ActivatedRoute injection only
     * works in components). Works as long as we only use
     * a tree and no child is active at the same time.
     *
     * @param router The current router
     */
    function getActivatedRoute(router) {
        if (router && router.routerState && router.routerState.root) {
            var route = router.routerState.root;
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }
    }

    /**
     * A abstract state which should be included in each state.
     * @abstract
     */
    var StateService = /** @class */ (function () {
        function StateService() {
        }
        /**
         * Maps to a property and just returns that property.
         * @param mappedProperty The property to map to.
         */
        StateService.prototype.map = function (mappedProperty) {
            return this.state$.pipe(operators.map(mappedProperty), operators.distinctUntilChanged());
        };
        /**
         * Emits a new state.
         */
        StateService.prototype.emitNewState = function () {
            this.state$.next(this.state);
        };
        return StateService;
    }());

    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_ACTION_BAR = new core.InjectionToken('ActionBarFactory');
    /**
     * A service which defines action-bar items.
     */
    var ActionBarService = /** @class */ (function (_super) {
        __extends(ActionBarService, _super);
        function ActionBarService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_ACTION_BAR, []); },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (items) { return sortByPriority(items); }), operators.shareReplay(1));
            return _this;
        }
        Object.defineProperty(ActionBarService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        ActionBarService.prototype.refresh = function () {
            this.refreshTrigger.next();
        };
        /**
         * Adds a new item to the action bar in the header and emits a state change.
         * @param item The item to add.
         */
        ActionBarService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes an action bar item from the header and emits a state change.
         * @param item The item to remove.
         */
        ActionBarService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        ActionBarService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: router.Router }
        ]; };
        ActionBarService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ActionBarService_Factory() { return new ActionBarService(core.ɵɵinject(core.INJECTOR), core.ɵɵinject(router.Router)); }, token: ActionBarService, providedIn: "root" });
        ActionBarService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], ActionBarService);
        return ActionBarService;
    }(StateService));

    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_ACTION = new core.InjectionToken('ActionFactory');
    /**
     * A service which defines global actions.
     */
    var ActionService = /** @class */ (function (_super) {
        __extends(ActionService, _super);
        function ActionService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_ACTION, []); },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (items) { return sortByPriority(items); }), operators.shareReplay(1));
            return _this;
        }
        /**
         * Refresh the extension factories
         */
        ActionService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        Object.defineProperty(ActionService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Adds a new item to the actions in the header and emits a state change.
         * @param item The item to add.
         */
        ActionService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes an action from the header and emits a state change.
         * @param item The item to remove.
         */
        ActionService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        ActionService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: router.Router }
        ]; };
        ActionService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ActionService_Factory() { return new ActionService(core.ɵɵinject(core.INJECTOR), core.ɵɵinject(router.Router)); }, token: ActionService, providedIn: "root" });
        ActionService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], ActionService);
        return ActionService;
    }(StateService));

    // Just for translation annotation
    // Note: Own file because of conflicts if put in barrel directly.
    var _ = function (str) { return str; };
    function gettext(str) {
        return str;
    }

    /**
     * A service which allows to display alerts.
     */
    var AlertService = /** @class */ (function (_super) {
        __extends(AlertService, _super);
        function AlertService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state$ = new rxjs.BehaviorSubject([]);
            _this.MAX_ALERTS = 3;
            _this.ALERT_TIMEOUT = 3000;
            return _this;
        }
        Object.defineProperty(AlertService.prototype, "state", {
            /**
             * Returns all alerts.
             * @readonly
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Adds a new alert to the current state.
         */
        AlertService.prototype.add = function (alert) {
            this.addAlert(alert);
        };
        /**
         * Adds a alert by text.
         */
        AlertService.prototype.addByText = function (type, txt, detailedData) {
            this.addAlert({ text: txt, type: type, detailedData: detailedData });
        };
        /**
         * Returns all alerts.
         * @deprecated Use alertService.alerts instead.
         */
        AlertService.prototype.list = function () {
            return this.state;
        };
        /**
         * Remove an alert from the current state.
         */
        AlertService.prototype.remove = function (alert) {
            var _this = this;
            this.changeAlerts(this.state.filter(function (item) { return !_this.areSame(alert, item); }));
        };
        /**
         * Removes last danger alert. Replacement for silentError.
         *
         * @example
         * ```typescript
         *  try {
         *    // something that might throw a danger server msg
         *  } catch (ex) {
         *   this.alarmService.removeLastDanger();
         *  }
         * ```
         */
        AlertService.prototype.removeLastDanger = function () {
            var firstDangerAlarm = this.state.reverse().find(function (_a) {
                var type = _a.type;
                return type === 'danger';
            });
            this.changeAlerts(this.state.filter(function (alarm) { return alarm !== firstDangerAlarm; }));
        };
        /**
         * Shorthand for a save successful alert.
         * @param savedObject The object which was saved.
         * @return A function that can be executed to show the msg.
         */
        AlertService.prototype.saveSuccess = function (savedObject) {
            var _this = this;
            return function () {
                var text = savedObject + " saved successfully";
                _this.addByText('success', text);
            };
        };
        /**
         * Shorthand for a create successful alert.
         * @param createdObject The object which was created.
         * @return A function that can be executed to show the msg.
         */
        AlertService.prototype.createSuccess = function (createdObject) {
            var _this = this;
            return function () {
                var text = createdObject + " created successfully";
                _this.addByText('success', text);
            };
        };
        /**
         * Clears all alerts.
         */
        AlertService.prototype.clearAll = function () {
            this.changeAlerts([]);
        };
        /**
         * A shorthand to display a simple success message.
         * @param text The success text.
         * @param detailedData The text with additional information.
         */
        AlertService.prototype.success = function (text, detailedData) {
            this.addByText('success', text, detailedData);
        };
        /**
         * A shorthand to display a simple danger message.
         * @param text The danger text.
         * @param detailedData The text with additional information.
         */
        AlertService.prototype.danger = function (text, detailedData) {
            this.addByText('danger', text, detailedData);
        };
        /**
         * A shorthand to display a simple info message.
         * @param text The info text.
         * @param detailedData The text with additional information.
         */
        AlertService.prototype.info = function (text, detailedData) {
            this.addByText('info', text, detailedData);
        };
        /**
         * A shorthand to display a simple warning message.
         * @param text The warning text.
         * @param detailedData The text with additional information.
         */
        AlertService.prototype.warning = function (text, detailedData) {
            this.addByText('warning', text, detailedData);
        };
        AlertService.prototype.addServerFailure = function (error, type) {
            if (type === void 0) { type = 'danger'; }
            var data = error.data, res = error.res;
            var text = data && data.message ? data.message : null;
            var detailedData;
            if (data) {
                if (typeof data === 'object') {
                    detailedData = data.exceptionMessage;
                }
                else if (typeof data === 'string') {
                    detailedData = data;
                }
            }
            var hasRelevantMessage = !!(text || detailedData);
            if (!text) {
                text = gettext('A server error occurred.');
            }
            if (!hasRelevantMessage) {
                detailedData = {
                    status: res.status,
                    statusText: res.statusText,
                    url: res.url,
                };
            }
            this.addAlert({
                type: type,
                text: text,
                detailedData: detailedData
            });
        };
        AlertService.prototype.areSame = function (alert1, alert2) {
            return alert1.text === alert2.text &&
                alert1.type === alert2.type &&
                alert1.detailedData === alert2.detailedData &&
                alert1.onClose === alert2.onClose &&
                alert1.onDetail === alert2.onDetail;
        };
        AlertService.prototype.changeAlerts = function (newAlerts) {
            this.state$.next(newAlerts);
        };
        AlertService.prototype.addAlert = function (alert) {
            var _this = this;
            if (!alert.text && !alert.type) {
                throw new Error('Cannot add empty alert');
            }
            var alertAlreadyAdded = this.state
                .find(function (item) { return _this.areSame(alert, item); });
            if (alertAlreadyAdded) {
                return;
            }
            this.changeAlerts(__spread(this.state, [alert]));
            this.hideAutomaticallyIfNeeded(alert);
            this.removeOldestIfMax();
        };
        AlertService.prototype.hideAutomaticallyIfNeeded = function (alert) {
            var _this = this;
            var isSuccess = alert.type === 'success';
            var noDetails = !alert.detailedData;
            var alertTimeout = (isSuccess && noDetails) ? this.ALERT_TIMEOUT : 0;
            if (typeof alert.timeout !== 'undefined') {
                alertTimeout = alert.timeout;
            }
            if (alertTimeout) {
                setTimeout(function () { return _this.remove(alert); }, alertTimeout);
            }
        };
        AlertService.prototype.removeOldestIfMax = function () {
            if (this.state.length > this.MAX_ALERTS) {
                var _a = __read(this.state), firstRemoved = _a.slice(1);
                this.changeAlerts(firstRemoved);
            }
        };
        AlertService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AlertService_Factory() { return new AlertService(); }, token: AlertService, providedIn: "root" });
        AlertService = __decorate([
            core.Injectable({
                providedIn: 'root',
            })
        ], AlertService);
        return AlertService;
    }(StateService));

    /*
     * -----------------------------WARNING---------------------------------
     * This file has an *exact* copy in packages/cli/src/webpack.
     * Any changes to this file must be reflected there, too.
     */
    var ApplicationOptions = /** @class */ (function () {
        function ApplicationOptions() {
        }
        return ApplicationOptions;
    }());

    var HOOK_OPTIONS = new core.InjectionToken('App options');
    /**
     * A service that allows to set or get application options
     * which configure the default behavior of the UI.
     */
    var OptionsService = /** @class */ (function (_super) {
        __extends(OptionsService, _super);
        function OptionsService(options, systemOptionsService, tenantOptionService) {
            var _this = _super.call(this) || this;
            _this.systemOptionsService = systemOptionsService;
            _this.tenantOptionService = tenantOptionService;
            _this.setupOptions(options);
            return _this;
        }
        /**
         * Returns an application option used to configure the UI.
         * @param optionKey The application options key.
         * @param defaultValue A value to return if non is set.
         */
        OptionsService.prototype.get = function (optionKey, defaultValue) {
            var value = this[optionKey];
            if (typeof value === 'undefined') {
                value = this[lodashEs.camelCase(optionKey)];
            }
            return typeof value !== 'undefined' ? value : defaultValue;
        };
        /**
         * Sets an application option.
         * @param key The key to set.
         * @param value The value to set.
         */
        OptionsService.prototype.set = function (key, value) {
            this[lodashEs.camelCase(key)] = value;
        };
        /**
         * Gets support url from tenant options.
         * If response returns '404 not found' it gets the support url from application options.
         * If the support link within application options is not provided the UI will use the system options.
         * Is the support link explicitly set to false it will be hidden.
         * NOTE: The tenant option endpoint returns the system option setting if non is set on the tenant.
         *
         * @returns Returns support url or false.
         */
        OptionsService.prototype.getSupportUrl = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!lodashEs.isUndefined(this.supportUrl)) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, this.getTenantOption('configuration', 'system.support.url')];
                        case 1:
                            _a.supportUrl = _b.sent();
                            _b.label = 2;
                        case 2: return [2 /*return*/, lodashEs.isUndefined(this.supportUrl) ? false : this.supportUrl];
                    }
                });
            });
        };
        /**
         * Returns if the tenant allows to show the activate-support user menu entry.
         */
        OptionsService.prototype.getActivateSupportUser = function () {
            return __awaiter(this, void 0, void 0, function () {
                var option;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getSystemOption('support-user', 'enabled', true)];
                        case 1:
                            option = _a.sent();
                            return [2 /*return*/, !option];
                    }
                });
            });
        };
        /**
         * Gets a value from the system service and parses it.
         *
         * @param category The category for this option.
         * @param key The key for that option.
         * @param defaultValue The default if the option was not found.
         */
        OptionsService.prototype.getSystemOption = function (category, key, defaultValue) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.getOptionFromService(category, key, this.systemOptionsService, defaultValue)];
                });
            });
        };
        /**
         * Gets a value from the tenant service and parses it.
         *
         * @param category The category for this option.
         * @param key The key for that option.
         * @param defaultValue The default if the option was not found.
         */
        OptionsService.prototype.getTenantOption = function (category, key, defaultValue) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.getOptionFromService(category, key, this.tenantOptionService, defaultValue)];
                });
            });
        };
        OptionsService.prototype.setupOptions = function (options) {
            var _this = this;
            if (options) {
                if (!Array.isArray(options)) {
                    options = [options];
                }
                options.forEach(function (optionMap) {
                    if (optionMap) {
                        Object.keys(optionMap).forEach(function (key) {
                            _this[lodashEs.camelCase(key)] = optionMap[key];
                        });
                    }
                });
            }
        };
        OptionsService.prototype.getOptionFromService = function (category, key, service, defaultValue) {
            return __awaiter(this, void 0, void 0, function () {
                var data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, service.detail({ category: category, key: key })];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, this.parseOptionRawValue(data.value, defaultValue)];
                        case 2:
                            ex_1 = _a.sent();
                            return [2 /*return*/, defaultValue];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        OptionsService.prototype.parseOptionRawValue = function (rawValue, defaultValue) {
            var value;
            try {
                value = JSON.parse(rawValue);
            }
            catch (e) {
                value = lodashEs.isUndefined(rawValue) ? defaultValue : rawValue;
            }
            return value;
        };
        OptionsService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [HOOK_OPTIONS,] }] },
            { type: api.SystemOptionsService },
            { type: api.TenantOptionsService }
        ]; };
        OptionsService = __decorate([
            core.Injectable(),
            __param(0, core.Optional()), __param(0, core.Inject(HOOK_OPTIONS))
        ], OptionsService);
        return OptionsService;
    }(ApplicationOptions));

    var AppStateService = /** @class */ (function (_super) {
        __extends(AppStateService, _super);
        function AppStateService(applicationService, apiService, options, fetchClient) {
            var _this = _super.call(this) || this;
            _this.applicationService = applicationService;
            _this.apiService = apiService;
            _this.options = options;
            _this.fetchClient = fetchClient;
            _this.state$ = new rxjs.BehaviorSubject({
                app: {
                    name: _this.options.name,
                    contextPath: _this.getCurrentContextPath() || _this.options.contextPath
                },
                supportUrl: _this.options.supportUrl,
                lang: _this.options.get('defaultLanguage', 'en'),
                langs: _this.getLangs(),
                langsDetail: _this.options.languages,
                loginOptions: _this.options.loginOptions,
                activateSupportUserAvailable: undefined,
                versions: {
                    backend: undefined,
                    ui: _this.options.versions || { ngx: undefined }
                },
                hidePowered: _this.options.hidePowered,
                isLoading: false,
                showRightDrawer: _this.options.rightDrawer,
                loginExtraLink: _this.options.get('login_extra_link'),
                newsletter: _this.options.newsletter
            });
            _this.currentSupportUserName = new rxjs.BehaviorSubject(null);
            _this.currentUser = new rxjs.BehaviorSubject(null);
            _this.currentTenant = new rxjs.BehaviorSubject(null);
            _this.apiService.calls
                .pipe(operators.filter(function (_a) {
                var url = _a.url;
                return !/cep\/realtime/.test(url);
            }), operators.map(function (_a) {
                var phase = _a.phase;
                return (phase === 'start' ? 1 : -1);
            }), operators.scan(function (count, item) { return count + item; }, 0), operators.map(function (count) { return count > 0; }), operators.distinctUntilChanged())
                .subscribe(function (isLoading) { return (_this.state.isLoading = isLoading); });
            _this.assignApplicationKeyToDefaultHeaders();
            return _this;
        }
        AppStateService.prototype.assignApplicationKeyToDefaultHeaders = function () {
            if (!core.isDevMode()) {
                this.fetchClient.defaultHeaders = __assign({}, (this.fetchClient.defaultHeaders || {}), { 'X-Cumulocity-Application-Key': this.options.key });
            }
        };
        Object.defineProperty(AppStateService.prototype, "state", {
            /**
             * Returns the current state.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        AppStateService.prototype.getLangs = function () {
            var languages = this.options.languages;
            return languages ? lodashEs.keys(languages).filter(function (k) { return languages[k]; }) : [];
        };
        Object.defineProperty(AppStateService.prototype, "uiVersion", {
            /**
             * Returns the correct UI version. In hybrid mode for angular and ngx.
             */
            get: function () {
                var version = this.state.versions.ui;
                return version.ngx || version.ng1;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Loads the app manifest. If no access -> throw an error to verify app access.
         */
        AppStateService.prototype.loadManifest = function () {
            return __awaiter(this, void 0, void 0, function () {
                var application, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.applicationService.detail(this.state.app.contextPath + "/manifest")];
                        case 1:
                            application = (_a.sent()).data.application;
                            this.state.app.manifest = application;
                            this.loadDefaultOptions();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            throw ex_1;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Checks current users application list and matches it against given application name.
         * Returns true if application is in the list.
         * @param name application name
         */
        AppStateService.prototype.isApplicationAvailable = function (name) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.listByUser(undefined, { pageSize: 100 })];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data.some(function (app) { return app.name === name; })];
                    }
                });
            });
        };
        /**
         * Sets current user (including support user).
         * @param userInfo Info about current user and support user to be set.
         */
        AppStateService.prototype.setUser = function (userInfo) {
            this.currentSupportUserName.next(userInfo.supportUserName || null);
            this.currentUser.next(userInfo.user);
        };
        AppStateService.prototype.getCurrentContextPath = function () {
            var match = window.location.pathname.match(/\/apps\/(public\/){0,1}(.+?)(\/|\?|#|$)/);
            return match && match[2];
        };
        AppStateService.prototype.loadDefaultOptions = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _a = this.state;
                            return [4 /*yield*/, this.options.getSupportUrl()];
                        case 1:
                            _a.supportUrl = _d.sent();
                            _b = this.state;
                            return [4 /*yield*/, this.options.getActivateSupportUser()];
                        case 2:
                            _b.activateSupportUserAvailable = _d.sent();
                            _c = this.state.versions;
                            return [4 /*yield*/, this.options.getSystemOption('system', 'version')];
                        case 3:
                            _c.backend = _d.sent();
                            try {
                                this.showIncompatibleVersionsError();
                            }
                            catch (ex) {
                                // ignore this
                            }
                            this.emitNewState();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AppStateService.prototype.showIncompatibleVersionsError = function () {
            var uiVersion = this.state.versions.ui.ngx;
            var backendVersion = this.state.versions.backend;
            var uiVersionArray = uiVersion
                .replace(/[^\d.]/g, '')
                .split('.')
                .map(Number);
            var beVersionArray = backendVersion
                .replace(/[^\d.]/g, '')
                .split('.')
                .map(Number);
            var multiplier = Math.pow(10, Math.ceil(Math.log10(Math.max.apply(Math, __spread(uiVersionArray, beVersionArray)) + 1)));
            var sumReducer = function (acc, cur) { return acc + cur; };
            var calculateVersionMapper = function (curr, idx) { return curr * (multiplier / Math.pow(10, idx)); };
            var uiVersionNumber = uiVersionArray.map(calculateVersionMapper).reduce(sumReducer);
            var beVersionNumber = beVersionArray.map(calculateVersionMapper).reduce(sumReducer);
            var showError = uiVersionNumber > beVersionNumber;
            if (showError) {
                var errorContent = "You are running version " + uiVersion + " of the UI and version " + backendVersion + " of backend!";
                console.log('%c ' + errorContent, 'font-weight: bold; font-size: 30px; color: red;');
            }
        };
        AppStateService.ctorParameters = function () { return [
            { type: client.ApplicationService },
            { type: api.ApiService },
            { type: OptionsService },
            { type: client.FetchClient }
        ]; };
        AppStateService = __decorate([
            core.Injectable()
        ], AppStateService);
        return AppStateService;
    }(StateService));

    var NavigatorNode = /** @class */ (function () {
        function NavigatorNode(data) {
            this.children = [];
            this.parents = [];
            this.routerLinkExact = true;
            this.open = false;
            this.hidden = false;
            this.draggable = false;
            this.droppable = false;
            this.dragged = false;
            this.draggedHover = false;
            this.confirm = undefined;
            this._priority = 0;
            this.update(data);
        }
        Object.defineProperty(NavigatorNode.prototype, "hasChildren", {
            get: function () {
                return this.children.length > 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigatorNode.prototype, "priority", {
            get: function () {
                if (this._priority) {
                    return this._priority;
                }
                else {
                    var childrenPriorities = this.children.map(function (_a) {
                        var priority = _a.priority;
                        return priority || 0;
                    });
                    if (childrenPriorities.length) {
                        return childrenPriorities.length ? Math.max.apply(Math, __spread(childrenPriorities)) : 0;
                    }
                    return 0;
                }
            },
            set: function (priority) {
                this._priority = priority;
            },
            enumerable: true,
            configurable: true
        });
        NavigatorNode.prototype.openOnStart = function (url) {
            return false;
        };
        NavigatorNode.prototype.add = function (node) {
            if (node === this) {
                throw new Error('Adding node to itself');
            }
            if (this.children.indexOf(node) === -1) {
                this.children.push(node);
            }
            if (node.parents.indexOf(this) === -1) {
                node.parents.push(this);
            }
            this.updateChildren();
        };
        NavigatorNode.prototype.remove = function (node) {
            var ix = this.children.indexOf(node);
            var pix = node.parents.indexOf(this);
            if (ix > -1) {
                this.children.splice(ix, 1);
            }
            if (pix > -1) {
                node.parents.splice(pix, 1);
            }
            this.updateChildren();
        };
        NavigatorNode.prototype.update = function (data) {
            if (data) {
                Object.assign(this, data);
                if (data.hidden !== undefined) {
                    this.parents.forEach(function (p) {
                        p.updateHidden();
                    });
                }
            }
        };
        NavigatorNode.prototype.find = function (predicate) {
            if (typeof predicate === 'string') {
                var compareLabel_1 = predicate.toLocaleLowerCase();
                predicate = function (_a) {
                    var label = _a.label;
                    return compareLabel_1 === label.toLowerCase();
                };
            }
            if (typeof predicate === 'object') {
                predicate = lodashEs.matches(predicate);
            }
            if (typeof predicate !== 'function') {
                throw new Error('Invalid search predicate');
            }
            return this.children.reduce(function (found, child) { return found || child.find(predicate); }, this.children.find(predicate));
        };
        NavigatorNode.prototype.empty = function () {
            this.children.length = 0;
        };
        NavigatorNode.prototype.click = function (options) {
            if (options === void 0) { options = {}; }
            // do nothing
        };
        NavigatorNode.prototype.drop = function ($event) {
            $event.stopPropagation();
            clearTimeout(this.expandDragTimeout);
        };
        NavigatorNode.prototype.dragStart = function ($event) {
            $event.stopPropagation();
            // we can't pass a object to setData, so we do it via service
            // set data is still needed, to make the drag&drop work
            $event.dataTransfer.setData('node', 'node');
            this.dragged = true;
        };
        NavigatorNode.prototype.dragEnd = function ($event) {
            $event.stopPropagation();
            this.dragged = false;
            $event.dataTransfer.clearData();
        };
        Object.defineProperty(NavigatorNode.prototype, "canDrop", {
            get: function () {
                return this.droppable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigatorNode.prototype, "canNavigate", {
            get: function () {
                return typeof this.path !== 'undefined';
            },
            enumerable: true,
            configurable: true
        });
        NavigatorNode.prototype.dragEnter = function ($event) {
            var _this = this;
            $event.preventDefault();
            $event.stopPropagation();
            this.draggedHover = true;
            if (!this.open) {
                this.expandDragTimeout = setTimeout(function () { return _this.expand(); }, 1000);
            }
        };
        NavigatorNode.prototype.dragLeave = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            this.draggedHover = false;
            clearTimeout(this.expandDragTimeout);
        };
        NavigatorNode.prototype.expand = function () {
            if (!this.open) {
                this.open = true;
                this.click({ open: true, expander: true });
            }
        };
        NavigatorNode.prototype.traverse = function (callback) {
            if (this.children) {
                this.children.forEach(function (child) {
                    callback(child);
                    child.traverse(callback);
                });
            }
        };
        NavigatorNode.prototype.destroy = function () {
            // nothing todo here
        };
        NavigatorNode.prototype.updateChildren = function () {
            this.sort();
            this.updateHidden();
        };
        NavigatorNode.prototype.sort = function () {
            this.children.sort(function (a, b) {
                if (a.priority > b.priority) {
                    return -1;
                }
                else if (a.priority < b.priority) {
                    return 1;
                }
                else if ((a.label || '').toLowerCase() < (b.label || '').toLowerCase()) {
                    return -1;
                }
                else if ((a.label || '').toLowerCase() > (b.label || '').toLowerCase()) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        };
        NavigatorNode.prototype.updateHidden = function () {
            if (typeof this.path === 'undefined') {
                this.hidden = !this.children.some(function (_a) {
                    var hidden = _a.hidden;
                    return !hidden;
                });
            }
        };
        return NavigatorNode;
    }());

    var NavigatorNodeRoot = /** @class */ (function (_super) {
        __extends(NavigatorNodeRoot, _super);
        function NavigatorNodeRoot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NavigatorNodeRoot.prototype.addRoot = function (nodeData) {
            var parent = nodeData.parent;
            var node = this.createNode(nodeData);
            var localParent;
            if (parent) {
                if (typeof parent === 'object') {
                    localParent = this.find(parent.label);
                    if (localParent) {
                        localParent.update(parent);
                    }
                }
                else if (typeof parent === 'string' || typeof parent === 'function') {
                    localParent = this.find(parent);
                }
                if (!localParent) {
                    localParent = this.createNode(parent);
                    if (!this.find(function (n) { return localParent === n; })) {
                        this.add(localParent);
                    }
                }
            }
            (localParent || this).add(node);
            return node;
        };
        NavigatorNodeRoot.prototype.createNode = function (nodeData) {
            if (nodeData instanceof NavigatorNode) {
                return nodeData;
            }
            if (typeof nodeData === 'string') {
                return new NavigatorNode({ label: nodeData });
            }
            if (typeof nodeData === 'object') {
                return new NavigatorNode(__assign({}, nodeData, { parent: undefined }));
            }
            throw new Error('Wrong type of node data');
        };
        return NavigatorNodeRoot;
    }(NavigatorNode));

    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_NAVIGATOR_NODES = new core.InjectionToken('NavigatorNodesFactory');
    /**
     * A service which defines the navigator.
     */
    var NavigatorService = /** @class */ (function (_super) {
        __extends(NavigatorService, _super);
        function NavigatorService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.router = router;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.firstUrl = true;
            var rootNode = new NavigatorNodeRoot();
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_NAVIGATOR_NODES, []); },
                stateToFactory(_this.state$),
            ]).pipe(operators.map(function (nodes) {
                var noParent = nodes.filter(function (node) { return !node.parent; });
                var withParent = nodes.filter(function (node) { return node.parent; });
                // Based on the sortedNodes array, the nodes are sequentially created.
                // Nodes sorting is done in two steps to have the top-level nodes first.
                // This way, by the time we are adding a child node, the parent node is already present.
                var sortedNodes = sortByPriority(noParent).concat(sortByPriority(withParent));
                rootNode.empty();
                sortedNodes.forEach(function (node) { return rootNode.addRoot(node); });
                return rootNode.children;
            }), operators.shareReplay(1));
            return _this;
        }
        NavigatorService.prototype.openOnFirstUrl = function (node) {
            if (this.firstUrl && !!node.path) {
                return this.router.isActive(node.path, node.routerLinkExact) || node.openOnStart(this.router.url);
            }
            return false;
        };
        Object.defineProperty(NavigatorService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Refresh the extension factories
         */
        NavigatorService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        /**
         * Adds a new node to the navigator.
         * @param nav The node to add.
         */
        NavigatorService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes a node from the navigator.
         * @param nav The node ro remove.
         */
        NavigatorService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        NavigatorService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: router.Router }
        ]; };
        NavigatorService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NavigatorService_Factory() { return new NavigatorService(core.ɵɵinject(core.INJECTOR), core.ɵɵinject(router.Router)); }, token: NavigatorService, providedIn: "root" });
        NavigatorService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], NavigatorService);
        return NavigatorService;
    }(StateService));

    /**
     * A service which defines header functions.
     */
    var HeaderService = /** @class */ (function (_super) {
        __extends(HeaderService, _super);
        function HeaderService(navigatorService, options) {
            var _this = _super.call(this) || this;
            _this.navigatorService = navigatorService;
            _this.options = options;
            _this.hasItemsInNavigator$ = _this.navigatorService.items$.pipe(operators.map(function (_a) {
                var length = _a.length;
                return !!length;
            }), operators.distinctUntilChanged());
            _this.state$ = new rxjs.BehaviorSubject({
                title: undefined,
                nav: {
                    open: false
                }
            });
            _this.title = undefined;
            _this.header$ = _this.map(function (header) { return header; });
            _this.navigatorOpen$ = _this.map(function (_a) {
                var nav = _a.nav;
                return nav.open;
            }).pipe(operators.combineLatest(_this.hasItemsInNavigator$), operators.map(function (_a) {
                var _b = __read(_a, 2), open = _b[0], hasItems = _b[1];
                return open && hasItems;
            }));
            var titleReference = document.querySelector('title');
            _this.title = {
                elementRef: titleReference,
                originalValue: titleReference && titleReference.innerText
            };
            return _this;
        }
        Object.defineProperty(HeaderService.prototype, "state", {
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderService.prototype, "navigatorHiddenOnStartup", {
            get: function () {
                return this.options.hideNavigator;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderService.prototype, "largeWidth", {
            get: function () {
                return document.documentElement.clientWidth > 1200;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeaderService.prototype, "shouldToggle", {
            get: function () {
                return this.largeWidth && !this.navigatorHiddenOnStartup && !this.state.nav.open;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Toggles the navigator open status.
         */
        HeaderService.prototype.toggleNavigator = function () {
            this.state.nav.open = !this.state.nav.open;
            this.emitNewState();
        };
        /**
         * Force to close the navigator.
         */
        HeaderService.prototype.closeNavigator = function () {
            this.state.nav.open = false;
            this.emitNewState();
        };
        /**
         * Configures navigation options.
         * @param config Object with the properties:
         * - open: Boolean
         */
        HeaderService.prototype.configNavigator = function (config) {
            if (config === void 0) { config = {}; }
            this.state.nav = Object.assign(this.state.nav, config);
            this.emitNewState();
        };
        /**
         * Change the application title.
         * @param newTitle The new title of the application.
         */
        HeaderService.prototype.changeTitle = function (newTitle) {
            this.state.title = newTitle;
            this.emitNewState();
        };
        /**
         * Change the page title.
         * @param newTitle The new title of the page.
         */
        HeaderService.prototype.changePageTitle = function (newTitle) {
            this.title.elementRef.innerText = newTitle
                ? newTitle + " / " + this.title.originalValue
                : "" + this.title.originalValue;
        };
        /**
         * This methods checks if the navigator toggles on startup
         * or if an item is added to the navigator node.
         * Delay of 300ms is intended for animation purpose.
         */
        HeaderService.prototype.verifyIfNavOpen = function () {
            var _this = this;
            this.hasItemsInNavigator$
                .pipe(operators.debounceTime(300))
                .subscribe(function (hasItems) { return hasItems && _this.shouldToggle && _this.toggleNavigator(); });
        };
        HeaderService.prototype.shouldShowBreadcrumbs = function () {
            return this.options.breadcrumbs;
        };
        HeaderService.ctorParameters = function () { return [
            { type: NavigatorService },
            { type: OptionsService }
        ]; };
        HeaderService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function HeaderService_Factory() { return new HeaderService(core.ɵɵinject(NavigatorService), core.ɵɵinject(OptionsService)); }, token: HeaderService, providedIn: "root" });
        HeaderService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], HeaderService);
        return HeaderService;
    }(StateService));

    var HOOK_TABS = new core.InjectionToken('TabsFactory');
    var TabsService = /** @class */ (function (_super) {
        __extends(TabsService, _super);
        function TabsService(injector, router, translateService, options) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.translateService = translateService;
            _this.options = options;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_TABS, []); },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (tabs) { return _this.prepareTabs(tabs); }), operators.shareReplay(1), operators.distinctUntilChanged());
            _this.orientation$ = _this.items$.pipe(operators.map(function (tabs) {
                var firstTabWithDefinedOrientation = tabs.find(function (tab) { return tab.orientation; });
                if (firstTabWithDefinedOrientation) {
                    return firstTabWithDefinedOrientation.orientation;
                }
                return _this.options.tabsHorizontal ? 'horizontal' : 'vertical';
            }), operators.distinctUntilChanged());
            return _this;
        }
        TabsService.prototype.prepareTabs = function (tabs) {
            return this.sortTabs(tabs
                .map(function (tab) { return (__assign({}, tab, { template: tab.template instanceof core.ViewContainerRef ? tab.template : undefined })); })
                .filter(function (tab, index, self) { return index === self.findIndex(function (t) { return t.path === tab.path; }); }));
        };
        TabsService.prototype.sortTabs = function (tabs) {
            var _this = this;
            return tabs.sort(function (a, b) {
                var priorityOrder = (b.priority || 0) - (a.priority || 0);
                var aTranslatedLabel = _this.translateService.instant(a.label);
                var bTranslatedLabel = _this.translateService.instant(b.label);
                var translatedLabelOrder = aTranslatedLabel.localeCompare(bTranslatedLabel);
                return priorityOrder || translatedLabelOrder;
            });
        };
        /**
         * Refresh the extension factories
         */
        TabsService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        Object.defineProperty(TabsService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Adds a new item to tabs and emits state change
         * @param item The item to add.
         */
        TabsService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes a tab and emits a state change.
         * @param item The item to remove.
         */
        TabsService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        Object.defineProperty(TabsService.prototype, "firstTab$", {
            get: function () {
                return this.items$.pipe(operators.map(function (tabs) { return tabs[0]; }), operators.filter(Boolean), operators.first());
            },
            enumerable: true,
            configurable: true
        });
        TabsService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: router.Router },
            { type: core$1.TranslateService },
            { type: OptionsService }
        ]; };
        TabsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TabsService_Factory() { return new TabsService(core.ɵɵinject(core.INJECTOR), core.ɵɵinject(router.Router), core.ɵɵinject(core$1.TranslateService), core.ɵɵinject(OptionsService)); }, token: TabsService, providedIn: "root" });
        TabsService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], TabsService);
        return TabsService;
    }(StateService));

    var BootstrapComponent = /** @class */ (function () {
        function BootstrapComponent(tabs, ui, navigator, actionBar, options, headerService) {
            var _this = this;
            this.tabs = tabs;
            this.ui = ui;
            this.navigator = navigator;
            this.actionBar = actionBar;
            this.options = options;
            this.headerService = headerService;
            this.noAppsMargin$ = this.headerService.map(function (_a) {
                var nav = _a.nav;
                return !nav.open && nav.hiddenOnStartup;
            });
            this.tabsOrientation = this.options.tabsHorizontal ? 'horizontal' : 'vertical';
            this.ui.map(function (_a) {
                var lang = _a.lang;
                return lang;
            }).pipe(operators.distinctUntilChanged()).subscribe(function () {
                _this.actionBar.refresh();
                _this.localeUpdating = true;
                setTimeout(function () {
                    _this.localeUpdating = false;
                }, 10);
            });
        }
        Object.defineProperty(BootstrapComponent.prototype, "showPoweredBy", {
            get: function () {
                return !this.options.get('hidePowered');
            },
            enumerable: true,
            configurable: true
        });
        BootstrapComponent.ctorParameters = function () { return [
            { type: TabsService },
            { type: AppStateService },
            { type: NavigatorService },
            { type: ActionBarService },
            { type: OptionsService },
            { type: HeaderService }
        ]; };
        BootstrapComponent = __decorate([
            core.Component({
                selector: 'c8y-bootstrap',
                template: "<c8y-login *ngIf=\"!(ui.currentUser | async)\"></c8y-login>\n\n<div *ngIf=\"(ui.currentUser | async) && !localeUpdating\" [class.head-open]=\"header.headerOpen\">\n  <c8y-header-bar #header></c8y-header-bar>\n  <c8y-navigator-outlet\n    [nodes]=\"navigator.items$ | async\"\n    [open]=\"headerService.navigatorOpen$ | async\"\n  >\n    <header class=\"title navigator-slot-top\">\n      <div class=\"tenant-brand\"></div>\n      <c8y-app-icon\n        [name]=\"(ui.state$ | async).app.name\"\n        [contextPath]=\"(ui.state$ | async).app.contextPath\"\n      ></c8y-app-icon>\n      <span>{{ (ui.state$ | async).app | humanizeAppName | async }}</span>\n    </header>\n    <div style=\"cursor:default\" class=\"powered-by navigator-slot-bottom\" *ngIf=\"showPoweredBy\">\n      <p translate>powered by Cumulocity</p>\n    </div>\n  </c8y-navigator-outlet>\n\n  <div class=\"alerts\">\n    <c8y-alert-outlet></c8y-alert-outlet>\n  </div>\n  <c8y-tabs-outlet\n    #tabsComponent\n    [tabs]=\"tabs.items$ | async\"\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [orientation]=\"tabs.orientation$ | async\"\n  >\n  </c8y-tabs-outlet>\n  <c8y-action-bar\n    #actionBarComponent\n    [navigatorOpen]=\"headerService.navigatorOpen$ | async\"\n    [hasTabs]=\"tabsComponent.hasTabs\"\n    [isTabsHorizontal]=\"tabsComponent.isHorizontal\"\n    [items]=\"actionBar.items$ | async\"\n  >\n  </c8y-action-bar>\n\n  <div\n    class=\"mcontainer\"\n    [ngClass]=\"{\n      open: headerService.navigatorOpen$ | async,\n      'no-apps-margin': noAppsMargin$ | async,\n      'horizontal-tabs': tabsComponent.isHorizontal,\n      'vertical-tabs': !tabsComponent.isHorizontal,\n      'has-tabs': tabsComponent.hasTabs,\n      'has-action-bar': !actionBarComponent.hidden\n    }\"\n  >\n    <div class=\"container-fluid\">\n      <router-outlet></router-outlet>\n      <ng-content select=\"#c8y-legacy-view\"></ng-content>\n      <!-- legacy ng-view, will not be migrated atm -->\n    </div>\n  </div>\n</div>\n<c8y-cookie-banner></c8y-cookie-banner>\n"
            })
        ], BootstrapComponent);
        return BootstrapComponent;
    }());

    var HOOK_BREADCRUMB = new core.InjectionToken('BreadcrumbFactory');
    var BreadcrumbService = /** @class */ (function (_super) {
        __extends(BreadcrumbService, _super);
        function BreadcrumbService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_BREADCRUMB, []); },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (breadcrumbs) { return _this.sortByPreferredPath(breadcrumbs); }), operators.shareReplay(1));
            return _this;
        }
        Object.defineProperty(BreadcrumbService.prototype, "state", {
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Adds a new item to the action bar in the header.
         * @param item The item to add.
         */
        BreadcrumbService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes an action bar item from the header.
         * @param item The item to remove.
         */
        BreadcrumbService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        /**
         * Refresh the extension factories
         */
        BreadcrumbService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        /**
         * Sets the crumb that contains that path to the top.
         * @param path The path to prefer.
         */
        BreadcrumbService.prototype.selectPreferredByPath = function (path) {
            this.preferredPath = path;
            this.refresh();
        };
        BreadcrumbService.prototype.sortByPreferredPath = function (breadcrumbs) {
            var _this = this;
            if (this.preferredPath) {
                return breadcrumbs.sort(function (bc) {
                    return bc.items.find(function (item) { return !!item.path.match(_this.preferredPath); }) ? -1 : 1;
                });
            }
            return breadcrumbs;
        };
        BreadcrumbService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: router.Router }
        ]; };
        BreadcrumbService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(core.ɵɵinject(core.INJECTOR), core.ɵɵinject(router.Router)); }, token: BreadcrumbService, providedIn: "root" });
        BreadcrumbService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], BreadcrumbService);
        return BreadcrumbService;
    }(StateService));

    var _a, _b, _c, _d, _e;

    (function (Status) {
        Status["SUCCESS"] = "success";
        Status["WARNING"] = "warning";
        Status["DANGER"] = "danger";
        Status["INFO"] = "info";
    })(exports.Status || (exports.Status = {}));
    var statusIcons = (_a = {},
        _a[exports.Status.SUCCESS] = 'check-circle',
        _a[exports.Status.WARNING] = 'exclamation-triangle',
        _a[exports.Status.DANGER] = 'exclamation-circle',
        _a[exports.Status.INFO] = 'info-circle',
        _a);
    var statusClasses = (_b = {},
        _b[exports.Status.SUCCESS] = "text-" + exports.Status.SUCCESS,
        _b[exports.Status.WARNING] = "text-" + exports.Status.WARNING,
        _b[exports.Status.DANGER] = "text-" + exports.Status.DANGER,
        _b[exports.Status.INFO] = "text-" + exports.Status.INFO,
        _b);
    var statusAlert = (_c = {},
        _c[exports.Status.SUCCESS] = "alert-" + exports.Status.SUCCESS,
        _c[exports.Status.WARNING] = "alert-" + exports.Status.WARNING,
        _c[exports.Status.DANGER] = "alert-" + exports.Status.DANGER,
        _c[exports.Status.INFO] = "alert-" + exports.Status.INFO,
        _c);
    var operationStatusIcons = (_d = {},
        _d[client.OperationStatus.PENDING] = 'clock-o',
        _d[client.OperationStatus.EXECUTING] = 'refresh',
        _d[client.OperationStatus.SUCCESSFUL] = 'check-circle',
        _d[client.OperationStatus.FAILED] = 'exclamation-circle',
        _d);
    var operationStatusClasses = (_e = {},
        _e[client.OperationStatus.PENDING] = '',
        _e[client.OperationStatus.EXECUTING] = 'text-info',
        _e[client.OperationStatus.SUCCESSFUL] = 'text-success',
        _e[client.OperationStatus.FAILED] = 'text-danger',
        _e);

    /*
     * Humanize any string
     * Usage:
     *   'something' | humanize
    */
    var HumanizePipe = /** @class */ (function () {
        function HumanizePipe() {
        }
        HumanizePipe_1 = HumanizePipe;
        HumanizePipe.humanize = function (str) {
            if (str === void 0) { str = ''; }
            str = str
                .replace(/\./g, ' ')
                .replace(/c8y[\s,_]*/gi, '')
                .replace(/_/g, ' ')
                .replace(/([A-Z][a-z])/g, ' $1')
                .replace(/^\$\.?/, '')
                .replace(/^\s*/, '')
                .replace(/\s*$/, '')
                .replace(/\s+/g, ' ');
            return lodashEs.upperFirst(str);
        };
        HumanizePipe.prototype.transform = function (str) {
            return HumanizePipe_1.humanize(str);
        };
        var HumanizePipe_1;
        HumanizePipe = HumanizePipe_1 = __decorate([
            core.Pipe({ name: 'humanize' })
        ], HumanizePipe);
        return HumanizePipe;
    }());

    /*
     * Humanize an application name and translates it.
     * Usage:
     *   appNameOrApp | humanizeAppName | async
    */
    var HumanizeAppNamePipe = /** @class */ (function () {
        function HumanizeAppNamePipe(translateService) {
            this.translateService = translateService;
            this.internalApps = {
                administration: 'Administration',
                cockpit: 'Cockpit',
                devicemanagement: 'Device management'
            };
        }
        HumanizeAppNamePipe.prototype.transform = function (appNameOrApp) {
            if (appNameOrApp === void 0) { appNameOrApp = 'Cumulocity'; }
            var appName = this.getAppName(appNameOrApp);
            var text;
            if (this.isPublicApp(appNameOrApp)) {
                text = gettext('{{ appName | translate }} (public)');
            }
            else {
                text = appName;
            }
            return this.translateService.get(text, { appName: appName });
        };
        HumanizeAppNamePipe.prototype.getAppName = function (appNameOrApp) {
            var appName = this.getFirstDefined([
                lodash.get(appNameOrApp, 'name'),
                lodash.get(appNameOrApp, 'contextPath'),
                appNameOrApp
            ]) || '';
            return this.internalApps[appName] || appName;
        };
        HumanizeAppNamePipe.prototype.getFirstDefined = function (values) {
            return lodash.find(values, lodash.negate(lodash.isUndefined));
        };
        HumanizeAppNamePipe.prototype.isPublicApp = function (appNameOrApp) {
            return Boolean(lodash.get(appNameOrApp, 'public'));
        };
        HumanizeAppNamePipe.ctorParameters = function () { return [
            { type: core$1.TranslateService }
        ]; };
        HumanizeAppNamePipe = __decorate([
            core.Pipe({ name: 'humanizeAppName' })
        ], HumanizeAppNamePipe);
        return HumanizeAppNamePipe;
    }());

    var LANGUAGES = new core.InjectionToken('Languages');

    var LOCALE_PATH = new core.InjectionToken('Locale path');

    var HOOK_PATTERN_MESSAGES = new core.InjectionToken('Pattern Messages');

    /**
     * A service to translate messages by using regexp patterns.
     */
    var PatternMessagesService = /** @class */ (function () {
        function PatternMessagesService(patterns) {
            var _this = this;
            this.patterns = {};
            this.pipes = {
                absoluteDate: function (date) {
                    return common.formatDate(date, 'medium', _this.translateService.currentLang);
                },
                translate: function (key) {
                    return _this.translateService.instant(key);
                }
            };
            lodashEs.each(patterns, function (pattern) {
                Object.assign(_this.patterns, pattern);
            });
        }
        PatternMessagesService.prototype.translate = function (message) {
            var translation = this.translateWithPatterns(message);
            return (translation !== message) ? translation : '';
        };
        PatternMessagesService.prototype.translateWithPatterns = function (message, patterns) {
            var _this = this;
            if (patterns === void 0) { patterns = this.patterns; }
            var translatedMessage = message;
            lodashEs.each(patterns, function (patternCfg, pattern) {
                var globalRegExp = new RegExp(pattern, 'g');
                var globalMatch;
                if (!globalRegExp.test(translatedMessage)) {
                    return;
                }
                globalRegExp.test(''); // reset the regexp
                globalMatch = globalRegExp.exec(translatedMessage);
                var _loop_1 = function () {
                    var _a = __read(globalMatch, 1), localMatch = _a[0];
                    var placeholderValues = lodashEs.mapValues(patternCfg.placeholders, function (placeholder) {
                        var expr = placeholder.capture || placeholder;
                        var replacement = localMatch.replace(new RegExp(pattern, 'g'), expr);
                        if (placeholder.translate) {
                            replacement = _this.translateWithPatterns(replacement, placeholder.translate);
                        }
                        return replacement;
                    });
                    translatedMessage = translatedMessage.replace(localMatch, _this.translateWithParams(patternCfg, placeholderValues));
                    globalMatch = globalRegExp.exec(translatedMessage);
                };
                while (globalMatch !== null) {
                    _loop_1();
                }
            });
            return translatedMessage;
        };
        PatternMessagesService.prototype.translateWithParams = function (patternCfg, params) {
            if (params === void 0) { params = {}; }
            var _a = this.translateService, defaultLang = _a.defaultLang, currentLang = _a.currentLang, compiler = _a.compiler;
            var translations = this.translateService.store.translations[currentLang];
            var defaultTranslations = this.translateService.store.translations[defaultLang];
            var originalKey = patternCfg.gettext;
            var originalValue = originalKey;
            if (translations) {
                if (translations[originalKey]) {
                    originalValue = translations[originalKey];
                }
                else if (defaultTranslations) {
                    if (defaultTranslations[originalKey]) {
                        originalValue = defaultTranslations[originalKey];
                    }
                }
            }
            var key = originalKey;
            var value = originalValue;
            var interpolateParams = __assign({}, params, { noPatternMessages: true });
            var match;
            var pipeRegex = RegExp('{{\\s*([^\\s]+)\\s*\\|\\s*([^\\s]+)\\s*}}', 'g');
            // tslint:disable-next-line:no-conditional-assignment
            while ((match = pipeRegex.exec(originalKey)) !== null) {
                var _b = __read(match, 3), placeholder = _b[0], paramName = _b[1], pipeName = _b[2];
                if (this.pipes[pipeName]) {
                    key = key.replace(placeholder, "{{" + paramName + "}}");
                    value = value.replace(placeholder, "{{" + paramName + "}}");
                    interpolateParams[paramName] = this.pipes[pipeName](params[paramName]);
                }
            }
            if (translations) {
                translations[key] = compiler.compile(value, currentLang);
            }
            return this.translateService.instant(key, interpolateParams);
        };
        PatternMessagesService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [HOOK_PATTERN_MESSAGES,] }] }
        ]; };
        PatternMessagesService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function PatternMessagesService_Factory() { return new PatternMessagesService(core.ɵɵinject(HOOK_PATTERN_MESSAGES)); }, token: PatternMessagesService, providedIn: "root" });
        PatternMessagesService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __param(0, core.Inject(HOOK_PATTERN_MESSAGES))
        ], PatternMessagesService);
        return PatternMessagesService;
    }());

    var MissingTranslationCustomHandler = /** @class */ (function () {
        function MissingTranslationCustomHandler(parser, patternMessagesService) {
            this.parser = parser;
            this.patternMessagesService = patternMessagesService;
            this.cache = {};
        }
        MissingTranslationCustomHandler.prototype.handle = function (params) {
            var messageKey = params.key, interpolateParams = params.interpolateParams, translateService = params.translateService;
            this.translateService = translateService;
            var translation = this.getFromCache(messageKey, interpolateParams);
            if (!translation) {
                var patternMessageTranslation = this.getPatternMessageTranslation(messageKey, interpolateParams);
                if (patternMessageTranslation) {
                    translation = patternMessageTranslation;
                }
                else {
                    translation = this.parser.interpolate(messageKey, interpolateParams);
                }
                this.addToCache(messageKey, interpolateParams, translation);
            }
            return translation;
        };
        MissingTranslationCustomHandler.prototype.getFromCache = function (messageKey, interpolateParams) {
            var currentLang = this.translateService.currentLang;
            var currentCache = this.cache[currentLang] || {};
            var cacheKey = this.getCacheKey(messageKey, interpolateParams);
            return currentCache[cacheKey];
        };
        MissingTranslationCustomHandler.prototype.addToCache = function (messageKey, interpolateParams, translation) {
            var currentLang = this.translateService.currentLang;
            var currentCache = this.cache[currentLang] = this.cache[currentLang] || {};
            var cacheKey = this.getCacheKey(messageKey, interpolateParams);
            currentCache[cacheKey] = translation;
        };
        MissingTranslationCustomHandler.prototype.getCacheKey = function (messageKey, interpolateParams) {
            return interpolateParams ? messageKey + " " + JSON.stringify(interpolateParams) : messageKey;
        };
        MissingTranslationCustomHandler.prototype.getPatternMessageTranslation = function (messageKey, interpolateParams) {
            var shouldTryPatternMessages = !interpolateParams || !(interpolateParams.noPatternMessages);
            if (shouldTryPatternMessages) {
                if (!this.patternMessagesService.translateService) {
                    this.patternMessagesService.translateService = this.translateService;
                }
                return this.patternMessagesService.translate(messageKey);
            }
            return undefined;
        };
        MissingTranslationCustomHandler.ctorParameters = function () { return [
            { type: core$1.TranslateParser },
            { type: PatternMessagesService }
        ]; };
        MissingTranslationCustomHandler = __decorate([
            core.Injectable()
        ], MissingTranslationCustomHandler);
        return MissingTranslationCustomHandler;
    }());

    /* tslint:disable:max-line-length */
    var MESSAGES = {
        '^Access is denied$': {
            gettext: gettext('Access denied.')
        },
        '^Alarm created$': {
            gettext: gettext('Alarm created')
        },
        '^Alarm updated$': {
            gettext: gettext('Alarm updated')
        },
        '^API is not available with the new domain$': {
            gettext: gettext('Could not activate custom domain. DNS setup is incorrect.')
        },
        '^Application with given name already exist$': {
            gettext: gettext('Application with given name already exists.')
        },
        '^Application with id (.+?) is already assigned to the tenant (.+?)$': {
            gettext: gettext('This application is already assigned to tenant "{{tenant}}".'),
            placeholders: {
                tenant: '$2'
            }
        },
        '^(.+)pplication for tenant (.+) with properties \\( (.+?) \\) already exists$': {
            gettext: gettext('Application for tenant "{{tenant}}" with the following values ({{valuesList}}) already exists.'),
            placeholders: {
                tenant: '$2',
                valuesList: '$3'
            }
        },
        '^Authentication failed! : User account is locked$': {
            gettext: gettext('Authentication failed due to: user account is locked.')
        },
        '^Availability monitoring record$': {
            gettext: gettext('Availability monitoring record')
        },
        '^Can not activate a certificate which is either expired or not yet valid$': {
            gettext: gettext('Cannot activate a certificate which is either expired or not yet valid.')
        },
        '^Cannot add certificate - certificate with (.+?) fingerprint already exists. : Certificate with (.+?) fingerprint already exists.': {
            gettext: gettext('Could not add certificate. Certificate with {{fingerprint}} fingerprint already exists.'),
            placeholders: {
                fingerprint: '$1'
            }
        },
        '^Cannot change password. : Provided token does not exist.$': {
            gettext: gettext('Cannot change password: provided token is invalid.')
        },
        '^Cannot deploy module (.*)$': {
            gettext: gettext('Cannot deploy module due to error: "{{ errorMessage | translate }}".'),
            placeholders: {
                errorMessage: '$1'
            }
        },
        '^Cannot deploy module (.+?)! : Compilation failed in module \'(.+?)\' in expression \'(.+?)\' : Incorrect syntax near \'(.+?)\' at line (\\d+) column (\\d+) \\[([\\S\\s]+?)\\]$': {
            gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}.'),
            placeholders: {
                moduleName: '$1',
                expression: '$3',
                incorrectExpression: '$4',
                line: '$5',
                column: '$6'
            }
        },
        '^Cannot deploy module (.+?)! : Compilation failed in module \'(.+?)\' in expression \'(.+?)\' : Incorrect syntax near \'(.+?)\' at line (\\d+) column (\\d+) near reserved keyword \'(.+?)\' \\[([\\S\\s]+?)\\]$': {
            gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}} near reserved keyword "{{keyword}}".'),
            placeholders: {
                moduleName: '$1',
                expression: '$3',
                incorrectExpression: '$4',
                line: '$5',
                column: '$6',
                keyword: '$7'
            }
        },
        '^Cannot deploy module (.+?)! : Compilation failed in module \'(.+?)\' in expression \'(.+?)\' : Incorrect syntax near \'(.+?)\' at line (\\d+) column (\\d+), please check the where clause \\[([\\S\\s]+?)\\]$': {
            gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": incorrect syntax near "{{incorrectExpression}}" at line {{line}} column {{column}}, check "where" clause.'),
            placeholders: {
                moduleName: '$1',
                expression: '$3',
                incorrectExpression: '$4',
                line: '$5',
                column: '$6'
            }
        },
        '^Cannot deploy module (.+?)! : Deployment failed in module \'(.+?)\' in expression \'(.+?)\' : Exception compiling script \'(.+?)\' of dialect \'(.+?)\': missing (.+?) before statement \\((.+?)\\) \\[([\\S\\s]+?)\\]$': {
            gettext: gettext('Could not deploy module "{{moduleName}}". Compilation failed in expression "{{expression}}": exception compiling script "{{scriptName}}" of dialect "{{scriptDialect}}": missing "{{missingSyntax}}" before statement "{{affectedStatement}}".'),
            placeholders: {
                moduleName: '$1',
                expression: '$3',
                scriptName: '$4',
                scriptDialect: '$5',
                missingSyntax: '$6',
                affectedStatement: '$7'
            }
        },
        '^Cannot execute bulk operation on empty group. Group with id=\'(\\d+?)\' doesn\'t have child assets.$': {
            gettext: gettext('Could not execute bulk operation on an empty group. Group with ID "{{groupId}}" has no child assets.'),
            placeholders: {
                groupId: '$1'
            }
        },
        '^Cannot execute bulk operation on empty group. DynamicGroup with id=\'(\\d+?)\' doesn\'t have child assets$': {
            gettext: gettext('Could not execute bulk operation on an empty group. Smart group with ID "{{groupId}}" has no child assets.'),
            placeholders: {
                groupId: '$1'
            }
        },
        '^Cannot parse X509 certificate. : Could not parse certificate: (.+?)$': {
            gettext: gettext('Could not parse X.509 certificate: {{ failureReason | translate }}.'),
            placeholders: {
                failureReason: '$1'
            }
        },
        '^Cannot reschedule bulk operation. All its operations are successful$': {
            gettext: gettext('Cannot reschedule bulk operation. All its operations are already successful.')
        },
        '^Cannot reset user password : Cannot find user with such email.$': {
            gettext: gettext('Cannot reset password for user with such email: email not found.')
        },
        '^Cannot update/delete application binary via this endpoint$': {
            gettext: gettext('Cannot update/delete application binary via this endpoint')
        },
        '^Can\'t delete user because it is used by another managed object$': {
            gettext: gettext('Cannot delete device with associated device owner because this owner is still assigned to other device(s). Try to remove only the device.')
        },
        '^Cep module created$': {
            gettext: gettext('CEP module created')
        },
        '^Cep module updated$': {
            gettext: gettext('CEP module updated')
        },
        '^Cep module deleted$': {
            gettext: gettext('CEP module deleted')
        },
        '^Cep module "(.+?)" created$': {
            gettext: gettext('CEP module "{{name}}" created'),
            placeholders: {
                name: '$1'
            }
        },
        '^Cep module "(.+?)" updated$': {
            gettext: gettext('CEP module "{{name}}" updated'),
            placeholders: {
                name: '$1'
            }
        },
        '^Cep module "(.+?)" deleted$': {
            gettext: gettext('CEP module "{{name}}" deleted'),
            placeholders: {
                name: '$1'
            }
        },
        '^Command state is invalid: (.+)$': {
            gettext: gettext('Command state is invalid: {{violations}}'),
            placeholders: {
                violations: {
                    capture: '$1',
                    translate: {
                        '(\\w+?) - may not be null': {
                            gettext: gettext('"{{field}}" must not be null'),
                            placeholders: {
                                field: '$1'
                            }
                        }
                    }
                }
            }
        },
        '^Could not connect to endpoint (.+)\\. Could not verify `(.+)` host key with fingerprint `(.+)` for `(.+)` on port (.+)\\. If you expected that key, please remove the previous one from configuration to allow for connection\\.$': {
            gettext: gettext('Could not connect to endpoint "{{endpointName}}". Could not verify {{keyType}} host key with fingerprint {{fingerprint}} for host {{host}} on port {{port}}. If you expected this key, please remove the previous one from configuration to allow for connection.'),
            placeholders: {
                endpointName: '$1',
                keyType: '$2',
                fingerprint: '$3',
                host: '$4',
                port: '$5'
            }
        },
        '^Could not login to ssh server on endpoint "(.+)"\\. Provided credential for user "(.+)" is incorrect\\.$': {
            gettext: gettext('Could not access SSH server on endpoint "{{endpointName}}". Provided credentials for user "{{userName}}" are incorrect.'),
            placeholders: {
                endpointName: '$1',
                userName: '$2'
            }
        },
        '^Could not save object remoteAccessUpdate: (.+)$': {
            gettext: '{{errorMessages}}',
            placeholders: {
                errorMessages: {
                    capture: '$1',
                    translate: {
                        'Could not recognize host-key format': {
                            gettext: gettext('Could not recognize "Host key" format')
                        },
                        'Could not recognize key-pair format': {
                            gettext: gettext('Could not recognize the format of "Public key" or "Private key"')
                        }
                    }
                }
            }
        },
        '^Could not update user. : Error persisting user (.+?)!$': {
            gettext: gettext('Could not update user "{{username}}".'),
            placeholders: {
                username: '$1'
            }
        },
        '^Creation ramp must be greater than (\\d+?)$': {
            gettext: gettext('Bulk operation delay must be greater than {{minSeconds}} seconds.'),
            placeholders: {
                minSeconds: '$1'
            }
        },
        '^Created container$': {
            gettext: gettext('Container created.')
        },
        '^Created pod: (.+)$': {
            gettext: gettext('Pod "{{imageName}}" created.'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^CSV file contained empty dataset$': {
            gettext: gettext('No entries found in uploaded CSV file.')
        },
        '^Cycle detected for route (.+?)!$': {
            gettext: gettext('Cycle detected for route {{route}}.'),
            placeholders: {
                route: '$1'
            }
        },
        '^Data broker processing is currently overloaded and may stop forwarding your data\\. Please contact support\\.$': {
            gettext: gettext('Data broker processing is currently overloaded and may stop forwarding your data. Please contact support.')
        },
        '^Data broker processing is not able to connect do destination tenant, thus data forwarding is not working\\. Please contact support\\.$': {
            gettext: gettext('Data broker processing is not able to connect to destination tenant, thus data forwarding is not working. Please contact support.')
        },
        '^Device id \'(.+?)\' contains \'(.+?)\' character which is not permitted.$': {
            gettext: gettext('ID "{{deviceId}}" contains invalid character: "{{invalidCharacter}}".'),
            placeholders: {
                deviceId: '$1',
                invalidCharacter: '$2'
            }
        },
        '^Device name: \'(.+?)\', alarm text: \'(.+?)\'$': {
            gettext: gettext('Device name: "{{deviceName}}", alarm text: "{{alarmText | translate}}"'),
            placeholders: {
                deviceName: '$1',
                alarmText: '$2'
            }
        },
        '^Display name$': {
            gettext: gettext('Login alias')
        },
        '^Domain name in uploaded certificate differs from the one in use$': {
            gettext: gettext('Domain name in uploaded certificate differs from the one in use. Please deactivate the custom domain before uploading new certificate.')
        },
        '^Domain name is already in use by another tenant!$': {
            gettext: gettext('Domain name is already used by another tenant.')
        },
        '^Duplicated connector for instanceUrl (.+?)!$': {
            gettext: gettext('Target URL {{targetUrl}} already used by another connector.'),
            placeholders: {
                targetUrl: '$1'
            }
        },
        '^Duplicated connector for name (.+?)!$': {
            gettext: gettext('Connector name "{{name}}" already used by another connector.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Entry is outside of the target dir: (.+)$': {
            gettext: gettext('File entry outside of the target directory: "{{path}}".'),
            placeholders: {
                path: '$1'
            }
        },
        '^Error during password validation. : Password must have at least (\\d+?) characters and no more than (\\d+?) and must contain only Latin1 characters.$': {
            gettext: gettext('Password is invalid. It must have at least {{minCharactersCount}} and no more than {{maxCharactersCount}} characters.'),
            placeholders: {
                minCharactersCount: '$1',
                maxCharactersCount: '$2'
            }
        },
        '^Error during password validation. : Your password has been used already. Choose another.$': {
            gettext: gettext('This password has already been used earlier. Use a different one.')
        },
        '^Error in statement (.+?):(.+?)! : Incorrect syntax near \'(.+?)\' near reserved keyword \'(.+?)\' \\[([\\S\\s]+?)\\]$': {
            gettext: gettext('Error in statement {{moduleName}}:{{statementNumber}}. Incorrect syntax near expression "{{expression}}" near reserved keyword "{{keyword}}".'),
            placeholders: {
                moduleName: '$1',
                statementNumber: '$2',
                expression: '$3',
                keyword: '$4'
            }
        },
        '^External id not found; external id = ID \\[type=(.+?), value=(.+?)\\]$': {
            gettext: gettext('External ID not found for type "{{type}}" and value "{{value}}".'),
            placeholders: {
                type: '$1',
                value: '$2'
            }
        },
        '^Error occurred when trying to find an Application for id ID (.+) : Could not find application by ID (\\d+)$': {
            gettext: gettext('Could not find application by ID {{applicationId}}.'),
            placeholders: {
                applicationId: '$2'
            }
        },
        '^Http status code: 404\n{error="options/Not Found",message="Unable to find option by given key: sigfox-agent/provider.token",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"}': {
            gettext: gettext('Unable to find option by given key: sigfox-agent/provider.token')
        },
        '^Failed to delete application.  : Cannot remove application assigned to other tenants.$': {
            gettext: gettext('Could not delete application assigned to other tenants.')
        },
        '^Failed to extract certificate from PKCS12$': {
            gettext: gettext('Failed to extract certificate from PKCS12.')
        },
        '^Failed to update domain at the platform$': {
            gettext: gettext('Failed to update domain at the platform.')
        },
        '^Finding device data from database failed : No managedObject for id \'(.+?)\'!$': {
            gettext: gettext('Could not find managed object with ID "{{deviceId}}".'),
            placeholders: {
                deviceId: '$1'
            }
        },
        '^Following mandatory fields should be included: (.+?)$': {
            gettext: gettext('Following mandatory fields should be included: {{fields}}'),
            placeholders: {
                fields: '$1'
            }
        },
        '^Global Role updated$': {
            gettext: gettext('Global role updated')
        },
        '^Global Role (.+?) updated$': {
            gettext: gettext('Global role "{{name}}" updated'),
            placeholders: {
                name: '$1'
            }
        },
        '^Global Role (.+?) updated: (.+)$': {
            gettext: gettext('Global role "{{name}}" updated: {{updatesList}}'),
            placeholders: {
                name: '$1',
                updatesList: {
                    capture: '$2',
                    translate: {
                        'applications \\[([^\\]]+?)\\] added': {
                            gettext: gettext('applications {{list}} added'),
                            placeholders: {
                                list: '$1'
                            }
                        },
                        'applications \\[([^\\]]+?)\\] removed': {
                            gettext: gettext('applications {{list}} removed'),
                            placeholders: {
                                list: '$1'
                            }
                        },
                        'roles \\[([^\\]]+?)\\] added': {
                            gettext: gettext('roles {{list}} added'),
                            placeholders: {
                                list: '$1'
                            }
                        },
                        'roles \\[([^\\]]+?)\\] removed': {
                            gettext: gettext('roles {{list}} removed'),
                            placeholders: {
                                list: '$1'
                            }
                        }
                    }
                }
            }
        },
        '^Global Roles$': {
            gettext: gettext('Global roles')
        },
        '^Operation updated: (.+)$': {
            gettext: gettext('Operation updated: {{updatesList}}'),
            placeholders: {
                updatesList: {
                    capture: '$1',
                    translate: {
                        'status=\'(.+?)\'': {
                            gettext: gettext('status="{{status | translate}}"'),
                            placeholders: {
                                status: '$1'
                            }
                        },
                        'description=\'(.+?)\'': {
                            gettext: gettext('description="{{description | translate}}"'),
                            placeholders: {
                                description: '$1'
                            }
                        },
                        'device name=\'(.+?)\'': {
                            gettext: gettext('device name="{{deviceName}}"'),
                            placeholders: {
                                deviceName: '$1'
                            }
                        },
                        'failure reason=\'(.+?)\'': {
                            gettext: gettext('failure reason="{{failureReason | translate}}"'),
                            placeholders: {
                                failureReason: '$1'
                            }
                        }
                    }
                }
            }
        },
        '^ID \\[type=(.+?), value=(.+?)\\] was already bound to different Global ID.$': {
            gettext: gettext('External ID "{{value}}" of the type "{{type}}" already exists.'),
            placeholders: {
                type: '$1',
                value: '$2'
            }
        },
        '^Invalid credentials! : Bad credentials$': {
            gettext: gettext('Invalid credentials.')
        },
        '^Invalid credentials! : No phone number provided$': {
            gettext: gettext('Log into the management tenant first and enter your phone number.')
        },
        '^Inventory Role removed$': {
            gettext: gettext('Inventory role removed')
        },
        '^Inventory Role (.+?) removed': {
            gettext: gettext('Inventory role "{{name}}" deleted.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Inventory Role updated$': {
            gettext: gettext('Inventory role updated')
        },
        '^Inventory Role (.+?) updated': {
            gettext: gettext('Inventory role "{{name}}" updated.'),
            placeholders: {
                name: '$1'
            }
        },
        '^I/O error: Connection refused; nested exception is Connection refused : Connection refused': {
            gettext: gettext('Connection refused')
        },
        '^I/O error: Read timed out; nested exception is Read timed out : Read timed out': {
            gettext: gettext('Read timed out')
        },
        '^Log file requested$': {
            gettext: gettext('Log file requested.')
        },
        '^Managed object deleted$': {
            gettext: gettext('Managed object deleted')
        },
        '^Managed object "(.+?)" deleted$': {
            gettext: gettext('Managed object "{{name}}" deleted'),
            placeholders: {
                name: '$1'
            }
        },
        '^Maximum file size exceeded$': {
            gettext: gettext('Maximum file size exceeded.')
        },
        '^Message with ID (.+?) doesn\'t exist in smart rest template (.+?)$': {
            gettext: gettext('Message with ID "{{messageId}}" doesn\'t exist in SmartREST template with ID "{{templateId}}"'),
            placeholders: {
                messageId: '$1',
                templateId: '$2'
            }
        },
        '^NewDeviceRequest for id = (.+?) already exists.$': {
            gettext: gettext('Device registration request with ID {{id}} already exists.'),
            placeholders: {
                id: '$1'
            }
        },
        '^No communication with device since (.+?)$': {
            gettext: gettext('No communication with device since {{timestamp | absoluteDate}}.'),
            placeholders: {
                timestamp: '$1'
            }
        },
        '^No data received from device within required interval.$': {
            gettext: gettext('No data received from device within required interval.')
        },
        '^No LoRa provider settings are found. Please configure the connectivity settings.$': {
            gettext: gettext('No LoRa provider settings are found. Please configure the connectivity settings.')
        },
        '^Not within any context!$': {
            gettext: gettext('A problem occurred with microservice subscription.')
        },
        '^Maximum age cannot be bigger than 10 years.$': {
            gettext: gettext('Maximum age cannot be bigger than 10 years.')
        },
        '^Microservice application name incorrect. Please use only lower-case letters, digits and dashes. Maximum length is (\\d+) characters.$': {
            gettext: gettext('Microservice application name is incorrect: only lower case letters, digits and dashes allowed. Maximum length: {{maxLength}}.'),
            placeholders: {
                maxLength: '$1'
            }
        },
        '^Microservice not available.*$': {
            gettext: gettext('Microservice is not available.')
        },
        '^Operation created$': {
            gettext: gettext('Operation created.')
        },
        '^Operation updated$': {
            gettext: gettext('Operation updated.')
        },
        '^Operation created: status=\'(.+?)\'.': {
            gettext: gettext('Operation created: status="{{status | translate}}".'),
            placeholders: {
                status: '$1'
            }
        },
        '^Option created$': {
            gettext: gettext('Option created.')
        },
        '^Option "(.+?)" created$': {
            gettext: gettext('Option "{{option}}" created.'),
            placeholders: {
                option: '$1'
            }
        },
        '^Option deleted$': {
            gettext: gettext('Option deleted.')
        },
        '^Option "(.+?)" deleted$': {
            gettext: gettext('Option "{{option}}" deleted.'),
            placeholders: {
                option: '$1'
            }
        },
        '^Owner field error. : Cannot introduce cyclic dependency.': {
            gettext: gettext('Could not introduce cyclic ownership dependency.')
        },
        '^Password change is temporary blocked.$': {
            gettext: gettext('Password change is temporarily blocked.')
        },
        '^Password cipher does not match': {
            gettext: gettext('Password cipher does not match.')
        },
        '^Platform application cannot be added to, nor removed from any tenant.$': {
            gettext: gettext('Platform application cannot be added to, nor removed from any tenant.')
        },
        '^Private key must be provided in KEY_PAIR credentials$': {
            gettext: gettext('Private key must be provided when "Public / private keys" option is selected.')
        },
        '^Private key cipher does not match': {
            gettext: gettext('Private key cipher does not match')
        },
        '^Protocol "(.+?)" does not support "(.+?)" credentials type$': {
            gettext: gettext('Protocol "{{protocol}}" does not support "{{credentialsType}}" credentials type.'),
            placeholders: {
                protocol: '$1',
                credentialsType: '$2'
            }
        },
        '^pulling image "(.+)"$': {
            gettext: gettext('Pulling image: "{{imageName}}".'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^Real-time event processing is currently overloaded and may stop processing your events\\. Please contact support\\.$': {
            gettext: gettext('Real-time event processing is currently overloaded and may stop processing your events. Please contact support.')
        },
        '^Resource ID \\[type=com_cumulocity_model_idtype_GId, value=(.+?)\\] for this request not found.$': {
            gettext: gettext('Could not find the resource with ID "{{id}}".'),
            placeholders: {
                id: '$1'
            }
        },
        '^Scaled up replica set (.+) to (\\d+)$': {
            gettext: gettext('Replica set "{{replicaSetName}}" scaled up to "{{scaleNumber}}".'),
            placeholders: {
                replicaSetName: '$1',
                scaleNumber: '$2'
            }
        },
        '^Simulator state is invalid: (.+)$': {
            gettext: gettext('Simulator state is invalid: {{violations}}'),
            placeholders: {
                violations: {
                    capture: '$1',
                    translate: {
                        '(\\w+?) - may not be null': {
                            gettext: gettext('"{{field}}" should not be null'),
                            placeholders: {
                                field: '$1'
                            }
                        },
                        '(\\w+?) - must be less than or equal to (\\d+)': {
                            gettext: gettext('"{{field}}" must be less than or equal to {{maxValue}}'),
                            placeholders: {
                                field: '$1',
                                maxValue: '$2'
                            }
                        },
                        '(\\w+?) - should not contain null values': {
                            gettext: gettext('"{{field}}" should not contain null values'),
                            placeholders: {
                                field: '$1'
                            }
                        }
                    }
                }
            }
        },
        '^Smart rest template (.+?) doesn\'t exist$': {
            gettext: gettext('SmartREST template with id "{{templateId}}" doesn\'t exist'),
            placeholders: {
                templateId: '$1'
            }
        },
        '^Smart rule created$': {
            gettext: gettext('Smart rule created.')
        },
        '^Smart rule updated$': {
            gettext: gettext('Smart rule updated.')
        },
        '^Smart rule enabled$': {
            gettext: gettext('Smart rule activated.')
        },
        '^Smart rule disabled$': {
            gettext: gettext('Smart rule deactivated.')
        },
        '^Smart rule deleted$': {
            gettext: gettext('Smart rule deleted.')
        },
        '^Smart rule "(.+?)" created$': {
            gettext: gettext('Smart rule "{{name}}" created.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Smart rule "(.+?)" updated$': {
            gettext: gettext('Smart rule "{{name}}" updated.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Smart rule "(.+?)" enabled$': {
            gettext: gettext('Smart rule "{{name}}" activated.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Smart rule "(.+?)" disabled$': {
            gettext: gettext('Smart rule "{{name}}" deactivated.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Smart rule "(.+?)" deleted$': {
            gettext: gettext('Smart rule "{{name}}" deleted.'),
            placeholders: {
                name: '$1'
            }
        },
        '^Started container$': {
            gettext: gettext('Container started.')
        },
        '^Successfully assigned (.+) to (.+)$': {
            gettext: gettext('"{{imageName}}" assigned to "{{address}}".'),
            placeholders: {
                imageName: '$1',
                address: '$2'
            }
        },
        '^Successfully pulled image "(.+)"$': {
            gettext: gettext('Image "{{imageName}}" pulled.'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^Tenant creation failed. : Tenant with given id already exists.$': {
            gettext: gettext('Could not create a tenant. Tenant with given domain/URL already exists.')
        },
        '^Tenant id cannot be a reserved sql keyword "(.+?)".$': {
            gettext: gettext('Could not use a reserved SQL keyword "{{tenantId}}" as a domain name.'),
            placeholders: {
                tenantId: '$1'
            }
        },
        '^Tenant "(.+?)" activated$': {
            gettext: gettext('Tenant "{{tenant}}" activated.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant (.+?) has sub-tenants, please remove them first!$': {
            gettext: gettext('Could not remove tenant "{{tenant}}". Remove its subtenants first.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant activated$': {
            gettext: gettext('Tenant activated')
        },
        '^Tenant "(.+?)" created$': {
            gettext: gettext('Tenant "{{tenant}}" created.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant created$': {
            gettext: gettext('Tenant created')
        },
        '^Tenant "(.+?)" deleted$': {
            gettext: gettext('Tenant "{{tenant}}" deleted.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant deleted$': {
            gettext: gettext('Tenant deleted')
        },
        '^Tenant "(.+?)" suspended$': {
            gettext: gettext('Tenant "{{tenant}}" suspended.'),
            placeholders: {
                tenant: '$1'
            }
        },
        '^Tenant suspended$': {
            gettext: gettext('Tenant suspended')
        },
        '^Tenant "(.+?)" updated: (.+?)$': {
            gettext: gettext('Tenant "{{tenant}}" updated: {{properties}}.'),
            placeholders: {
                tenant: '$1',
                properties: '$2'
            }
        },
        '^Tenant updated$': {
            gettext: gettext('Tenant updated')
        },
        '^Too Many Requests$': {
            gettext: gettext('Too many requests. Try again later.')
        },
        '^User alias equals username \'(.+)\'$': {
            gettext: gettext('Username and login alias must be different.')
        },
        '^User created$': {
            gettext: gettext('User created')
        },
        '^User (.+?) created$': {
            gettext: gettext('User "{{name}}" created'),
            placeholders: {
                name: '$1'
            }
        },
        '^User deleted$': {
            gettext: gettext('User deleted')
        },
        '^User (.+?) deleted$': {
            gettext: gettext('User "{{name}}" deleted'),
            placeholders: {
                name: '$1'
            }
        },
        '^User updated$': {
            gettext: gettext('User updated')
        },
        '^User (.+?) updated: (.+)$': {
            gettext: gettext('User "{{name}}" updated: {{updatesList}}'),
            placeholders: {
                name: '$1',
                updatesList: {
                    capture: '$2',
                    translate: {
                        'delegatedBy=\'(.+?)\'': {
                            gettext: gettext('delegated by: "{{delegate}}"'),
                            placeholders: {
                                delegate: '$1'
                            }
                        },
                        'owner=\'(.+?)\'': {
                            gettext: gettext('owner: "{{owner}}"'),
                            placeholders: {
                                owner: '$1'
                            }
                        },
                        'inventory assignment \\[(.+?)\\] added': {
                            gettext: gettext('inventory assignment [{{inventoryAssignment}}] added'),
                            placeholders: {
                                inventoryAssignment: '$1'
                            }
                        },
                        'inventory assignment \\[(.+?)\\] removed': {
                            gettext: gettext('inventory assignment [{{inventoryAssignment}}] removed'),
                            placeholders: {
                                inventoryAssignment: '$1'
                            }
                        },
                        'applications \\[(.+?)\\] added$': {
                            gettext: gettext('applications [{{applicationsList}}] added'),
                            placeholders: {
                                applicationsList: '$1'
                            }
                        },
                        'applications \\[(.+?)\\] removed$': {
                            gettext: gettext('applications [{{applicationsList}}] removed'),
                            placeholders: {
                                applicationsList: '$1'
                            }
                        },
                        'global roles \\[(.+?)\\] added$': {
                            gettext: gettext('global roles [{{globalRolesList}}] added'),
                            placeholders: {
                                globalRolesList: '$1'
                            }
                        },
                        'global roles \\[(.+?)\\] removed$': {
                            gettext: gettext('global roles [{{globalRolesList}}] removed'),
                            placeholders: {
                                globalRolesList: '$1'
                            }
                        }
                    }
                }
            }
        },
        '^User with username \'(.+?)\' already exists! : Duplicated: (.+?)$': {
            gettext: gettext('User "{{username}}" already exists.'),
            placeholders: {
                username: '$1'
            }
        },
        '^User with username or alias \'(.+)\' already exists! : Duplicated: (.+)$': {
            gettext: gettext('User with username or login alias "{{usernameOrAlias}}" already exists.'),
            placeholders: {
                usernameOrAlias: '$1'
            }
        },
        '^User with email \'(.+?)\' already exists! : Duplicated: (.+?)$': {
            gettext: gettext('User with email "{{email}}" already exists.'),
            placeholders: {
                email: '$1'
            }
        },
        '^unable to find option with given key (.+?) : Could not find entity Option by ID (.+?)!$': {
            gettext: gettext('Unable to get tenant option: "{{option}}".'),
            placeholders: {
                option: '$2'
            }
        },
        '^unable to find option with given key (.+?) : There is no system property for key (.+?)$': {
            gettext: gettext('Unable to get system option: "{{option}}".'),
            placeholders: {
                option: '$2'
            }
        },
        '^Write failed with error code 16733 and error message \'trying to index text where term list is too big, max is 4mb _id: "(.+?)"\'$': {
            gettext: gettext('The uploaded image cannot be bigger than 4 MB. Please upload a smaller one.')
        },
        '^Write failed with error code 17280 and error message \'WiredTigerIndex::insert: key too large to index, failing (.+?) { : "(.+?)" }\'$': {
            gettext: gettext('The chosen name is too long. Please try a shorter one.')
        },
        '^You have reached devices limit. No more devices can be registered.$': {
            gettext: gettext('You reached devices limit. No more devices can be registered.')
        },
        '^(.+) succeeded for volume "(.+)"': {
            gettext: gettext('Operation "{{operation}}" succeeded for volume "{{volume}}".'),
            placeholders: {
                operation: '$1',
                volume: '$2'
            }
        },
        '^Exception on tenant (.+) in statement \'(.+)\': Invocation exception when invoking method \'(.+)\' of class \'(.+)\' passing parameters \\[(.+)\\] for statement \'(.+)\': (.+) : (.+)$': {
            gettext: gettext('Exception on tenant {{tenantId}} in statement "{{moduleName}}": Invocation exception when invoking method "{{methodName}}" of class "{{classPath}}" passing parameters [{{parameters}}] for statement "{{statement}}": {{exceptionType}} : {{exceptionMessage}}.'),
            placeholders: {
                tenantId: '$1',
                moduleName: '$2',
                methodName: '$3',
                classPath: '$4',
                parameters: '$5',
                statement: '$6',
                exceptionType: '$7',
                exceptionMessage: '$8'
            }
        },
        '^No nodes are available that match all of the predicates: (.+).$': {
            gettext: gettext('No nodes are available that match all of the predicates: [{{predicates}}].'),
            placeholders: {
                predicates: '$1'
            }
        },
        '^Readiness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
            gettext: gettext('Readiness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
            placeholders: {
                requestMethod: '$1',
                uri: '$2',
                protocol: '$3'
            }
        },
        '^Liveness probe failed: (.+) (.+): (.+): request canceled while waiting for connection \\(Client.Timeout exceeded while awaiting headers\\)$': {
            gettext: gettext('Liveness probe failed: {{requestMethod}} {{uri}}: {{protocol}}: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).'),
            placeholders: {
                requestMethod: '$1',
                uri: '$2',
                protocol: '$3'
            }
        },
        '^Error syncing pod$': {
            gettext: gettext('Pod synchronization error.')
        },
        '^Failed create pod sandbox.$': {
            gettext: gettext('Pod sandbox creation failed.')
        },
        '^Exception on tenant (.+) in statement \'(.+)\': Http status code: (\\d+) \\{error="alarm/Unprocessable Entity",message="(.+)",info="https://www.cumulocity.com/guides/reference-guide/#error_reporting",details="null"\\}$': {
            gettext: gettext('Exception on tenant {{tenantId}} in statement "{{statement}}": HTTP status code: {{httpStatusCode}} : {{message | translate}}'),
            placeholders: {
                tenantId: '$1',
                statement: '$2',
                httpStatusCode: '$3',
                message: '$4'
            }
        },
        '^User \'(.+)\' is managed by a remote identity management service defined by an administrator, direct update is forbidden$': {
            gettext: gettext('User "{{userName}}" is managed by a remote identity management service defined by an administrator, direct update is forbidden.'),
            placeholders: {
                userName: '$1'
            }
        },
        '^Added new child device to "(.+)" \\(ID: (.+)\\).$': {
            gettext: gettext('Added new child device to "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
            placeholders: {
                parentDeviceName: '$1',
                parentDeviceId: '$2'
            }
        },
        '^Updated child device of "(.+)" \\(ID: (.+)\\).$': {
            gettext: gettext('Updated child device of "{{parentDeviceName}}" (ID: {{parentDeviceId}}).'),
            placeholders: {
                parentDeviceName: '$1',
                parentDeviceId: '$2'
            }
        },
        '^Added child device "(.+)" \\(ID: (.+)\\).$': {
            gettext: gettext('Added child device "{{name}}" (ID: {{id}}).'),
            placeholders: {
                name: '$1',
                id: '$2'
            }
        },
        '^Removed child device "(.+)" \\(ID: (.+)\\).$': {
            gettext: gettext('Removed child device "{{name}}" (ID: {{id}}).'),
            placeholders: {
                name: '$1',
                id: '$2'
            }
        },
        '^Change value of "(.+)" to (.+) (.+).$': {
            gettext: gettext('Change value of "{{name}}" to {{value}}{{unit}}.'),
            placeholders: {
                name: '$1',
                value: '$2',
                unit: '$3'
            }
        },
        '^Change value of "(.+)" to (.+).$': {
            gettext: gettext('Change value of "{{name}}" to {{value}}.'),
            placeholders: {
                name: '$1',
                value: '$2'
            }
        },
        '^Change status of "(.+)" to "(.+)".$': {
            gettext: gettext('Change status of "{{name}}" to "{{label}}".'),
            placeholders: {
                name: '$1',
                label: '$2'
            }
        },
        '^Send message "(.+)".$': {
            gettext: gettext('Send message "{{str}}".'),
            placeholders: {
                str: '$1'
            }
        },
        '^Close relay (.+).$': {
            gettext: gettext('Close relay {{number}}.'),
            placeholders: {
                number: '$1'
            }
        },
        '^Open relay (.+).$': {
            gettext: gettext('Open relay {{number}}.'),
            placeholders: {
                number: '$1'
            }
        },
        '^Change trace status to (.+).$': {
            gettext: gettext('Change trace status to {{state | translate}}.'),
            placeholders: {
                state: '$1'
            }
        },
        '^Change relay status to (.+).$': {
            gettext: gettext('Change relay status to {{status | translate}}.'),
            placeholders: {
                status: '$1'
            }
        },
        '^Closing relay (.+).$': {
            gettext: gettext('Closing relay {{number}}.'),
            placeholders: {
                number: '$1'
            }
        },
        '^Opening relay (.+).$': {
            gettext: gettext('Opening relay {{number}}.'),
            placeholders: {
                number: '$1'
            }
        },
        '^Update firmware to: (.+) \\(version: (.+)\\).$': {
            gettext: gettext('Update firmware to: {{name}} (version: {{version}}).'),
            placeholders: {
                name: '$1',
                version: '$2'
            }
        },
        '^Execute generic command: (.+).$': {
            gettext: gettext('Execute generic command: {{command}}.'),
            placeholders: {
                command: '$1'
            }
        },
        '^Failed to refresh application. : Cannot refresh non local-hosted application.$': {
            gettext: gettext('Could not reactivate the application as it is not hosted locally.')
        },
        '^Failed to refresh application. : Cannot refresh application without active version id.$': {
            gettext: gettext('Could not reactivate the application as it has no active version.')
        },
        // TODO: remove if we decide not to translate such messages:
        // '^Killing container with id (.+):Need to kill Pod$': {
        //   gettext: gettext('Killing container with ID "{{containerId}}". Need to kill Pod.'),
        //   placeholders: {
        //     containerId: '$1'
        //   }
        // },
        '^Scaled down replica set (.+) to (\\d+)$': {
            gettext: gettext('Replica set "{{replicaSetName}}" scaled down to "{{scaleNumber}}".'),
            placeholders: {
                replicaSetName: '$1',
                scaleNumber: '$2'
            }
        },
        '^Deleted pod: (.+)$': {
            gettext: gettext('Pod "{{imageName}}" deleted.'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^Container image "(.+)" already present on machine$': {
            gettext: gettext('Container image "{{imageName}}" already exists.'),
            placeholders: {
                imageName: '$1'
            }
        },
        '^Error updating tenant! Cannot insert second configuration for Password code grant internal/Bad Request$': {
            gettext: gettext('This login mode was already set by other admin, please refresh page to update data')
        },
    };

    var TranslateCustomLoader = /** @class */ (function () {
        function TranslateCustomLoader(http, path, languages) {
            if (path === void 0) { path = null; }
            if (languages === void 0) { languages = null; }
            this.http = http;
            this.path = path;
            this.languages = languages;
        }
        TranslateCustomLoader.prototype.getTranslation = function (lang) {
            var path = this.path || '';
            var url = "" + path + lang + ".json";
            if (this.languages && this.languages[lang] && this.languages[lang].url) {
                url = this.languages[lang].url;
            }
            return this.http.get(url).pipe(operators.map(function (d) { return d[lang]; }), operators.catchError(function () { return rxjs.of({}); }));
        };
        TranslateCustomLoader.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: String, decorators: [{ type: core.Inject, args: [LOCALE_PATH,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [LANGUAGES,] }] }
        ]; };
        TranslateCustomLoader = __decorate([
            core.Injectable(),
            __param(1, core.Inject(LOCALE_PATH)),
            __param(2, core.Inject(LANGUAGES))
        ], TranslateCustomLoader);
        return TranslateCustomLoader;
    }());

    function isDefined(value) {
        return typeof value !== 'undefined' && value !== null;
    }
    var TranslateParserCustom = /** @class */ (function (_super) {
        __extends(TranslateParserCustom, _super);
        function TranslateParserCustom() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TranslateParserCustom.prototype.getValue = function (target, key) {
            var translated = target[key];
            if (!translated) {
                var keys = key.split('.');
                if (keys.length > 1) {
                    translated = lodashEs.get(target, key);
                }
            }
            return translated;
        };
        TranslateParserCustom = __decorate([
            core.Injectable()
        ], TranslateParserCustom);
        return TranslateParserCustom;
    }(core$1.TranslateDefaultParser));

    // Load these as a side effect
    try {
        // tslint:disable:no-var-requires
        require('@c8y/ngx-components/locales/de.po');
        require('@c8y/ngx-components/locales/en.po');
        require('@c8y/ngx-components/locales/es.po');
        require('@c8y/ngx-components/locales/fr.po');
        require('@c8y/ngx-components/locales/ja_JP.po');
        // tslint:enable:no-var-requires
    }
    catch (e) {
        // empty block
    }
    // AoT requires an exported function for factories
    function translateLoaderFactory(httpClient, localePath, languages) {
        return new TranslateCustomLoader(httpClient, localePath, languages);
    }
    function localePathFactory(options) {
        return options.localePath;
    }
    function languagesFactory(options) {
        return options.languages;
    }
    function localeId(appStateService) {
        return {
            get lang() {
                return appStateService.state.lang || 'en';
            },
            toLowerCase: function () {
                return this.lang;
            },
            toString: function () {
                return this.lang;
            }
        };
    }
    /**
     * The angular module definition for i18n (translation).
     * @exports I18nModule
     */
    var I18nModule = /** @class */ (function () {
        function I18nModule() {
        }
        I18nModule_1 = I18nModule;
        I18nModule.providers = function () {
            return [
                { provide: core.LOCALE_ID, useFactory: localeId, deps: [AppStateService] },
                { provide: HOOK_PATTERN_MESSAGES, useValue: MESSAGES, multi: true },
                { provide: LOCALE_PATH, useFactory: localePathFactory, deps: [OptionsService] },
                { provide: LANGUAGES, useFactory: languagesFactory, deps: [OptionsService] },
                // Extracted from projects/ngx-translate/core/src/public_api.ts
                { provide: core$1.TranslateLoader, useFactory: translateLoaderFactory, deps: [http.HttpClient, LOCALE_PATH, LANGUAGES] },
                { provide: core$1.TranslateCompiler, useClass: core$1.TranslateFakeCompiler },
                { provide: core$1.TranslateParser, useClass: TranslateParserCustom },
                { provide: core$1.MissingTranslationHandler, useClass: MissingTranslationCustomHandler },
                core$1.TranslateStore,
                core$1.TranslateService,
                { provide: core$1.USE_STORE, useValue: undefined },
                { provide: core$1.USE_DEFAULT_LANG, useValue: undefined },
                { provide: core$1.USE_EXTEND, useValue: false },
                { provide: core$1.DEFAULT_LANGUAGE, useValue: undefined },
            ];
        };
        I18nModule.forRoot = function () {
            return {
                ngModule: I18nModule_1,
                providers: I18nModule_1.providers()
            };
        };
        var I18nModule_1;
        I18nModule = I18nModule_1 = __decorate([
            core.NgModule({
                exports: [core$1.TranslateModule],
                imports: [http.HttpClientModule]
            })
        ], I18nModule);
        return I18nModule;
    }());

    /**
     * Allows to set a icon. Switches between c8y default icons
     * and font awesome icons
     * @example <i [c8yIcon]="'rocket'">
     */
    var IconDirective = /** @class */ (function () {
        function IconDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.c8yMatch = /^c8y-/;
            this.klasses = [];
            this.currentClasses = '';
        }
        Object.defineProperty(IconDirective.prototype, "c8yIcon", {
            set: function (icon) {
                this.updateIcon(icon);
            },
            enumerable: true,
            configurable: true
        });
        IconDirective.prototype.isC8y = function (icon) {
            return this.c8yMatch.test(icon);
        };
        IconDirective.prototype.getClasses = function (icon) {
            if (icon === void 0) { icon = ''; }
            var classes = '';
            if (icon) {
                var _icon = icon.trim();
                var isC8y = this.isC8y(_icon);
                var iconClass = isC8y ? _icon.replace(this.c8yMatch, 'c8y-icon-') : "fa-" + _icon;
                classes = (isC8y ? 'c8y-icon' : 'fa fw') + " " + iconClass;
            }
            return classes;
        };
        IconDirective.prototype.updateIcon = function (icon) {
            var _this = this;
            var newClasses = this.getClasses(icon);
            if (newClasses !== this.currentClasses) {
                this.currentClasses.split(/\s/).filter(function (c) { return c; }).forEach(function (klass) {
                    _this.renderer.removeClass(_this.el.nativeElement, klass);
                });
                newClasses.split(/\s/).filter(function (c) { return c; }).forEach(function (klass) {
                    _this.renderer.addClass(_this.el.nativeElement, klass);
                });
                this.currentClasses = newClasses;
            }
        };
        IconDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input()
        ], IconDirective.prototype, "c8yIcon", null);
        IconDirective = __decorate([
            core.Directive({
                selector: '[c8yIcon]',
            })
        ], IconDirective);
        return IconDirective;
    }());
    var ICONS = [
        'home',
        'th',
        'bar-chart-o',
        'tasks',
        'tachometer',
        'bell',
        'puzzle-piece',
        'map-marker',
        'location-arrow',
        'globe',
        'power-off',
        'desktop',
        'laptop',
        'mobile',
        'signal',
        'qrcode',
        'file',
        'file-text',
        'folder',
        'folder-open',
        'archive',
        'hdd-o',
        'book',
        'bookmark',
        'tag',
        'flag',
        'search',
        'heart',
        'star',
        'bolt',
        'rocket',
        'cog',
        'cogs',
        'wrench',
        'ban',
        'user',
        'users',
        'sign-in',
        'sign-out',
        'upload',
        'download',
        'cloud-upload',
        'cloud-download',
        'cloud',
        'spinner',
        'refresh',
        'repeat',
        'undo',
        'lock',
        'unlock',
        'info',
        'question',
        'exclamation',
        'bug',
        'calendar',
        'random',
        'asterisk',
        'key',
        'link',
        'chain-broken',
        'external-link',
        'picture-o',
        'comment',
        'bullhorn',
        'phone',
        'lightbulb-o',
        'flask',
        'sitemap',
        'exchange',
        'code-fork',
        'keyboard-o',
        'terminal',
        'code',
        'clipboard',
        'pencil',
        'envelope',
        'inbox',
        'reply',
        'share',
        'thumbs-up',
        'thumbs-down',
        'check',
        'plus',
        'expand',
        'compress',
        'arrows',
        'arrow-up',
        'arrow-down',
        'arrow-left',
        'arrow-right',
        'th-list',
        'bars',
        'table',
        'columns',
        'filter',
        'sort',
        'sort-up',
        'sort-down',
        'ellipsis-h',
        'ellipsis-v',
        'rss',
        'apple',
        'windows',
        'android',
        'linux'
    ];

    /**
     * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
     * @example
     * <div *c8yOutlet="template"></div>
     * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
     * <div *c8yOutlet="nodes"></div>
     */
    var OutletDirective = /** @class */ (function () {
        function OutletDirective(viewContainer, resolver, renderer, el) {
            this.viewContainer = viewContainer;
            this.resolver = resolver;
            this.renderer = renderer;
            this.el = el;
            this.properties = {};
        }
        Object.defineProperty(OutletDirective.prototype, "c8yOutlet", {
            /**
             * Directive to set a DOM node, a TemplateRef or any Component to a container or any node.
             * @example
             * <div *c8yOutlet="template"></div>
             * <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
             * <div *c8yOutlet="nodes"></div>
             */
            set: function (template) {
                if (!template) {
                    return;
                }
                if (this._element instanceof Element) {
                    this.renderer.removeChild(this._element.parentElement, this._element);
                }
                this.viewContainer.clear();
                // case TemplateRef -> <div *c8yOutlet="template"></div>
                if (template instanceof core.TemplateRef) {
                    this.viewContainer.createEmbeddedView(template);
                    // case DOM Element -> <div *c8yOutlet="nodes"></div>
                }
                else if (template instanceof Element) {
                    var parent_1 = this.renderer.parentNode(this.el.nativeElement);
                    this.destroy();
                    this._element = template;
                    this.renderer.insertBefore(parent_1, this._element, this.el.nativeElement);
                    // case Component -> <div *c8yOutlet="DeviceStatusComponent; properties: { node }"></div>
                }
                else {
                    var factory = this.resolver.resolveComponentFactory(template);
                    var component = this.viewContainer.createComponent(factory);
                    lodashEs.assign(component.instance, this.properties);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OutletDirective.prototype, "c8yOutletProperties", {
            set: function (value) {
                this.properties = value;
            },
            enumerable: true,
            configurable: true
        });
        OutletDirective.prototype.ngOnDestroy = function () {
            this.destroy();
        };
        OutletDirective.prototype.destroy = function () {
            if (this._element) {
                var _parent = this.renderer.parentNode(this._element);
                this.renderer.removeChild(_parent, this._element);
            }
        };
        OutletDirective.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.ComponentFactoryResolver },
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input()
        ], OutletDirective.prototype, "c8yOutlet", null);
        __decorate([
            core.Input()
        ], OutletDirective.prototype, "c8yOutletProperties", null);
        OutletDirective = __decorate([
            core.Directive({
                selector: '[c8yOutlet]',
            })
        ], OutletDirective);
        return OutletDirective;
    }());

    var UserPreferencesStorageLocal = /** @class */ (function () {
        function UserPreferencesStorageLocal() {
            this.LOCAL_STORAGE_KEY = 'userPreferences';
            this.store = {};
            try {
                var jsonStore = window.localStorage.getItem(this.LOCAL_STORAGE_KEY);
                if (jsonStore) {
                    this.store = JSON.parse(jsonStore) || {};
                }
            }
            catch (e) {
                // do nothing
            }
        }
        UserPreferencesStorageLocal.prototype.get = function (key) {
            return rxjs.of(this.store[key]);
        };
        UserPreferencesStorageLocal.prototype.set = function (key, value) {
            this.store[key] = value;
            return this.saveJsonStore();
        };
        UserPreferencesStorageLocal.prototype.saveJsonStore = function () {
            return window.localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(this.store));
        };
        return UserPreferencesStorageLocal;
    }());

    var UserPreferencesStorageInventory = /** @class */ (function () {
        function UserPreferencesStorageInventory(inventory) {
            this.inventory = inventory;
            this.TYPE = 'c8y_UserPreference';
        }
        UserPreferencesStorageInventory.prototype.get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.inventory.list({ fragmentType: key })];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data.length ? data[0][key] : undefined];
                    }
                });
            });
        };
        UserPreferencesStorageInventory.prototype.set = function (key, value) {
            return __awaiter(this, void 0, void 0, function () {
                var data, updateMo, out;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.inventory.list({ fragmentType: key })];
                        case 1:
                            data = (_b.sent()).data;
                            updateMo = (_a = {}, _a[key] = value, _a.type = this.TYPE, _a);
                            if (data.length) {
                                updateMo.id = data[0].id;
                                out = this.inventory.update(updateMo);
                            }
                            else {
                                out = this.inventory.create(updateMo);
                            }
                            return [2 /*return*/, out];
                    }
                });
            });
        };
        return UserPreferencesStorageInventory;
    }());

    var UserPreferencesService = /** @class */ (function () {
        function UserPreferencesService(user, inventory, appState) {
            this.user = user;
            this.inventory = inventory;
            this.appState = appState;
            this.LOCAL_STORAGE_KEY = 'userPreferences';
            this.storage = {
                local: new UserPreferencesStorageLocal(),
                inventory: new UserPreferencesStorageInventory(this.inventory)
            };
            this.currentUser = this.appState.currentUser;
        }
        UserPreferencesService.prototype.get = function (key) {
            var _this = this;
            return this.currentUser.pipe(operators.first(), operators.switchMap(function (user) { return _this.getForUser(key, user); }));
        };
        UserPreferencesService.prototype.set = function (key, value) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.currentUser.pipe(operators.first()).subscribe(function (user) {
                    resolve(_this.setForUser(key, value, user));
                }, reject);
            });
        };
        UserPreferencesService.prototype.getForUser = function (key, user) {
            var rawKey = this.getRawKey(key, user);
            var storage = this.getStorage(user);
            return rxjs.from(storage.get(rawKey));
        };
        UserPreferencesService.prototype.setForUser = function (key, value, user) {
            var rawKey = this.getRawKey(key, user);
            var storage = this.getStorage(user);
            return Promise.resolve(storage.set(rawKey, value));
        };
        UserPreferencesService.prototype.getRawKey = function (key, user) {
            var username = user.userName.replace(/\./g, '__');
            return "" + key + username;
        };
        UserPreferencesService.prototype.getStorage = function (user) {
            return this.user.hasAllRoles(user, ['ROLE_INVENTORY_READ', 'ROLE_INVENTORY_ADMIN']) ?
                this.storage.inventory : this.storage.local;
        };
        UserPreferencesService.ctorParameters = function () { return [
            { type: client.UserService },
            { type: client.InventoryService },
            { type: AppStateService }
        ]; };
        UserPreferencesService = __decorate([
            core.Injectable()
        ], UserPreferencesService);
        return UserPreferencesService;
    }());

    /* tslint:disable */














































































































































































































































































































































































































































































































































    var importLocales = {

    };

    function parse(moduleSrc) {
        var src = moduleSrc.split(/\n/)
            .map(function (l) { return l.trim(); })
            .filter(Boolean)
            .filter(function (l) { return !l.match(/^\/?\*/) && !l.match(/^\/\//); })
            .join('\n');
        var fn = new Function("var exports = {};\nvar module = { exports: exports };\n" + src + "\nreturn exports;");
        return fn();
    }

    var cache = new Map();
    /**
     * @ignore
     */
    function loadLocale(moduleLang) {
        return new Promise(function (resolve, reject) {
            if (cache.has(moduleLang)) {
                resolve(cache.get(moduleLang));
            }
            else {
                fetch("assets/locales/angular/" + moduleLang + ".js")
                    .then(function (res) { return res.text(); })
                    .then(function (src) {
                    var module = parse(src);
                    cache.set(moduleLang, module);
                    resolve(module);
                })
                    .catch(reject);
            }
        });
    }

    /**
     * A service to manage the language of the application.
     */
    var TranslateService = /** @class */ (function () {
        function TranslateService(ngxTranslate, ui, options) {
            var _this = this;
            this.ngxTranslate = ngxTranslate;
            this.ui = ui;
            this.options = options;
            this.langsDetail = this.options.get('languages', {});
            this.langs = lodashEs.keys(this.langsDetail).filter(function (k) { return _this.langsDetail[k]; });
            this.DEFAULT_SEPARATOR = '_';
            var queryStringLang = this.queryStringLang();
            if (queryStringLang) {
                this.saveInLocalStorage(queryStringLang);
            }
        }
        TranslateService_1 = TranslateService;
        TranslateService.defaultLang = function () {
            return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
        };
        /**
         * Switches to given language.
         * @param lang The language as two-letter code.
         */
        TranslateService.prototype.switchToLanguage = function (lang) {
            return __awaiter(this, void 0, void 0, function () {
                var moduleLang, e_1, lessSpecificModuleLang;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            moduleLang = lang.replace('_', '-');
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 7]);
                            return [4 /*yield*/, this.loadLocales(moduleLang)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 7];
                        case 3:
                            e_1 = _a.sent();
                            lessSpecificModuleLang = moduleLang.split('-').shift();
                            if (!(lessSpecificModuleLang !== moduleLang)) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.loadLocales(lessSpecificModuleLang)];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 5: throw e_1;
                        case 6: return [3 /*break*/, 7];
                        case 7:
                            this.ngxTranslate.use(lang).subscribe(function () {
                                _this.ui.state$.next(__assign({}, _this.ui.state, { lang: lang }));
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        TranslateService.prototype.loadLocales = function (moduleLang) {
            return __awaiter(this, void 0, void 0, function () {
                var module;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, loadLocale(moduleLang)];
                        case 1:
                            module = _a.sent();
                            common.registerLocaleData(module.default);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Finds the first supported language
         */
        TranslateService.prototype.firstSupportedLanguage = function () {
            var _this = this;
            var languages = [
                this.queryStringLang(),
                this.localStorageLang()
            ]
                .concat([this.options.get('defaultLanguage')])
                .concat(this.browserLangs())
                .concat(['en'])
                .filter(Boolean);
            return languages.find(function (language) { return _this.isSupported(language); });
        };
        /**
         * Converts a iso language code to a PO language code (e.g. de-de gets de_de).
         * @param lang The iso language code.
         */
        TranslateService.prototype.convertToLanguageCodePO = function (lang) {
            var sep = lang.indexOf('-') > -1 ? '-' : this.DEFAULT_SEPARATOR;
            var _a = __read(lang.split(sep), 2), langMain = _a[0], langSpecific = _a[1];
            var langLast = langSpecific ? "" + this.DEFAULT_SEPARATOR + langSpecific : '';
            return "" + langMain + langLast;
        };
        /**
         * Returns the language in the native language.
         * @param lang The language two-letter code.
         * @return The native name.
         */
        TranslateService.prototype.getNativeLanguage = function (lang) {
            var langData = (this.langsDetail || {})[lang] || {};
            return langData.nativeName || lang;
        };
        TranslateService.prototype.saveInLocalStorage = function (lang) {
            window.localStorage.setItem(TranslateService_1.SAVE_LANGUAGE_KEY, lang);
        };
        TranslateService.prototype.isSupported = function (lang) {
            return this.langs.includes(lang);
        };
        /**
         * Gets the language from the query parameter.
         * @return The language two-letter code.
         */
        TranslateService.prototype.queryStringLang = function () {
            return this.getQueryParameter('lang');
        };
        /**
         * Gets the language from local storage.
         * @return The language two-letter code.
         */
        TranslateService.prototype.localStorageLang = function () {
            return window.localStorage.getItem(TranslateService_1.SAVE_LANGUAGE_KEY);
        };
        /**
         * Determines which language is set in the browser.
         * @return The languages the browser supports as string array.
         */
        TranslateService.prototype.browserLangs = function () {
            var navigator = window.navigator;
            var browserLanguagePropertyKeys = [
                'languages',
                'language',
                'browserLanguage',
                'systemLanguage',
                'userLanguage'
            ];
            return browserLanguagePropertyKeys.reduce(function (languages, property) {
                var propertyLanguages = navigator[property];
                if (typeof propertyLanguages === 'string') {
                    languages.push(propertyLanguages);
                }
                else if (Array.isArray(propertyLanguages)) {
                    languages = languages.concat(propertyLanguages);
                }
                return languages;
            }, []);
        };
        TranslateService.prototype.getQueryParameter = function (queryKey) {
            // TODO: replace this with URLSearchParams, ie 11 still doesn't support :()
            var query = window.location.search.substring(1);
            var result;
            query.split('&').find(function (pair) {
                var _a = __read(pair.split('='), 2), key = _a[0], value = _a[1];
                if (key === queryKey) {
                    result = value;
                }
                return result;
            });
            return result;
        };
        var TranslateService_1;
        TranslateService.SAVE_LANGUAGE_KEY = 'c8y_language';
        TranslateService.ctorParameters = function () { return [
            { type: core$1.TranslateService },
            { type: AppStateService },
            { type: OptionsService }
        ]; };
        TranslateService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TranslateService_Factory() { return new TranslateService(core.ɵɵinject(core$1.TranslateService), core.ɵɵinject(AppStateService), core.ɵɵinject(OptionsService)); }, token: TranslateService, providedIn: "root" });
        TranslateService = TranslateService_1 = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], TranslateService);
        return TranslateService;
    }());

    var ShortenUserNamePipe = /** @class */ (function () {
        function ShortenUserNamePipe() {
        }
        ShortenUserNamePipe.prototype.transform = function (_a) {
            var _b = _a.firstName, firstName = _b === void 0 ? '' : _b, _c = _a.lastName, lastName = _c === void 0 ? '' : _c, _d = _a.userName, userName = _d === void 0 ? '' : _d;
            var parsedFirstName = firstName.trim().split(/\s+/).shift().substr(0, 1);
            var parsedLastName = lastName.trim().split(/\s+/).pop();
            if (!parsedLastName) {
                parsedFirstName = firstName.split(/\s+/).shift();
            }
            else {
                parsedFirstName = parsedFirstName ? parsedFirstName + ". " : '';
            }
            return parsedFirstName || parsedLastName ? parsedFirstName + parsedLastName : userName;
        };
        ShortenUserNamePipe = __decorate([
            core.Pipe({ name: 'shortenUserName' })
        ], ShortenUserNamePipe);
        return ShortenUserNamePipe;
    }());

    var LoadMoreComponent = /** @class */ (function () {
        function LoadMoreComponent(element) {
            this.element = element;
            this.useIntersection = true;
            this.hidden = false;
            this.class = 'c8y-list__item bg-transparent';
            this.maxIterations = 10;
            this.onLoad = new core.EventEmitter();
            this.isLoading = false;
            this.counter = 0;
            this.showNoMoreDataHint = false;
            this.LOAD_SAME_PAGE_THRESHOLD = 50;
        }
        Object.defineProperty(LoadMoreComponent.prototype, "hostClass", {
            get: function () {
                return this.hidden || (!this.hasMore && !this.showNoMoreDataHint) ? '' : this.class;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LoadMoreComponent.prototype, "hasMore", {
            get: function () {
                return this.paging && this.paging.totalPages > this.paging.currentPage;
            },
            enumerable: true,
            configurable: true
        });
        LoadMoreComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.useIntersection && 'IntersectionObserver' in window) {
                this.intersectionObserver = new IntersectionObserver(function (event) { return _this.buttonInView(event[0]); }, {
                    root: this.container ? this.container.nativeElement : null
                });
                this.intersectionObserver.observe(this.element.nativeElement);
            }
            this.showNoMoreDataHint = this.shouldShowNoMoreDataHint();
        };
        LoadMoreComponent.prototype.ngOnDestroy = function () {
            if (this.intersectionObserver) {
                this.intersectionObserver.disconnect();
            }
        };
        LoadMoreComponent.prototype.loadMore = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isLoading = true;
                            if (event) {
                                event.stopPropagation();
                            }
                            if (!this.hasMore) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.paging.next()];
                        case 1:
                            result = _a.sent();
                            this.counter++;
                            this.paging = result.paging;
                            this.onLoad.emit(result.data);
                            this.intersectionLoading();
                            this.showNoMoreDataHint = this.shouldShowNoMoreDataHint();
                            return [3 /*break*/, 3];
                        case 2:
                            this.counter = 0;
                            this.isLoading = false;
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        LoadMoreComponent.prototype.intersectionLoading = function () {
            var _this = this;
            if (this.useIntersection && this.hasMore && this.loadUntilIntersected !== null) {
                this.loadUntilIntersected = setTimeout(function () { return _this.loadMore(); }, this.getLoadingThreshold());
                this.useIntersection = this.shouldSwitchMode();
            }
            else {
                this.isLoading = false;
                this.loadUntilIntersected = undefined;
            }
        };
        LoadMoreComponent.prototype.getLoadingThreshold = function () {
            return this.LOAD_SAME_PAGE_THRESHOLD * this.counter;
        };
        LoadMoreComponent.prototype.shouldShowNoMoreDataHint = function () {
            return (this.counter !== 0 || this.noMoreDataHint) && !this.hasMore && !this.hidden;
        };
        LoadMoreComponent.prototype.shouldSwitchMode = function () {
            return this.counter < this.maxIterations || this.hidden;
        };
        LoadMoreComponent.prototype.buttonInView = function (event) {
            if (event.isIntersecting) {
                this.loadMore();
            }
            else if (this.loadUntilIntersected) {
                clearTimeout(this.loadUntilIntersected);
                this.loadUntilIntersected = null;
                this.isLoading = false;
            }
            else {
                // avoiding a race condition when timeout is faster
                // cleared then set
                this.loadUntilIntersected = null;
            }
        };
        LoadMoreComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input()
        ], LoadMoreComponent.prototype, "paging", void 0);
        __decorate([
            core.Input()
        ], LoadMoreComponent.prototype, "useIntersection", void 0);
        __decorate([
            core.Input()
        ], LoadMoreComponent.prototype, "hidden", void 0);
        __decorate([
            core.Input()
        ], LoadMoreComponent.prototype, "container", void 0);
        __decorate([
            core.Input()
        ], LoadMoreComponent.prototype, "class", void 0);
        __decorate([
            core.Input()
        ], LoadMoreComponent.prototype, "maxIterations", void 0);
        __decorate([
            core.Input()
        ], LoadMoreComponent.prototype, "noMoreDataHint", void 0);
        __decorate([
            core.Output()
        ], LoadMoreComponent.prototype, "onLoad", void 0);
        __decorate([
            core.HostBinding('class')
        ], LoadMoreComponent.prototype, "hostClass", null);
        LoadMoreComponent = __decorate([
            core.Component({
                selector: 'c8y-load-more',
                template: "<button\n  class=\"btn btn-default btn-block text-center\"\n  (click)=\"loadMore($event)\"\n  [ngClass]=\"{ 'btn-pending': isLoading }\"\n  *ngIf=\"hasMore\"\n  [style.visibility]=\"hidden ? 'hidden' : 'visible'\"\n  [style.height]=\"hidden ? '1px' : null\"\n  title=\"{{ 'Load more' | translate }}\"\n>\n  <span\n    *ngIf=\"!isLoading\"\n    translate\n    ngNonBindable\n    [translateParams]=\"{ pageNo: paging.currentPage + 1 }\"\n  >\n    Load page {{ pageNo }}</span\n  >\n  <span\n    *ngIf=\"isLoading\"\n    translate\n    ngNonBindable\n    [translateParams]=\"{ pageNo: paging.currentPage + 1 }\"\n  >\n    Page {{ pageNo }} is loading\u2026\n  </span>\n</button>\n\n<ng-container *ngIf=\"showNoMoreDataHint\">\n  <ng-container *ngTemplateOutlet=\"noMoreDataHint || finishHint\"></ng-container>\n</ng-container>\n\n<ng-template #finishHint>\n  <div class=\"legend form-block center\">\n    <i [c8yIcon]=\"'flag-checkered'\" title=\"{{ 'No more data found.' | translate }}\"></i>\n  </div>\n</ng-template>\n"
            })
        ], LoadMoreComponent);
        return LoadMoreComponent;
    }());

    /**
     * A directive to iterate over IResultList<T> data from @c8y/client.
     * Depending on the [c8yForLoadMore] a load more button is:
     *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
     *          change with maxIterations settings).
     *  - show: Shows a load more button for the user to decide
     *  - none: Doesn't perform any load more action.
     *  - hidden: Loads more data automatically but with no visible button for the user.
     *
     * Additional, any rxjs operator pipe can be applied to the [c8yForPipe] input, e.g. to
     * filter the data displayed currently as well as the data loaded by subsequent requests.
     *
     * Example:
     * ```html
     * <div *c8yFor="let device of devices; loadMore: 'auto'; let i = index; pipe: filterPipe;">
     *  {{ i + 1 }}. {{device.name}}
     * </div>
     * ```
     * The above example will list all entities that are applied to `devices`:
     * ```typescript
     * this.devices = this.inventoryService.list({ pageSize: 10, fragmentType: 'c8y_IsDevice' })
     * ```
     * It will display the first 10 items, if there is more space left on the screen, and there are more
     * than 10 devices, it will automatically load up to 10 pages more. If it still can't fit the screen
     * it will stop and switch to `show` mode.
     *
     * A pipe can be applied e.g. for filtering or grouping. This pipe is attached to every follow up
     * request done by the load more component:
     * ```typescript
     * this.filterPipe = pipe(
     *    map((data: []) => {
     *     return data.filter(
     *      (mo: any) => mo.name && mo.name.toLowerCase().indexOf(value.toLowerCase()) > -1
     *    );
     *  })
     * );
     * ```
     * The pipe must be an rxjs pipe and can take any operator.
     */
    var ForOfDirective = /** @class */ (function () {
        function ForOfDirective(tpl, vcr, componentFactoryResolver) {
            this.tpl = tpl;
            this.vcr = vcr;
            this.componentFactoryResolver = componentFactoryResolver;
            this.cachedData = [];
            this.loadMoreMode = 'auto';
            this.dataPipe = rxjs.pipe(operators.tap());
            this.maxIterations = 10;
        }
        Object.defineProperty(ForOfDirective.prototype, "shouldUseLoadMoreButton", {
            get: function () {
                return (this.loadMoreMode === 'auto' || this.loadMoreMode === 'show' || this.loadMoreMode === 'hidden');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "hasMoreData", {
            get: function () {
                return this.loadMore && this.loadMore.hasMore;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "length", {
            get: function () {
                return this.cachedData.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForOf", {
            /**
             * The data setter. Must be a response from @c8y/data or a observable.
             */
            set: function (fetchData) {
                var _this = this;
                if (fetchData) {
                    this.obs$ = (rxjs.isObservable(fetchData) ? fetchData : rxjs.of(fetchData)).pipe(operators.map(function (result) {
                        var paging = result.paging, data = result.data;
                        _this.paging = paging;
                        return data;
                    }));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForLoadMore", {
            /**
             * The mode setter:
             *  - auto: Tries to automatically load more data (default maximum 10 iterations; can be
             *          change with maxIterations settings).
             *  - show: Shows a load more button for the user to decide
             *  - none: Doesn't perform any load more action.
             *  - hidden: Loads more data automatically but with no visible button for the user.
             */
            set: function (type) {
                this.loadMoreMode = type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForPipe", {
            /**
             * The pipe setter to attach any rxjs pipe to the current and more loaded data.
             */
            set: function (dataPipe) {
                if (dataPipe) {
                    this.dataPipe = dataPipe;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForNotFound", {
            /**
             * A template to use if no data is found at all (e.g. if you apply a filter pipe).
             */
            set: function (notFoundTemplate) {
                this.notFoundTemplate = notFoundTemplate;
                if (this.loadMore) {
                    this.loadMore.noMoreDataHint = notFoundTemplate;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ForOfDirective.prototype, "c8yForMaxIterations", {
            /**
             * The maximum numbers of iterations to call data from the api.
             */
            set: function (maxIterations) {
                this.maxIterations = maxIterations;
            },
            enumerable: true,
            configurable: true
        });
        ForOfDirective.prototype.ngOnChanges = function (changes) {
            var _this = this;
            if (this.obs$ && (changes.c8yForPipe || changes.c8yForOf)) {
                this.unsubscribePaging();
                // only re-rendering  on filtering if all data is already loaded
                // from the backend
                var reRender_1 = !this.hasMoreData && !!changes.c8yForPipe && !changes.c8yForOf;
                if (reRender_1) {
                    this.obs$ = rxjs.of(this.cachedData);
                }
                this.pagingSub = this.obs$
                    .pipe(operators.tap(function (data) {
                    if (!reRender_1) {
                        _this.cachedData = data;
                    }
                }))
                    .pipe(function (src) { return _this.dataPipe(src); })
                    .subscribe(function (data) {
                    _this.render(data, reRender_1);
                });
            }
        };
        ForOfDirective.prototype.ngOnDestroy = function () {
            this.unsubscribePaging();
        };
        ForOfDirective.prototype.render = function (data, reRender) {
            var _this = this;
            if (reRender === void 0) { reRender = false; }
            this.vcr.clear();
            data.forEach(function (item, index) {
                var context = {
                    $implicit: item,
                    index: index,
                    length: _this.length,
                    hasMore: _this.hasMoreData
                };
                _this.vcr.createEmbeddedView(_this.tpl, context);
            });
            if (this.shouldUseLoadMoreButton) {
                this.loadMore = this.createLoadMoreButtonComponent(reRender);
            }
        };
        ForOfDirective.prototype.append = function (data) {
            var _this = this;
            data.forEach(function (item) {
                var index = _this.shouldUseLoadMoreButton ? _this.vcr.length - 1 : _this.vcr.length;
                var context = {
                    $implicit: item,
                    index: index,
                    length: _this.length,
                    hasMore: _this.hasMoreData
                };
                _this.vcr.createEmbeddedView(_this.tpl, context, index);
            });
        };
        ForOfDirective.prototype.loadMoreData = function (data) {
            if (data.length > 0) {
                this.append(data);
            }
        };
        ForOfDirective.prototype.createLoadMoreButtonComponent = function (reRender) {
            var _this = this;
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(LoadMoreComponent);
            var componentRef = this.vcr.createComponent(componentFactory);
            var instance = componentRef.instance;
            instance.paging = this.paging;
            instance.useIntersection = this.loadMoreMode === 'auto' || this.loadMoreMode === 'hidden';
            instance.hidden = this.loadMoreMode === 'hidden';
            instance.maxIterations = this.maxIterations;
            instance.noMoreDataHint = this.notFoundTemplate;
            this.pagingSub = instance.onLoad
                .pipe(operators.tap(function (data) {
                _this.cachedData = _this.cachedData.concat(data);
            }))
                .pipe(function (src) { return _this.dataPipe(src); })
                .subscribe(function (data) { return _this.loadMoreData(data); });
            if (reRender) {
                lodashEs.assign(instance, this.loadMore);
            }
            return instance;
        };
        ForOfDirective.prototype.unsubscribePaging = function () {
            if (this.pagingSub) {
                this.pagingSub.unsubscribe();
            }
        };
        ForOfDirective.ctorParameters = function () { return [
            { type: core.TemplateRef },
            { type: core.ViewContainerRef },
            { type: core.ComponentFactoryResolver }
        ]; };
        __decorate([
            core.Input()
        ], ForOfDirective.prototype, "c8yForOf", null);
        __decorate([
            core.Input()
        ], ForOfDirective.prototype, "c8yForLoadMore", null);
        __decorate([
            core.Input()
        ], ForOfDirective.prototype, "c8yForPipe", null);
        __decorate([
            core.Input()
        ], ForOfDirective.prototype, "c8yForNotFound", null);
        __decorate([
            core.Input()
        ], ForOfDirective.prototype, "c8yForMaxIterations", null);
        ForOfDirective = __decorate([
            core.Directive({
                selector: '[c8yFor]'
            })
        ], ForOfDirective);
        return ForOfDirective;
    }());

    /*
     * Implementation of pure "Mapping" pipe based on
     * https://codeburst.io/angular-bad-practices-eab0e594ce92#389b
     */
    var MapFunctionPipe = /** @class */ (function () {
        function MapFunctionPipe() {
        }
        /*
         * This will be a universal pipe for array mappings. You may add more
         * type checkings and runtime checkings to make sure it works correctly everywhere.
         */
        MapFunctionPipe.prototype.transform = function (value, mappingFunction, thisArg) {
            return mappingFunction.apply(thisArg || this, Array.isArray(value) ? value : [value]);
        };
        MapFunctionPipe = __decorate([
            core.Pipe({
                name: 'map'
            })
        ], MapFunctionPipe);
        return MapFunctionPipe;
    }());

    var ProgressBarComponent = /** @class */ (function () {
        function ProgressBarComponent() {
            this.message = gettext('Loading…');
            this.progress = null;
        }
        __decorate([
            core.Input()
        ], ProgressBarComponent.prototype, "message", void 0);
        __decorate([
            core.Input()
        ], ProgressBarComponent.prototype, "progress", void 0);
        ProgressBarComponent = __decorate([
            core.Component({
                selector: 'c8y-progress-bar',
                template: "<div>\n  <p *ngIf=\"message\">\n    {{ message | translate }}\n  </p>\n  <div class=\"progress progress-striped active\" *ngIf=\"progress !== null\">\n    <div\n      class=\"progress-bar\"\n      role=\"progressbar\"\n      [attr.aria-valuenow]=\"progress\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"100\"\n      [style.width]=\"progress + '%'\"\n    ></div>\n  </div>\n  <div class=\"spinner\" *ngIf=\"progress === null\" style=\"position: relative;\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n"
            })
        ], ProgressBarComponent);
        return ProgressBarComponent;
    }());

    function initializeServices(translateService, state, userPreferences) {
        var initialize = function () {
            var queryStringLanguage = translateService.queryStringLang();
            var firstLanguage = translateService.firstSupportedLanguage();
            /*
              The ?lang parameter will prevent the user preference language from being activated
            */
            if (queryStringLanguage && translateService.isSupported(queryStringLanguage)) {
                translateService.switchToLanguage(queryStringLanguage);
            }
            else {
                state.currentUser
                    .pipe(operators.map(function (user) { return user && user.userName; }), operators.filter(function (u) { return !!u; }), operators.distinctUntilChanged(), operators.switchMap(function () { return userPreferences.get('language'); }), operators.startWith(firstLanguage), operators.filter(function (lang) { return !!lang; }), operators.distinctUntilChanged())
                    .subscribe(function (lang) {
                    translateService.switchToLanguage(lang);
                });
            }
        };
        return initialize;
    }
    var ICON_LIST = new core.InjectionToken('iconList');
    /**
     * Commonly used directives, data access and translation. This module is the shared
     * module across all core components. It should be imported by default.
     *
     * @exports IconDirective A directive to set a c8y icon with [c8yIcon]="'rocket'".
     * @exports OutletDirective A directive which allows to set DOM or Angular templates (used for upgrade).
     * @exports I18nModule Translation module.
     * @exports NgCommonModule Angular common module.
     * @exports DataModule The data layer to allow DI with @c8y/client
     * @exports HumanizeAppNamePipe Humanize an application name (e.g. in the app switcher)
     * @exports HumanizePipe Humanize a word. E.g. `device management` gets `Device management`
     * @exports ShortenUserNamePipe Allows a short name. E.g. `Foo Bar` gets `F. Bar`
     * @exports ForOfDirective A forOf directive like ngFor but with load-more function
     * @exports LoadMoreComponent A component to load more data from a certain data-source
     * @exports ProgressBarComponent Displays either defined or undefined progress.
     */
    var CommonModule = /** @class */ (function () {
        function CommonModule() {
        }
        CommonModule_1 = CommonModule;
        CommonModule.providers = function () {
            return __spread(api.DataModule.providers(), [
                // TODO: maybe we can think of a way to remove this C8Y_APP global
                { provide: HOOK_OPTIONS, useValue: window.C8Y_APP || {}, multi: true },
                {
                    provide: core.APP_INITIALIZER,
                    useFactory: initializeServices,
                    deps: [TranslateService, AppStateService, UserPreferencesService],
                    multi: true
                },
                { provide: ICON_LIST, useValue: ICONS, multi: false }
            ], I18nModule.providers(), [
                UserPreferencesService,
                OptionsService,
                AppStateService
            ]);
        };
        CommonModule.forRoot = function () {
            return {
                ngModule: CommonModule_1,
                providers: CommonModule_1.providers()
            };
        };
        var CommonModule_1;
        CommonModule = CommonModule_1 = __decorate([
            core.NgModule({
                imports: [common.CommonModule, I18nModule],
                exports: [
                    IconDirective,
                    OutletDirective,
                    I18nModule,
                    common.CommonModule,
                    HumanizeAppNamePipe,
                    HumanizePipe,
                    ShortenUserNamePipe,
                    ForOfDirective,
                    LoadMoreComponent,
                    MapFunctionPipe,
                    ProgressBarComponent
                ],
                declarations: [
                    IconDirective,
                    OutletDirective,
                    HumanizePipe,
                    HumanizeAppNamePipe,
                    ShortenUserNamePipe,
                    ForOfDirective,
                    LoadMoreComponent,
                    MapFunctionPipe,
                    ProgressBarComponent
                ],
                entryComponents: [LoadMoreComponent]
            })
        ], CommonModule);
        return CommonModule;
    }());

    var ActionBarItemComponent = /** @class */ (function () {
        function ActionBarItemComponent(actionBarService) {
            this.actionBarService = actionBarService;
            this.placement = 'left';
            this.priority = 0;
            this.itemClass = '';
        }
        ActionBarItemComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.viewInitTimeout = setTimeout(function () {
                return _this.actionBarService.add(_this);
            });
        };
        ActionBarItemComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.actionBarService.remove(this);
        };
        ActionBarItemComponent.ctorParameters = function () { return [
            { type: ActionBarService }
        ]; };
        __decorate([
            core.Input()
        ], ActionBarItemComponent.prototype, "placement", void 0);
        __decorate([
            core.Input()
        ], ActionBarItemComponent.prototype, "priority", void 0);
        __decorate([
            core.Input()
        ], ActionBarItemComponent.prototype, "itemClass", void 0);
        __decorate([
            core.ViewChild('template', { static: false })
        ], ActionBarItemComponent.prototype, "template", void 0);
        ActionBarItemComponent = __decorate([
            core.Component({
                selector: 'c8y-action-bar-item',
                template: "<ng-template #template>\n  <li class=\"{{itemClass}}\">\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
            })
        ], ActionBarItemComponent);
        return ActionBarItemComponent;
    }());

    var ActionBarComponent = /** @class */ (function () {
        function ActionBarComponent() {
            this.navigatorOpen = false;
            this.hasTabs = false;
            this.isTabsHorizontal = false;
            this.isPageToolbarExpanded = false;
            this.uiActionBar = true;
            this.items = [];
        }
        Object.defineProperty(ActionBarComponent.prototype, "hidden", {
            get: function () {
                return !(this.items && this.items.length);
            },
            enumerable: true,
            configurable: true
        });
        ActionBarComponent.prototype.getSortedItems = function (placement) {
            return lodashEs.sortBy(lodashEs.filter(this.items, { placement: placement }), this.byPriority);
        };
        ActionBarComponent.prototype.byPriority = function (item) {
            return -item.priority;
        };
        __decorate([
            core.Input(), core.HostBinding('class.navigator-open')
        ], ActionBarComponent.prototype, "navigatorOpen", void 0);
        __decorate([
            core.Input(), core.HostBinding('class.has-tabs')
        ], ActionBarComponent.prototype, "hasTabs", void 0);
        __decorate([
            core.Input(), core.HostBinding('class.horizontal-tabs')
        ], ActionBarComponent.prototype, "isTabsHorizontal", void 0);
        __decorate([
            core.HostBinding('class.c8y-ui-action-bar')
        ], ActionBarComponent.prototype, "uiActionBar", void 0);
        __decorate([
            core.Input()
        ], ActionBarComponent.prototype, "items", void 0);
        __decorate([
            core.HostBinding()
        ], ActionBarComponent.prototype, "hidden", null);
        ActionBarComponent = __decorate([
            core.Component({
                selector: 'c8y-action-bar',
                template: "<div class=\"navbar-header\">\n  <button\n    type=\"button\"\n    class=\"navbar-toggle collapsed\"\n    (click)=\"isPageToolbarExpanded = !isPageToolbarExpanded\"\n  >\n    <span class=\"sr-only\" translate>Toggle toolbar</span>\n    <span class=\"icon-bar\"></span>\n    <span class=\"icon-bar\"></span>\n    <span class=\"icon-bar\"></span>\n  </button>\n</div>\n\n<div id=\"page-toolbar\" class=\"navbar-collapse\" [collapse]=\"!isPageToolbarExpanded\">\n  <ul class=\"nav navbar-nav navbar-left\">\n    <ng-container *ngFor=\"let item of getSortedItems('left')\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n  </ul>\n  <ul class=\"nav navbar-nav navbar-right\">\n    <ng-container *ngFor=\"let item of getSortedItems('right')\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n    </ng-container>\n    <li class=\"no-remove more-wrapper\" *ngIf=\"getSortedItems('more').length > 0\">\n      <div class=\"dropdown\" dropdown>\n        <button\n          title=\"{{ 'More' | translate }}\u2026\"\n          class=\"dropdown-toggle c8y-dropdown\"\n          dropdownToggle\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          <span translate>More\u2026</span>\n          <i [c8yIcon]=\"'caret-down'\"></i>\n        </button>\n        <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n          <ng-container *ngFor=\"let item of getSortedItems('more')\">\n            <ng-container *c8yOutlet=\"item.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n    </li>\n  </ul>\n</div>\n",
                host: { class: 'c8y-ui-action-bar' }
            })
        ], ActionBarComponent);
        return ActionBarComponent;
    }());

    /**
     * The angular module definition for the action bar.
     * @exports ActionBarComponent
     * @exports ActionBarItemComponent
     */
    var ActionBarModule = /** @class */ (function () {
        function ActionBarModule() {
        }
        ActionBarModule = __decorate([
            core.NgModule({
                declarations: [
                    ActionBarComponent,
                    ActionBarItemComponent
                ],
                imports: [
                    dropdown.BsDropdownModule,
                    CommonModule,
                    collapse.CollapseModule,
                    router.RouterModule.forChild([])
                ],
                exports: [
                    ActionBarComponent,
                    ActionBarItemComponent
                ]
            })
        ], ActionBarModule);
        return ActionBarModule;
    }());

    var ActionOutletComponent = /** @class */ (function () {
        function ActionOutletComponent() {
            this.isPageToolbarExpanded = false;
            this.items = [];
        }
        ActionOutletComponent.prototype.getByPriority = function () {
            return lodashEs.sortBy(this.items, this.byPriority);
        };
        ActionOutletComponent.prototype.invoke = function (action) {
            if (action.action) {
                action.action.call();
            }
        };
        ActionOutletComponent.prototype.byPriority = function (item) {
            return -item.priority;
        };
        __decorate([
            core.Input()
        ], ActionOutletComponent.prototype, "items", void 0);
        ActionOutletComponent = __decorate([
            core.Component({
                selector: 'c8y-action-outlet',
                template: "<div class=\"dropdown\" dropdown *ngIf=\"items && items.length > 0\">\n  <button\n    type=\"button\"\n    class=\"main-header-button dropdown-toggle c8y-dropdown\"\n    dropdownToggle\n    aria-haspopup=\"true\"\n    aria-expanded=\"true\">\n    <i [c8yIcon]=\"'plus-circle'\" class=\"fa-2x\"></i>\n  </button>\n\n  <ul class=\"dropdown-menu cog-dropdown\" *dropdownMenu>\n    <ng-container *ngFor=\"let item of getByPriority()\">\n      <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      <li *ngIf=\"item.label\">\n        <button title=\"{{ item.label | translate }}\" [attr.disabled]=\"item.disabled ? 'disabled' : null\" (click)=\"invoke(item)\">\n          <i *ngIf=\"item.icon\" [c8yIcon]=\"item.icon\"></i>{{item.label | translate}}\n        </button>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
            })
        ], ActionOutletComponent);
        return ActionOutletComponent;
    }());

    var ActionComponent = /** @class */ (function () {
        function ActionComponent(actionService) {
            this.actionService = actionService;
            this.disabled = false;
            this.priority = 0;
        }
        ActionComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.viewInitTimeout = setTimeout(function () {
                return _this.actionService.add(_this);
            });
        };
        ActionComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.actionService.remove(this);
        };
        ActionComponent.ctorParameters = function () { return [
            { type: ActionService }
        ]; };
        __decorate([
            core.Input()
        ], ActionComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input()
        ], ActionComponent.prototype, "label", void 0);
        __decorate([
            core.Input()
        ], ActionComponent.prototype, "priority", void 0);
        __decorate([
            core.Input()
        ], ActionComponent.prototype, "icon", void 0);
        __decorate([
            core.ViewChild('template', { static: false })
        ], ActionComponent.prototype, "template", void 0);
        ActionComponent = __decorate([
            core.Component({
                selector: 'c8y-action',
                template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>"
            })
        ], ActionComponent);
        return ActionComponent;
    }());

    /**
     * The angular module definition for actions.
     * @exports ActionComponent
     * @exports ActionOutletComponent
     */
    var ActionModule = /** @class */ (function () {
        function ActionModule() {
        }
        ActionModule = __decorate([
            core.NgModule({
                declarations: [
                    ActionOutletComponent,
                    ActionComponent
                ],
                imports: [
                    CommonModule,
                    dropdown.BsDropdownModule,
                    router.RouterModule.forChild([])
                ],
                exports: [
                    ActionOutletComponent,
                    ActionComponent
                ]
            })
        ], ActionModule);
        return ActionModule;
    }());

    var AlertDetailsComponent = /** @class */ (function () {
        function AlertDetailsComponent() {
        }
        AlertDetailsComponent = __decorate([
            core.Component({
                selector: 'c8y-alert-details',
                template: "<ng-content></ng-content>"
            })
        ], AlertDetailsComponent);
        return AlertDetailsComponent;
    }());

    var AlertOutletComponent = /** @class */ (function () {
        function AlertOutletComponent(position, alertService) {
            this.position = position;
            this.alertService = alertService;
            this.detailDisplayedAlert = {};
            this.isStatic = false;
            this.isStatic = this.position === 'static';
        }
        Object.defineProperty(AlertOutletComponent.prototype, "alerts", {
            get: function () {
                return this.alertService.state$;
            },
            enumerable: true,
            configurable: true
        });
        AlertOutletComponent.prototype.getClass = function (alert) {
            var classes = [];
            if (alert.type !== 'danger') {
                classes.push('interact');
            }
            classes.push("alert-" + alert.type);
            return classes.join(' ');
        };
        AlertOutletComponent.prototype.close = function (alert) {
            if (alert.onClose) {
                alert.onClose();
            }
            this.alertService.remove(alert);
        };
        AlertOutletComponent.prototype.showDetails = function (alert) {
            if (alert.onDetail) {
                return alert.onDetail();
            }
            this.detailDisplayedAlert = Object.assign({}, alert);
            this.detailDisplayedAlert.mode = 'raw';
            this.setDetailsContent(alert);
        };
        AlertOutletComponent.prototype.setDetailsContent = function (alert) {
            if (this.isTemplateRef(alert.detailedData) || typeof alert.detailedData === 'string') {
                this.detailDisplayedAlert.contents = alert.detailedData;
            }
            else {
                this.detailDisplayedAlert.contents = JSON.stringify(alert.detailedData, null, 2);
            }
        };
        AlertOutletComponent.prototype.hasDetails = function (alert) {
            return (alert.detailedData || alert.onDetail);
        };
        AlertOutletComponent.prototype.closeDetails = function () {
            this.detailDisplayedAlert = {};
        };
        AlertOutletComponent.prototype.isDetailsShow = function (alert) {
            return this.alertService.areSame(alert, this.detailDisplayedAlert);
        };
        AlertOutletComponent.prototype.isTemplateRef = function (value) {
            return value instanceof core.TemplateRef;
        };
        AlertOutletComponent.prototype.template = function (content) {
            return this.isTemplateRef(content) ? content : undefined;
        };
        AlertOutletComponent.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Attribute, args: ['position',] }] },
            { type: AlertService }
        ]; };
        __decorate([
            core.HostBinding('class.static')
        ], AlertOutletComponent.prototype, "isStatic", void 0);
        AlertOutletComponent = __decorate([
            core.Component({
                selector: 'c8y-alert-outlet',
                template: "<div\n  class=\"alert animated fadeInRightBig\"\n  *ngFor=\"let alert of alerts | async\"\n  [ngClass]=\"[getClass(alert), isDetailsShow(alert) ? 'expanded' : '']\"\n>\n  <button title=\"{{ 'Close' | translate }}\" type=\"button\" class=\"close\" (click)=\"close(alert)\">\n    <span aria-hidden=\"true\">&times;</span>\n    <span class=\"sr-only\">{{ 'Close' | translate }}</span>\n  </button>\n\n  <div *ngIf=\"!isTemplateRef(alert.text); else template(alert.text)\">\n    <strong *ngIf=\"!alert.allowHtml\" [innerText]=\"alert.text | translate\" class=\"message\"></strong>\n    <strong *ngIf=\"alert.allowHtml\" [innerHTML]=\"alert.text | translate\" class=\"message\"></strong>\n  </div>\n  <p *ngIf=\"hasDetails(alert) && !isDetailsShow(alert)\" class=\"text-muted top-m-sm\">\n    <button\n      title=\"{{ 'Show details' | translate }}\"\n      class=\"btn btn-clean\"\n      (click)=\"showDetails(alert)\"\n    >\n      <i class=\"fa fa-chevron-down\"></i>\n      {{ 'Show details' | translate }}\n    </button>\n  </p>\n  <p *ngIf=\"hasDetails(alert) && isDetailsShow(alert)\" class=\"text-muted top-m-sm\">\n    <button title=\"{{ 'Hide details' | translate }}\" class=\"btn btn-clean\" (click)=\"closeDetails()\">\n      <i class=\"fa fa-chevron-up\"></i>\n      {{ 'Hide details' | translate }}\n    </button>\n  </p>\n  <div *ngIf=\"isDetailsShow(alert)\">\n    <div *ngIf=\"!isTemplateRef(detailDisplayedAlert.contents); else template(alert.detailedData)\">\n      <pre><code [innerText]=\"detailDisplayedAlert.contents | translate\"></code></pre>\n    </div>\n  </div>\n</div>\n"
            }),
            __param(0, core.Attribute('position'))
        ], AlertOutletComponent);
        return AlertOutletComponent;
    }());

    var AlertTextComponent = /** @class */ (function () {
        function AlertTextComponent() {
        }
        AlertTextComponent = __decorate([
            core.Component({
                selector: 'c8y-alert-text',
                template: "<ng-content></ng-content>"
            })
        ], AlertTextComponent);
        return AlertTextComponent;
    }());

    var AlertComponent = /** @class */ (function () {
        function AlertComponent(alertService) {
            this.alertService = alertService;
        }
        AlertComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (!this.containDetailsComponent) {
                this.detailedData = null;
            }
            this.viewInitTimeout = setTimeout(function () {
                return _this.alertService.add(_this);
            });
        };
        AlertComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.alertService.remove(this);
        };
        AlertComponent.ctorParameters = function () { return [
            { type: AlertService }
        ]; };
        __decorate([
            core.Input()
        ], AlertComponent.prototype, "type", void 0);
        __decorate([
            core.Input()
        ], AlertComponent.prototype, "onDetail", void 0);
        __decorate([
            core.Input()
        ], AlertComponent.prototype, "onClose", void 0);
        __decorate([
            core.ViewChild('detailedData', { static: false })
        ], AlertComponent.prototype, "detailedData", void 0);
        __decorate([
            core.ViewChild('text', { static: false })
        ], AlertComponent.prototype, "text", void 0);
        __decorate([
            core.ContentChild(AlertDetailsComponent, { static: false })
        ], AlertComponent.prototype, "containDetailsComponent", void 0);
        AlertComponent = __decorate([
            core.Component({
                selector: 'c8y-alert',
                template: "<ng-template #text>\r\n  <ng-content select=\"c8y-alert-text\"></ng-content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n<ng-template #detailedData>\r\n  <ng-content select=\"c8y-alert-details\"></ng-content>\r\n</ng-template>"
            })
        ], AlertComponent);
        return AlertComponent;
    }());

    /**
     * The angular module definition for alert.
     * @exports AlertComponent
     * @exports AlertOutletComponent
     * @exports AlertDetailsComponent
     * @exports AlertTextComponent
     */
    var AlertModule = /** @class */ (function () {
        function AlertModule() {
        }
        AlertModule = __decorate([
            core.NgModule({
                imports: [
                    CommonModule
                ],
                exports: [
                    AlertOutletComponent,
                    AlertComponent,
                    AlertDetailsComponent,
                    AlertTextComponent
                ],
                declarations: [
                    AlertOutletComponent,
                    AlertComponent,
                    AlertDetailsComponent,
                    AlertTextComponent
                ]
            })
        ], AlertModule);
        return AlertModule;
    }());

    var BreadcrumbItemComponent = /** @class */ (function () {
        function BreadcrumbItemComponent() {
        }
        __decorate([
            core.Input()
        ], BreadcrumbItemComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], BreadcrumbItemComponent.prototype, "translate", void 0);
        __decorate([
            core.Input()
        ], BreadcrumbItemComponent.prototype, "label", void 0);
        __decorate([
            core.Input()
        ], BreadcrumbItemComponent.prototype, "path", void 0);
        __decorate([
            core.ViewChild('template', { static: false })
        ], BreadcrumbItemComponent.prototype, "template", void 0);
        BreadcrumbItemComponent = __decorate([
            core.Component({
                selector: 'c8y-breadcrumb-item',
                template: "<ng-template #template>\n  <ng-content></ng-content>\n</ng-template>"
            })
        ], BreadcrumbItemComponent);
        return BreadcrumbItemComponent;
    }());

    var BreadcrumbOutletComponent = /** @class */ (function () {
        function BreadcrumbOutletComponent() {
            this.showAll = false;
            this.breadcrumbs = [];
        }
        /**
         * For upgrade only. Old angularjs routes start with hash, new ones not.
         */
        BreadcrumbOutletComponent.prototype.normalizePath = function (path) {
            return path.replace(/^#\/?/, '');
        };
        __decorate([
            core.Input()
        ], BreadcrumbOutletComponent.prototype, "breadcrumbs", void 0);
        BreadcrumbOutletComponent = __decorate([
            core.Component({
                selector: 'c8y-breadcrumb-outlet',
                template: "<div\n  class=\"breadcrumbs-container\"\n  [ngClass]=\"{\n    multiple: breadcrumbs.length > 1,\n    open: showAll\n  }\"\n  *ngIf=\"breadcrumbs && breadcrumbs.length > 0\"\n>\n  <button\n    *ngIf=\"breadcrumbs.length > 1\"\n    class=\"btn-show-all-breadcrumbs pull-left\"\n    (click)=\"showAll = !showAll\"\n  >\n    <i\n      *ngIf=\"!showAll\"\n      [c8yIcon]=\"'caret-right'\"\n      tooltip=\"{{ 'Show all breadcrumbs' | translate }}\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n    <i\n      *ngIf=\"showAll\"\n      [c8yIcon]=\"'caret-down'\"\n      tooltip=\"{{ 'Collapse breadcrumbs' | translate }}\"\n      container=\"body\"\n      placement=\"top\"\n    ></i>\n  </button>\n\n  <ul class=\"breadcrumbs text-muted\" *ngFor=\"let breadcrumb of breadcrumbs; let first = first\">\n    <ng-container *ngIf=\"first || showAll\">\n      <li class=\"text-muted\" *ngFor=\"let item of breadcrumb.items; let firstItem = first\">\n        <span *ngIf=\"!firstItem\"> > </span>\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n        <ng-container *ngIf=\"item.label\">\n          <a\n            [routerLink]=\"normalizePath(item.path)\"\n            class=\"word-break\"\n            title=\"{{ item.label | translate }}\"\n          >\n            <i [c8yIcon]=\"item.icon\" *ngIf=\"firstItem\" class=\"right-m-xs\"></i>\n            <span>{{ item.label | translate }}</span>\n          </a>\n        </ng-container>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"
            })
        ], BreadcrumbOutletComponent);
        return BreadcrumbOutletComponent;
    }());

    var BreadcrumbComponent = /** @class */ (function () {
        function BreadcrumbComponent(breadcrumbService) {
            this.breadcrumbService = breadcrumbService;
        }
        BreadcrumbComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.items = this.contentChildItems.toArray();
            this.viewInitTimeout = setTimeout(function () {
                return _this.breadcrumbService.add(_this);
            });
        };
        BreadcrumbComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.breadcrumbService.remove(this);
        };
        BreadcrumbComponent.ctorParameters = function () { return [
            { type: BreadcrumbService }
        ]; };
        __decorate([
            core.ContentChildren(BreadcrumbItemComponent)
        ], BreadcrumbComponent.prototype, "contentChildItems", void 0);
        BreadcrumbComponent = __decorate([
            core.Component({
                selector: 'c8y-breadcrumb',
                template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>"
            })
        ], BreadcrumbComponent);
        return BreadcrumbComponent;
    }());

    /**
     * The angular module definition for breadcrumbs.
     * @exports BreadcrumbComponent
     * @exports BreadcrumbItemComponent
     * @exports BreadcrumbOutletComponent
     */
    var BreadcrumbModule = /** @class */ (function () {
        function BreadcrumbModule() {
        }
        BreadcrumbModule = __decorate([
            core.NgModule({
                declarations: [
                    BreadcrumbComponent,
                    BreadcrumbItemComponent,
                    BreadcrumbOutletComponent
                ],
                imports: [
                    router.RouterModule.forChild([]),
                    CommonModule,
                    tooltip.TooltipModule.forRoot()
                ],
                exports: [
                    BreadcrumbComponent,
                    BreadcrumbItemComponent,
                    BreadcrumbOutletComponent
                ]
            })
        ], BreadcrumbModule);
        return BreadcrumbModule;
    }());

    var SearchOutletComponent = /** @class */ (function () {
        function SearchOutletComponent(alertService) {
            this.alertService = alertService;
            this.search = [];
        }
        SearchOutletComponent.prototype.openSearch = function () {
            var _this = this;
            setTimeout(function () { return _this.focusInputBox(); }, 100);
        };
        SearchOutletComponent.prototype.getByPriority = function () {
            return lodash.sortBy(this.search, this.byPriority);
        };
        SearchOutletComponent.prototype.closeDropdown = function (dropdown) {
            dropdown.hide();
        };
        SearchOutletComponent.prototype.verifyNotEmpty = function (term) {
            if (!term || term === '') {
                this.alertService.add({ text: 'Type something to execute a search.', type: 'warning' });
            }
        };
        SearchOutletComponent.prototype.byPriority = function (item) {
            return -item.priority;
        };
        SearchOutletComponent.prototype.focusInputBox = function () {
            var elementToFocus = document.querySelector('#search-header-menu input');
            if (elementToFocus) {
                elementToFocus.focus();
            }
        };
        SearchOutletComponent.ctorParameters = function () { return [
            { type: AlertService }
        ]; };
        __decorate([
            core.Input()
        ], SearchOutletComponent.prototype, "search", void 0);
        SearchOutletComponent = __decorate([
            core.Component({
                selector: 'c8y-search-outlet',
                template: "<ng-container *ngIf=\"search\">\n  <div class=\"dropdown\" dropdown #dropdown=\"bs-dropdown\" *ngFor=\"let item of getByPriority()\">\n    <button\n      title=\"{{ 'Search' | translate }}\"\n      type=\"button\"\n      class=\"main-header-button dropdown-toggle c8y-dropdown\"\n      (click)=\"openSearch()\"\n      dropdownToggle\n    >\n      <i [c8yIcon]=\"item.icon\" class=\"fa-2x\"></i>\n    </button>\n\n    <div\n      id=\"search-header-menu\"\n      class=\"search-header-menu dropdown-menu dropdown-menu-center\"\n      *dropdownMenu\n    >\n      <form\n        (ngSubmit)=\"verifyNotEmpty(item.term); item.onSearch(); closeDropdown(dropdown)\"\n        novalidate\n        #searchForm=\"ngForm\"\n      >\n        <div class=\"input-group input-group-search\" *ngIf=\"!item.template\">\n          <input\n            type=\"search\"\n            class=\"form-control input-lg\"\n            required=\"required\"\n            placeholder=\"Search for groups or assets\u2026\"\n            (click)=\"$event.stopPropagation()\"\n            [(ngModel)]=\"item.term\"\n            name=\"searchTerm\"\n          />\n\n          <span class=\"input-group-btn\">\n            <button type=\"submit\" class=\"btn btn-link\" (click)=\"$event.stopPropagation()\">\n              <i [c8yIcon]=\"'arrow-right'\"></i>\n            </button>\n          </span>\n        </div>\n\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </form>\n    </div>\n  </div>\n</ng-container>\n"
            })
        ], SearchOutletComponent);
        return SearchOutletComponent;
    }());

    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_SEARCH = new core.InjectionToken('SearchFactory');
    /**
     * A service which defines the dearch function.
     */
    var SearchService = /** @class */ (function (_super) {
        __extends(SearchService, _super);
        function SearchService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromTrigger(router, _this.refreshTrigger, [
                function () { return _this.injector.get(HOOK_SEARCH, []); },
                stateToFactory(_this.state$)
            ]).pipe(operators.map(function (items) { return sortByPriority(items); }), operators.shareReplay(1));
            return _this;
        }
        /**
         * Refresh the extension factories
         */
        SearchService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        Object.defineProperty(SearchService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Adds a new item to the search in the header.
         * @param item The item to add.
         */
        SearchService.prototype.add = function (item) {
            this.state.add(item);
            this.emitNewState();
        };
        /**
         * Removes an search from the header.
         * @param item The item to remove.
         */
        SearchService.prototype.remove = function (item) {
            this.state.delete(item);
            this.emitNewState();
        };
        SearchService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: router.Router }
        ]; };
        SearchService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SearchService_Factory() { return new SearchService(core.ɵɵinject(core.INJECTOR), core.ɵɵinject(router.Router)); }, token: SearchService, providedIn: "root" });
        SearchService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], SearchService);
        return SearchService;
    }(StateService));

    var SearchComponent = /** @class */ (function () {
        function SearchComponent(searchService) {
            this.searchService = searchService;
            this.icon = 'search';
            this.priority = 0;
            this.search = new core.EventEmitter();
            this.term = '';
        }
        SearchComponent.prototype.onSearch = function () {
            this.search.emit(this);
        };
        SearchComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.template = undefined;
            this.viewInitTimeout = setTimeout(function () { return _this.searchService.add(_this); });
        };
        SearchComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.searchService.remove(this);
        };
        SearchComponent.ctorParameters = function () { return [
            { type: SearchService }
        ]; };
        __decorate([
            core.Input()
        ], SearchComponent.prototype, "name", void 0);
        __decorate([
            core.Input()
        ], SearchComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], SearchComponent.prototype, "priority", void 0);
        __decorate([
            core.ViewChild('template', { static: false })
        ], SearchComponent.prototype, "template", void 0);
        __decorate([
            core.Output()
        ], SearchComponent.prototype, "search", void 0);
        __decorate([
            core.Input()
        ], SearchComponent.prototype, "term", void 0);
        SearchComponent = __decorate([
            core.Component({
                selector: 'c8y-search',
                template: "<ng-template #template>\n  <ng-content></ng-content>\n</ng-template>"
            })
        ], SearchComponent);
        return SearchComponent;
    }());

    var HighlightComponent = /** @class */ (function () {
        function HighlightComponent(domSanitizer) {
            this.domSanitizer = domSanitizer;
            this.pattern = '';
            this.text = '';
            this.elementClass = 'text-info';
            this.highlightedText = '';
        }
        HighlightComponent.prototype.ngOnChanges = function () {
            var text = this.text;
            if (this.pattern && this.pattern !== '') {
                text = this.text.replace(new RegExp(this.pattern, 'i'), "<strong class=\"" + this.elementClass + "\">$&</strong>");
            }
            this.highlightedText = this.domSanitizer.sanitize(core.SecurityContext.HTML, text);
        };
        HighlightComponent.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer }
        ]; };
        __decorate([
            core.ViewChild('text', { read: core.ElementRef, static: true })
        ], HighlightComponent.prototype, "container", void 0);
        __decorate([
            core.Input()
        ], HighlightComponent.prototype, "pattern", void 0);
        __decorate([
            core.Input()
        ], HighlightComponent.prototype, "text", void 0);
        __decorate([
            core.Input()
        ], HighlightComponent.prototype, "elementClass", void 0);
        HighlightComponent = __decorate([
            core.Component({
                selector: 'c8y-highlight',
                template: '<span [innerHTML]="highlightedText"></span>'
            })
        ], HighlightComponent);
        return HighlightComponent;
    }());

    /**
     * The angular module definition for the search.
     * @exports SearchComponent
     * @exports SearchOutletComponent
     * @exports HighlightComponent A component to highlight search results.
     */
    var SearchModule = /** @class */ (function () {
        function SearchModule() {
        }
        SearchModule = __decorate([
            core.NgModule({
                declarations: [
                    SearchOutletComponent,
                    SearchComponent,
                    HighlightComponent
                ],
                imports: [
                    forms.FormsModule,
                    dropdown.BsDropdownModule,
                    CommonModule,
                    router.RouterModule.forChild([])
                ],
                exports: [
                    SearchOutletComponent,
                    SearchComponent,
                    HighlightComponent
                ]
            })
        ], SearchModule);
        return SearchModule;
    }());

    var ConfirmModalComponent = /** @class */ (function () {
        function ConfirmModalComponent(modal) {
            var _this = this;
            this.modal = modal;
            this.status = exports.Status.INFO;
            this._labels = {
                ok: 'OK',
                cancel: 'Cancel'
            };
            this.result = new Promise(function (resolve, reject) {
                _this.dismiss = function () {
                    reject();
                    _this.modal.hide();
                };
                _this.close = function () {
                    resolve(true);
                    _this.modal.hide();
                };
            });
        }
        Object.defineProperty(ConfirmModalComponent.prototype, "labels", {
            get: function () { return this._labels; },
            set: function (labels) {
                var _a = labels || {}, _b = _a.ok, ok = _b === void 0 ? 'OK' : _b, _c = _a.cancel, cancel = _c === void 0 ? 'Cancel' : _c;
                this._labels = { ok: ok, cancel: cancel };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConfirmModalComponent.prototype, "classIcon", {
            get: function () {
                return "fa-" + statusIcons[this.status];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConfirmModalComponent.prototype, "classAlert", {
            get: function () {
                return statusAlert[this.status];
            },
            enumerable: true,
            configurable: true
        });
        ConfirmModalComponent.prototype.ngOnDestroy = function () {
            this.dismiss();
        };
        ConfirmModalComponent.ctorParameters = function () { return [
            { type: modal.BsModalRef }
        ]; };
        __decorate([
            core.Input()
        ], ConfirmModalComponent.prototype, "title", void 0);
        __decorate([
            core.Input()
        ], ConfirmModalComponent.prototype, "body", void 0);
        __decorate([
            core.Input()
        ], ConfirmModalComponent.prototype, "status", void 0);
        __decorate([
            core.Input()
        ], ConfirmModalComponent.prototype, "labels", null);
        ConfirmModalComponent = __decorate([
            core.Component({
                selector: 'c8y-confirm-modal',
                template: "<div class=\"c8y-prompt alert\" [ngClass]=\"[classAlert]\">\n  <h3 class=\"bottom-m-md\" *ngIf=\"title\">\n    <i class=\"fa fw\" [ngClass]=\"[classIcon]\"></i>\n    <span *ngIf=\"title\">{{ title | translate }}</span>\n  </h3>\n  <p class=\"text-wrap\" style=\"word-wrap:break-word;\">{{ body | translate }}</p>\n  <div class=\"alert-footer\">\n    <button\n      title=\"{{ labels.cancel | translate }}\"\n      class=\"btn btn-default\"\n      *ngIf=\"labels.cancel !== null\"\n      (click)=\"dismiss()\"\n    >\n      {{ labels.cancel | translate }}\n    </button>\n    <button title=\"{{ labels.ok | translate }}\" class=\"btn btn-primary\" (click)=\"close()\">\n      {{ labels.ok | translate }}\n    </button>\n  </div>\n</div>\n"
            })
        ], ConfirmModalComponent);
        return ConfirmModalComponent;
    }());

    /**
     * C8y modal component.
     * ## Example:
     *
     * Creating custom modal:
     * ```typescript
     *  import { Component } from "@angular/core";
     *  import { Subject } from 'rxjs';
     *
     * @Component({
     *  selector: "my-modal",
     *  template: `
     *    <c8y-modal title="CustomTitle"
     *      (onClose)="onClose($event)"
     *      (onDismiss)="onDismiss($event)"
     *      [labels]="labels"
     *      [disabled]="true" <- will disable ok button
     *      >
     *        <span>I am body of modal</span>
     *        <span>For simple string use body="string"</span>
     *    </c8y-modal>`
     * })
     *
     * export class MyModalComponent {
     *
     *  closeSubject: Subject<boolean> = new Subject();
     *  labels : ILabels = {ok: "customOK", cancel: "customCancel"};
     *
     *  onDismiss(event){
     *    this.closeSubject.next(false);
     *  }
     *
     *  onClose(event) {
     *    this.closeSubject.next(true);
     *  }
     * }
     * ```
     * Showing modal:
     * ```typescript
     * import { BsModalService } from "ngx-bootstrap/modal";
     *
     * constructor(
     *  public bsModalService: BsModalService,
     * ) {}
     *
     * showModal() {
     *  const modalRef = this.bsModalService.show(MyModalComponent);
     *  modalRef.content.closeSubject.subscribe(result => {
     *    console.log('results:', result);
     *  });
     * }
     * ```
     */
    var ModalComponent = /** @class */ (function () {
        function ModalComponent(modal) {
            this.modal = modal;
            this.onDismiss = new core.EventEmitter();
            this.onClose = new core.EventEmitter();
            this.disabled = false;
            this.customFooter = false;
            this._labels = { ok: gettext('OK'), cancel: gettext('Cancel') };
        }
        Object.defineProperty(ModalComponent.prototype, "labels", {
            get: function () { return this._labels; },
            set: function (_a) {
                var ok = _a.ok, cancel = _a.cancel;
                this._labels = { ok: ok, cancel: cancel };
            },
            enumerable: true,
            configurable: true
        });
        ModalComponent.prototype._dismiss = function () {
            var _this = this;
            var fn = this.dismiss;
            if (!fn && this.modal) {
                fn = function () { return _this.modal.hide(); };
            }
            if (fn) {
                fn();
            }
            this.onDismiss.emit(true);
        };
        ModalComponent.prototype._close = function () {
            var _this = this;
            var fn = this.close;
            if (!fn && this.modal) {
                fn = function () { return _this.modal.hide(); };
            }
            if (fn) {
                fn();
            }
            this.onClose.emit(true);
        };
        ModalComponent.prototype.onEnterKeyDown = function (event) {
            var hasOnlyOneButton = lodash.isEmpty(this.labels.ok) !== lodash.isEmpty(this.labels.cancel);
            var isCancelClickable = !this.customFooter && this.labels.cancel;
            var isOkClickable = !this.customFooter && !this.disabled && this.labels.ok;
            if (hasOnlyOneButton && isCancelClickable) {
                this._dismiss();
            }
            if (hasOnlyOneButton && isOkClickable) {
                this._close();
            }
        };
        ModalComponent.ctorParameters = function () { return [
            { type: modal.BsModalRef, decorators: [{ type: core.Optional }] }
        ]; };
        __decorate([
            core.Output()
        ], ModalComponent.prototype, "onDismiss", void 0);
        __decorate([
            core.Output()
        ], ModalComponent.prototype, "onClose", void 0);
        __decorate([
            core.Input()
        ], ModalComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input()
        ], ModalComponent.prototype, "close", void 0);
        __decorate([
            core.Input()
        ], ModalComponent.prototype, "dismiss", void 0);
        __decorate([
            core.Input()
        ], ModalComponent.prototype, "title", void 0);
        __decorate([
            core.Input()
        ], ModalComponent.prototype, "body", void 0);
        __decorate([
            core.Input()
        ], ModalComponent.prototype, "customFooter", void 0);
        __decorate([
            core.Input()
        ], ModalComponent.prototype, "labels", null);
        __decorate([
            core.HostListener('document:keydown.enter', ['$event'])
        ], ModalComponent.prototype, "onEnterKeyDown", null);
        ModalComponent = __decorate([
            core.Component({
                selector: 'c8y-modal',
                template: "<div class=\"modal-header\">\n  <ng-content select=\"[c8y-modal-title]\"></ng-content>\n  <h3 [hidden]=\"!title\">{{title | translate}}</h3>\n</div>\n<div class=\"modal-body\">\n  <p\n    [hidden]=\"!title\"\n    class=\"text-center text-wrap\"\n    style=\"word-wrap:break-word;\"\n  >{{body}}</p>\n  <ng-content></ng-content>\n</div>\n<div class=\"modal-footer\" *ngIf=\"!customFooter\">\n  <ng-content select=\"[c8y-modal-footer]\"></ng-content>\n  <button\n    title=\"{{ labels.cancel | translate }}\" \n    *ngIf=\"labels.cancel\"\n    class=\"btn btn-default\"\n    (click)=\"_dismiss()\"\n  >{{labels.cancel | translate}}</button>\n  <button\n    title=\"{{ labels.ok | translate }}\" \n    *ngIf=\"labels.ok\"\n    class=\"btn btn-primary\"\n    (click)=\"_close()\"\n    [disabled]=\"disabled\"\n  >{{labels.ok | translate}}</button>\n</div>\n"
            }),
            __param(0, core.Optional())
        ], ModalComponent);
        return ModalComponent;
    }());

    /**
     * Service to shiow a modal.
     */
    var ModalService = /** @class */ (function () {
        function ModalService(modalService) {
            this.modalService = modalService;
        }
        /**
         * Shows a quick confirm message modal.
         * @param title The title of that modal.
         * @param body The text body to display.
         * @param status The status.
         * @param labels The labels to use. Default: { ok: 'Confirm', cancel: 'Cancel'}
         */
        ModalService.prototype.confirm = function (title, body, status, labels) {
            if (status === void 0) { status = exports.Status.INFO; }
            if (labels === void 0) { labels = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var modalLabels, modalRef;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            modalLabels = { ok: labels.ok || gettext('Confirm'), cancel: labels.cancel || gettext('Cancel') };
                            modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title: title, body: body, labels: modalLabels, status: status } });
                            return [4 /*yield*/, modalRef.content.result];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Shows a quick acknowledge message modal.
         * @param title The title of that modal.
         * @param body The text body to display.
         * @param status The status.
         * @param acknowledgeLabel The label to use.
         */
        ModalService.prototype.acknowledge = function (title, body, status, acknowledgeLabel) {
            if (status === void 0) { status = exports.Status.INFO; }
            if (acknowledgeLabel === void 0) { acknowledgeLabel = gettext('Confirm'); }
            return __awaiter(this, void 0, void 0, function () {
                var labels, modalRef;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            labels = { ok: acknowledgeLabel, cancel: null };
                            modalRef = this.modalService.show(ConfirmModalComponent, { initialState: { title: title, body: body, labels: labels, status: status } });
                            return [4 /*yield*/, modalRef.content.result];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        ModalService.ctorParameters = function () { return [
            { type: modal.BsModalService }
        ]; };
        ModalService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(core.ɵɵinject(modal.BsModalService)); }, token: ModalService, providedIn: "root" });
        ModalService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], ModalService);
        return ModalService;
    }());

    /**
     * A component to show a popover right next to the
     * user action. Add this component where the confirm modal
     * should be shown and toggle isOpen to display it. You
     * can use `await isShow()` to wait for a result on the
     * click action.
     */
    var PopoverConfirmComponent = /** @class */ (function () {
        function PopoverConfirmComponent() {
            this.buttons = [{ label: gettext('cancel'), action: function () { return Promise.reject(); } }];
            this.isOpen = false;
            this.containerClass = '';
            this.placement = 'right';
            this.outsideClick = false;
        }
        /**
         * Show the popover. Wait until an action is performed on it.
         */
        PopoverConfirmComponent.prototype.show = function (buttons) {
            return __awaiter(this, void 0, void 0, function () {
                var result, ex_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.buttons = buttons || this.buttons;
                            this.isOpen = true;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            return [4 /*yield*/, new Promise(function (resolve, reject) {
                                    return _this.click = function (action) { return action().then(resolve).catch(reject); };
                                })];
                        case 2:
                            result = _a.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            ex_1 = _a.sent();
                            throw (ex_1);
                        case 4:
                            this.isOpen = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/, result];
                    }
                });
            });
        };
        PopoverConfirmComponent.prototype.buttonStatus = function (status) {
            if (status) {
                return "btn-" + status;
            }
            return 'btn-link btn-clean';
        };
        PopoverConfirmComponent.prototype.handleOutsideClick = function () {
            this.click(function () { return Promise.reject(); });
        };
        __decorate([
            core.ViewChild(popover.PopoverDirective, { static: false })
        ], PopoverConfirmComponent.prototype, "popover", void 0);
        __decorate([
            core.Input()
        ], PopoverConfirmComponent.prototype, "buttons", void 0);
        __decorate([
            core.Input()
        ], PopoverConfirmComponent.prototype, "message", void 0);
        __decorate([
            core.Input()
        ], PopoverConfirmComponent.prototype, "title", void 0);
        __decorate([
            core.Input()
        ], PopoverConfirmComponent.prototype, "isOpen", void 0);
        __decorate([
            core.Input()
        ], PopoverConfirmComponent.prototype, "containerClass", void 0);
        __decorate([
            core.Input()
        ], PopoverConfirmComponent.prototype, "placement", void 0);
        __decorate([
            core.Input()
        ], PopoverConfirmComponent.prototype, "outsideClick", void 0);
        PopoverConfirmComponent = __decorate([
            core.Component({
                selector: 'c8y-popover-confirm',
                template: "<span\n  [popover]=\"popover\"\n  container=\"body\"\n  [isOpen]=\"isOpen\"\n  [popoverTitle]=\"title | translate\"\n  [placement]=\"placement\"\n  [containerClass]=\"containerClass\"\n  [outsideClick]=\"outsideClick\"\n  (onHidden)=\"handleOutsideClick()\"\n></span>\n<ng-template #popover>\n  <p class=\"bottom-m\">\n    {{ message | translate }}\n  </p>\n  <div class=\"popover-footer\">\n    <ng-container *ngFor=\"let button of buttons\">\n      <button\n        title=\"{{ button.label | translate }}\"\n        class=\"btn btn-sm right-m-md\"\n        [ngClass]=\"buttonStatus(button.status)\"\n        (click)=\"click(button.action)\"\n      >\n        {{ button.label | translate }}\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n"
            })
        ], PopoverConfirmComponent);
        return PopoverConfirmComponent;
    }());

    /**
     * The angular module definition for modal.
     * @exports ConfirmModalComponent
     * @exports ModalComponent
     * @exports PopoverConfirmComponent
     */
    var ModalModule = /** @class */ (function () {
        function ModalModule() {
        }
        ModalModule = __decorate([
            core.NgModule({
                imports: [
                    modal.ModalModule.forRoot(),
                    CommonModule,
                    popover.PopoverModule.forRoot()
                ],
                exports: [
                    ConfirmModalComponent,
                    ModalComponent,
                    PopoverConfirmComponent
                ],
                declarations: [
                    ConfirmModalComponent,
                    ModalComponent,
                    PopoverConfirmComponent
                ],
                providers: [
                    ModalService
                ],
                entryComponents: [
                    ConfirmModalComponent
                ]
            })
        ], ModalModule);
        return ModalModule;
    }());

    var UserMenuService = /** @class */ (function (_super) {
        __extends(UserMenuService, _super);
        function UserMenuService() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state$ = new rxjs.BehaviorSubject({
                userMenuItems: new Set()
            });
            return _this;
        }
        Object.defineProperty(UserMenuService.prototype, "state", {
            /**
             * Returns the current state.
             * @readonly
             * @returns The current set of actions.
             */
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Adds a new item to the search in the header.
         * @param item The item to add.
         */
        UserMenuService.prototype.add = function (item) {
            this.state.userMenuItems.add(item);
            this.emitNewState();
        };
        /**
         * Removes an search from the header.
         * @param item The item to remove.
         */
        UserMenuService.prototype.remove = function (item) {
            this.state.userMenuItems.delete(item);
            this.emitNewState();
        };
        UserMenuService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function UserMenuService_Factory() { return new UserMenuService(); }, token: UserMenuService, providedIn: "root" });
        UserMenuService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], UserMenuService);
        return UserMenuService;
    }(StateService));

    var UserMenuItemComponent = /** @class */ (function () {
        function UserMenuItemComponent(userService) {
            this.userService = userService;
            this.priority = 0;
            this.click = new core.EventEmitter();
        }
        UserMenuItemComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.viewInitTimeout = setTimeout(function () {
                return _this.userService.add(_this);
            });
        };
        UserMenuItemComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.userService.remove(this);
        };
        UserMenuItemComponent.prototype.onClick = function () {
            this.click.emit(this);
        };
        UserMenuItemComponent.ctorParameters = function () { return [
            { type: UserMenuService }
        ]; };
        __decorate([
            core.Input()
        ], UserMenuItemComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], UserMenuItemComponent.prototype, "label", void 0);
        __decorate([
            core.Input()
        ], UserMenuItemComponent.prototype, "link", void 0);
        __decorate([
            core.Input()
        ], UserMenuItemComponent.prototype, "target", void 0);
        __decorate([
            core.Input()
        ], UserMenuItemComponent.prototype, "priority", void 0);
        __decorate([
            core.ViewChild('template', { static: false })
        ], UserMenuItemComponent.prototype, "template", void 0);
        __decorate([
            core.Output()
        ], UserMenuItemComponent.prototype, "click", void 0);
        UserMenuItemComponent = __decorate([
            core.Component({
                selector: 'c8y-user-menu-item',
                template: "<ng-template #template>\n  <li (click)=\"onClick()\">\n    <a style=\"cursor: pointer\" [attr.href]=\"link\" [attr.target]=\"target\">\n      <i [c8yIcon]=\"icon\"></i>\n      {{label | translate}}\n      <ng-content></ng-content>\n    </a>\n  </li>\n</ng-template>"
            })
        ], UserMenuItemComponent);
        return UserMenuItemComponent;
    }());

    var UserEditModalComponent = /** @class */ (function () {
        function UserEditModalComponent(modal, user, ui, auth, client, alert, translate, userPreferences, modalService) {
            var _this = this;
            this.modal = modal;
            this.user = user;
            this.ui = ui;
            this.auth = auth;
            this.client = client;
            this.alert = alert;
            this.translate = translate;
            this.userPreferences = userPreferences;
            this.modalService = modalService;
            this.loading = false;
            this.lang = this.ui.state.lang;
            this.modalService.onHide.pipe(operators.take(1)).subscribe(function (reason) {
                if (reason !== null && _this.changedLang !== undefined) {
                    _this.translate.switchToLanguage(_this.lang);
                }
            });
        }
        UserEditModalComponent.prototype.onDismiss = function () {
            if (this.changedLang !== undefined) {
                this.translate.switchToLanguage(this.lang);
            }
            this.modal.hide();
        };
        UserEditModalComponent.prototype.onLanguage = function (lang) {
            this.changedLang = lang;
            this.translate.switchToLanguage(this.changedLang);
        };
        UserEditModalComponent.prototype.updateAndClose = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var currentUserResult, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.loading = true;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 6, 7, 8]);
                            return [4 /*yield*/, this.user.updateCurrent(user)];
                        case 2:
                            _a.sent();
                            if (user.password) {
                                this.updateCredentials(user.password);
                            }
                            return [4 /*yield*/, this.user.current()];
                        case 3:
                            currentUserResult = _a.sent();
                            this.ui.currentUser.next(currentUserResult.data);
                            if (!(this.changedLang && this.changedLang !== this.lang)) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.persistLanguage(this.changedLang)];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            this.modal.hide();
                            this.alert.success(gettext('User saved.'));
                            return [3 /*break*/, 8];
                        case 6:
                            e_1 = _a.sent();
                            this.alert.addServerFailure(e_1);
                            return [3 /*break*/, 8];
                        case 7:
                            this.loading = false;
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        UserEditModalComponent.prototype.persistLanguage = function (lang) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.translate.saveInLocalStorage(lang);
                    this.userPreferences.set('language', lang);
                    return [2 /*return*/];
                });
            });
        };
        UserEditModalComponent.prototype.updateCredentials = function (password) {
            var newCredentials = {
                password: password,
                user: this.ui.currentUser.value.id,
                tenant: this.client.tenant
            };
            this.auth.updateCredentials(newCredentials);
        };
        UserEditModalComponent.ctorParameters = function () { return [
            { type: modal.BsModalRef },
            { type: client.UserService },
            { type: AppStateService },
            { type: client.BasicAuth },
            { type: client.FetchClient },
            { type: AlertService },
            { type: TranslateService },
            { type: UserPreferencesService },
            { type: modal.BsModalService }
        ]; };
        UserEditModalComponent = __decorate([
            core.Component({
                selector: 'c8y-user-edit-modal',
                template: "<c8y-modal\n  [customFooter]=\"true\"\n  [title]=\"'Edit user' | translate\"\n  (onDismiss)=\"onDismiss()\"\n>\n  <c8y-user-edit\n    [lang]=\"lang\"\n    [user]=\"ui.currentUser | async\"\n    [loading]=\"loading\"\n    (onLanguage)=\"onLanguage($event)\"\n    (onUser)=\"updateAndClose($event)\"\n    (onCancel)=\"onDismiss()\"\n  >\n  </c8y-user-edit>\n</c8y-modal>"
            })
        ], UserEditModalComponent);
        return UserEditModalComponent;
    }());


    (function (LoginViews) {
        LoginViews[LoginViews["None"] = 0] = "None";
        LoginViews[LoginViews["Credentials"] = 1] = "Credentials";
        LoginViews[LoginViews["RecoverPassword"] = 2] = "RecoverPassword";
        LoginViews[LoginViews["SmsChallenge"] = 3] = "SmsChallenge";
        LoginViews[LoginViews["ChangePassword"] = 4] = "ChangePassword";
        LoginViews[LoginViews["TotpChallenge"] = 5] = "TotpChallenge";
        LoginViews[LoginViews["TotpSetup"] = 6] = "TotpSetup";
    })(exports.LoginViews || (exports.LoginViews = {}));

    /**
     * Service to manage the login.
     */
    var LoginService = /** @class */ (function () {
        function LoginService(client, basicAuth, cookieAuth, ui, user, tenant, realtime, alert, api, tenantLoginOptionsService, location) {
            this.client = client;
            this.basicAuth = basicAuth;
            this.cookieAuth = cookieAuth;
            this.ui = ui;
            this.user = user;
            this.tenant = tenant;
            this.realtime = realtime;
            this.alert = alert;
            this.api = api;
            this.tenantLoginOptionsService = tenantLoginOptionsService;
            this.location = location;
            this.rememberMe = false;
            this.TOKEN_KEY = '_tcy8';
            this.TFATOKEN_KEY = 'TFAToken';
            this.OAUTH2_INTERNAL_TYPE = 'OAUTH2_INTERNAL';
            this.isFirstLogin = true;
            this.GREEN_MIN_LENGTH_DEFAULT = 8;
            // tslint:disable:max-line-length
            this.ERROR_MESSAGES = {
                minlength: gettext('Password must have at least 8 characters and no more than 32.'),
                password_missmatch: gettext('Password confirmation does not match.'),
                maxlength: gettext('Password must have at least 8 characters and no more than 32.'),
                password_strength: gettext('Your password is not strong enough. Please include numbers, lower and upper case characters'),
                remote_error: gettext('Server error occurred.'),
                email: gettext('Invalid email address.'),
                password_change: gettext('Your password is expired. Please set a new password.'),
                password_reset_token_expired: gettext('Password reset link expired. Please enter your email address to receive a new one.'),
                tfa_pin_invalid: gettext('The code you entered is invalid. Please try again.'),
                pattern_phonenumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
                pattern_newPassword: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
                international_number_required: gettext('International phone number required, in the format +49 9 876 543 210.'),
                phone_number_error: gettext('Could not update phone number.'),
                pinAlreadySent: gettext('The verification code was already sent. For a new verification code, please click on the link above.'),
                passwordConfirm: gettext('Password confirmation does not match.'),
                tfaExpired: gettext('Two-factor authentication token expired.')
            };
            // tslint:enable:max-line-length
            this.SUCCESS_MESSAGES = {
                password_changed: gettext('Password changed. You can now log in using new password.'),
                password_reset_requested: gettext('Password reset request has been sent. Please check your email.'),
                resend_sms: gettext('Verification code SMS resent.')
            };
            this.passwordStrengthSetting = {
                enforcePasswordStrength: false,
                greenMinLength: this.GREEN_MIN_LENGTH_DEFAULT
            };
            this.localhostRegExp = new RegExp('localhost');
            this.localhostIpRegExp = new RegExp('127.0.0.1');
            this.showTenantRegExp = new RegExp('showTenant');
            this.autoLogout();
            this.initLoginOptions();
        }
        /**
         * Returns the current tenant.
         * @return The tenant name.
         */
        LoginService.prototype.getTenant = function () {
            return this.client.tenant;
        };
        LoginService.prototype.initLoginOptions = function () {
            var loginOptions = this.ui.state.loginOptions || [];
            var isOAuth2 = function (_a) {
                var type = _a.type, grantType = _a.grantType;
                return type === 'OAUTH2' && grantType === 'AUTHORIZATION_CODE';
            };
            this.loginMode = loginOptions.find(function (_a) {
                var type = _a.type;
                return type === 'OAUTH2_INTERNAL';
            }) ||
                loginOptions.find(function (_a) {
                    var type = _a.type;
                    return type === 'BASIC';
                }) ||
                loginOptions.find(isOAuth2) || { type: 'BASIC' };
            this.oauthOptions = loginOptions.find(isOAuth2) || {};
        };
        LoginService.prototype.redirectToOauth = function () {
            var initRequest = this.oauthOptions.initRequest;
            var fullPath = (this.location ? this.location._platformLocation : window).location
                .href;
            var redirectUrl = encodeURIComponent(fullPath);
            var originUriParam = (initRequest.includes('?') ? '&' : '?') + "originUri=" + redirectUrl;
            window.location.href = "" + initRequest + originUriParam;
        };
        LoginService.prototype.autoLogout = function () {
            var _this = this;
            var errorPattern = /invalid\scredentials.*pin.*generate/i;
            var isTfaExpired = function (data) {
                return data && typeof data.message === 'string' && errorPattern.test(data.message);
            };
            this.ui.currentUser
                .pipe(operators.switchMap(function (u) {
                return u ? _this.api.hookResponse(function (_a) {
                    var response = _a.response;
                    return response.status === 401;
                }) : rxjs.EMPTY;
            }))
                .subscribe(function (apiCall) { return __awaiter(_this, void 0, void 0, function () {
                var response, willLogout, data;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            response = apiCall.response;
                            willLogout = false;
                            if (!isTfaExpired(response.data)) return [3 /*break*/, 1];
                            willLogout = true;
                            return [3 /*break*/, 3];
                        case 1:
                            if (!(typeof response.json === 'function')) return [3 /*break*/, 3];
                            return [4 /*yield*/, response.clone().json()];
                        case 2:
                            data = _a.sent();
                            if (isTfaExpired(data)) {
                                willLogout = true;
                            }
                            _a.label = 3;
                        case 3:
                            if (willLogout) {
                                this.logout(false);
                                setTimeout(function () { return _this.alert.danger(_this.ERROR_MESSAGES.tfaExpired); }, 500);
                            }
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        /**
         * Gets the minimal number of characters that a password should have to be considered a “green” strong one.
         * @return The min length for password or default value.
         */
        LoginService.prototype.getGreenMinLength = function () {
            var loginOption = this.getLoginOption();
            var greenMinLength = Number(lodashEs.get(loginOption, 'greenMinLength'));
            this.passwordStrengthSetting.greenMinLength = isNaN(greenMinLength) ? this.GREEN_MIN_LENGTH_DEFAULT : greenMinLength;
            return this.passwordStrengthSetting.greenMinLength;
        };
        /**
         * Checks if password strength is enforced.
         * @return true if enforced.
         */
        LoginService.prototype.getEnforcePasswordStrength = function () {
            var loginOption = this.getLoginOption();
            this.passwordStrengthSetting.enforcePasswordStrength = lodashEs.get(loginOption, 'enforceStrength', 'false') === 'true' ? true : false;
            return this.passwordStrengthSetting.enforcePasswordStrength;
        };
        /**
         * Clears all backend errors.
         */
        LoginService.prototype.cleanMessages = function () {
            this.alert.clearAll();
        };
        /**
         * Adds a new success message
         * @param successKey The key of the success message as used in SUCCESS_MESSAGES
         */
        LoginService.prototype.addSuccessMessage = function (successKey) {
            var successMessage = this.SUCCESS_MESSAGES[successKey];
            if (successMessage) {
                this.alert.add({
                    text: successMessage,
                    type: 'success',
                    timeout: 0
                });
            }
        };
        /**
         * Returns the current strategy. Defaults to cookie, if a token
         * is found in local or session storage we switch to basic auth.
         * @returns The current auth strategy.
         */
        LoginService.prototype.getAuthStrategy = function () {
            var authStrategy = this.cookieAuth;
            var token = this.getStoredToken();
            var tfa = this.getStoredTfaToken();
            if (token) {
                authStrategy = this.basicAuth;
                this.setCredentials({ token: token, tfa: tfa }, this.basicAuth);
            }
            return authStrategy;
        };
        /**
         * Forces the use of basic auth as strategy with this credentials.
         * @param credentials The credentials to use.
         */
        LoginService.prototype.useBasicAuth = function (credentials) {
            this.setCredentials(credentials, this.basicAuth);
            return this.basicAuth;
        };
        /**
         * Tries to login a user with the given credentials.
         * If successful, the current tenant and user is set. If not an error
         * is thrown. It also verifies if the user is allowed to open the
         * current app.
         * @param auth The authentication strategy used.
         * @param credentials The credentials to try to login.
         */
        LoginService.prototype.login = function (auth, credentials) {
            if (auth === void 0) { auth = this.getAuthStrategy(); }
            return __awaiter(this, void 0, void 0, function () {
                var tenantRes, tenant, userRes, user, supportUserName, token;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.client.setAuth(auth);
                            return [4 /*yield*/, this.tenant.current()];
                        case 1:
                            tenantRes = _a.sent();
                            tenant = tenantRes.data;
                            return [4 /*yield*/, this.switchLoginMode(credentials)];
                        case 2:
                            if (_a.sent()) {
                                auth = this.cookieAuth;
                            }
                            return [4 /*yield*/, this.user.current()];
                        case 3:
                            userRes = _a.sent();
                            user = userRes.data;
                            return [4 /*yield*/, this.verifyAppAccess()];
                        case 4:
                            _a.sent();
                            supportUserName = this.getSupportUserName(credentials);
                            token = this.setCredentials({
                                tenant: tenant.name,
                                user: (supportUserName ? supportUserName + "$" : '') + user.userName
                            }, auth);
                            if (token) {
                                this.storeBasicAuthToken(token);
                            }
                            return [4 /*yield*/, this.authFulfilled(tenant, user, supportUserName)];
                        case 5:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Saves tenant, user and support user info to the app state.
         * @param tenant The current tenant object.
         * @param user The current user object.
         * @param supportUserName The current support user name.
         */
        LoginService.prototype.authFulfilled = function (tenant, user, supportUserName) {
            return __awaiter(this, void 0, void 0, function () {
                var data, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!tenant) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.tenant.current()];
                        case 1:
                            data = (_a.sent()).data;
                            tenant = data;
                            this.client.tenant = tenant.name;
                            _a.label = 2;
                        case 2:
                            if (!!user) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.user.current()];
                        case 3:
                            data = (_a.sent()).data;
                            user = data;
                            _a.label = 4;
                        case 4:
                            if (!supportUserName) {
                                supportUserName = null;
                            }
                            this.ui.setUser({ user: user, supportUserName: supportUserName });
                            this.ui.currentTenant.next(tenant);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Switch the login mode to CookieAuth if the
         * user has configured to use it in loginOptions.
         * @param credentials The credentials for that login
         */
        LoginService.prototype.switchLoginMode = function (credentials) {
            return __awaiter(this, void 0, void 0, function () {
                var isPasswordGrantLogin, params, urlParams, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            isPasswordGrantLogin = this.isPasswordGrantLogin(credentials);
                            if (!(isPasswordGrantLogin && credentials)) return [3 /*break*/, 2];
                            params = new URLSearchParams({
                                grant_type: 'PASSWORD',
                                username: credentials.user,
                                password: credentials.password,
                                tfa_code: credentials.tfa
                            });
                            urlParams = new URLSearchParams(this.loginMode.initRequest.split('?').pop());
                            credentials.tenant = urlParams.get('tenant_id');
                            return [4 /*yield*/, this.client.fetch("tenant/oauth?" + urlParams.toString(), {
                                    method: 'POST',
                                    body: params.toString(),
                                    headers: {
                                        'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'
                                    }
                                })];
                        case 1:
                            res = _a.sent();
                            if (!res.ok) {
                                throw { res: res };
                            }
                            this.client.setAuth(this.cookieAuth);
                            this.cleanLocalStorage();
                            this.basicAuth.logout();
                            _a.label = 2;
                        case 2: return [2 /*return*/, isPasswordGrantLogin];
                    }
                });
            });
        };
        LoginService.prototype.isPasswordGrantLogin = function (credentials) {
            var isSupportUser = credentials && credentials.user.includes('$');
            return !!(!isSupportUser &&
                this.loginMode &&
                this.loginMode.type === this.OAUTH2_INTERNAL_TYPE);
        };
        /**
         * Verifies if the tenant input field should be shown
         * or not.
         * @returns If true, show the tenant input.
         */
        LoginService.prototype.showTenant = function () {
            return !this.ui.state.loginOptions || this.isLocal() || this.isShowTenant();
        };
        /**
         * Logs the user out
         * @param reload If set to false, the page will not reload
         */
        LoginService.prototype.logout = function (reload) {
            if (reload === void 0) { reload = true; }
            return __awaiter(this, void 0, void 0, function () {
                var resData, _a, basicRes, cookieRes, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            resData = null;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 4, 5, 6]);
                            return [4 /*yield*/, this.reset()];
                        case 2:
                            _a = __read.apply(void 0, [_b.sent(), 2]), basicRes = _a[0], cookieRes = _a[1];
                            return [4 /*yield*/, cookieRes.json()];
                        case 3:
                            resData = _b.sent();
                            return [3 /*break*/, 6];
                        case 4:
                            ex_1 = _b.sent();
                            this.alert.removeLastDanger();
                            return [3 /*break*/, 6];
                        case 5:
                            if (resData && resData.url) {
                                this.redirect(resData.url);
                            }
                            else if (reload) {
                                window.location.reload();
                            }
                            return [7 /*endfinally*/];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Resets the stored auth-data
         */
        LoginService.prototype.reset = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.cleanLocalStorage();
                    this.cleanSessionStorage();
                    this.realtime.disconnect();
                    this.ui.currentUser.next(null);
                    return [2 /*return*/, Promise.all([this.basicAuth.logout(), this.cookieAuth.logout()])];
                });
            });
        };
        /**
         * Saves the TFA token to local or session storage.
         * @param tfaToken The tfa token to save.
         * @param storage The storage to use (local or session).
         */
        LoginService.prototype.saveTFAToken = function (tfaToken, storage) {
            storage.setItem(this.TFATOKEN_KEY, tfaToken);
        };
        /**
         * Request the manifest -> on 401 user has no access to that application
         * and we throw the error up to the login form.
         */
        LoginService.prototype.verifyAppAccess = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.ui.loadManifest()];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_2 = _a.sent();
                            if (!(ex_2.res && ex_2.res.status === 404 && this.isLocal())) {
                                throw ex_2;
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Sets the tenant to the client and updates the credentials on the
         * auth strategy.
         * @param credentials The name of the tenant.
         * @param authStrategy The authentication strategy used.
         * @return Returns the token if basic auth, otherwise undefined.
         */
        LoginService.prototype.setCredentials = function (credentials, authStrategy) {
            if (credentials.tenant) {
                this.client.tenant = credentials.tenant;
            }
            // Check if a token is already set (case for support user login)
            // if yes -> we just need to update the user, and reuse the token
            // of the support user.
            // Therefore we need to pass user and tenant, to get
            // just the stored token and nothing else (see BasicAuth.ts:31).
            var token = this.basicAuth.updateCredentials({
                tenant: credentials.tenant,
                user: credentials.user
            });
            var newCredentials = __assign({ token: token }, credentials);
            return authStrategy.updateCredentials(newCredentials);
        };
        /**
         * Verifies if the current user is a developer or not.
         * Running on localhost means development mode.
         */
        LoginService.prototype.isLocal = function () {
            var hostname = window.location.hostname;
            return this.localhostIpRegExp.test(hostname) || this.localhostRegExp.test(hostname);
        };
        /**
         * Save the token to local or session storage.
         * @param token The token to save.
         * @param storage The storage to use (local or session).
         */
        LoginService.prototype.saveToken = function (token, storage) {
            storage.setItem(this.TOKEN_KEY, token);
        };
        LoginService.prototype.storeBasicAuthToken = function (token) {
            this.saveToken(token, sessionStorage);
            if (this.rememberMe) {
                this.saveToken(token, localStorage);
            }
        };
        LoginService.prototype.cleanLocalStorage = function () {
            localStorage.removeItem(this.TOKEN_KEY);
            localStorage.removeItem(this.TFATOKEN_KEY);
        };
        LoginService.prototype.cleanSessionStorage = function () {
            sessionStorage.removeItem(this.TOKEN_KEY);
            sessionStorage.removeItem(this.TFATOKEN_KEY);
        };
        LoginService.prototype.isShowTenant = function () {
            return this.showTenantRegExp.test(window.location.href);
        };
        LoginService.prototype.redirect = function (url) {
            window.location.href = url;
        };
        LoginService.prototype.getLoginOption = function () {
            var loginOptions = this.ui.state.loginOptions || [];
            var _a = __read(loginOptions, 1), loginOption = _a[0];
            return loginOption;
        };
        /**
         * Gets support user name from credentials.
         * @param credentials Credentials object (defaults to the stored one).
         * @returns Support user name.
         */
        LoginService.prototype.getSupportUserName = function (credentials) {
            if (credentials === void 0) { credentials = this.getStoredCredentials(); }
            if (!credentials) {
                return null;
            }
            var supportUserName = credentials.user.match(/^(.+\/)?((.+)\$)?(.+)?$/)[3];
            return supportUserName;
        };
        /**
         * Gets credentials object from the stored token.
         * @returns Credentials object.
         */
        LoginService.prototype.getStoredCredentials = function () {
            var token = this.getStoredToken();
            if (!token) {
                return null;
            }
            return this.decodeToken(token);
        };
        /**
         * Gets stored token from local storage or session storage.
         * @returns Stored token.
         */
        LoginService.prototype.getStoredToken = function () {
            return localStorage.getItem(this.TOKEN_KEY) || sessionStorage.getItem(this.TOKEN_KEY);
        };
        /**
         * Gets stored TFA token from local storage or session storage.
         * @returns Stored TFA token.
         */
        LoginService.prototype.getStoredTfaToken = function () {
            return localStorage.getItem(this.TFATOKEN_KEY) || sessionStorage.getItem(this.TFATOKEN_KEY);
        };
        /**
         * Decodes token to credentials object.
         * @param token Token to decode.
         * @returns Credentials object.
         */
        LoginService.prototype.decodeToken = function (token) {
            var decoded = decodeURIComponent(escape(window.atob(token)));
            var split = decoded.match(/(([^/]*)\/)?([^/:]+):(.+)/);
            return {
                tenant: split[2],
                user: split[3],
                password: split[4]
            };
        };
        LoginService.ctorParameters = function () { return [
            { type: client.FetchClient },
            { type: client.BasicAuth },
            { type: client.CookieAuth },
            { type: AppStateService },
            { type: client.UserService },
            { type: client.TenantService },
            { type: client.Realtime },
            { type: AlertService },
            { type: api.ApiService },
            { type: client.TenantLoginOptionsService },
            { type: common.LocationStrategy, decorators: [{ type: core.Optional }] }
        ]; };
        LoginService = __decorate([
            core.Injectable(),
            __param(10, core.Optional())
        ], LoginService);
        return LoginService;
    }());

    var PasswordConfirmModalComponent = /** @class */ (function () {
        function PasswordConfirmModalComponent(user, ui, client, alert, loginService) {
            this.user = user;
            this.ui = ui;
            this.client = client;
            this.alert = alert;
            this.loginService = loginService;
            this.passwordConfirmedEmitter = new core.EventEmitter();
            this.loading = false;
        }
        PasswordConfirmModalComponent.prototype.passwordConfirm = function () {
            return __awaiter(this, void 0, void 0, function () {
                var supportUserName, userId, credentials, strategy, newClient, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.password) return [3 /*break*/, 5];
                            supportUserName = this.ui.currentSupportUserName.value;
                            userId = this.ui.currentUser.value.id;
                            credentials = {
                                password: this.password,
                                user: "" + (supportUserName ? supportUserName + "$" : '') + userId,
                                tenant: this.client.tenant
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            this.loading = true;
                            strategy = lodashEs.clone(this.loginService.useBasicAuth({}));
                            delete credentials.tfa;
                            strategy.updateCredentials(credentials);
                            newClient = this.createNewClient(strategy, this.client.baseUrl);
                            return [4 /*yield*/, newClient.user.current()];
                        case 2:
                            _a.sent();
                            this.emitSuccessAndClose();
                            return [3 /*break*/, 5];
                        case 3:
                            e_1 = _a.sent();
                            if (e_1.res && e_1.res.status === 401 && e_1.data && /pin|totp/i.test(e_1.data.message)) {
                                this.emitSuccessAndClose();
                            }
                            else {
                                this.alert.danger(gettext("Provided password doesn't match your current one."));
                            }
                            return [3 /*break*/, 5];
                        case 4:
                            this.loading = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        PasswordConfirmModalComponent.prototype.cancel = function () {
            this.passwordConfirmedEmitter.emit(false);
            this.modal._dismiss();
        };
        PasswordConfirmModalComponent.prototype.createNewClient = function (strategy, baseUrl) {
            return new client.Client(strategy, baseUrl);
        };
        PasswordConfirmModalComponent.prototype.emitSuccessAndClose = function () {
            this.passwordConfirmedEmitter.emit(true);
            this.modal._dismiss();
        };
        PasswordConfirmModalComponent.ctorParameters = function () { return [
            { type: client.UserService },
            { type: AppStateService },
            { type: client.FetchClient },
            { type: AlertService },
            { type: LoginService }
        ]; };
        __decorate([
            core.Output()
        ], PasswordConfirmModalComponent.prototype, "passwordConfirmedEmitter", void 0);
        __decorate([
            core.ViewChild('modal', { static: false })
        ], PasswordConfirmModalComponent.prototype, "modal", void 0);
        PasswordConfirmModalComponent = __decorate([
            core.Component({
                selector: 'c8y-password-confirm-modal',
                template: "<c8y-modal [customFooter]=\"true\" [title]=\"'Confirm password' | translate\" #modal>\r\n  <form #confirmForm=\"ngForm\" (ngSubmit)=\"confirmForm.form.valid && passwordConfirm()\">\r\n    <c8y-form-group>\r\n      <label translate for=\"currentPassword\">Current password</label>\r\n      <input\r\n        id=\"currentPassword\"\r\n        [(ngModel)]=\"password\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"{{ 'Current password' | translate }}\"\r\n        required\r\n      />\r\n    </c8y-form-group>\r\n\r\n    <div class=\"modal-footer\">\r\n      <button\r\n        title=\"{{ 'Cancel' | translate }}\"\r\n        class=\"btn btn-default\"\r\n        type=\"button\"\r\n        (click)=\"cancel()\"\r\n        translate\r\n      >\r\n        Cancel\r\n      </button>\r\n      <button\r\n        title=\"{{ 'Save' | translate }}\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n        [disabled]=\"!confirmForm.form.valid || loading\"\r\n        translate\r\n      >\r\n        Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</c8y-modal>\r\n"
            })
        ], PasswordConfirmModalComponent);
        return PasswordConfirmModalComponent;
    }());

    var PasswordService = /** @class */ (function () {
        function PasswordService(modalService) {
            this.modalService = modalService;
            this.GREEN = {
                colorName: 'green',
                color: 'rgb(0, 128, 0)',
                description: gettext('strong'),
                passwordStrength: client.PasswordStrength.GREEN
            };
            this.YELLOW = {
                colorName: 'yellow',
                color: 'rgb(255, 204, 51)',
                description: gettext('medium'),
                passwordStrength: client.PasswordStrength.YELLOW
            };
            this.RED = {
                colorName: 'red',
                color: 'rgb(170, 0, 51)',
                description: gettext('weak'),
                passwordStrength: client.PasswordStrength.RED
            };
        }
        PasswordService.prototype.confirmPassword = function () {
            var modalInstance = this.modalService.show(PasswordConfirmModalComponent);
            return modalInstance.content.passwordConfirmedEmitter.pipe(operators.take(1));
        };
        PasswordService.prototype.hasLowerCase = function (password) {
            return (password.search(/[a-z]/) !== -1);
        };
        PasswordService.prototype.hasUpperCase = function (password) {
            return (password.search(/[A-Z]/) !== -1);
        };
        PasswordService.prototype.hasNumbers = function (password) {
            return (password.search(/[0-9]/) !== -1);
        };
        PasswordService.prototype.hasSpecialChars = function (password) {
            return (password.search(/[^0-9a-zA-Z]+/) !== -1);
        };
        PasswordService.prototype.getStrengthColor = function (password) {
            var passwordStrength = lodashEs.filter([
                this.hasLowerCase(password),
                this.hasUpperCase(password),
                this.hasNumbers(password),
                this.hasSpecialChars(password)
            ]).length;
            if (passwordStrength > 2) {
                return this.GREEN;
            }
            else if (passwordStrength >= 2) {
                return this.YELLOW;
            }
            else {
                return this.RED;
            }
        };
        PasswordService.ctorParameters = function () { return [
            { type: modal.BsModalService }
        ]; };
        PasswordService = __decorate([
            core.Injectable()
        ], PasswordService);
        return PasswordService;
    }());

    var UserTotpSetupComponent = /** @class */ (function () {
        function UserTotpSetupComponent(user, modalService, modal, loginService) {
            this.user = user;
            this.modalService = modalService;
            this.modal = modal;
            this.loginService = loginService;
        }
        UserTotpSetupComponent.prototype.totpSetupVerified = function (token) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.user.activateTotp()];
                        case 1:
                            _a.sent();
                            this.modal.hide();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 5, , 6]);
                            return [4 /*yield*/, this.modalService.acknowledge(gettext('Logout required'), gettext('You must log out in order to apply your changes'), exports.Status.WARNING, gettext('Log out'))];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.logout()];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        UserTotpSetupComponent.prototype.close = function () {
            this.modal.hide();
        };
        UserTotpSetupComponent.ctorParameters = function () { return [
            { type: client.UserService },
            { type: ModalService },
            { type: modal.BsModalRef },
            { type: LoginService }
        ]; };
        UserTotpSetupComponent = __decorate([
            core.Component({
                selector: 'c8y-user-totp-setup',
                template: "<c8y-modal [customFooter]=\"true\">\n  <ng-container c8y-modal-title>\n    <button\n      title=\"{{ 'Close' | translate }}\"\n      (click)=\"close()\"\n      type=\"button\"\n      class=\"close\"\n    ><span aria-hidden=\"true\">\u00D7</span></button>\n    <h3 class=\"text-center\" translate>Set up two-factor authentication</h3>\n  </ng-container>\n  <c8y-totp-setup></c8y-totp-setup>\n  <c8y-totp-challenge (onSuccess)=\"totpSetupVerified($event)\"></c8y-totp-challenge>\n</c8y-modal>\n"
            })
        ], UserTotpSetupComponent);
        return UserTotpSetupComponent;
    }());

    var UserEditComponent = /** @class */ (function () {
        function UserEditComponent(state, translate, passwordService, modalConfirmService, bsModalService, alert, userService, tenantLoginOptionsService) {
            this.state = state;
            this.translate = translate;
            this.passwordService = passwordService;
            this.modalConfirmService = modalConfirmService;
            this.bsModalService = bsModalService;
            this.alert = alert;
            this.userService = userService;
            this.tenantLoginOptionsService = tenantLoginOptionsService;
            this.loading = false;
            this.onUser = new core.EventEmitter();
            this.onLanguage = new core.EventEmitter();
            this.onCancel = new core.EventEmitter();
            this.userHasActiveTotp = false;
            this.userCanSetupTotp = false;
        }
        Object.defineProperty(UserEditComponent.prototype, "user", {
            get: function () { return this._user; },
            set: function (u) {
                this._user = lodashEs.clone(u);
                this.userIsExternal = u.customProperties.userOrigin === 'OAUTH2';
            },
            enumerable: true,
            configurable: true
        });
        UserEditComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.initializeTotpSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(UserEditComponent.prototype, "langs", {
            get: function () {
                return this.state.state.langs;
            },
            enumerable: true,
            configurable: true
        });
        UserEditComponent.prototype.setupTotp = function () {
            this.bsModalService.show(UserTotpSetupComponent, { class: 'modal-sm' });
            this.cancel(); // to close the user edit modal and prevent console errors on logout
        };
        UserEditComponent.prototype.cancel = function () {
            this.onCancel.emit();
        };
        UserEditComponent.prototype.save = function () {
            if (!this.loading) {
                this._user.password ? this.saveAfterPasswordConfirmation() : this.onUser.emit(this._user);
            }
        };
        UserEditComponent.prototype.onNewPasswordChanged = function (newPassword) {
            this._user.password = newPassword.password;
        };
        UserEditComponent.prototype.initializeTotpSettings = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, totpActivity, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 4, , 5]);
                            _a = this;
                            return [4 /*yield*/, this.canUserSetupTotp()];
                        case 1:
                            _a.userCanSetupTotp = _b.sent();
                            if (!this.userCanSetupTotp) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.userService.getActivityTotp()];
                        case 2:
                            totpActivity = (_b.sent()).data;
                            this.userHasActiveTotp = totpActivity.isActive;
                            _b.label = 3;
                        case 3: return [3 /*break*/, 5];
                        case 4:
                            ex_1 = _b.sent();
                            this.alert.removeLastDanger();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        UserEditComponent.prototype.canUserSetupTotp = function () {
            return __awaiter(this, void 0, void 0, function () {
                var loginOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.tenantLoginOptionsService.detail()];
                        case 1:
                            loginOptions = (_a.sent()).data.loginOptions;
                            return [2 /*return*/, loginOptions.some(function (_a) {
                                    var _b = _a.tfaStrategy, tfaStrategy = _b === void 0 ? '' : _b;
                                    return tfaStrategy.toLowerCase() === 'totp';
                                })];
                    }
                });
            });
        };
        UserEditComponent.prototype.saveAfterPasswordConfirmation = function () {
            var _this = this;
            this.passwordService.confirmPassword().subscribe(function (confirmed) {
                if (confirmed) {
                    _this.onUser.emit(_this._user);
                }
            });
        };
        UserEditComponent.ctorParameters = function () { return [
            { type: AppStateService },
            { type: TranslateService },
            { type: PasswordService },
            { type: ModalService },
            { type: modal.BsModalService },
            { type: AlertService },
            { type: client.UserService },
            { type: client.TenantLoginOptionsService }
        ]; };
        __decorate([
            core.Input()
        ], UserEditComponent.prototype, "lang", void 0);
        __decorate([
            core.Input()
        ], UserEditComponent.prototype, "loading", void 0);
        __decorate([
            core.Input()
        ], UserEditComponent.prototype, "user", null);
        __decorate([
            core.Output()
        ], UserEditComponent.prototype, "onUser", void 0);
        __decorate([
            core.Output()
        ], UserEditComponent.prototype, "onLanguage", void 0);
        __decorate([
            core.Output()
        ], UserEditComponent.prototype, "onCancel", void 0);
        UserEditComponent = __decorate([
            core.Component({
                selector: 'c8y-user-edit',
                template: "<form #userForm=\"ngForm\" (ngSubmit)=\"userForm.form.valid && save()\">\n  <div class=\"alert alert-warning\" role=\"alert\" *ngIf=\"userIsExternal\" translate>\n    You cannot edit the user since it is managed via your authorization server.\n  </div>\n  <c8y-form-group>\n    <label translate for=\"userName\">Username (e.g. email)</label>\n    <input\n      id=\"userName\"\n      class=\"form-control\"\n      [(ngModel)]=\"user.userName\"\n      name=\"userName\"\n      autocomplete=\"off\"\n      required\n      maxlength=\"254\"\n      placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n      [disabled]=\"user.id\"\n      c8yDefaultValidation=\"user\"\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate for=\"displayName\">Login alias</label>\n    <input\n      id=\"displayName\"\n      class=\"form-control\"\n      [(ngModel)]=\"user.displayName\"\n      name=\"displayName\"\n      autocomplete=\"off\"\n      maxlength=\"254\"\n      placeholder=\"{{ 'e.g. joe.doe`LOCALIZE`' | translate }}\"\n      [disabled]=\"userIsExternal\"\n      c8yDefaultValidation=\"loginAlias\"\n    />\n  </c8y-form-group>\n\n  <c8y-form-group [hasWarning]=\"!user.email\">\n    <label translate for=\"userEmail\">Email</label>\n    <input\n      id=\"userEmail\"\n      class=\"form-control\"\n      type=\"email\"\n      name=\"email\"\n      [maxlength]=\"254\"\n      autocomplete=\"off\"\n      placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n      [(ngModel)]=\"user.email\"\n      email\n      [required]=\"user.newsletter\"\n      [disabled]=\"userIsExternal\"\n    />\n    <c8y-messages>\n      <c8y-message *ngIf=\"!user.email\" translate\n        >Note that email is required to reset password.</c8y-message\n      >\n    </c8y-messages>\n  </c8y-form-group>\n\n  <div class=\"row\" style=\"margin-left:-15px; margin-right:-15px\">\n    <div class=\"col-sm-6\">\n      <c8y-form-group>\n        <label translate for=\"userFirstName\">First name</label>\n        <input\n          id=\"userFirstName\"\n          class=\"form-control\"\n          autocomplete=\"off\"\n          maxlength=\"50\"\n          name=\"firstName\"\n          [(ngModel)]=\"user.firstName\"\n          [disabled]=\"userIsExternal\"\n        />\n      </c8y-form-group>\n    </div>\n    <div class=\"col-sm-6\">\n      <c8y-form-group>\n        <label translate for=\"userLastName\">Last name</label>\n        <input\n          class=\"form-control\"\n          autocomplete=\"off\"\n          maxlength=\"50\"\n          name=\"lastName\"\n          [(ngModel)]=\"user.lastName\"\n          [disabled]=\"userIsExternal\"\n        />\n      </c8y-form-group>\n    </div>\n  </div>\n\n  <c8y-form-group>\n    <label translate for=\"userTelephone\">Telephone</label>\n    <input\n      id=\"userTelephone\"\n      class=\"form-control\"\n      autocomplete=\"off\"\n      name=\"phone\"\n      maxlength=\"254\"\n      [(ngModel)]=\"user.phone\"\n      placeholder=\"{{ 'e.g. +49 9 876 543 210`LOCALIZE`' | translate }}\"\n      c8yPhoneValidation\n      c8yDefaultValidation=\"phoneNumber\"\n      [required]=\"user.twoFactorAuthenticationEnabled\"\n      [disabled]=\"userIsExternal\"\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate for=\"userLang\">Language</label>\n    <div class=\"c8y-select-wrapper\">\n      <select\n        id=\"userLang\"\n        class=\"form-control\"\n        #selectLang\n        name=\"lang\"\n        [(ngModel)]=\"lang\"\n        (change)=\"onLanguage.emit(selectLang.value)\"\n        [disabled]=\"userIsExternal\"\n      >\n        <option *ngFor=\"let lang of langs\" [value]=\"lang\">{{\n          translate.getNativeLanguage(lang)\n        }}</option>\n      </select>\n      <span></span>\n    </div>\n  </c8y-form-group>\n\n  <div class=\"form-group\" *ngIf=\"!userIsExternal\">\n    <label class=\"control-label\">{{ 'Login options' | translate }}</label>\n    <c8y-new-password (password)=\"onNewPasswordChanged($event)\"></c8y-new-password>\n    <button\n      title=\"{{ 'Set up two-factor authentication' | translate }}\"\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"setupTotp()\"\n      translate\n      *ngIf=\"userCanSetupTotp && !userHasActiveTotp\"\n    >\n      Set up two-factor authentication\n    </button>\n  </div>\n\n  <c8y-form-group *ngIf=\"!!(state.state$ | async).newsletter\">\n    <label translate>Newsletter</label>\n    <label class=\"c8y-checkbox\">\n      <input\n        type=\"checkbox\"\n        name=\"newsletter\"\n        [(ngModel)]=\"user.newsletter\"\n        [disabled]=\"userIsExternal\"\n      />\n      <span></span>\n      {{ 'Send me information about outages, maintenance or updates.' | translate }}\n    </label>\n  </c8y-form-group>\n\n  <div class=\"modal-footer\">\n    <button\n      title=\"{{ 'Cancel' | translate }}\"\n      class=\"btn btn-default\"\n      type=\"button\"\n      (click)=\"cancel()\"\n      translate\n    >\n      Cancel\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      type=\"submit\"\n      [disabled]=\"!userForm.form.valid || userForm.form.pristine || loading || userIsExternal\"\n      translate\n    >\n      Save\n    </button>\n  </div>\n</form>\n"
            })
        ], UserEditComponent);
        return UserEditComponent;
    }());

    var UserMenuOutletComponent = /** @class */ (function () {
        function UserMenuOutletComponent(ui, bsModalService, modalService, loginService, translateService, tenantService, alertService, user, optionsService) {
            this.ui = ui;
            this.bsModalService = bsModalService;
            this.modalService = modalService;
            this.loginService = loginService;
            this.translateService = translateService;
            this.tenantService = tenantService;
            this.alertService = alertService;
            this.user = user;
            this.optionsService = optionsService;
        }
        UserMenuOutletComponent.prototype.copyIt = function (text) {
            var handler = {
                handleEvent: function (e) {
                    e.clipboardData.setData('text/plain', text);
                    e.preventDefault();
                }
            };
            document.addEventListener('copy', handler);
            var copied;
            try {
                copied = document.execCommand('copy');
            }
            catch (e) {
                copied = false;
            }
            if (copied) {
                this.alertService.addByText('success', gettext('Copied to clipboard.'));
            }
            else {
                this.alertService.addByText('danger', gettext('Could not copy to clipboard.'));
            }
            document.removeEventListener('copy', handler);
        };
        UserMenuOutletComponent.prototype.editUser = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.bsModalService.show(UserEditModalComponent);
                    return [2 /*return*/];
                });
            });
        };
        UserMenuOutletComponent.prototype.logout = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loginService.logout()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        UserMenuOutletComponent.prototype.activateSupportAccess = function () {
            return __awaiter(this, void 0, void 0, function () {
                var title, companyName, textWithCompany, textWithoutCompany, finalQuestion, body, labels, successMsg, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            title = gettext('Activate support user access');
                            companyName = this.optionsService.get('companyName', 'Cumulocity');
                            textWithCompany = gettext(
                            // tslint:disable-next-line:max-line-length
                            'You are about to allow a support user from {{companyName}} to access your tenant to help you with your issue.');
                            textWithoutCompany = gettext(
                            // tslint:disable-next-line:max-line-length
                            'You are about to allow a support user to access your tenant to help you with your issue.');
                            finalQuestion = gettext('Do you want to proceed?');
                            body = [
                                this.translateService.instant(companyName ? textWithCompany : textWithoutCompany, {
                                    companyName: companyName
                                }),
                                this.translateService.instant(finalQuestion)
                            ].join(' ');
                            labels = {
                                ok: gettext('Activate access'),
                                cancel: gettext('Cancel')
                            };
                            successMsg = gettext('Support user access activated.');
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, this.modalService.confirm(title, body, exports.Status.DANGER, labels)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.tenantService.enableSupportUser()];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.refreshCurrentUser()];
                        case 4:
                            _a.sent();
                            this.alertService.success(successMsg);
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        UserMenuOutletComponent.prototype.deactivateSupportAccess = function () {
            return __awaiter(this, void 0, void 0, function () {
                var title, companyName, textWithCompany, textWithoutCompany, currentUser, isTenantAdmin, tenantAdminNote, finalQuestion, body, labels, successMsg, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            title = gettext('Deactivate support user access');
                            companyName = this.optionsService.get('companyName', 'Cumulocity');
                            textWithCompany = gettext(
                            // tslint:disable-next-line:max-line-length
                            'You are about to block a support user from {{companyName}} from accessing your tenant to help you with your issue.');
                            textWithoutCompany = gettext(
                            // tslint:disable-next-line:max-line-length
                            'You are about to block a support user from accessing your tenant to help you with your issue.');
                            return [4 /*yield*/, this.user.current()];
                        case 1:
                            currentUser = (_a.sent()).data;
                            return [4 /*yield*/, this.user.hasRole(currentUser, 'ROLE_TENANT_ADMIN')];
                        case 2:
                            isTenantAdmin = _a.sent();
                            tenantAdminNote = gettext(
                            // tslint:disable-next-line:max-line-length
                            'Deactivating support access as tenant admin will disable all other support requests on your tenant.');
                            finalQuestion = gettext('Do you want to proceed?');
                            body = [
                                this.translateService.instant(companyName ? textWithCompany : textWithoutCompany, {
                                    companyName: companyName
                                }),
                                isTenantAdmin ? this.translateService.instant(tenantAdminNote) : '',
                                this.translateService.instant(finalQuestion)
                            ]
                                .filter(Boolean)
                                .join(' ');
                            labels = {
                                ok: gettext('Deactivate access'),
                                cancel: gettext('Cancel')
                            };
                            successMsg = gettext('Support user access deactivated.');
                            _a.label = 3;
                        case 3:
                            _a.trys.push([3, 7, , 8]);
                            return [4 /*yield*/, this.modalService.confirm(title, body, exports.Status.DANGER, labels)];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, this.tenantService.disableSupportUser()];
                        case 5:
                            _a.sent();
                            return [4 /*yield*/, this.refreshCurrentUser()];
                        case 6:
                            _a.sent();
                            this.alertService.success(successMsg);
                            return [3 /*break*/, 8];
                        case 7:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 8];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        UserMenuOutletComponent.prototype.getSortedItems = function () {
            return lodashEs.sortBy(Array.from(this.items), this.byPriority);
        };
        UserMenuOutletComponent.prototype.refreshCurrentUser = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentUserResult;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.user.current()];
                        case 1:
                            currentUserResult = _a.sent();
                            this.ui.currentUser.next(currentUserResult.data);
                            return [2 /*return*/];
                    }
                });
            });
        };
        UserMenuOutletComponent.prototype.byPriority = function (item) {
            return -item.priority;
        };
        UserMenuOutletComponent.ctorParameters = function () { return [
            { type: AppStateService },
            { type: modal.BsModalService },
            { type: ModalService },
            { type: LoginService },
            { type: core$1.TranslateService },
            { type: client.TenantService },
            { type: AlertService },
            { type: client.UserService },
            { type: OptionsService }
        ]; };
        __decorate([
            core.Input()
        ], UserMenuOutletComponent.prototype, "items", void 0);
        UserMenuOutletComponent = __decorate([
            core.Component({
                selector: 'c8y-user-menu-outlet',
                template: "<div\n  dropdown\n  class=\"dropdown\"\n>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle\"\n    dropdownToggle\n    style=\"white-space: nowrap\"\n  >\n    <span\n      class=\"hidden-xs text-truncate right-m\"\n      style=\"vertical-align: text-bottom; max-width: 104px; display: inline-block\"\n      title=\"{{ui.currentUser | async | shortenUserName}}\"\n    >\n      {{ui.currentUser | async | shortenUserName}}\n    </span>\n    <i\n      [c8yIcon]=\"'c8y-user'\"\n      class=\"fa-2x\"\n    ></i>\n  </button>\n  <ul\n    *dropdownMenu\n    class=\"dropdown-menu dropdown-menu-right\"\n    style=\"max-width: 240px;\"\n  >\n    <ng-container *ngFor=\"let item of getSortedItems()\">\n      <ng-container *ngIf=\"item.template\">\n        <ng-container *c8yOutlet=\"item.template\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!item.template\">\n        <li (click)=\"item.click()\">\n          <a style=\"cursor: pointer\" [attr.href]=\"item.link\" [attr.target]=\"item.target\">\n            <i [c8yIcon]=\"item.icon\"></i>\n            {{item.label | translate}}\n          </a>\n        </li>\n      </ng-container>\n    </ng-container>\n    <li\n      *ngIf=\"!(ui.state$ | async).hidePowered\"\n      role=\"separator\"\n      class=\"divider\"\n    ></li>\n    <li\n      class=\"dropdown-header bg-gray-white\"\n      style=\"white-space: normal; margin-top: -1px;\"\n      *ngIf=\"!(ui.state$ | async).hidePowered\"\n    >\n      <div class=\"flex-row\">\n        <i\n          [c8yIcon]=\"'info-circle'\"\n          class=\"text-info flex-item-v-start\"\n          style=\"margin: 1px 6px 0 -3px; font-size: 14px;\"\n        ></i>\n        <span class=\"text-muted text-truncate\">\n          {{'Tenant ID' | translate}}: <strong>\n            <span class=\"text-primary\" (click)=\"$event.stopPropagation(); copyIt(ui.currentTenant.value.name)\"\n              style=\"cursor: pointer\">\n              {{ui.currentTenant.value.name}}&nbsp;<i [c8yIcon]=\"'clipboard'\"></i></span>\n            </strong><br>\n          {{'Backend' | translate}}: <strong>{{(ui.state$ | async).versions.backend}}</strong><br>\n          {{'UI' | translate }}: <strong>{{ui.uiVersion}}</strong>\n        </span>\n      </div>\n    </li>\n  </ul>\n</div>\n\n<!-- the default items -->\n<c8y-user-menu-item\n  [icon]=\"'user'\"\n  [label]=\"'User settings' | translate\"\n  [priority]=\"20\"\n  (click)=\"editUser()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  [icon]=\"'sign-out'\"\n  [label]=\"'Logout' | translate\"\n  (click)=\"logout()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"!(ui.currentUser | async).supportUserEnabled && ((ui.state$ | async).activateSupportUserAvailable)\"\n  [icon]=\"'phone'\"\n  [label]=\"'Activate support' | translate\"\n  (click)=\"activateSupportAccess()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"(ui.currentUser | async).supportUserEnabled && ((ui.state$ | async).activateSupportUserAvailable)\"\n  [icon]=\"'phone'\"\n  [label]=\"'Deactivate support' | translate\"\n  (click)=\"deactivateSupportAccess()\"\n></c8y-user-menu-item>\n<c8y-user-menu-item\n  *ngIf=\"(ui.state$ | async).supportUrl\"\n  [icon]=\"'question-circle'\"\n  [link]=\"(ui.state$ | async).supportUrl\"\n  [target]=\"'_blank'\"\n  [label]=\"'Request support' | translate\"\n></c8y-user-menu-item>\n"
            })
        ], UserMenuOutletComponent);
        return UserMenuOutletComponent;
    }());

    var PasswordCheckListComponent = /** @class */ (function () {
        function PasswordCheckListComponent(loginService, passwordStrengthChecker) {
            var _this = this;
            this.loginService = loginService;
            this.passwordStrengthChecker = passwordStrengthChecker;
            this.minGreenLength = 0;
            this.checklist = [
                {
                    label: gettext('Include lowercase characters (e.g. abcdef)'),
                    check: this.passwordStrengthChecker.hasLowerCase,
                    icon: '',
                    contextualColor: ''
                },
                {
                    label: gettext('Include uppercase characters (e.g. ABCDEF)'),
                    check: this.passwordStrengthChecker.hasUpperCase,
                    icon: '',
                    contextualColor: ''
                },
                {
                    label: gettext('Include numbers (e.g. 123456)'),
                    check: this.passwordStrengthChecker.hasNumbers,
                    icon: '',
                    contextualColor: ''
                },
                {
                    label: gettext('Include symbols (e.g. !@#$%^)'),
                    check: this.passwordStrengthChecker.hasSpecialChars,
                    icon: '',
                    contextualColor: ''
                },
                {
                    label: gettext('Must have at least {{length}} characters'),
                    check: function (password) { return password.length >= _this.minGreenLength; },
                    icon: '',
                    contextualColor: ''
                }
            ];
        }
        Object.defineProperty(PasswordCheckListComponent.prototype, "password", {
            set: function (password) {
                if (typeof password === 'string') {
                    this.onPasswordChange(password);
                }
            },
            enumerable: true,
            configurable: true
        });
        PasswordCheckListComponent.prototype.ngOnInit = function () {
            this.minGreenLength = this.loginService.getGreenMinLength();
        };
        Object.defineProperty(PasswordCheckListComponent.prototype, "translateParams", {
            get: function () {
                return {
                    length: this.minGreenLength
                };
            },
            enumerable: true,
            configurable: true
        });
        PasswordCheckListComponent.prototype.onPasswordChange = function (password) {
            this.checklist = lodashEs.map(this.checklist, function (requirement) {
                var checked = requirement.check(password);
                lodashEs.assign(requirement, {
                    icon: checked ? 'check' : '',
                    contextualColor: checked ? '' : 'text-muted'
                });
                return requirement;
            });
        };
        PasswordCheckListComponent.ctorParameters = function () { return [
            { type: LoginService },
            { type: PasswordService }
        ]; };
        __decorate([
            core.Input('password')
        ], PasswordCheckListComponent.prototype, "password", null);
        PasswordCheckListComponent = __decorate([
            core.Component({
                selector: 'c8y-password-check-list',
                template: "<div>\n    <span class=\"small\">{{'Please meet 4 out of 5 the conditions below' | translate}}:</span>\n    <ul class=\"list-unstyled\">\n        <li class=\"small\" *ngFor=\"let requirement of checklist\">\n            <i style=\"color:lightgreen;\" [c8yIcon]=\"requirement.icon\"></i>&nbsp;\n            <span\n              [translate]=\"requirement.label\"\n              [translateParams]=\"this.translateParams\"\n              class=\"small {{requirement.contextualColor}}\"\n            ></span>\n        </li>\n    </ul>\n</div>\n"
            })
        ], PasswordCheckListComponent);
        return PasswordCheckListComponent;
    }());

    var PasswordConfirm = /** @class */ (function () {
        function PasswordConfirm(passwordConfirm) {
            this.passwordConfirm = passwordConfirm;
        }
        PasswordConfirm_1 = PasswordConfirm;
        PasswordConfirm.prototype.validate = function (abControl) {
            var value = abControl.value;
            var controlToCompareWith = abControl.root.get(this.passwordConfirm);
            if (controlToCompareWith && value !== controlToCompareWith.value) {
                return { passwordConfirm: true };
            }
            return null;
        };
        var PasswordConfirm_1;
        PasswordConfirm.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Attribute, args: ['passwordConfirm',] }] }
        ]; };
        PasswordConfirm = PasswordConfirm_1 = __decorate([
            core.Directive({
                selector: '[passwordConfirm]',
                providers: [
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: PasswordConfirm_1,
                        multi: true
                    }
                ]
            }),
            __param(0, core.Attribute('passwordConfirm'))
        ], PasswordConfirm);
        return PasswordConfirm;
    }());

    var PasswordStrengthCheckerService = /** @class */ (function () {
        function PasswordStrengthCheckerService() {
            this.GREEN = {
                colorName: 'green',
                color: 'rgb(0, 128, 0)',
                description: gettext('strong'),
                passwordStrength: client.PasswordStrength.GREEN
            };
            this.YELLOW = {
                colorName: 'yellow',
                color: 'rgb(255, 204, 51)',
                description: gettext('medium'),
                passwordStrength: client.PasswordStrength.YELLOW
            };
            this.RED = {
                colorName: 'red',
                color: 'rgb(170, 0, 51)',
                description: gettext('weak'),
                passwordStrength: client.PasswordStrength.RED
            };
        }
        PasswordStrengthCheckerService.prototype.hasLowerCase = function (password) {
            return (password.search(/[a-z]/) !== -1);
        };
        PasswordStrengthCheckerService.prototype.hasUpperCase = function (password) {
            return (password.search(/[A-Z]/) !== -1);
        };
        PasswordStrengthCheckerService.prototype.hasNumbers = function (password) {
            return (password.search(/[0-9]/) !== -1);
        };
        PasswordStrengthCheckerService.prototype.hasSpecialChars = function (password) {
            return (password.search(/[^0-9a-zA-Z]+/) !== -1);
        };
        PasswordStrengthCheckerService.prototype.getStrengthColor = function (password) {
            var passwordStrength = lodashEs.filter([
                this.hasLowerCase(password),
                this.hasUpperCase(password),
                this.hasNumbers(password),
                this.hasSpecialChars(password)
            ]).length;
            if (passwordStrength > 2) {
                return this.GREEN;
            }
            else if (passwordStrength >= 2) {
                return this.YELLOW;
            }
            else {
                return this.RED;
            }
        };
        PasswordStrengthCheckerService = __decorate([
            core.Injectable()
        ], PasswordStrengthCheckerService);
        return PasswordStrengthCheckerService;
    }());

    var PasswordStrengthComponent = /** @class */ (function () {
        function PasswordStrengthComponent(passwordStrengthCheckerService) {
            this.passwordStrengthCheckerService = passwordStrengthCheckerService;
            this.strength = new core.EventEmitter();
            this.password = '';
        }
        Object.defineProperty(PasswordStrengthComponent.prototype, "password", {
            set: function (password) {
                if (typeof password === 'string') {
                    this.model = this.passwordStrengthCheckerService.getStrengthColor(password);
                    this.strength.emit(this.model);
                }
            },
            enumerable: true,
            configurable: true
        });
        PasswordStrengthComponent.ctorParameters = function () { return [
            { type: PasswordService }
        ]; };
        __decorate([
            core.Input('password')
        ], PasswordStrengthComponent.prototype, "password", null);
        __decorate([
            core.Output()
        ], PasswordStrengthComponent.prototype, "strength", void 0);
        PasswordStrengthComponent = __decorate([
            core.Component({
                selector: 'c8y-password-strength',
                template: "<div class=\"password-strength\">\r\n    <span class=\"password-strength-label\" translate>Password strength</span>\r\n    <span class=\"pull-right ng-binding\" [ngStyle]=\"{'color': model.color}\">{{model.description | translate}}</span>\r\n    <div>\r\n        <div class=\"password-{{model.colorName}}\" [ngStyle]=\"{'background-color': model.color}\"></div>\r\n    </div>\r\n</div>"
            })
        ], PasswordStrengthComponent);
        return PasswordStrengthComponent;
    }());

    var NewPasswordComponent = /** @class */ (function () {
        function NewPasswordComponent(systemOptions) {
            this.systemOptions = systemOptions;
            this.password = new core.EventEmitter();
            this.model = {};
            this.enforcePasswordStrength = false;
            this.changePassword = false;
        }
        NewPasswordComponent.prototype.ngOnInit = function () {
            this.loadEnforcePasswordStrength();
        };
        NewPasswordComponent.prototype.newPasswordChanged = function () {
            this.password.emit({
                password: this.model.newPassword,
                passwordStrength: this.model.strength
            });
        };
        NewPasswordComponent.prototype.loadEnforcePasswordStrength = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.systemOptions.detail({
                                    category: 'password',
                                    key: 'enforce.strength'
                                })];
                        case 1:
                            data = (_a.sent()).data;
                            this.enforcePasswordStrength = data.value === 'true';
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        NewPasswordComponent.prototype.toggleChangePassword = function () {
            this.changePassword = !this.changePassword;
            if (!this.changePassword) {
                this.password.emit({});
                this.model = {};
            }
        };
        NewPasswordComponent.ctorParameters = function () { return [
            { type: client.SystemOptionsService }
        ]; };
        __decorate([
            core.Output()
        ], NewPasswordComponent.prototype, "password", void 0);
        NewPasswordComponent = __decorate([
            core.Component({
                selector: 'c8y-new-password',
                template: "<div class=\"form-group\">\n  <button type=\"button\" class=\"btn btn-default\" (click)=\"toggleChangePassword()\">\n    <ng-container *ngIf=\"!changePassword\">\n      {{ 'Change password' | translate }}\n    </ng-container>\n    <ng-container *ngIf=\"changePassword\">\n      {{ 'Cancel password change' | translate }}\n    </ng-container>\n  </button>\n</div>\n\n<div *ngIf=\"changePassword\">\n  <c8y-form-group>\n    <label for=\"newPassword\" translate>Password</label>\n    <input\n      id=\"newPassword\"\n      [(ngModel)]=\"model.newPassword\"\n      #newPassword=\"ngModel\"\n      (change)=\"newPasswordChanged()\"\n      type=\"password\"\n      name=\"newPassword\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g. my_new_password' | translate }}\"\n      required\n      c8yDefaultValidation=\"password\"\n      autocomplete=\"new-password\"\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label for=\"newConfirmPassword\" translate>Confirm password</label>\n    <input\n      id=\"newConfirmPassword\"\n      [(ngModel)]=\"model.newPasswordConfirm\"\n      #newPasswordConfirm=\"ngModel\"\n      type=\"password\"\n      name=\"newPasswordConfirm\"\n      class=\"form-control\"\n      placeholder=\"{{ 'e.g. my_new_password' | translate }}\"\n      required\n      passwordConfirm=\"newPassword\"\n      autocomplete=\"new-password\"\n    />\n  </c8y-form-group>\n\n  <c8y-password-strength\n    [password]=\"model.newPassword\"\n    [hidden]=\"!model.newPassword\"\n    (strength)=\"model.strength = $event\"\n  ></c8y-password-strength>\n\n  <c8y-password-check-list\n    [password]=\"model.newPassword\"\n    [hidden]=\"!enforcePasswordStrength\"\n  ></c8y-password-check-list>\n</div>\n",
                viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
            })
        ], NewPasswordComponent);
        return NewPasswordComponent;
    }());

    var PhoneValidationDirective = /** @class */ (function () {
        function PhoneValidationDirective() {
        }
        PhoneValidationDirective_1 = PhoneValidationDirective;
        PhoneValidationDirective.prototype.validate = function (control) {
            var valid = this.validateInternationalPhoneNumber(control);
            return valid ? null : {
                internationalPhoneNumber: true
            };
        };
        PhoneValidationDirective.prototype.validateInternationalPhoneNumber = function (control) {
            var numberValid;
            try {
                var phoneNumber = max.parsePhoneNumberFromString(control.value);
                numberValid = phoneNumber.isValid();
                if (numberValid && control.value !== phoneNumber.format('E.164')) {
                    control.setValue(phoneNumber.format('E.164'), { emitEvent: false, emitModelToViewChange: false });
                }
            }
            catch (e) {
                numberValid = !control.value;
            }
            return numberValid;
        };
        var PhoneValidationDirective_1;
        PhoneValidationDirective = PhoneValidationDirective_1 = __decorate([
            core.Directive({
                selector: '[c8yPhoneValidation]',
                providers: [{ provide: forms.NG_VALIDATORS, useExisting: PhoneValidationDirective_1, multi: true }]
            })
        ], PhoneValidationDirective);
        return PhoneValidationDirective;
    }());

    // tslint:disable: max-line-length
    // @dynamic
    var ValidationPattern = /** @class */ (function () {
        function ValidationPattern() {
        }
        ValidationPattern.get = function (key) {
            var pattern = this.rules[key];
            return pattern;
        };
        ValidationPattern.messages = {
            deviceId: gettext('Device ID must not contain spaces or slashes ("/").'),
            domain: gettext('Only lowercase letters, digits, hyphens and underscores allowed in the first part of the URI. ' +
                'Must start with a letter; hyphens and underscores only allowed in the middle. Must be a valid URI.'),
            email: gettext('Invalid email address.'),
            internationalPhoneNumber: gettext('International phone number required, in the format +49 9 876 543 210.'),
            loginAlias: gettext('Login alias must not contain slashes ("/", "\\") nor ("+"), (":"), ("$") signs.'),
            max: gettext('Max value: {{ value }}'),
            min: gettext('Min value: {{ value }}'),
            opcuaBrowsePath: gettext('Invalid OPC UA URI.'),
            password: gettext('Password must have at least 8 characters and no more than 32 and can only contain letters, numbers and following symbols: `~!@#$%^&*()_|+-=?;:\'",.<>{}[]\\/'),
            passwordConfirm: gettext('Passwords do not match.'),
            phoneNumber: gettext('Invalid phone number format. Only digits, spaces, slashes ("/") and dashes ("-") allowed.'),
            required: gettext('This field is required.'),
            tenantId: gettext('May contain lowercase letters, digits, hyphens and underscores. ' +
                'Must start with a letter; hyphens and underscores only allowed in the middle; minimum 2 characters.'),
            urlSegment: gettext('Slash, single or double dots and white space not allowed'),
            user: gettext('Username must not contain spaces nor slashes ("/", "\\") nor ("+"), (":"), ("$") signs.')
        };
        ValidationPattern.rules = {
            deviceId: {
                pattern: /^[^\s/]*$/
            },
            domain: {
                pattern: /^[a-z]+[a-z0-9_-]*[a-z0-9]+\.{1}.+$/
            },
            groupName: {
                maxLength: 254
            },
            hostname: {
                pattern: /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9])$/
            },
            ip: {
                pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
            },
            opcuaBrowsePath: {
                pattern: /^(opc.tcp|http|https):\/\/[^ "]+$/
            },
            password: {
                pattern: /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/
            },
            phoneNumber: {
                pattern: /^$|^(\+|0{2})[\d\s/-]{1,30}$/
            },
            tenantId: {
                pattern: /^[a-z]+[a-z0-9_-]*[a-z0-9]+$/
            },
            user: {
                pattern: /^[^\\/\s$:+]*$/
            },
            urlSegment: {
                pattern: /^(([.]{1,2})|([/])+|(([/]*)([.]{1,2})([/]*))|((.*)([/]|[ ]+)(.*))|(\s+))$/
            },
            loginAlias: {
                pattern: /^[^\\/$:+]*$/
            }
        };
        return ValidationPattern;
    }());

    var DefaultValidationDirective = /** @class */ (function () {
        function DefaultValidationDirective() {
            this.c8yDefaultValidation = '';
        }
        DefaultValidationDirective_1 = DefaultValidationDirective;
        DefaultValidationDirective.prototype.validate = function (control) {
            var _a;
            if (!control.value) {
                return null;
            }
            var validation = ValidationPattern.get(this.c8yDefaultValidation);
            if (!validation) {
                throw new Error("Pattern " + this.c8yDefaultValidation + " not found.");
            }
            var valid = true;
            if (validation.pattern) {
                valid = validation.pattern.test(control.value);
            }
            if (validation.maxLength) {
                valid = control.value.length < validation.maxLength;
            }
            if (validation.minLength) {
                valid = control.value.length >= validation.minLength;
            }
            return valid ? null : (_a = {}, _a[this.c8yDefaultValidation] = true, _a);
        };
        var DefaultValidationDirective_1;
        __decorate([
            core.Input()
        ], DefaultValidationDirective.prototype, "c8yDefaultValidation", void 0);
        DefaultValidationDirective = DefaultValidationDirective_1 = __decorate([
            core.Directive({
                selector: '[c8yDefaultValidation]',
                providers: [{ provide: forms.NG_VALIDATORS, useExisting: DefaultValidationDirective_1, multi: true }]
            })
        ], DefaultValidationDirective);
        return DefaultValidationDirective;
    }());

    var MinValidationDirective = /** @class */ (function () {
        function MinValidationDirective() {
            this.min = '';
        }
        MinValidationDirective_1 = MinValidationDirective;
        MinValidationDirective.prototype.validate = function (control) {
            var parsedMin = parseInt(this.min, 10);
            if (lodashEs.isUndefined(control.value) || !this.min) {
                return null;
            }
            var valid = true;
            valid = !(control.value < parsedMin);
            return valid ? null : { min: { value: parsedMin } };
        };
        var MinValidationDirective_1;
        __decorate([
            core.Input()
        ], MinValidationDirective.prototype, "min", void 0);
        MinValidationDirective = MinValidationDirective_1 = __decorate([
            core.Directive({
                selector: '[min]',
                providers: [{ provide: forms.NG_VALIDATORS, useExisting: MinValidationDirective_1, multi: true }]
            })
        ], MinValidationDirective);
        return MinValidationDirective;
    }());

    var MaxValidationDirective = /** @class */ (function () {
        function MaxValidationDirective() {
            this.max = '';
        }
        MaxValidationDirective_1 = MaxValidationDirective;
        MaxValidationDirective.prototype.validate = function (control) {
            var parsedMax = parseInt(this.max, 10);
            if (lodashEs.isUndefined(control.value) || !this.max) {
                return null;
            }
            var valid = true;
            valid = !(control.value > parsedMax);
            return valid ? null : { max: { value: parsedMax } };
        };
        var MaxValidationDirective_1;
        __decorate([
            core.Input()
        ], MaxValidationDirective.prototype, "max", void 0);
        MaxValidationDirective = MaxValidationDirective_1 = __decorate([
            core.Directive({
                selector: '[max]',
                providers: [{ provide: forms.NG_VALIDATORS, useExisting: MaxValidationDirective_1, multi: true }]
            })
        ], MaxValidationDirective);
        return MaxValidationDirective;
    }());

    var MessageDirective = /** @class */ (function () {
        function MessageDirective() {
        }
        __decorate([
            core.Input()
        ], MessageDirective.prototype, "name", void 0);
        __decorate([
            core.Input()
        ], MessageDirective.prototype, "text", void 0);
        MessageDirective = __decorate([
            core.Directive({
                selector: 'c8y-message',
            })
        ], MessageDirective);
        return MessageDirective;
    }());

    var MessagesComponent = /** @class */ (function () {
        function MessagesComponent(translateService) {
            this.translateService = translateService;
            this.show = {};
            this.defaults = ValidationPattern.messages;
            this.messages = [];
            this.messageMap = {};
        }
        MessagesComponent.prototype.ngAfterContentInit = function () {
            this.messageMap = Object.assign({}, this.defaults, this.customMessages.reduce(function (messages, directive) {
                messages[directive.name] = directive.text;
                return messages;
            }, {}));
        };
        MessagesComponent.prototype.changVisibility = function (show) {
            this.show = show;
            this.ngOnChanges();
        };
        MessagesComponent.prototype.ngOnChanges = function () {
            var _this = this;
            if (this.show) {
                this.messages = Object.keys(this.show)
                    .map(function (key) { return _this.toMessage(key, _this.show[key]); });
            }
            else {
                this.messages = [];
            }
        };
        MessagesComponent.prototype.toMessage = function (key, value) {
            return this.translateService.instant(this.messageMap[key], value);
        };
        MessagesComponent.ctorParameters = function () { return [
            { type: core$1.TranslateService }
        ]; };
        __decorate([
            core.Input()
        ], MessagesComponent.prototype, "show", void 0);
        __decorate([
            core.Input()
        ], MessagesComponent.prototype, "defaults", void 0);
        __decorate([
            core.ContentChildren(MessageDirective)
        ], MessagesComponent.prototype, "customMessages", void 0);
        MessagesComponent = __decorate([
            core.Component({
                selector: 'c8y-messages',
                template: "<small class=\"form-control-feedback-message\">\n  <div style=\"display:block\" *ngFor=\"let msg of messages\">\n    {{msg | translate}}\n  </div>\n  <ng-content></ng-content>\n</small>\n"
            })
        ], MessagesComponent);
        return MessagesComponent;
    }());

    /**
     * A form group helps to validate an input of a form element.
     *
     * ## Example:
     *
     * ```html
     *  <c8y-form-group [hasWarning]="user.email.length === 0">
     *   <label translate for="userEmail">Email</label>
     *   <input
     *     id="userEmail"
     *     class="form-control"
     *     type="email"
     *     name="email"
     *     [maxlength]="254"
     *     autocomplete="off"
     *     placeholder="{{'e.g. joe.doe@example.com' | translate}}"
     *     [(ngModel)]="user.email"
     *     email
     *     required
     *   >
     *   <c8y-messages>
     *     <c8y-message *ngIf="user.email.length === 0" translate></c8y-message>
     *     <c8y-message name="required" text="The E-Mail is SUPER required"></c8y-message>
     *   </c8y-messages>
     *  </c8y-form-group>
     * ```
     *
     * @param status The current status could be error, warning or success.
     * @param hasError Set this to true to display a error.
     * @param hasWarning Set this to true to display a warning.
     * @param hasSuccess Set this to true to display a success.
     * @param novalidation Set this to true to disable automatic validation by this component.
     */
    var FormGroupComponent = /** @class */ (function () {
        function FormGroupComponent() {
            this.hasError = false;
            this.hasWarning = false;
            this.hasSuccess = false;
            this.novalidation = false;
            this.VALIDATION_DEBOUNCE_MS = 1000;
        }
        Object.defineProperty(FormGroupComponent.prototype, "error", {
            get: function () { return this.status === 'error' || this.hasError; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupComponent.prototype, "warning", {
            get: function () { return this.status === 'warning' || this.hasWarning; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupComponent.prototype, "success", {
            get: function () { return this.status === 'success' || this.hasSuccess; },
            enumerable: true,
            configurable: true
        });
        FormGroupComponent.prototype.ngAfterContentInit = function () {
            this.initNgModel();
        };
        FormGroupComponent.prototype.initNgModel = function () {
            var _this = this;
            if (this.model) {
                this.subscription = this.model.valueChanges.pipe(operators.filter(function () { return _this.model.dirty && !_this.novalidation; }), operators.debounce(function () { return _this.hasError ? rxjs.timer(10) : rxjs.timer(_this.VALIDATION_DEBOUNCE_MS); })).subscribe(function () { return _this.update(); });
            }
        };
        FormGroupComponent.prototype.update = function () {
            this.hasError = !this.model.valid;
            if (this.customErrorMessage) {
                this.customErrorMessage.changVisibility(this.model.errors);
            }
            else {
                this.errors = this.model.errors;
            }
        };
        FormGroupComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        __decorate([
            core.Input()
        ], FormGroupComponent.prototype, "hasError", void 0);
        __decorate([
            core.Input()
        ], FormGroupComponent.prototype, "hasWarning", void 0);
        __decorate([
            core.Input()
        ], FormGroupComponent.prototype, "hasSuccess", void 0);
        __decorate([
            core.Input()
        ], FormGroupComponent.prototype, "novalidation", void 0);
        __decorate([
            core.Input()
        ], FormGroupComponent.prototype, "status", void 0);
        __decorate([
            core.HostBinding('class.has-error')
        ], FormGroupComponent.prototype, "error", null);
        __decorate([
            core.HostBinding('class.has-warning')
        ], FormGroupComponent.prototype, "warning", null);
        __decorate([
            core.HostBinding('class.has-success')
        ], FormGroupComponent.prototype, "success", null);
        __decorate([
            core.ContentChild(MessagesComponent, { static: false })
        ], FormGroupComponent.prototype, "customErrorMessage", void 0);
        __decorate([
            core.ContentChild(forms.NgModel, { static: true })
        ], FormGroupComponent.prototype, "model", void 0);
        FormGroupComponent = __decorate([
            core.Component({
                selector: 'c8y-form-group',
                template: "<ng-content></ng-content>\n<c8y-messages *ngIf=\"!customErrorMessage\" [show]=\"errors\"></c8y-messages>\n",
                host: {
                    class: 'form-group'
                }
            })
        ], FormGroupComponent);
        return FormGroupComponent;
    }());

    var InputGroupListComponent = /** @class */ (function () {
        function InputGroupListComponent() {
            this.plus = true;
            this.minus = true;
            this.onRemove = new core.EventEmitter();
            this.onAdd = new core.EventEmitter();
        }
        InputGroupListComponent.prototype.add = function () {
            this.onAdd.emit(this.index);
        };
        InputGroupListComponent.prototype.remove = function () {
            this.onRemove.emit(this.index);
        };
        __decorate([
            core.Input()
        ], InputGroupListComponent.prototype, "plus", void 0);
        __decorate([
            core.Input()
        ], InputGroupListComponent.prototype, "minus", void 0);
        __decorate([
            core.Input()
        ], InputGroupListComponent.prototype, "index", void 0);
        __decorate([
            core.Output()
        ], InputGroupListComponent.prototype, "onRemove", void 0);
        __decorate([
            core.Output()
        ], InputGroupListComponent.prototype, "onAdd", void 0);
        InputGroupListComponent = __decorate([
            core.Component({
                selector: 'c8y-input-group-list',
                template: "<ng-container>\n  <div class=\"input-group\">\n    <ng-content></ng-content>\n    <div class=\"input-group-btn\">\n      <button\n        *ngIf=\"minus\"\n        title=\"{{ 'Remove' | translate }}\"\n        class=\"btn btn-clean text-primary\"\n        (click)=\"remove()\"\n      >\n        <i c8yIcon=\"minus-circle\" class=\"text-danger\"></i>\n      </button>\n      <button\n        *ngIf=\"plus\"\n        title=\"{{ 'Add' | translate }}\"\n        class=\"btn btn-clean text-primary\"\n        (click)=\"add()\"\n      >\n        <i class=\"fa fa-plus-circle\"></i>\n      </button>\n    </div>\n  </div>\n</ng-container>\n"
            })
        ], InputGroupListComponent);
        return InputGroupListComponent;
    }());

    var InputGroupListContainerDirective = /** @class */ (function () {
        function InputGroupListContainerDirective() {
        }
        InputGroupListContainerDirective.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.listProjections.map(function (element) {
                if (element !== _this.listProjections.last) {
                    setTimeout(function () {
                        element.plus = false;
                    });
                }
            });
            this.listProjections.changes.subscribe(function (elements) {
                if (elements.length === 1) {
                    setTimeout(function () {
                        elements.first.plus = true;
                        elements.first.minus = false;
                    });
                    return;
                }
                elements.map(function (element) {
                    setTimeout(function () {
                        element.minus = true;
                    });
                    if (element !== elements.last) {
                        setTimeout(function () {
                            element.plus = false;
                        });
                    }
                    if (element === elements.last) {
                        setTimeout(function () {
                            element.plus = true;
                        });
                    }
                });
            });
        };
        __decorate([
            core.ContentChildren(InputGroupListComponent)
        ], InputGroupListContainerDirective.prototype, "listProjections", void 0);
        InputGroupListContainerDirective = __decorate([
            core.Directive({
                selector: '[c8yInputGroupListContainer]'
            })
        ], InputGroupListContainerDirective);
        return InputGroupListContainerDirective;
    }());

    var JsonValidationPrettifierDirective = /** @class */ (function () {
        function JsonValidationPrettifierDirective(ngCtrl) {
            this.invalidJSON = new core.EventEmitter();
            this.message = gettext('Must be a valid JSON object.');
            this.debounceTimeInMs = 1000;
            this.abstractCtrl = ngCtrl.control;
        }
        JsonValidationPrettifierDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.abstractCtrl.valueChanges
                .pipe(operators.tap(function () { return _this.clearValidationMessage(); }), operators.debounceTime(this.debounceTimeInMs), operators.distinctUntilChanged())
                .subscribe(function (value) {
                _this.validateInputAndPrettify(value);
            });
        };
        JsonValidationPrettifierDirective.prototype.ngOnDestroy = function () {
            if (this.subscription && !this.subscription.closed) {
                this.subscription.unsubscribe();
            }
        };
        JsonValidationPrettifierDirective.prototype.validateInputAndPrettify = function (value) {
            if (value) {
                try {
                    var validJsonObject = JSON.parse(value);
                    var pretty = JSON.stringify(validJsonObject, undefined, 2);
                    this.abstractCtrl.setValue(pretty);
                }
                catch (ex) {
                    this.setErrorAndValidationMessage();
                }
            }
        };
        JsonValidationPrettifierDirective.prototype.setErrorAndValidationMessage = function () {
            this.abstractCtrl.setErrors({ invalidBodyTemplate: true });
            this.invalidJSON.emit(this.message);
        };
        JsonValidationPrettifierDirective.prototype.clearValidationMessage = function () {
            this.invalidJSON.emit(undefined);
        };
        JsonValidationPrettifierDirective.ctorParameters = function () { return [
            { type: forms.NgControl }
        ]; };
        __decorate([
            core.Output()
        ], JsonValidationPrettifierDirective.prototype, "invalidJSON", void 0);
        JsonValidationPrettifierDirective = __decorate([
            core.Directive({
                selector: 'textarea[prettyValidJson]'
            })
        ], JsonValidationPrettifierDirective);
        return JsonValidationPrettifierDirective;
    }());

    var TextAreaRowHeightDirective = /** @class */ (function () {
        function TextAreaRowHeightDirective(elem, renderer) {
            this.elem = elem;
            this.renderer = renderer;
            this.rows = 1;
            this.minHeightPerRow = 20;
        }
        TextAreaRowHeightDirective.prototype.ngAfterViewInit = function () {
            var convertedValue = Number(this.heightPerRow);
            if (this.heightPerRow && convertedValue && convertedValue > this.minHeightPerRow) {
                this.setHeight(this.rows * convertedValue + "px");
            }
            else {
                this.setHeight(this.rows * this.minHeightPerRow + "px");
            }
        };
        TextAreaRowHeightDirective.prototype.setHeight = function (value) {
            this.renderer.setStyle(this.elem.nativeElement, 'height', value);
        };
        TextAreaRowHeightDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            core.HostBinding('rows')
        ], TextAreaRowHeightDirective.prototype, "rows", void 0);
        __decorate([
            core.Input('heightPerRow')
        ], TextAreaRowHeightDirective.prototype, "heightPerRow", void 0);
        TextAreaRowHeightDirective = __decorate([
            core.Directive({
                selector: 'textarea[heightPerRow]'
            })
        ], TextAreaRowHeightDirective);
        return TextAreaRowHeightDirective;
    }());

    var RequiredInputPlaceholderDirective = /** @class */ (function () {
        function RequiredInputPlaceholderDirective(el, renderer, translationService) {
            this.el = el;
            this.renderer = renderer;
            this.translationService = translationService;
        }
        RequiredInputPlaceholderDirective.prototype.ngAfterContentChecked = function () {
            this.required = this.el.nativeElement.required;
            this.placeholder = this.el.nativeElement.placeholder;
            var requiredText = "(" + this.translationService.instant(gettext('required')) + ")";
            this.setPlaceholder(requiredText);
        };
        RequiredInputPlaceholderDirective.prototype.setPlaceholder = function (requiredText) {
            if (lodashEs.isUndefined(this.placeholder) && !this.required) {
                this.renderer.removeAttribute(this.el.nativeElement, 'placeholder');
            }
            else if (this.placeholder.indexOf(requiredText) < 0) {
                var parts = lodashEs.compact([
                    this.placeholder,
                    "" + (this.required && !this.shouldSkipRequiredHint() ? "" + requiredText : '')
                ]);
                var placeholder = parts.includes(requiredText)
                    ? parts.join(' ').trim()
                    : parts.join('').trim();
                this.renderer.setAttribute(this.el.nativeElement, 'placeholder', placeholder);
            }
        };
        RequiredInputPlaceholderDirective.prototype.shouldSkipRequiredHint = function () {
            var closestAncestor = this.el.nativeElement.closest('[placeholder-no-required-hint]');
            return !!closestAncestor;
        };
        RequiredInputPlaceholderDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: core$1.TranslateService }
        ]; };
        RequiredInputPlaceholderDirective = __decorate([
            core.Directive({
                selector: 'input[required]'
            })
        ], RequiredInputPlaceholderDirective);
        return RequiredInputPlaceholderDirective;
    }());

    var IpRangeInputListComponent = /** @class */ (function () {
        function IpRangeInputListComponent() {
        }
        Object.defineProperty(IpRangeInputListComponent.prototype, "data", {
            get: function () {
                return this.ipRangeList;
            },
            set: function (list) {
                this.ipRangeList = list;
                if (this.ipRangeList.length === 0) {
                    this.add();
                }
            },
            enumerable: true,
            configurable: true
        });
        IpRangeInputListComponent.prototype.add = function () {
            this.ipRangeList.push({ ip: '', cidr: undefined });
        };
        IpRangeInputListComponent.prototype.remove = function (index) {
            this.ipRangeList.splice(index, 1);
        };
        __decorate([
            core.Input()
        ], IpRangeInputListComponent.prototype, "data", null);
        IpRangeInputListComponent = __decorate([
            core.Component({
                selector: 'c8y-ip-range-input-list',
                template: "<c8y-form-group class=\"m-t-8 m-b-8\">\n  <ul c8yInputGroupListContainer class=\"list-unstyled\">\n    <li class=\"m-b-8\" *ngFor=\"let item of data; let i = index\">\n      <c8y-input-group-list [index]=\"i\" (onAdd)=\"add()\" (onRemove)=\"remove($event)\">\n        <input\n          type=\"text\"\n          name=\"ipAddress\"\n          class=\"form-control m-r-4\"\n          placeholder=\"{{ 'IP range start, e.g.' | translate }} 192.168.0.1\"\n          style=\"flex-grow: 2;\"\n          [(ngModel)]=\"item.ip\"\n          [required]=\"true\"\n          #ipAddress\n        />\n        <input\n          type=\"number\"\n          name=\"cidr\"\n          [min]=\"0\"\n          class=\"form-control\"\n          placeholder=\"{{ 'e.g.' | translate }} 20\"\n          [(ngModel)]=\"item.cidr\"\n          [required]=\"true\"\n          #cidr\n        />\n      </c8y-input-group-list>\n    </li>\n  </ul>\n</c8y-form-group>\n"
            })
        ], IpRangeInputListComponent);
        return IpRangeInputListComponent;
    }());

    // TODO: find replacement for schema-form ng1 library
    var SchemaFormComponent = /** @class */ (function (_super) {
        __extends(SchemaFormComponent, _super);
        function SchemaFormComponent(elementRef, injector) {
            return _super.call(this, 'c8ySchemaForm', elementRef, injector) || this;
        }
        SchemaFormComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Injector }
        ]; };
        __decorate([
            core.Input()
        ], SchemaFormComponent.prototype, "schema", void 0);
        __decorate([
            core.Input()
        ], SchemaFormComponent.prototype, "model", void 0);
        __decorate([
            core.Input('form')
        ], SchemaFormComponent.prototype, "inputForm", void 0);
        __decorate([
            core.Input('options')
        ], SchemaFormComponent.prototype, "inputOptions", void 0);
        SchemaFormComponent = __decorate([
            core.Directive({
                selector: 'c8y-schema-form'
            })
        ], SchemaFormComponent);
        return SchemaFormComponent;
    }(_static.UpgradeComponent));

    var FilterInputComponent = /** @class */ (function () {
        function FilterInputComponent() {
            this.onSearch = new core.EventEmitter();
            this.filterChange$ = new rxjs.Subject();
            this.filterTerm = '';
            this.CARRIAGE_RETURN_KEY = 13;
            this.CARRIAGE_RETURN_CODE = 'Enter';
        }
        FilterInputComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.reset();
            this.filterChange$
                .pipe(operators.debounce(function (event) {
                return event.code === _this.CARRIAGE_RETURN_CODE || event.keyCode === _this.CARRIAGE_RETURN_KEY
                    ? rxjs.timer(10)
                    : rxjs.timer(300);
            }), operators.map(function (e) { return e.target.value; }), operators.distinctUntilChanged())
                .subscribe(function (filterTerm) {
                _this.filterTerm = filterTerm;
                _this.onSearch.emit(filterTerm);
            });
        };
        FilterInputComponent.prototype.reset = function () {
            this.filterTerm = '';
            this.onSearch.emit('');
        };
        FilterInputComponent.prototype.ngOnDestroy = function () {
            this.filterChange$.complete();
        };
        __decorate([
            core.Input()
        ], FilterInputComponent.prototype, "icon", void 0);
        __decorate([
            core.Output()
        ], FilterInputComponent.prototype, "onSearch", void 0);
        FilterInputComponent = __decorate([
            core.Component({
                selector: 'c8y-filter',
                template: "<div class=\"input-group input-group-search\">\n  <input\n    class=\"form-control\"\n    placeholder=\"{{ 'Filter\u2026' | translate }}\"\n    type=\"text\"\n    [value]=\"filterTerm\"\n    (keyup)=\"filterChange$.next($event)\"\n  />\n  <span class=\"input-group-btn\">\n    <button class=\"btn btn-clean\" (click)=\"reset()\">\n      <i [c8yIcon]=\"filterTerm.length === 0 ? icon : 'close'\"></i>\n    </button>\n  </span>\n</div>\n"
            })
        ], FilterInputComponent);
        return FilterInputComponent;
    }());

    /**
     * @exports FormGroupComponent A component that allows to group an input and can display warnings and errors.
     * @exports PhoneValidationDirective Allows to validate international phone numbers.
     * @exports NewsletterDirective Allows to subscribe to the newsletter.
     * @exports DefaultValidationDirective Allows to validate some predefined patterns.
     * @exports MessageDirective A directive that allows to define messages.
     * @exports MessagesComponent Allows to display error messages.
     * @exports SchemaFormComponent Allows to display forms generated from JSON Schema.
     */
    var FormsModule = /** @class */ (function () {
        function FormsModule() {
        }
        FormsModule = __decorate([
            core.NgModule({
                imports: [CommonModule, forms.FormsModule],
                exports: [
                    PhoneValidationDirective,
                    DefaultValidationDirective,
                    MinValidationDirective,
                    MaxValidationDirective,
                    forms.FormsModule,
                    FormGroupComponent,
                    MessageDirective,
                    MessagesComponent,
                    InputGroupListComponent,
                    InputGroupListContainerDirective,
                    JsonValidationPrettifierDirective,
                    TextAreaRowHeightDirective,
                    RequiredInputPlaceholderDirective,
                    IpRangeInputListComponent,
                    SchemaFormComponent,
                    FilterInputComponent
                ],
                declarations: [
                    PhoneValidationDirective,
                    DefaultValidationDirective,
                    MinValidationDirective,
                    MaxValidationDirective,
                    FormGroupComponent,
                    MessageDirective,
                    MessagesComponent,
                    InputGroupListComponent,
                    InputGroupListContainerDirective,
                    JsonValidationPrettifierDirective,
                    TextAreaRowHeightDirective,
                    RequiredInputPlaceholderDirective,
                    IpRangeInputListComponent,
                    SchemaFormComponent,
                    FilterInputComponent
                ]
            })
        ], FormsModule);
        return FormsModule;
    }());

    var TotpChallengeComponent = /** @class */ (function () {
        function TotpChallengeComponent(loginService, users, alert) {
            this.loginService = loginService;
            this.users = users;
            this.alert = alert;
            /**
             * Calls the verify endpoint if set to true (default true)
             */
            this.verify = true;
            /**
             * Emits the token on success.
             */
            this.onSuccess = new core.EventEmitter();
            this.model = {
                token: ''
            };
            this.loading = false;
            this.hasError = false;
        }
        TotpChallengeComponent.prototype.verifyCode = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            this.loading = true;
                            this.hasError = false;
                            if (!this.verify) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.users.verifyTotpCode(this.model.token)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.onSuccess.emit(this.model.token);
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            this.hasError = true;
                            this.alert.removeLastDanger();
                            this.loading = false;
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        TotpChallengeComponent.ctorParameters = function () { return [
            { type: LoginService },
            { type: client.UserService },
            { type: AlertService }
        ]; };
        __decorate([
            core.Input()
        ], TotpChallengeComponent.prototype, "verify", void 0);
        __decorate([
            core.Output()
        ], TotpChallengeComponent.prototype, "onSuccess", void 0);
        __decorate([
            core.Input()
        ], TotpChallengeComponent.prototype, "loading", void 0);
        __decorate([
            core.Input()
        ], TotpChallengeComponent.prototype, "hasError", void 0);
        TotpChallengeComponent = __decorate([
            core.Component({
                selector: 'c8y-totp-challenge',
                template: "<form\n  #totpForm=\"ngForm\"\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"verifyCode()\"\n  novalidate\n>\n\n  <c8y-form-group\n    [hasError]=\"hasError\"\n    [novalidation]=\"true\"\n  >\n    <label\n      translate\n      for=\"totpToken\"\n    >Verification code</label>\n    <input\n      id=\"totpToken\"\n      [(ngModel)]=\"model.token\"\n      name=\"totpToken\"\n      type=\"text\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      autocomplete=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{'Verification code' | translate}}\"\n      required\n    >\n    <c8y-messages>\n      <c8y-message *ngIf=\"hasError\" translate>\n        Invalid verification code. In case of key loss, please contact your platform administrator.\n      </c8y-message>\n    </c8y-messages>\n    <p id=\"helpinput\" *ngIf=\"!hasError\" class=\"help-block\" translate>\n      In case of key loss, please contact your platform administrator.\n    </p>\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\" \n    [disabled]=\"!totpForm.form.valid || loading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >Verify</button>\n\n</form>\n",
                viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
            })
        ], TotpChallengeComponent);
        return TotpChallengeComponent;
    }());

    var SmsChallengeComponent = /** @class */ (function () {
        function SmsChallengeComponent(loginService, users, alert) {
            this.loginService = loginService;
            this.users = users;
            this.alert = alert;
            this.onCancel = new core.EventEmitter();
            this.model = {
                smsToken: ''
            };
            this.isLoading = false;
            this.resendTfa = '0';
        }
        SmsChallengeComponent.prototype.verifyTFACode = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isLoading = true;
                            if (!this.useOAuthInternal()) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.verifyCodeWithOauth()];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.verifyCodeWithBasicAuth()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        SmsChallengeComponent.prototype.resendTFASms = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            this.isLoading = true;
                            return [4 /*yield*/, this.users.verifyTFACode(this.resendTfa)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2:
                            e_1 = _a.sent();
                            if (e_1.res.status === 403) {
                                this.loginService.cleanMessages();
                                this.loginService.addSuccessMessage('resend_sms');
                            }
                            else {
                                this.alert.addServerFailure(e_1);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            this.isLoading = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        SmsChallengeComponent.prototype.useOAuthInternal = function () {
            return this.loginService.isPasswordGrantLogin(this.credentials);
        };
        SmsChallengeComponent.prototype.verifyCodeWithOauth = function () {
            return __awaiter(this, void 0, void 0, function () {
                var credentials, e_2, resStatus;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            credentials = this.credentials;
                            return [4 /*yield*/, this.loginService.switchLoginMode(__assign({}, credentials, { tfa: this.model.smsToken }))];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.verifyAppAccess()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.authFulfilled()];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            e_2 = _a.sent();
                            resStatus = e_2.res && e_2.res.status;
                            if (resStatus === 401) {
                                // it is assumed that the user and password are correct so it must be the tfa code
                                this.alert.danger(gettext('Invalid code'));
                            }
                            else {
                                this.alert.addServerFailure(e_2);
                            }
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        SmsChallengeComponent.prototype.verifyCodeWithBasicAuth = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res, tfaToken, e_3, resStatus;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.users.verifyTFACode(this.model.smsToken)];
                        case 1:
                            res = (_a.sent()).res;
                            tfaToken = res.headers.get('tfatoken');
                            this.credentials.tfa = tfaToken;
                            this.loginWithTFA(tfaToken);
                            return [3 /*break*/, 3];
                        case 2:
                            e_3 = _a.sent();
                            resStatus = e_3.res && e_3.res.status;
                            // BE returns 403 in case of invalid tfa code
                            if (resStatus === 403) {
                                this.alert.danger(gettext('Invalid code'));
                            }
                            else {
                                this.alert.addServerFailure(e_3);
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        SmsChallengeComponent.prototype.loginWithTFA = function (tfaToken) {
            return __awaiter(this, void 0, void 0, function () {
                var e_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.loginService.login(this.loginService.useBasicAuth({ tfa: tfaToken }), this.credentials)];
                        case 1:
                            _a.sent();
                            this.loginService.saveTFAToken(tfaToken, sessionStorage);
                            if (this.loginService.rememberMe) {
                                this.loginService.saveTFAToken(tfaToken, localStorage);
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            e_4 = _a.sent();
                            this.alert.addServerFailure(e_4);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        SmsChallengeComponent.ctorParameters = function () { return [
            { type: LoginService },
            { type: client.UserService },
            { type: AlertService }
        ]; };
        __decorate([
            core.Input()
        ], SmsChallengeComponent.prototype, "credentials", void 0);
        __decorate([
            core.Output()
        ], SmsChallengeComponent.prototype, "onCancel", void 0);
        SmsChallengeComponent = __decorate([
            core.Component({
                selector: 'c8y-sms-challenge',
                template: "<form #twoFactorForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"verifyTFACode()\" novalidate>\n  <div class=\"legend form-block center\" translate>Insert the code received via SMS</div>\n\n  <c8y-form-group>\n    <label translate>Verification code</label>\n    <input\n      [(ngModel)]=\"model.smsToken\"\n      #sms_token=\"ngModel\"\n      type=\"text\"\n      name=\"sms_token\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Verification code' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Verify' | translate }}\"\n    [disabled]=\"!twoFactorForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Verify\n  </button>\n\n  <div class=\"top-m-sm\">\n    <a\n      title=\"{{ 'Login' | translate }}\"\n      class=\"btn btn-link btn-sm pull-right\"\n      (click)=\"onCancel.emit()\"\n      translate\n      >Login</a\n    >\n    <a\n      title=\"{{ 'Send new code' | translate }}\"\n      [ngClass]=\"{ disabled: isLoading }\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"resendTFASms()\"\n      translate\n      >Send new code</a\n    >\n  </div>\n</form>\n"
            })
        ], SmsChallengeComponent);
        return SmsChallengeComponent;
    }());

    var TotpSetupComponent = /** @class */ (function () {
        function TotpSetupComponent(user, alert) {
            this.user = user;
            this.alert = alert;
        }
        Object.defineProperty(TotpSetupComponent.prototype, "qrCodeImage", {
            get: function () {
                return this.totpSecret ? this.totpSecret.secretQrUrl : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TotpSetupComponent.prototype, "secret", {
            get: function () {
                return this.totpSecret ? this.totpSecret.rawSecret : '';
            },
            enumerable: true,
            configurable: true
        });
        TotpSetupComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.user.generateTotpSecret()];
                        case 1:
                            data = (_a.sent()).data;
                            this.totpSecret = data;
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            this.alert.addServerFailure(ex_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        TotpSetupComponent.ctorParameters = function () { return [
            { type: client.UserService },
            { type: AlertService }
        ]; };
        TotpSetupComponent = __decorate([
            core.Component({
                selector: 'c8y-totp-setup',
                template: "<div class=\"text-center\">\n  <p\n    class=\"lead bottom-m-md\"\n    translate\n  >\n    Scan this QR code with your smartphone using the Google Authenticator app.\n  </p>\n\n  <img\n    style=\"width: 100%; max-width: 300px;\"\n    class=\"bottom-m-md\"\n    [src]=\"qrCodeImage\"\n    alt=\"{{'QR code loading' | translate}}\u2026\"\n  >\n  <p class=\"text-center text-muted\">\n    {{secret}}\n  </p>\n</div>\n"
            })
        ], TotpSetupComponent);
        return TotpSetupComponent;
    }());

    /**
     * The angular module definition for new password.
     * @exports PasswordStrengthComponent
     * @exports PasswordCheckListComponent
     * @exports PasswordConfirm
     * @exports NewPasswordComponent
     * @exports PasswordConfirmModalComponent
     */
    var AuthenticationModule = /** @class */ (function () {
        function AuthenticationModule() {
        }
        AuthenticationModule = __decorate([
            core.NgModule({
                declarations: [
                    TotpChallengeComponent,
                    PasswordConfirm,
                    PasswordStrengthComponent,
                    PasswordCheckListComponent,
                    NewPasswordComponent,
                    PasswordConfirmModalComponent,
                    SmsChallengeComponent,
                    TotpSetupComponent
                ],
                imports: [
                    FormsModule,
                    tooltip.TooltipModule,
                    CommonModule,
                    ModalModule
                ],
                exports: [
                    TotpChallengeComponent,
                    PasswordStrengthComponent,
                    PasswordCheckListComponent,
                    PasswordConfirm,
                    NewPasswordComponent,
                    PasswordConfirmModalComponent,
                    SmsChallengeComponent,
                    TotpSetupComponent
                ],
                entryComponents: [
                    PasswordConfirmModalComponent
                ],
                providers: [
                    PasswordStrengthCheckerService,
                    PasswordService
                ]
            })
        ], AuthenticationModule);
        return AuthenticationModule;
    }());

    var UserTotpRevokeComponent = /** @class */ (function () {
        function UserTotpRevokeComponent(users, alert) {
            this.users = users;
            this.alert = alert;
            this.revokeEmitter = new core.EventEmitter();
        }
        UserTotpRevokeComponent.prototype.revoke = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.users.totpRevokeSecret(this.user)];
                        case 1:
                            _a.sent();
                            this.alert.success(gettext('User TOTP secret revoked.'));
                            this.revokeEmitter.next();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            this.alert.addServerFailure(e_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        UserTotpRevokeComponent.ctorParameters = function () { return [
            { type: client.UserService },
            { type: AlertService }
        ]; };
        __decorate([
            core.Input()
        ], UserTotpRevokeComponent.prototype, "user", void 0);
        __decorate([
            core.Output('revoke')
        ], UserTotpRevokeComponent.prototype, "revokeEmitter", void 0);
        UserTotpRevokeComponent = __decorate([
            core.Component({
                selector: 'c8y-user-totp-revoke',
                template: "<button\n  type=\"button\"\n  class=\"btn btn-default\"\n  [popover]=\"confirm\"\n  [popoverTitle]=\"'Revoke TOTP secret' | translate\"\n  #popover=\"bs-popover\"\n  placement=\"right\"\n>\n  <i c8yIcon=\"key\"></i> {{ 'Revoke TOTP secret' | translate }}\n</button>\n\n<ng-template #confirm>\n  <p class=\"m-b-16\" translate>\n    This action will revoke the user's stored TOTP secret which will require a new setup.\n  </p>\n  <button\n    title=\"{{ 'Revoke' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-danger\"\n    (click)=\"revoke(); popover.hide()\"\n    translate\n  >\n    Revoke\n  </button>\n  <button\n    title=\"{{ 'Cancel' | translate }}\"\n    type=\"button\"\n    class=\"btn btn-default\"\n    (click)=\"popover.hide()\"\n    translate\n  >\n    Cancel\n  </button>\n</ng-template>\n"
            })
        ], UserTotpRevokeComponent);
        return UserTotpRevokeComponent;
    }());

    /**
     * The angular module definition for the user menu.
     * @exports UserMenuComponent
     * @exports UserMenuItemComponent
     * @exports UserEditComponent
     * @exports UserEditModalComponent
     */
    var UserModule = /** @class */ (function () {
        function UserModule() {
        }
        UserModule = __decorate([
            core.NgModule({
                declarations: [
                    UserMenuOutletComponent,
                    UserEditComponent,
                    UserEditModalComponent,
                    UserMenuItemComponent,
                    UserTotpSetupComponent,
                    UserTotpRevokeComponent,
                ],
                imports: [
                    FormsModule,
                    CommonModule,
                    ModalModule,
                    dropdown.BsDropdownModule,
                    AuthenticationModule,
                    AlertModule,
                    router.RouterModule,
                    tooltip.TooltipModule.forRoot(),
                    popover.PopoverModule
                ],
                exports: [
                    UserMenuOutletComponent,
                    UserMenuItemComponent,
                    UserEditComponent,
                    UserEditModalComponent,
                    UserTotpSetupComponent,
                    UserTotpRevokeComponent
                ],
                entryComponents: [
                    UserEditModalComponent,
                    UserTotpSetupComponent,
                    UserTotpRevokeComponent
                ]
            })
        ], UserModule);
        return UserModule;
    }());

    var AppIconComponent = /** @class */ (function () {
        function AppIconComponent(options) {
            this.options = options;
            this.name = '';
            this.model = {
                appIcon: '',
                showIcon: true,
                iconClass: ['c8y-icon'],
                appNameAbbr: '',
                iconStyle: {}
            };
            this.c8yAppIconsList = {
                analyticsbuilder: 'analytics-builder',
                'analytics-builder': 'analytics-builder',
                cockpit: 'cockpit',
                devicemanagement: 'device-management',
                administration: 'administration',
                apamaepl: 'apama-epl'
            };
            this.white = false;
            this.defaultIconStyle = {
                'background-repeat': 'no-repeat',
                'background-size': 'contain',
                height: '36px',
                width: '36px'
            };
        }
        AppIconComponent.prototype.ngOnChanges = function (changes) {
            this.model.appIcon = this.iconFromAppDefinition() || this.findStaticIcon();
            var iconUrl = this.iconUrlFromAppDefinition();
            if (iconUrl) {
                this.model.iconStyle = lodashEs.assign(this.defaultIconStyle, {
                    'background-image': iconUrl
                });
            }
            this.model.showIcon = !!this.model.appIcon || !lodashEs.isEmpty(this.model.iconStyle);
            this.model.iconClass = [
                'c8y-icon',
                this.model.appIcon,
                this.white ? 'c8y-icon-white' : 'c8y-icon-duocolor'
            ].filter(function (c) { return !!c; });
            this.model.appNameAbbr = this.name.substr(0, 2);
        };
        AppIconComponent.prototype.findStaticIcon = function () {
            var contextPath = this.contextPath || this.name;
            var appContextPathNormalized = lodashEs.find(lodashEs.keys(this.c8yAppIconsList), function (cp) {
                return contextPath.indexOf(cp) > -1;
            });
            var appIcon = this.c8yAppIconsList[appContextPathNormalized];
            return appIcon ? "c8y-icon-" + appIcon : undefined;
        };
        AppIconComponent.prototype.iconFromAppDefinition = function () {
            var app = this.app || this.options;
            var iconClassProperty = ['icon', 'class'];
            var iconClass = lodashEs.get(app, iconClassProperty) || lodashEs.get(app, __spread(['manifest'], iconClassProperty));
            return iconClass;
        };
        AppIconComponent.prototype.iconUrlFromAppDefinition = function () {
            var app = this.app || this.options;
            var iconUrlProperty = ['icon', 'url'];
            var iconUrl = lodashEs.get(app, iconUrlProperty) || lodashEs.get(app, __spread(['manifest'], iconUrlProperty));
            return iconUrl;
        };
        AppIconComponent.ctorParameters = function () { return [
            { type: OptionsService }
        ]; };
        __decorate([
            core.Input()
        ], AppIconComponent.prototype, "contextPath", void 0);
        __decorate([
            core.Input()
        ], AppIconComponent.prototype, "name", void 0);
        __decorate([
            core.Input()
        ], AppIconComponent.prototype, "app", void 0);
        AppIconComponent = __decorate([
            core.Component({
                selector: 'c8y-app-icon',
                template: "<i *ngIf=\"model.showIcon\" [ngClass]=\"model.iconClass\" [ngStyle]=\"model.iconStyle\"></i>\n<span *ngIf=\"!model.showIcon\" class=\"app-noicon\"> {{model.appNameAbbr}}</span>\n",
                host: { class: 'c8y-app-icon' }
            })
        ], AppIconComponent);
        return AppIconComponent;
    }());

    var AppSwitcherComponent = /** @class */ (function () {
        function AppSwitcherComponent(ui, applications) {
            var _this = this;
            this.ui = ui;
            this.applications = applications;
            var _a = this.ui, currentUser = _a.currentUser, currentTenant = _a.currentTenant;
            rxjs.combineLatest(currentUser, currentTenant).pipe(operators.first()).subscribe(function (_a) {
                var _b = __read(_a, 2), user = _b[0], tenant = _b[1];
                _this.tenant = tenant;
                _this.listAppsForUser(user);
            });
        }
        Object.defineProperty(AppSwitcherComponent.prototype, "hideCloudApps", {
            get: function () {
                return false; // this should be configurable from outside
            },
            enumerable: true,
            configurable: true
        });
        AppSwitcherComponent.prototype.isActive = function (app) {
            return app.contextPath === this.ui.state.app.contextPath;
        };
        AppSwitcherComponent.prototype.getHref = function (app) {
            return this.applications.getHref(app);
        };
        AppSwitcherComponent.prototype.listAppsForUser = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!user) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.applications.listByUser(user, { pageSize: 1000 })];
                        case 1:
                            data = (_a.sent()).data;
                            this.apps = this.orderApps(this.filterApps(data));
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        AppSwitcherComponent.prototype.filterApps = function (apps) {
            apps = this.filterVisible(apps);
            apps = this.filterCloud(apps);
            apps = this.filterDuplicates(apps);
            return apps;
        };
        AppSwitcherComponent.prototype.filterVisible = function (apps) {
            var visibleApplicationTypes = ['HOSTED', 'EXTERNAL'];
            return apps.filter(function (app) { return lodashEs.includes(visibleApplicationTypes, app.type) &&
                !app.noAppSwitcher &&
                !lodashEs.get(app, 'manifest.noAppSwitcher'); });
        };
        AppSwitcherComponent.prototype.filterCloud = function (apps) {
            var hideCloudApps = this.hideCloudApps;
            var filterFn = function (app) { return !!app.cloud; };
            if (!hideCloudApps) {
                this.oneCloudApps = this.orderApps(apps.filter(filterFn));
            }
            return apps.filter(function (app) { return !filterFn(app); });
        };
        AppSwitcherComponent.prototype.filterDuplicates = function (apps) {
            var _this = this;
            // Filter out apps that have duplicate contextpaths and are not own owned but the current tenant;
            var filterFn = function (app) { return !apps.some(function (otherApp) { return (app !== otherApp) &&
                (app.contextPath && app.contextPath === otherApp.contextPath) &&
                (app.owner.tenant.id !== _this.tenant.name); }); };
            return apps.filter(filterFn);
        };
        AppSwitcherComponent.prototype.orderApps = function (apps) {
            return lodashEs.orderBy(apps, (function (_a) {
                var name = _a.name;
                return name.toLowerCase();
            }));
        };
        AppSwitcherComponent.ctorParameters = function () { return [
            { type: AppStateService },
            { type: client.ApplicationService }
        ]; };
        AppSwitcherComponent = __decorate([
            core.Component({
                selector: 'c8y-app-switcher',
                template: "<div class=\"app-switcher-dropdown\" dropdown>\n  <button\n    class=\"main-header-button c8y-dropdown dropdown-toggle\"\n    id=\"appSwitcherDropdown\"\n    dropdownToggle\n  >\n    <i class=\"fa-2x fa fw fa-th\"></i>\n  </button>\n  <div\n    *dropdownMenu\n    class=\"app-switcher-dropdown-menu dropdown-menu\"\n    aria-labelledby=\"appSwitcherDropdown\"\n  >\n    <div class=\"app-switcher-sagcloud\" *ngIf=\"oneCloudApps && oneCloudApps.length > 0\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        *ngFor=\"let app of oneCloudApps\"\n        [href]=\"getHref(app)\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n    <div class=\"app-switcher\">\n      <a\n        title=\"{{ app.name | humanizeAppName | async }}\"\n        class=\"appLink\"\n        [ngClass]=\"isActive(app) ? 'active' : ''\"\n        *ngFor=\"let app of apps\"\n        [href]=\"getHref(app)\"\n      >\n        <c8y-app-icon [app]=\"app\" [name]=\"app.name\" [contextPath]=\"app.contextPath\"></c8y-app-icon>\n        <span class=\"text-truncate-wrap\">{{ app | humanizeAppName | async }}</span>\n      </a>\n    </div>\n  </div>\n</div>\n"
            })
        ], AppSwitcherComponent);
        return AppSwitcherComponent;
    }());

    var documentationItems = [
        {
            icon: 'c8y-c8y-data',
            label: gettext('Concepts guide`KEEP_ORIGINAL`'),
            url: '/concepts/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-user',
            label: gettext('User guide`KEEP_ORIGINAL`'),
            url: '/users-guide/getting-started',
            type: 'doc'
        },
        {
            icon: 'c8y-device-management',
            label: gettext('Device guides`KEEP_ORIGINAL`'),
            url: '/devices/overview',
            type: 'doc'
        },
        {
            icon: 'c8y-book',
            label: gettext('Cumulocity IoT Edge`KEEP_ORIGINAL`'),
            url: '/edge/overview',
            type: 'doc'
        },
        {
            icon: 'c8y-tools',
            label: gettext('Microservice SDK guide`KEEP_ORIGINAL`'),
            url: '/microservice-sdk/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-tools',
            label: gettext('Device SDK guide`KEEP_ORIGINAL`'),
            url: '/device-sdk/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-smart-rest',
            label: gettext('Web SDK guide`KEEP_ORIGINAL`'),
            url: '/web/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-data-explorer',
            label: gettext('Streaming analytics guide`KEEP_ORIGINAL`'),
            url: '/apama/introduction',
            type: 'doc'
        },
        {
            icon: 'c8y-bookmark',
            label: gettext('Reference guide`KEEP_ORIGINAL`'),
            url: '/reference/rest-implementation',
            type: 'doc'
        },
        {
            icon: 'gavel',
            label: gettext('Legal notices'),
            url: 'https://documentation.softwareag.com/legal/',
            type: 'doc'
        }
    ];

    var HOOK_DOCS = new core.InjectionToken('Hook docs');

    var DocsService = /** @class */ (function () {
        function DocsService(options, app, factories, router) {
            if (factories === void 0) { factories = []; }
            this.options = options;
            this.app = app;
            if (!factories) {
                factories = [];
            }
            factories.push(this);
            var refreshTrigger = this.app.map(function (_a) {
                var supportUrl = _a.supportUrl;
                return supportUrl;
            });
            this.items$ = fromTrigger(router, refreshTrigger, factories).pipe(operators.startWith([]), operators.shareReplay(1));
        }
        DocsService.prototype.getBaseUrl = function () {
            return this.options.get('docsBaseUrl', 'https://www.cumulocity.com/guides');
        };
        Object.defineProperty(DocsService.prototype, "templateStr", {
            get: function () {
                return this.options.get('guideHrefTemplate', '${docsBaseUrl}${partialUrl}');
            },
            enumerable: true,
            configurable: true
        });
        DocsService.prototype.getUserGuideLink = function (link) {
            if (/^https?:/.test(link)) {
                return link;
            }
            if (this.getBaseUrl === null) {
                return null;
            }
            return this.getLink(this.templateStr, link);
        };
        DocsService.prototype.list = function () {
            return this.items$
                .pipe(operators.filter(function (i) { return !!i.length; }), operators.first())
                .toPromise();
        };
        DocsService.prototype.refresh = function () {
            // no op
        };
        DocsService.prototype.get = function () {
            var _this = this;
            // use the function as a factory
            var _a = this.options.get('docs', {}), links = _a.links, noDefault = _a.noDefault, _b = _a.excludeDefault, excludeDefault = _b === void 0 ? [] : _b;
            var supportUrl = this.app.state.supportUrl;
            var staticLinks = noDefault
                ? []
                : documentationItems
                    .map(function (item) { return (__assign({}, item, { url: _this.getUserGuideLink(item.url) })); })
                    .filter(function (_a) {
                    var url = _a.url;
                    return !excludeDefault.some(function (e) { return new RegExp(e).test(url); });
                });
            if (links) {
                // backwards compatibility
                links.map(function (lnk) {
                    if (lodashEs.isUndefined(lnk.type)) {
                        lnk.type = 'doc';
                        return lnk;
                    }
                });
                staticLinks = staticLinks.concat(links);
            }
            if (supportUrl) {
                staticLinks.push({
                    icon: 'comments',
                    label: gettext('Forum support'),
                    url: supportUrl,
                    type: 'doc'
                });
            }
            return staticLinks;
        };
        DocsService.prototype.getLink = function (templateStr, partialLink) {
            if (!templateStr) {
                return undefined;
            }
            return templateStr
                .replace(/\${docsBaseUrl}/, this.getBaseUrl())
                .replace(/\${partialUrl}/, this.prefixWithSlash(partialLink));
        };
        DocsService.prototype.prefixWithSlash = function (partialLink) {
            if (partialLink === void 0) { partialLink = ''; }
            var shouldPrefix = !(partialLink && /^\//.test(partialLink));
            var prefix = shouldPrefix ? '/' : '';
            return "" + prefix + partialLink;
        };
        DocsService.ctorParameters = function () { return [
            { type: OptionsService },
            { type: AppStateService },
            { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [HOOK_DOCS,] }] },
            { type: router.Router }
        ]; };
        DocsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function DocsService_Factory() { return new DocsService(core.ɵɵinject(OptionsService), core.ɵɵinject(AppStateService), core.ɵɵinject(HOOK_DOCS, 8), core.ɵɵinject(router.Router)); }, token: DocsService, providedIn: "root" });
        DocsService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __param(2, core.Optional()), __param(2, core.Inject(HOOK_DOCS))
        ], DocsService);
        return DocsService;
    }());

    var HeaderBarComponent = /** @class */ (function () {
        function HeaderBarComponent(headerService, actionService, breadcrumbService, searchService, appState, userMenuService, docs) {
            this.headerService = headerService;
            this.actionService = actionService;
            this.breadcrumbService = breadcrumbService;
            this.searchService = searchService;
            this.appState = appState;
            this.userMenuService = userMenuService;
            this.docs = docs;
            this.canToggle$ = this.headerService.hasItemsInNavigator$;
            this.appState$ = this.appState.state$;
            this.drawerOpen = false;
            this.headerOpen = false;
        }
        HeaderBarComponent.prototype.ngAfterViewInit = function () {
            this.headerService.verifyIfNavOpen();
        };
        HeaderBarComponent.prototype.toggle = function () {
            this.headerOpen = !this.headerOpen;
        };
        HeaderBarComponent.ctorParameters = function () { return [
            { type: HeaderService },
            { type: ActionService },
            { type: BreadcrumbService },
            { type: SearchService },
            { type: AppStateService },
            { type: UserMenuService },
            { type: DocsService }
        ]; };
        HeaderBarComponent = __decorate([
            core.Component({
                selector: 'c8y-header-bar',
                template: "<div\n  class=\"app-main-header\"\n  [ngClass]=\"{\n    open: headerService.navigatorOpen$ | async,\n    drawerOpen: drawerOpen\n  }\"\n>\n  <div class=\"header-bar\">\n    <button\n      *ngIf=\"canToggle$ | async\"\n      type=\"button\"\n      class=\"navigator-toggle main-header-button\"\n      title=\"{{ 'Toggle navigator' | translate }}\"\n      (click)=\"headerService.toggleNavigator()\"\n    >\n      <i [c8yIcon]=\"'angle-double-right'\"></i>\n    </button>\n    <div class=\"app-view\">\n      <c8y-app-icon\n        [name]=\"(appState$ | async).app.name\"\n        [contextPath]=\"(appState$ | async).app.contextPath\"\n      ></c8y-app-icon>\n\n      <span class=\"page-header\">\n        <c8y-title-outlet></c8y-title-outlet>\n        <c8y-breadcrumb-outlet\n          *ngIf=\"headerService.shouldShowBreadcrumbs()\"\n          [breadcrumbs]=\"breadcrumbService.items$ | async\"\n          class=\"app-breadcrumbs\"\n        ></c8y-breadcrumb-outlet>\n      </span>\n    </div>\n    <c8y-search-outlet\n      title=\"{{ 'Search' | translate }}\"\n      [search]=\"searchService.items$ | async\"\n      class=\"main-header-item\"\n    ></c8y-search-outlet>\n    <c8y-action-outlet\n      title=\"{{ 'Add' | translate }}\"\n      [items]=\"actionService.items$ | async\"\n      class=\"main-header-item\"\n    ></c8y-action-outlet>\n    <c8y-app-switcher\n      title=\"{{ 'Application switcher' | translate }}\"\n      class=\"main-header-item\"\n    ></c8y-app-switcher>\n    <c8y-user-menu-outlet\n      [items]=\"(userMenuService.state$ | async).userMenuItems\"\n      class=\"main-header-item\"\n    ></c8y-user-menu-outlet>\n\n    <button\n      title=\"{{ 'Toggle side drawer' | translate }}\"\n      class=\"drawer-toggle main-header-button\"\n      *ngIf=\"(appState$ | async).showRightDrawer\"\n      (click)=\"drawerOpen = !drawerOpen\"\n    >\n      <i [c8yIcon]=\"'angle-double-left'\"></i>\n    </button>\n  </div>\n  <div class=\"head-toggler\">\n    <button title=\"{{ 'Toggle' | translate }}\" type=\"button\" (click)=\"toggle()\">\n      <i [c8yIcon]=\"'angle-double-right'\"></i>\n    </button>\n  </div>\n  <c8y-right-drawer\n    *ngIf=\"(appState$ | async).showRightDrawer\"\n    [app]=\"(appState$ | async).app\"\n    [quickLinks]=\"docs.items$ | async\"\n    [helpAndSupport]=\"docs.items$ | async\"\n  >\n  </c8y-right-drawer>\n  <div class=\"loading-bar\" [ngClass]=\"{ active: (appState$ | async).isLoading }\"></div>\n</div>\n"
            })
        ], HeaderBarComponent);
        return HeaderBarComponent;
    }());

    var TitleOutletComponent = /** @class */ (function () {
        function TitleOutletComponent(headerService, element, zone) {
            var _this = this;
            this.headerService = headerService;
            this.element = element;
            this.zone = zone;
            this.title = undefined;
            var title$ = this.headerService.map(function (state) { return state.title; });
            title$.subscribe(function (title) { return (_this.title = title); });
            this.zone.runOutsideAngular(function () {
                title$
                    .pipe(operators.debounceTime(100), operators.map(function () { return _this.element.nativeElement.querySelector('h1'); }), operators.filter(function (el) { return el !== null; }), operators.map(function (el) { return el.innerText; }), operators.filter(Boolean))
                    .subscribe(function (title) { return headerService.changePageTitle(title); });
            });
        }
        TitleOutletComponent.ctorParameters = function () { return [
            { type: HeaderService },
            { type: core.ElementRef },
            { type: core.NgZone }
        ]; };
        TitleOutletComponent = __decorate([
            core.Component({
                selector: 'c8y-title-outlet',
                template: "<div class=\"c8y-ui-title\">\n  <div class=\"title\" *c8yOutlet=\"title\"></div>\n</div>\n"
            })
        ], TitleOutletComponent);
        return TitleOutletComponent;
    }());

    var TitleComponent = /** @class */ (function () {
        function TitleComponent(headerService) {
            this.headerService = headerService;
        }
        TitleComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.viewInitTimeout = setTimeout(function () {
                return _this.headerService.changeTitle(_this.template);
            });
        };
        TitleComponent.prototype.ngOnDestroy = function () {
            if (this.headerService.state.title === this.template) {
                clearTimeout(this.viewInitTimeout);
                this.headerService.changeTitle();
            }
        };
        TitleComponent.ctorParameters = function () { return [
            { type: HeaderService }
        ]; };
        __decorate([
            core.ViewChild('template', { static: true })
        ], TitleComponent.prototype, "template", void 0);
        TitleComponent = __decorate([
            core.Component({
                selector: 'c8y-title',
                template: "<ng-template #template>\n  <h1 class=\"text-truncate\">\n    <ng-content></ng-content>\n  </h1>\n</ng-template>\n\n"
            })
        ], TitleComponent);
        return TitleComponent;
    }());

    var NavigatorItemComponent = /** @class */ (function () {
        function NavigatorItemComponent(service) {
            this.service = service;
            this.priority = 0;
            this.nodeData = new NavigatorNode();
        }
        NavigatorItemComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.ngOnChanges();
            setTimeout(function () { return _this.service.add(_this.nodeData); });
        };
        NavigatorItemComponent.prototype.ngOnChanges = function () {
            this.nodeData.icon = this.icon;
            this.nodeData.label = this.label;
            this.nodeData.path = this.path;
            this.nodeData.priority = this.priority;
            this.nodeData.iconTemplate = !this.icon ? this.template : undefined;
            this.nodeData.icon = this.icon;
        };
        NavigatorItemComponent.prototype.ngOnDestroy = function () {
            this.service.remove(this.nodeData);
        };
        NavigatorItemComponent.ctorParameters = function () { return [
            { type: NavigatorService }
        ]; };
        __decorate([
            core.ViewChild('iconTpl', { static: true })
        ], NavigatorItemComponent.prototype, "template", void 0);
        __decorate([
            core.Input()
        ], NavigatorItemComponent.prototype, "label", void 0);
        __decorate([
            core.Input()
        ], NavigatorItemComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], NavigatorItemComponent.prototype, "path", void 0);
        __decorate([
            core.Input()
        ], NavigatorItemComponent.prototype, "priority", void 0);
        NavigatorItemComponent = __decorate([
            core.Component({
                selector: 'c8y-navigator-item',
                template: '<ng-template #iconTpl><ng-content></ng-content></ng-template>'
            })
        ], NavigatorItemComponent);
        return NavigatorItemComponent;
    }());

    var NavigatorIconComponent = /** @class */ (function () {
        function NavigatorIconComponent() {
        }
        Object.defineProperty(NavigatorIconComponent.prototype, "icon", {
            get: function () {
                var DEFAULT_ICON = 'cog';
                return this.node.icon || DEFAULT_ICON;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NavigatorIconComponent.prototype, "iconClass", {
            get: function () {
                return "fa-" + this.icon;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input()
        ], NavigatorIconComponent.prototype, "node", void 0);
        NavigatorIconComponent = __decorate([
            core.Component({
                selector: 'c8y-navigator-icon',
                template: "<i class=\"icon\" [c8yIcon]=\"icon\"></i>"
            })
        ], NavigatorIconComponent);
        return NavigatorIconComponent;
    }());

    var NavigatorNodeComponent = /** @class */ (function () {
        function NavigatorNodeComponent(componentFactoryResolver, navigator) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.navigator = navigator;
            this.nodeClick = new core.EventEmitter();
        }
        NavigatorNodeComponent_1 = NavigatorNodeComponent;
        NavigatorNodeComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.childrenNodes.forEach(function (n) { return n.parentNode = _this; });
            this.viewInitTimeout = setTimeout(function () {
                _this.updateIcon();
                _this.openOnFirstUrl();
                _this.expandParentIfActive();
                _this.node.confirm = _this.confirm;
            });
        };
        NavigatorNodeComponent.prototype.openOnFirstUrl = function () {
            if (this.navigator.openOnFirstUrl(this.node) && !this.node.open) {
                this.expandCollapse(true);
            }
        };
        Object.defineProperty(NavigatorNodeComponent.prototype, "expandTitle", {
            get: function () {
                return !this.node.open ? 'Expand' : 'Collapse';
            },
            enumerable: true,
            configurable: true
        });
        NavigatorNodeComponent.prototype.click = function (from, $event) {
            var _a;
            if (from === void 0) { from = 'link'; }
            var open;
            if (from === 'expander') {
                if ($event) {
                    $event.stopPropagation();
                    $event.preventDefault();
                }
                open = !this.node.open;
            }
            else {
                open = this.routerLinkActive && this.routerLinkActive.isActive ? true : !this.node.open;
            }
            if (open !== this.node.open) {
                this.expandCollapse(open, false, (_a = {}, _a[from] = true, _a.$event = $event, _a));
            }
            this.nodeClick.emit(from);
        };
        NavigatorNodeComponent.prototype.expandCollapse = function (open, recursive, forNode) {
            if (forNode === void 0) { forNode = {}; }
            this.node.open = open;
            // Also close children
            if (recursive) {
                this.childrenNodes.forEach(function (n) { return n.expandCollapse(open, recursive); });
            }
            forNode.open = open;
            this.node.click(forNode);
        };
        NavigatorNodeComponent.prototype.ngOnDestroy = function () {
            clearTimeout(this.viewInitTimeout);
            this.node.destroy();
        };
        NavigatorNodeComponent.prototype.expandParentIfActive = function () {
            if (this.routerLinkActive && this.routerLinkActive.isActive && this.parentNode) {
                this.parentNode.expandCollapse(true);
            }
        };
        NavigatorNodeComponent.prototype.updateIcon = function () {
            if (this.node.iconTemplate) {
                this.updateIconTemplate();
            }
            else {
                this.updateIconComponent();
            }
        };
        NavigatorNodeComponent.prototype.updateIconComponent = function () {
            var componentType = NavigatorIconComponent;
            if (this.node && this.node.iconComponent) {
                componentType = this.node.iconComponent;
            }
            this.iconSlot.clear();
            var iconComponentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            var componentRef = this.iconSlot.createComponent(iconComponentFactory);
            componentRef.instance.node = this.node;
        };
        NavigatorNodeComponent.prototype.updateIconTemplate = function () {
            this.iconSlot.clear();
            this.iconSlot.createEmbeddedView(this.node.iconTemplate);
        };
        var NavigatorNodeComponent_1;
        NavigatorNodeComponent.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver },
            { type: NavigatorService }
        ]; };
        __decorate([
            core.ViewChild('icon', { read: core.ViewContainerRef, static: false })
        ], NavigatorNodeComponent.prototype, "iconSlot", void 0);
        __decorate([
            core.Input()
        ], NavigatorNodeComponent.prototype, "node", void 0);
        __decorate([
            core.Input()
        ], NavigatorNodeComponent.prototype, "isRoot", void 0);
        __decorate([
            core.ViewChild(router.RouterLinkActive, { static: false })
        ], NavigatorNodeComponent.prototype, "routerLinkActive", void 0);
        __decorate([
            core.ViewChildren(NavigatorNodeComponent_1)
        ], NavigatorNodeComponent.prototype, "childrenNodes", void 0);
        __decorate([
            core.Output()
        ], NavigatorNodeComponent.prototype, "nodeClick", void 0);
        __decorate([
            core.ViewChild(PopoverConfirmComponent, { static: false })
        ], NavigatorNodeComponent.prototype, "confirm", void 0);
        NavigatorNodeComponent = NavigatorNodeComponent_1 = __decorate([
            core.Component({
                selector: 'c8y-navigator-node-display',
                template: "<div\n  class=\"slot\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged }\"\n>\n  <ng-container>\n    <a\n      class=\"link\"\n      draggable=\"false\"\n      (dragover)=\"node.canDrop && $event.preventDefault()\"\n      (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n      (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n      title=\"{{node.label | translate}}\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [routerLinkActive]=\"node.canNavigate ? 'active' : ''\"\n      [routerLinkActiveOptions]=\"{exact:node.routerLinkExact}\"\n      (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n      [ngClass]=\"{'root-link':isRoot, open: node.open, parent: node.hasChildren, 'dragged-hover': node.draggedHover && !node.dragged}\"\n    >\n      <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n    </a>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node-display\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    >\n    </c8y-navigator-node-display>\n  </div>\n</div>\n\n<ng-template #inner>\n  <!-- loader -->\n  <i\n    class=\"fa-spin loadingIndicator\"\n    [c8yIcon]=\"'circle-o-notch'\"\n    *ngIf=\"node.loading && !isRoot\"\n  >\n  </i>\n\n  <!-- icon -->\n  <div (click)=\"click('icon', $event)\">\n    <ng-container #icon></ng-container>\n  </div>\n\n  <!--title  -->\n  <span>{{node.label | translate}}</span>\n\n  <i\n    class=\"expander\"\n    [c8yIcon]=\"'chevron-down'\"\n    *ngIf=\"node.hasChildren\"\n    (click)=\"click('expander', $event)\"\n    title=\"{{expandTitle}}\"\n  >\n  </i>\n\n  <c8y-popover-confirm\n    outsideClick=\"true\"\n    containerClass=\"navigator-popover\"\n  ></c8y-popover-confirm>\n</ng-template>\n"
            })
        ], NavigatorNodeComponent);
        return NavigatorNodeComponent;
    }());

    var NavigatorOutletComponent = /** @class */ (function () {
        function NavigatorOutletComponent(headerService) {
            this.headerService = headerService;
            this.open = true;
        }
        /**
         * Closes the navigator on click if the window is small.
         */
        NavigatorOutletComponent.prototype.collapseNavigator = function (from) {
            if (from === 'link' && !this.headerService.largeWidth) {
                this.headerService.closeNavigator();
            }
        };
        NavigatorOutletComponent.prototype.trackByPathOrLabel = function (index, node) {
            return node.path ? node.path : node.label;
        };
        NavigatorOutletComponent.ctorParameters = function () { return [
            { type: HeaderService }
        ]; };
        __decorate([
            core.Input()
        ], NavigatorOutletComponent.prototype, "nodes", void 0);
        __decorate([
            core.Input()
        ], NavigatorOutletComponent.prototype, "open", void 0);
        NavigatorOutletComponent = __decorate([
            core.Component({
                selector: 'c8y-navigator-outlet, c8y-ui-navigator',
                template: "<nav class=\"navigator\" *ngIf=\"nodes && nodes.length > 0\" [ngClass]=\"{ open: open }\">\n  <ng-content select=\".navigator-slot-top\"></ng-content>\n  <ul class=\"navigatorContent\">\n    <c8y-navigator-node-display (nodeClick)=\"collapseNavigator($event)\" [node]=\"node\" *ngFor=\"let node of nodes trackBy trackByPathOrLabel\" [isRoot]=\"true\"></c8y-navigator-node-display>\n  </ul>\n  <ng-content select=\".navigator-slot-bottom\"></ng-content>\n</nav>\n"
            })
        ], NavigatorOutletComponent);
        return NavigatorOutletComponent;
    }());

    /**
     * The angular module definition for the navigator.
     * @exports NavigatorOutletComponent
     * @exports NavigatorItemComponent
     */
    var NavigatorModule = /** @class */ (function () {
        function NavigatorModule() {
        }
        NavigatorModule = __decorate([
            core.NgModule({
                declarations: [
                    NavigatorOutletComponent,
                    NavigatorNodeComponent,
                    NavigatorItemComponent,
                    NavigatorIconComponent
                ],
                imports: [
                    router.RouterModule,
                    collapse.CollapseModule.forRoot(),
                    CommonModule,
                    ModalModule
                ],
                exports: [
                    NavigatorOutletComponent,
                    NavigatorItemComponent
                ],
                entryComponents: [
                    NavigatorIconComponent
                ]
            })
        ], NavigatorModule);
        return NavigatorModule;
    }());

    var RightDrawerComponent = /** @class */ (function () {
        function RightDrawerComponent() {
            this.quickLinks = [];
            this.helpAndSupport = [];
        }
        Object.defineProperty(RightDrawerComponent.prototype, "_quickLinks", {
            set: function (data) {
                if (data) {
                    this.quickLinks = data.filter(function (d) { return d.type === 'quicklink'; });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RightDrawerComponent.prototype, "_helpAndSupport", {
            set: function (data) {
                if (data) {
                    this.helpAndSupport = data.filter(function (d) { return d.type === 'doc'; });
                }
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input('quickLinks')
        ], RightDrawerComponent.prototype, "_quickLinks", null);
        __decorate([
            core.Input('helpAndSupport')
        ], RightDrawerComponent.prototype, "_helpAndSupport", null);
        __decorate([
            core.Input()
        ], RightDrawerComponent.prototype, "app", void 0);
        RightDrawerComponent = __decorate([
            core.Component({
                selector: 'c8y-right-drawer',
                template: "<div class=\"c8y-right-drawer\">\n\n  <div class=\"summary\">\n    <h4 class=\"text-light\">{{'Welcome to' | translate}} {{app | humanizeAppName | async}}</h4>\n  </div>\n\n  <div *ngIf=\"quickLinks.length\">\n    <div class=\"legend form-block\" translate>Quick links</div>\n    <div class=\"quick-links-drawer\">\n      <ng-container *ngFor=\"let quickLink of quickLinks\">\n        <a class=\"quick-link\"\n          [href]=\"quickLink.url || '#'\"\n          (click)=\"quickLink.click && $event.preventDefault(); quickLink.click();\">\n          <h2 *ngIf=\"quickLink.icon\"><i class=\"{{quickLink.icon}}\"></i></h2>\n          <img \n            *ngIf=\"quickLink.iconSrc\" \n            [src]=\"quickLink.iconSrc\" \n            style=\"max-width:50px;\" \n            class=\"img-responsive center-block\"\n            onerror=\"this.style.display = 'none'\">\n          {{quickLink.label | translate}}\n        </a>\n      </ng-container>\n    </div>\n  </div>\n\n  <div *ngIf=\"helpAndSupport.length\">\n    <div class=\"legend form-block top-m-lg\" translate>Help &amp; support</div>\n    <div class=\"help-support\" *ngFor=\"let link of helpAndSupport\">\n      <a class=\"help-and-support-link text-truncate\" target=\"_blank\" rel=\"noopener noreferrer\" [href]=\"link.url\">\n        <i [c8yIcon]=\"link.icon\"></i>\n        <span title=\"{{link.label | translate}}\" style=\"display: inline;\">{{link.label | translate}}</span>\n      </a>\n    </div>\n  </div>\n\n</div>\n"
            })
        ], RightDrawerComponent);
        return RightDrawerComponent;
    }());

    /**
     * The angular module definition for the header of the application.
     * @exports HeaderBarComponent
     * @exports TitleComponent
     * @exports TitleOutletComponent
     * @exports AppIconComponent
     * @exports AppSwitcherComponent
     */
    var HeaderModule = /** @class */ (function () {
        function HeaderModule() {
        }
        HeaderModule = __decorate([
            core.NgModule({
                declarations: [
                    TitleComponent,
                    HeaderBarComponent,
                    TitleOutletComponent,
                    AppIconComponent,
                    AppSwitcherComponent,
                    RightDrawerComponent
                ],
                imports: [
                    dropdown.BsDropdownModule,
                    UserModule,
                    SearchModule,
                    CommonModule,
                    ActionModule,
                    BreadcrumbModule,
                    NavigatorModule
                ],
                exports: [
                    HeaderBarComponent,
                    TitleComponent,
                    TitleOutletComponent,
                    AppIconComponent,
                    AppSwitcherComponent,
                    RightDrawerComponent
                ]
            })
        ], HeaderModule);
        return HeaderModule;
    }());

    var ChangePasswordComponent = /** @class */ (function () {
        function ChangePasswordComponent(loginService, users, passwordStrengthCheckerService, options, alert) {
            this.loginService = loginService;
            this.users = users;
            this.passwordStrengthCheckerService = passwordStrengthCheckerService;
            this.options = options;
            this.alert = alert;
            this.onChangeView = new core.EventEmitter();
            this.passwordPattern = /^[a-zA-Z0-9`~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]{8,32}$/;
            this.isLoading = false;
            this.model = {
                tenantId: '',
                email: '',
                newPassword: '',
                newPasswordConfirm: ''
            };
            this.enforcePasswordStrength = false;
            this.emailReadOnly = false;
            this.TOKEN_PARAM = 'token';
            this.EMAIL_PARAM = 'email';
        }
        ChangePasswordComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.model.tenantId = this.loginService.getTenant();
                    this.model.email = this.options.get(this.EMAIL_PARAM, '');
                    this.emailReadOnly = !!this.model.email;
                    this.enforcePasswordStrength = this.loginService.getEnforcePasswordStrength();
                    return [2 /*return*/];
                });
            });
        };
        ChangePasswordComponent.prototype.changePassword = function () {
            return __awaiter(this, void 0, void 0, function () {
                var passwordStrengthColor, resetPassword, res, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            passwordStrengthColor = this.passwordStrengthCheckerService.getStrengthColor(this.model.newPassword);
                            resetPassword = {
                                token: this.credentials.token,
                                email: this.model.email,
                                newPassword: this.model.newPassword,
                                passwordStrength: passwordStrengthColor.passwordStrength
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            this.isLoading = true;
                            return [4 /*yield*/, this.users.resetPassword(resetPassword, this.model.tenantId)];
                        case 2:
                            res = (_a.sent()).res;
                            if (res.status === 200) {
                                this.loginService.addSuccessMessage('password_changed');
                                this.credentials.token = undefined;
                                this.options.set(this.TOKEN_PARAM, undefined);
                                this.onChangeView.emit({ view: exports.LoginViews.Credentials });
                            }
                            return [3 /*break*/, 5];
                        case 3:
                            e_1 = _a.sent();
                            this.alert.addServerFailure(e_1);
                            return [3 /*break*/, 5];
                        case 4:
                            this.loginService.reset();
                            this.isLoading = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ChangePasswordComponent.ctorParameters = function () { return [
            { type: LoginService },
            { type: client.UserService },
            { type: PasswordService },
            { type: OptionsService },
            { type: AlertService }
        ]; };
        __decorate([
            core.Input()
        ], ChangePasswordComponent.prototype, "credentials", void 0);
        __decorate([
            core.Output()
        ], ChangePasswordComponent.prototype, "onChangeView", void 0);
        ChangePasswordComponent = __decorate([
            core.Component({
                selector: 'c8y-change-password',
                template: "<form\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"changePassword()\"\n  #changePasswordForm=\"ngForm\"\n  novalidate\n>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n      [readonly]=\"emailReadOnly\"\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>New password</label>\n    <input\n      [(ngModel)]=\"model.newPassword\"\n      #newPassword=\"ngModel\"\n      type=\"password\"\n      name=\"newPassword\"\n      class=\"form-control\"\n      placeholder=\"{{ 'New password' | translate }}\"\n      [pattern]=\"passwordPattern\"\n      autocomplete=\"new-password\"\n      required\n    />\n    <c8y-messages>\n      <c8y-message\n        name=\"pattern\"\n        [text]=\"loginService.ERROR_MESSAGES.pattern_newPassword\"\n      ></c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Confirm password</label>\n    <input\n      [(ngModel)]=\"model.newPasswordConfirm\"\n      #newPasswordConfirm=\"ngModel\"\n      type=\"password\"\n      name=\"newPasswordConfirm\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Confirm password' | translate }}\"\n      passwordConfirm=\"newPassword\"\n      autocomplete=\"new-password\"\n      required\n    />\n    <c8y-messages>\n      <c8y-message\n        name=\"passwordConfirm\"\n        [text]=\"loginService.ERROR_MESSAGES.passwordConfirm\"\n      ></c8y-message>\n    </c8y-messages>\n  </c8y-form-group>\n\n  <c8y-password-strength\n    [password]=\"model.newPassword\"\n    [hidden]=\"!model.newPassword\"\n  ></c8y-password-strength>\n  <c8y-password-check-list\n    [password]=\"model.newPassword\"\n    [hidden]=\"!model.newPassword || !enforcePasswordStrength\"\n  ></c8y-password-check-list>\n\n  <button\n    title=\"{{ 'Set password' | translate }}\"\n    [disabled]=\"!changePasswordForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Set password\n  </button>\n</form>\n"
            })
        ], ChangePasswordComponent);
        return ChangePasswordComponent;
    }());

    var CredentialsComponent = /** @class */ (function () {
        function CredentialsComponent(loginService, alert, ui) {
            this.loginService = loginService;
            this.alert = alert;
            this.ui = ui;
            this.onChangeView = new core.EventEmitter();
            this.LOGIN_VIEWS = exports.LoginViews;
            this.model = {};
            this.isLoading = false;
            this.showLoginForm = false;
            this.showBasicAuth = false;
            this.oauthOptions = {};
            this.PASSWORD_RESET_HEADER_NAME = 'passwordresettoken';
        }
        CredentialsComponent.prototype.ngOnInit = function () {
            var _a = this.loginService, oauthOptions = _a.oauthOptions, loginMode = _a.loginMode;
            this.model.tenant = this.loginService.getTenant();
            this.showLoginForm = typeof loginMode.visibleOnLoginPage === 'undefined' || loginMode.visibleOnLoginPage;
            this.showBasicAuth = loginMode.type === 'BASIC';
            this.oauthOptions = oauthOptions;
        };
        CredentialsComponent.prototype.redirectToOauth = function () {
            this.loginService.redirectToOauth();
        };
        /**
         * Allows to login into the application using basic auth.
         * If successful logged in the client is set in shared/cumulocity.service.ts
         */
        CredentialsComponent.prototype.login = function () {
            return __awaiter(this, void 0, void 0, function () {
                var basicAuth, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            this.isLoading = true;
                            basicAuth = this.loginService.useBasicAuth(this.model);
                            return [4 /*yield*/, this.loginService.login(basicAuth, this.model)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2:
                            e_1 = _a.sent();
                            if (e_1.res && e_1.res.headers && e_1.res.headers.get(this.PASSWORD_RESET_HEADER_NAME)) {
                                this.handlePasswordReset(e_1.res);
                            }
                            else if (e_1.res && e_1.res.status === 401 && (/pin/i).test(e_1.data.message)) {
                                this.handleSmsChallenge(e_1.data.message);
                            }
                            else if (e_1.res && e_1.res.status === 401 && (/TOTP/i).test(e_1.data.message)) {
                                this.handleTotpChallenge(e_1.data.message);
                            }
                            else {
                                this.loginService.reset();
                                this.alert.addServerFailure(e_1);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            this.isLoading = false;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        CredentialsComponent.prototype.handlePasswordReset = function (e) {
            this.alert.removeLastDanger();
            this.model.token = e.headers.get(this.PASSWORD_RESET_HEADER_NAME);
            this.onChangeView.emit({ view: exports.LoginViews.ChangePassword, credentials: this.model });
        };
        CredentialsComponent.prototype.handleTotpChallenge = function (message) {
            if ((/TOTP setup required/i).test(message)) {
                this.onChangeView.emit({ view: exports.LoginViews.TotpSetup, credentials: this.model });
            }
            else {
                this.onChangeView.emit({ view: exports.LoginViews.TotpChallenge, credentials: this.model });
            }
        };
        CredentialsComponent.prototype.handleSmsChallenge = function (message) {
            if ((/pin has already been generated/i).test(message)) {
                this.alert.warning(gettext('The verification code was already sent. For a new verification code, please click on the link above.'));
            }
            this.alert.removeLastDanger();
            this.onChangeView.emit({ view: exports.LoginViews.SmsChallenge, credentials: this.model });
        };
        CredentialsComponent.ctorParameters = function () { return [
            { type: LoginService },
            { type: AlertService },
            { type: AppStateService }
        ]; };
        __decorate([
            core.Output()
        ], CredentialsComponent.prototype, "onChangeView", void 0);
        CredentialsComponent = __decorate([
            core.Component({
                selector: 'c8y-credentials',
                template: "<div id=\"oauth\" *ngIf=\"oauthOptions.initRequest && oauthOptions.visibleOnLoginPage\">\n  <button\n    title=\"{{ oauthOptions.buttonName | translate }}\"\n    (click)=\"redirectToOauth()\"\n    class=\"btn btn-block btn-lg form-group\"\n  >\n    <i [c8yIcon]=\"'sign-in'\" class=\"pull-left\"></i>\n    {{ oauthOptions.buttonName | translate }}\n  </button>\n</div>\n\n<form\n  role=\"form\"\n  class=\"loginForm\"\n  (ngSubmit)=\"login()\"\n  #loginForm=\"ngForm\"\n  *ngIf=\"showLoginForm\"\n  novalidate\n>\n  <div\n    class=\"legend form-block center\"\n    *ngIf=\"!(oauthOptions.initRequest && oauthOptions.visibleOnLoginPage); else orLegend\"\n    translate\n  >\n    Login\n  </div>\n  <ng-template #orLegend>\n    <div class=\"legend form-block center\" translate>or</div>\n  </ng-template>\n\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label for=\"tenant\" translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenant\"\n      #tenant=\"ngModel\"\n      type=\"text\"\n      name=\"tenant\"\n      id=\"tenant\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"user\" translate>Username</label>\n    <input\n      [(ngModel)]=\"model.user\"\n      #user=\"ngModel\"\n      type=\"text\"\n      name=\"user\"\n      id=\"user\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Username' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n  <c8y-form-group>\n    <label for=\"password\" translate>Password</label>\n    <input\n      [(ngModel)]=\"model.password\"\n      #password=\"ngModel\"\n      type=\"password\"\n      name=\"password\"\n      id=\"password\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Password' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n  <div class=\"form-group\" *ngIf=\"showBasicAuth\">\n    <label class=\"c8y-checkbox\">\n      <input\n        title=\"{{ 'Remember me' | translate }}\"\n        type=\"checkbox\"\n        name=\"remember\"\n        [(ngModel)]=\"loginService.rememberMe\"\n      /><span></span>\n      {{ 'Remember me' | translate }}\n    </label>\n  </div>\n  <button\n    title=\"{{ 'Log in' | translate }}\"\n    [disabled]=\"!loginForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n  >\n    {{ 'Log in' | translate }}\n  </button>\n  <div class=\"text-center top-m-sm\">\n    <a\n      title=\"{{ 'Forgot password?' | translate }}\"\n      class=\"btn btn-link btn-sm\"\n      (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.RecoverPassword })\"\n      >{{ 'Forgot password?' | translate }}</a\n    >\n  </div>\n  <div class=\"text-center top-m-sm\" *ngIf=\"!!(ui.state$ | async).loginExtraLink\">\n    <a\n      title=\"{{ (ui.state$ | async).loginExtraLink.label }}\"\n      [href]=\"(ui.state$ | async).loginExtraLink.url\"\n      class=\"btn btn-link btn-sm\"\n    >\n      {{ (ui.state$ | async).loginExtraLink.label }}</a\n    >\n  </div>\n</form>\n"
            })
        ], CredentialsComponent);
        return CredentialsComponent;
    }());

    var LoginComponent = /** @class */ (function () {
        /**
         * Just DI.
         */
        function LoginComponent(loginService, options, alert) {
            this.loginService = loginService;
            this.options = options;
            this.alert = alert;
            this.currentView = exports.LoginViews.None;
            this.LOGIN_VIEWS = exports.LoginViews;
            this.disabled = false;
            this.credentials = {};
            this.displayAlerts = false;
            this.TOKEN_PARAM = 'token';
        }
        LoginComponent.prototype.ngOnInit = function () {
            var token = this.getResetPasswordToken();
            if (this.loginService.isFirstLogin) {
                if (!token) {
                    this.loginAutomatically();
                }
                else {
                    this.credentials.token = token;
                    this.reset();
                }
            }
            this.loginService.isFirstLogin = false;
        };
        LoginComponent.prototype.handleLoginTemplate = function (event) {
            this.currentView = event.view;
            this.credentials = event.credentials || {};
        };
        LoginComponent.prototype.onkeyup = function (event) {
            if (event.key !== 'Enter') {
                this.loginService.cleanMessages();
            }
        };
        LoginComponent.prototype.reset = function () {
            this.loginService.reset();
            this.setView();
            this.loginService.cleanMessages();
        };
        LoginComponent.prototype.loginAutomatically = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1, loginMode;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.loginService.login()];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            loginMode = this.loginService.loginMode.type;
                            if (loginMode === 'OAUTH2') {
                                this.loginService.redirectToOauth();
                            }
                            else {
                                this.reset();
                                if (loginMode === 'OAUTH2_INTERNAL' && window.location.protocol !== 'https:') {
                                    this.alert.danger(gettext('Current login mode only supports HTTPS.'));
                                }
                                else if (e_1.res && e_1.res.status === 403) {
                                    this.alert.addServerFailure(e_1);
                                }
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        LoginComponent.prototype.setView = function () {
            if (this.credentials && this.credentials.token) {
                this.handleLoginTemplate({ view: exports.LoginViews.ChangePassword, credentials: this.credentials });
            }
            else {
                this.handleLoginTemplate({ view: exports.LoginViews.Credentials });
            }
        };
        LoginComponent.prototype.getResetPasswordToken = function () {
            var token = this.options.get(this.TOKEN_PARAM);
            if (token) {
                this.options.set(this.TOKEN_PARAM, undefined); // only use once
            }
            return token;
        };
        LoginComponent.ctorParameters = function () { return [
            { type: LoginService },
            { type: OptionsService },
            { type: AlertService }
        ]; };
        __decorate([
            core.Input()
        ], LoginComponent.prototype, "name", void 0);
        __decorate([
            core.HostListener('keyup', ['$event'])
        ], LoginComponent.prototype, "onkeyup", null);
        LoginComponent = __decorate([
            core.Component({
                selector: 'c8y-login',
                template: "<div\n  class=\"loading card fadeInUp animated shadow5\"\n  *ngIf=\"currentView !== LOGIN_VIEWS.None\"\n  [ngSwitch]=\"currentView\"\n>\n  <div class=\"card-block\">\n    <img class=\"mainlogo\">\n    <c8y-credentials\n      *ngSwitchCase=\"LOGIN_VIEWS.Credentials\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-credentials>\n    <c8y-recover-password\n      *ngSwitchCase=\"LOGIN_VIEWS.RecoverPassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n    ></c8y-recover-password>\n    <c8y-change-password\n      *ngSwitchCase=\"LOGIN_VIEWS.ChangePassword\"\n      (onChangeView)=\"handleLoginTemplate($event)\"\n      [credentials]=\"credentials\"\n    ></c8y-change-password>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpChallenge\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-totp-auth\n      *ngSwitchCase=\"LOGIN_VIEWS.TotpSetup\"\n      (onCancel)=\"reset()\"\n      [view]=\"currentView\"\n      [credentials]=\"credentials\"\n    >\n    </c8y-totp-auth>\n    <c8y-sms-challenge\n      *ngSwitchCase=\"LOGIN_VIEWS.SmsChallenge\"\n      (onCancel)=\"reset()\"\n      [credentials]=\"credentials\"\n    ></c8y-sms-challenge>\n\n    <c8y-alert-outlet position=\"static\"></c8y-alert-outlet>\n  </div>\n</div>\n"
            })
        ], LoginComponent);
        return LoginComponent;
    }());

    var RecoverPasswordComponent = /** @class */ (function () {
        function RecoverPasswordComponent(users, loginService) {
            this.users = users;
            this.loginService = loginService;
            this.onChangeView = new core.EventEmitter();
            this.LOGIN_VIEWS = exports.LoginViews;
            this.isLoading = false;
            this.model = {
                email: '',
                tenantId: ''
            };
        }
        RecoverPasswordComponent.prototype.ngOnInit = function () {
            this.model.tenantId = this.loginService.getTenant();
        };
        RecoverPasswordComponent.prototype.resetPassword = function () {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, , 2, 3]);
                            this.isLoading = true;
                            return [4 /*yield*/, this.users.sendPasswordResetMail(this.model.email, this.model.tenantId)];
                        case 1:
                            res = (_a.sent()).res;
                            if (res.status === 200) {
                                this.loginService.addSuccessMessage('password_reset_requested');
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            this.loginService.reset();
                            this.isLoading = false;
                            return [7 /*endfinally*/];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        RecoverPasswordComponent.ctorParameters = function () { return [
            { type: client.UserService },
            { type: LoginService }
        ]; };
        __decorate([
            core.Output()
        ], RecoverPasswordComponent.prototype, "onChangeView", void 0);
        RecoverPasswordComponent = __decorate([
            core.Component({
                selector: 'c8y-recover-password',
                template: "<form #resetForm=\"ngForm\" role=\"form\" class=\"loginForm\" (ngSubmit)=\"resetPassword()\" novalidate>\n  <div class=\"legend form-block center\" translate>Forgot password?</div>\n  <c8y-form-group class=\"tenantField\" id=\"tenantField\" *ngIf=\"loginService.showTenant()\">\n    <label translate>Tenant ID</label>\n    <input\n      [(ngModel)]=\"model.tenantId\"\n      #tenantId=\"ngModel\"\n      type=\"text\"\n      name=\"tenantId\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Tenant ID' | translate }}\"\n      required\n    />\n  </c8y-form-group>\n\n  <c8y-form-group>\n    <label translate>Email address</label>\n    <input\n      [(ngModel)]=\"model.email\"\n      #email=\"ngModel\"\n      type=\"text\"\n      name=\"email\"\n      autocapitalize=\"off\"\n      autocorrect=\"off\"\n      class=\"form-control\"\n      placeholder=\"{{ 'Email address' | translate }}\"\n      email\n      required\n    />\n  </c8y-form-group>\n\n  <button\n    title=\"{{ 'Reset password' | translate }}\"\n    [disabled]=\"!resetForm.form.valid || isLoading\"\n    type=\"submit\"\n    class=\"btn btn-primary btn-lg btn-block form-group\"\n    translate\n  >\n    Reset password\n  </button>\n  <div class=\"text-center top-m-sm\">\n    <p>\n      <a\n        title=\"{{ 'Login' | translate }}\"\n        class=\"btn btn-link btn-sm\"\n        (click)=\"onChangeView.emit({ view: LOGIN_VIEWS.Credentials })\"\n        translate\n        >Login</a\n      >\n    </p>\n  </div>\n</form>\n"
            })
        ], RecoverPasswordComponent);
        return RecoverPasswordComponent;
    }());

    var TotpAuthComponent = /** @class */ (function () {
        function TotpAuthComponent(loginService, userService, alert) {
            this.loginService = loginService;
            this.userService = userService;
            this.alert = alert;
            this.onCancel = new core.EventEmitter();
            this.LOGIN_VIEWS = exports.LoginViews;
            this.loading = false;
            this.hasError = false;
        }
        Object.defineProperty(TotpAuthComponent.prototype, "isSetup", {
            get: function () {
                return this.view === exports.LoginViews.TotpSetup;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * In case of a setup we need the user to be authorized
         * first.
         */
        TotpAuthComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.view === this.LOGIN_VIEWS.TotpSetup)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.loginService.switchLoginMode(this.credentials)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        TotpAuthComponent.prototype.onTotpSuccess = function (code) {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 6, 7, 8]);
                            this.loading = true;
                            this.hasError = false;
                            this.credentials.tfa = code;
                            if (!this.isSetup) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.userService.activateTotp()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, this.loginService.switchLoginMode(this.credentials)];
                        case 3:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.verifyAppAccess()];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, this.loginService.authFulfilled()];
                        case 5:
                            _a.sent();
                            return [3 /*break*/, 8];
                        case 6:
                            e_1 = _a.sent();
                            this.alert.removeLastDanger();
                            if (e_1.data && e_1.data.message === 'Access is denied') {
                                this.alert.addServerFailure(e_1);
                            }
                            else {
                                this.hasError = true;
                            }
                            return [3 /*break*/, 8];
                        case 7:
                            this.loading = false;
                            return [7 /*endfinally*/];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        TotpAuthComponent.ctorParameters = function () { return [
            { type: LoginService },
            { type: client.UserService },
            { type: AlertService }
        ]; };
        __decorate([
            core.Input()
        ], TotpAuthComponent.prototype, "credentials", void 0);
        __decorate([
            core.Input()
        ], TotpAuthComponent.prototype, "view", void 0);
        __decorate([
            core.Output()
        ], TotpAuthComponent.prototype, "onCancel", void 0);
        TotpAuthComponent = __decorate([
            core.Component({
                selector: 'c8y-totp-auth',
                template: "<div\n  class=\"legend form-block center\"\n  translate\n>Two-factor authentication</div>\n\n<c8y-totp-setup *ngIf=\"isSetup\"></c8y-totp-setup>\n<c8y-totp-challenge\n  [loading]=\"loading\"\n  [hasError]=\"hasError\"\n  [verify]=\"view === LOGIN_VIEWS.TotpSetup\"\n  (onSuccess)=\"onTotpSuccess($event)\"\n></c8y-totp-challenge>\n\n<div class=\"top-m-sm text-center\">\n  <a\n    title=\"{{ 'Cancel' | translate }}\"\n    class=\"btn btn-link btn-sm\"\n    (click)=\"onCancel.emit()\"\n    translate\n  >Cancel</a>\n</div>\n"
            })
        ], TotpAuthComponent);
        return TotpAuthComponent;
    }());

    /**
     * The angular module definition for the login.
     * @exports LoginComponent
     */
    var LoginModule = /** @class */ (function () {
        function LoginModule() {
        }
        LoginModule_1 = LoginModule;
        LoginModule.forRoot = function () {
            return {
                ngModule: LoginModule_1,
                providers: LoginModule_1.providers()
            };
        };
        LoginModule.providers = function () {
            return [LoginService];
        };
        var LoginModule_1;
        LoginModule = LoginModule_1 = __decorate([
            core.NgModule({
                declarations: [
                    LoginComponent,
                    RecoverPasswordComponent,
                    ChangePasswordComponent,
                    CredentialsComponent,
                    TotpAuthComponent
                ],
                imports: [
                    forms.FormsModule,
                    tooltip.TooltipModule,
                    CommonModule,
                    AuthenticationModule,
                    AlertModule,
                    FormsModule
                ],
                exports: [LoginComponent]
            })
        ], LoginModule);
        return LoginModule;
    }());

    var TabComponent = /** @class */ (function () {
        function TabComponent(tabs) {
            this.tabs = tabs;
            this.label = '';
        }
        TabComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            setTimeout(function () { return _this.tabs.add(_this); });
        };
        TabComponent.prototype.ngOnDestroy = function () {
            this.tabs.remove(this);
        };
        TabComponent.ctorParameters = function () { return [
            { type: TabsService }
        ]; };
        __decorate([
            core.ViewChild('tpl', { static: false })
        ], TabComponent.prototype, "template", void 0);
        __decorate([
            core.Input()
        ], TabComponent.prototype, "path", void 0);
        __decorate([
            core.Input()
        ], TabComponent.prototype, "label", void 0);
        __decorate([
            core.Input()
        ], TabComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], TabComponent.prototype, "priority", void 0);
        __decorate([
            core.Input()
        ], TabComponent.prototype, "orientation", void 0);
        TabComponent = __decorate([
            core.Component({
                selector: 'c8y-tab',
                template: '<ng-template #tpl><ng-content></ng-content></ng-template>'
            })
        ], TabComponent);
        return TabComponent;
    }());

    var TabsOutletComponent = /** @class */ (function () {
        function TabsOutletComponent(router, renderer, el) {
            this.router = router;
            this.renderer = renderer;
            this.el = el;
            this.tabs = [];
            this.orientation = 'vertical';
            this.navigatorOpen = false;
            this.showLeft = false;
            this.showRight = false;
        }
        Object.defineProperty(TabsOutletComponent.prototype, "isNavigatorOpen", {
            get: function () {
                return this.navigatorOpen;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabsOutletComponent.prototype, "hasTabs", {
            get: function () {
                return this.tabs && this.tabs.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabsOutletComponent.prototype, "isHorizontal", {
            get: function () {
                return this.orientation === 'horizontal';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabsOutletComponent.prototype, "isVertical", {
            get: function () {
                return this.orientation !== 'horizontal';
            },
            enumerable: true,
            configurable: true
        });
        TabsOutletComponent.prototype.ngOnDestroy = function () {
            if (this.scrollSubscription) {
                this.scrollSubscription.unsubscribe();
            }
        };
        TabsOutletComponent.prototype.ngAfterContentInit = function () {
            if (this.orientation === 'horizontal') {
                this.scrollSubscribe();
            }
        };
        TabsOutletComponent.prototype.isActive = function (tab) {
            if (tab && tab.path) {
                return this.router.isActive(tab.path, false);
            }
            else {
                return false;
            }
        };
        TabsOutletComponent.prototype.navigateTo = function (path) {
            this.router.navigate([path]);
        };
        TabsOutletComponent.prototype.scroll = function (direction) {
            if (direction === void 0) { direction = 'right'; }
            var _a = this.getDimensions(), widthScroll = _a.widthScroll, width = _a.width, scrollLeft = _a.scrollLeft;
            var multiplier = direction === 'left' ? -1 : 1;
            var targetScroll = scrollLeft + width * multiplier;
            if (targetScroll < 0) {
                targetScroll = 0;
            }
            if (targetScroll > widthScroll - width) {
                targetScroll = widthScroll - width;
            }
            // TODO: we should animate this
            this.container.nativeElement.scrollLeft = targetScroll;
        };
        TabsOutletComponent.prototype.scrollSubscribe = function () {
            var _this = this;
            var unlisten;
            this.scrollSubscription = rxjs.merge(rxjs.fromEvent(this.container.nativeElement, 'scroll'), rxjs.fromEventPattern(function (handler) {
                unlisten = _this.renderer.listen('window', 'resize', handler);
            }, function () { return unlisten(); })).pipe(operators.debounceTime(250)).subscribe(function () { return _this.updateScroll(); });
        };
        TabsOutletComponent.prototype.updateScroll = function () {
            var _a = this.getDimensions(), widthScroll = _a.widthScroll, width = _a.width, scrollLeft = _a.scrollLeft;
            this.showLeft = !!scrollLeft;
            this.showRight = widthScroll > width + scrollLeft;
        };
        TabsOutletComponent.prototype.getDimensions = function () {
            var elTabs = this.tabsContainer.nativeElement;
            var el = this.container.nativeElement;
            var widthScroll = elTabs.scrollWidth;
            var width = el.clientWidth;
            var scrollLeft = el.scrollLeft;
            return { widthScroll: widthScroll, width: width, scrollLeft: scrollLeft };
        };
        TabsOutletComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input()
        ], TabsOutletComponent.prototype, "tabs", void 0);
        __decorate([
            core.Input()
        ], TabsOutletComponent.prototype, "orientation", void 0);
        __decorate([
            core.Input()
        ], TabsOutletComponent.prototype, "navigatorOpen", void 0);
        __decorate([
            core.HostBinding('class.navigator-open')
        ], TabsOutletComponent.prototype, "isNavigatorOpen", null);
        __decorate([
            core.HostBinding('class.page-tabs')
        ], TabsOutletComponent.prototype, "hasTabs", null);
        __decorate([
            core.HostBinding('class.page-tabs-horizontal')
        ], TabsOutletComponent.prototype, "isHorizontal", null);
        __decorate([
            core.HostBinding('class.page-tabs-vertical')
        ], TabsOutletComponent.prototype, "isVertical", null);
        __decorate([
            core.ViewChild('container', { read: core.ElementRef, static: true })
        ], TabsOutletComponent.prototype, "container", void 0);
        __decorate([
            core.ViewChild('left', { read: core.ElementRef, static: false })
        ], TabsOutletComponent.prototype, "leftBtn", void 0);
        __decorate([
            core.ViewChild('right', { read: core.ElementRef, static: false })
        ], TabsOutletComponent.prototype, "rightBtn", void 0);
        __decorate([
            core.ViewChild('tabsContainer', { read: core.ElementRef, static: false })
        ], TabsOutletComponent.prototype, "tabsContainer", void 0);
        TabsOutletComponent = __decorate([
            core.Component({
                selector: 'c8y-tabs-outlet,c8y-ui-tabs',
                template: "<div #container class=\"tabContainer hidden-xs\">\n  <button class=\"tabs-slider tabs-slider-left\" #left *ngIf=\"showLeft\" (click)=\"scroll('left')\">\n    <i [c8yIcon]=\"'chevron-left'\"></i>\n  </button>\n  <button class=\"tabs-slider tabs-slider-right\" #right *ngIf=\"showRight\" (click)=\"scroll('right')\">\n    <i [c8yIcon]=\"'chevron-right'\"></i>\n  </button>\n  <ul class=\"nav nav-tabs nav-tabsc8y\" #tabsContainer>\n    <li [ngClass]=\"{'active': rla.isActive}\" *ngFor=\"let tab of tabs\">\n      <a [routerLink]=\"tab.path\" routerLinkActive #rla=\"routerLinkActive\" title=\"{{tab?.label | translate}}\">\n        <i [c8yIcon]=\"tab?.icon\" *ngIf=\"!tab.template && tab?.icon\"></i>\n        <span class=\"txt\" *ngIf=\"!tab.template\">{{tab?.label | translate}}</span>\n        <ng-container *ngTemplateOutlet=\"tab.template\"></ng-container>\n      </a>\n    </li>\n  </ul>\n</div>\n\n<div class=\"visible-xs mobile-tabs\">\n  <div class=\"c8y-select-wrapper\">\n    <select (change)=\"navigateTo($event.target.value)\" #select>\n      <option *ngFor=\"let tab of tabs\" [value]=\"tab.path\" [selected]=\"isActive(tab)\">\n        {{tab?.label | translate}}\n      </option>\n    </select>\n  </div>\n</div>\n"
            })
        ], TabsOutletComponent);
        return TabsOutletComponent;
    }());

    var TabsModule = /** @class */ (function () {
        function TabsModule() {
        }
        TabsModule = __decorate([
            core.NgModule({
                declarations: [
                    TabsOutletComponent,
                    TabComponent
                ],
                imports: [
                    CommonModule,
                    router.RouterModule.forChild([])
                ],
                exports: [
                    TabsOutletComponent,
                    TabComponent
                ]
            })
        ], TabsModule);
        return TabsModule;
    }());

    var CookieBannerComponent = /** @class */ (function () {
        function CookieBannerComponent(options) {
            this.options = options;
            this.storageKey = 'acceptCookieNotice';
            this.acceptValue = '1';
        }
        CookieBannerComponent.prototype.ngOnInit = function () {
            this.settings = this.options.get('cookieBanner');
            if (this.settings && this.settings.cookieBannerText && !localStorage.getItem(this.storageKey)) {
                this.showBanner = true;
            }
        };
        CookieBannerComponent.prototype.acceptCookies = function () {
            localStorage.setItem(this.storageKey, this.acceptValue);
            this.showBanner = false;
        };
        CookieBannerComponent.ctorParameters = function () { return [
            { type: OptionsService }
        ]; };
        CookieBannerComponent = __decorate([
            core.Component({
                selector: 'c8y-cookie-banner',
                template: "<div class=\"c8y-cookie-banner\">\n  <div class=\"container\">\n    <div class=\"row p-t-16 p-b-16\" *ngIf=\"showBanner\">\n      <div class=\"col-md-3\" *ngIf=\"settings.cookieBannerTitle\">\n        <h3>{{ settings.cookieBannerTitle | translate }}</h3>\n        <div class=\"p-b-16 visible-sm visible-xs\"></div>\n      </div>\n      <div class=\"col-md-7\">\n        <div class=\"cookie-banner-content text-pre\">\n          {{ settings.cookieBannerText | translate }}\n        </div>\n      </div>\n      <div class=\"col-md-2\">\n        <div class=\"row\">\n          <div class=\"col-sm-6 col-md-12\">\n            <div class=\"p-b-16 visible-sm visible-xs\"></div>\n            <button class=\"btn btn-primary btn-block\" (click)=\"acceptCookies()\">\n              {{ 'Agree and proceed' | translate }}\n            </button>\n          </div>\n          <div class=\"col-sm-6 col-md-12\">\n            <div class=\"p-b-16\"></div>\n            <a\n              class=\"btn btn-default btn-block\"\n              href=\"{{ settings.policyUrl }}\"\n              target=\"_blank\"\n              *ngIf=\"settings.policyUrl\"\n            >\n              {{ 'Privacy policy' | translate }}\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            })
        ], CookieBannerComponent);
        return CookieBannerComponent;
    }());

    /**
     * The module which allows to bootstrap a custom application.
     * Use it as `bootstrap: []` component in your main app module
     * or as `<c8y-bootstrap>` in your main app.
     */
    var BootstrapModule = /** @class */ (function () {
        function BootstrapModule() {
        }
        BootstrapModule = __decorate([
            core.NgModule({
                declarations: [
                    BootstrapComponent,
                    CookieBannerComponent
                ],
                imports: [
                    CommonModule,
                    HeaderModule,
                    LoginModule,
                    router.RouterModule,
                    TabsModule,
                    ActionBarModule,
                    AlertModule,
                    NavigatorModule,
                    tooltip.TooltipModule
                ],
                exports: [
                    BootstrapComponent
                ],
                entryComponents: [
                    BootstrapComponent
                ]
            })
        ], BootstrapModule);
        return BootstrapModule;
    }());

    /* tslint:disable:max-classes-per-file */
    var CellRendererContext = /** @class */ (function () {
        function CellRendererContext() {
        }
        return CellRendererContext;
    }());
    var CellRendererDefDirective = /** @class */ (function () {
        function CellRendererDefDirective(template) {
            this.template = template;
        }
        CellRendererDefDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        CellRendererDefDirective = __decorate([
            core.Directive({ selector: '[c8yCellRendererDef]' })
        ], CellRendererDefDirective);
        return CellRendererDefDirective;
    }());
    var HeaderCellRendererDefDirective = /** @class */ (function () {
        function HeaderCellRendererDefDirective(template) {
            this.template = template;
        }
        HeaderCellRendererDefDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        HeaderCellRendererDefDirective = __decorate([
            core.Directive({ selector: '[c8yHeaderCellRendererDef]' })
        ], HeaderCellRendererDefDirective);
        return HeaderCellRendererDefDirective;
    }());

    /* tslint:disable:max-classes-per-file */
    var FilteringFormRendererContext = /** @class */ (function () {
        function FilteringFormRendererContext() {
        }
        return FilteringFormRendererContext;
    }());
    var FilteringFormRendererDefDirective = /** @class */ (function () {
        function FilteringFormRendererDefDirective(template) {
            this.template = template;
        }
        FilteringFormRendererDefDirective.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        FilteringFormRendererDefDirective = __decorate([
            core.Directive({ selector: '[c8yFilteringFormRendererDef]' })
        ], FilteringFormRendererDefDirective);
        return FilteringFormRendererDefDirective;
    }());

    var ColumnDirective = /** @class */ (function () {
        function ColumnDirective() {
        }
        __decorate([
            core.Input()
        ], ColumnDirective.prototype, "name", void 0);
        __decorate([
            core.ContentChild(CellRendererDefDirective, { static: false })
        ], ColumnDirective.prototype, "cellRendererDef", void 0);
        __decorate([
            core.ContentChild(HeaderCellRendererDefDirective, { static: false })
        ], ColumnDirective.prototype, "headerCellRendererDef", void 0);
        __decorate([
            core.ContentChild(FilteringFormRendererDefDirective, { static: false })
        ], ColumnDirective.prototype, "filteringFormRendererDef", void 0);
        ColumnDirective = __decorate([
            core.Directive({ selector: 'c8y-column' })
        ], ColumnDirective);
        return ColumnDirective;
    }());

    var minColumnGridTrackSize = 80;
    var ratiosByColumnTypes = {
        icon: 1,
        numeric: 1,
        'text-short': 1.67,
        'text-long': 3.33
    };

    (function (FilteringActionType) {
        FilteringActionType["ApplyFilter"] = "APPLY_FILTER";
        FilteringActionType["ResetFilter"] = "RESET_FILTER";
    })(exports.FilteringActionType || (exports.FilteringActionType = {}));

    var GridDataSource = /** @class */ (function () {
        function GridDataSource() {
            this.loadingSubject = new rxjs.BehaviorSubject(false);
            this.dataSourceSubject = new rxjs.BehaviorSubject([]);
            this.dataStatsSubject = new rxjs.BehaviorSubject({
                size: 0,
                filteredSize: 0,
                currentPage: 0,
                currentPageSize: 0,
                firstPageSize: 0
            });
            this.dataSelectionSubject = new rxjs.BehaviorSubject({
                filteredDataIds: []
            });
            this.loading$ = this.loadingSubject.asObservable();
            this.data$ = this.dataSourceSubject.asObservable();
            this.stats$ = this.dataStatsSubject.asObservable();
            this.selection$ = this.dataSelectionSubject.asObservable();
        }
        GridDataSource.prototype.connect = function (collectionViewer) {
            return this.data$;
        };
        GridDataSource.prototype.disconnect = function (collectionViewer) {
            this.loadingSubject.complete();
            this.dataSourceSubject.complete();
            this.dataStatsSubject.complete();
            this.dataSelectionSubject.complete();
        };
        GridDataSource.prototype.loadData = function (_a) {
            var _this = this;
            var rows = _a.rows, columns = _a.columns, pagination = _a.pagination, searchText = _a.searchText, serverSideDataCallback = _a.serverSideDataCallback, selectable = _a.selectable, selectionPrimaryKey = _a.selectionPrimaryKey;
            var clientSideData$ = this.toObservable(rows).pipe(operators.map(function (initialData) {
                var filteredSize = 0;
                var filteredDataIds = [];
                var transformedData = lodashEs.flow(function (data) { return _this.doClientSideSearch({ data: data, columns: columns, searchText: searchText }); }, function (data) { return _this.doClientSideFiltering({ data: data, columns: columns }); }, function (data) { return _this.doClientSideSorting({ data: data, columns: columns }); }, function (data) {
                    filteredSize = data.length;
                    filteredDataIds = selectable
                        ? data.map(function (item) { return item[selectionPrimaryKey]; })
                        : filteredDataIds;
                    return data;
                }, function (data) { return _this.doClientSidePagination({ data: data, pagination: pagination }); })(initialData);
                _this.dataStatsSubject.next({
                    size: initialData.length,
                    filteredSize: filteredSize,
                    currentPage: pagination.currentPage,
                    currentPageSize: transformedData.length,
                    firstPageSize: pagination.pageSize
                });
                _this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds });
                return transformedData;
            }));
            var serverSideData$ = rxjs.defer(function () {
                return _this.toObservable(serverSideDataCallback({
                    columns: columns,
                    searchText: searchText,
                    pagination: pagination,
                    selection: { enabled: selectable, primaryKey: selectionPrimaryKey }
                }));
            }).pipe(operators.map(function (result) {
                var data = result.data, paging = result.paging, size = result.size, filteredSize = result.filteredSize, filteredDataIds = result.filteredDataIds;
                _this.dataStatsSubject.next({
                    size: size,
                    filteredSize: filteredSize,
                    currentPage: paging.currentPage,
                    currentPageSize: data.length,
                    firstPageSize: paging.pageSize
                });
                _this.dataSelectionSubject.next({ filteredDataIds: filteredDataIds || [] });
                return data;
            }));
            var data$ = typeof serverSideDataCallback === 'function' ? serverSideData$ : clientSideData$;
            rxjs.of([])
                .pipe(operators.tap(function () { return _this.loadingSubject.next(true); }), operators.switchMap(function () { return data$; }), operators.catchError(function (err) {
                _this.dataStatsSubject.next({
                    size: 0,
                    filteredSize: 0,
                    currentPage: 0,
                    currentPageSize: 0,
                    firstPageSize: 0
                });
                _this.dataSelectionSubject.next({ filteredDataIds: [] });
                return rxjs.of([]);
            }), operators.finalize(function () { return _this.loadingSubject.next(false); }))
                .subscribe(function (data) {
                _this.dataSourceSubject.next(data);
            });
        };
        GridDataSource.prototype.resolveValue = function (x, path) {
            return lodashEs.get(x, path);
        };
        GridDataSource.prototype.resolveFunction = function (x) {
            return typeof x === 'function' ? x() : x;
        };
        GridDataSource.prototype.normalizeNil = function (x) {
            return lodashEs.isNil(x) ? '' : x;
        };
        GridDataSource.prototype.doClientSideFiltering = function (_a) {
            var _this = this;
            var data = _a.data, columns = _a.columns;
            return columns.reduce(function (result, column) {
                var filterPredicate = column.filterPredicate;
                if (typeof filterPredicate === 'string') {
                    return _this.doClientSideSearch({
                        data: result,
                        columns: [column],
                        searchText: filterPredicate
                    });
                }
                if (typeof filterPredicate === 'function') {
                    return result.filter(function (item) { return filterPredicate(item, column.path); });
                }
                return result;
            }, data);
        };
        GridDataSource.prototype.doClientSideSearch = function (_a) {
            var _this = this;
            var data = _a.data, columns = _a.columns, searchText = _a.searchText;
            var propPaths = columns.map(function (_a) {
                var path = _a.path;
                return path;
            }).filter(function (column) { return !lodashEs.isNil(column); });
            var regexSearch = this.createRegexSearch(searchText);
            return data.filter(function (item) {
                var itemWithResolvedValues = lodashEs.flow(function (x) { return lodashEs.pick(x, propPaths); }, function (x) { return lodashEs.mapValues(x, _this.resolveFunction); }, function (x) { return lodashEs.omitBy(x, lodashEs.isNil); })(item);
                var cellValues = Object.values(itemWithResolvedValues);
                return cellValues.some(function (cellValue) { return regexSearch.test(cellValue.toString()); });
            });
        };
        GridDataSource.prototype.doClientSideSorting = function (_a) {
            var data = _a.data, columns = _a.columns;
            var actives = columns.filter(function (_a) {
                var sortOrder = _a.sortOrder;
                return !!sortOrder;
            });
            var sortingState = {
                paths: actives.map(function (_a) {
                    var path = _a.path;
                    return path;
                }),
                orders: actives.map(function (_a) {
                    var sortOrder = _a.sortOrder;
                    return sortOrder;
                })
            };
            return lodashEs.orderBy(data, sortingState.paths, sortingState.orders);
        };
        GridDataSource.prototype.doClientSidePagination = function (_a) {
            var data = _a.data, pagination = _a.pagination;
            return pagination
                ? lodashEs.get(lodashEs.chunk(data, pagination.pageSize), pagination.currentPage - 1, [])
                : data;
        };
        GridDataSource.prototype.createRegexSearch = function (filterValue) {
            return RegExp(escapeRegExpPattern(filterValue), 'i');
        };
        GridDataSource.prototype.toObservable = function (x) {
            return rxjs.isObservable(x) ? x : x instanceof Promise ? rxjs.from(x) : rxjs.of(x);
        };
        return GridDataSource;
    }());
    /**
     *
     * @param string pattern Regex pattern.
     * @return string The escaped regex.
     * @see https://stackoverflow.com/a/3561711/2013891
     */
    function escapeRegExpPattern(pattern) {
        if (pattern === void 0) { pattern = ''; }
        return pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    var DataGridComponent = /** @class */ (function () {
        function DataGridComponent(sanitizer, hostRef, cd) {
            this.sanitizer = sanitizer;
            this.hostRef = hostRef;
            this.cd = cd;
            this.title = gettext('Items');
            this.loadingItemsLabel = gettext('Loading items…');
            this.noMatchingItemsLabel = gettext('No matching items.');
            this.dataSource = new GridDataSource();
            this.filteringLabelsParams = {
                filteredItemsCount: 0,
                allItemsCount: 0
            };
            this.paginationLabelParams = {
                pageFirstItemIdx: 0,
                pageLastItemIdx: 0,
                itemsTotal: 0
            };
            this.possiblePageSizes = [10, 15, 20, 30, 50];
            this.minPossiblePageSize = Math.min.apply(Math, __spread(this.possiblePageSizes));
            this.selectable = false;
            this.selectionPrimaryKey = 'id';
            this.displayOptions = {
                striped: true,
                bordered: false,
                gridHeader: true
            };
            this.rowMouseOver = new core.EventEmitter();
            this.rowMouseLeave = new core.EventEmitter();
            this.rowClick = new core.EventEmitter();
            this.itemsSelect = new core.EventEmitter();
            this.columnNames = [];
            this.styles = {
                tableCursor: 'auto',
                gridTemplateColumns: undefined
            };
            this.searchText$ = new core.EventEmitter();
            this.searchText = '';
            this.filteringApplied = false;
            this.totalPagesCount = Infinity;
            this.selectedItemIds = [];
            this.currentPageSelectionState = {
                allSelected: false,
                allDeselected: true
            };
            this.builtInActionType = {
                Edit: "EDIT" /* Edit */,
                Delete: "DELETE" /* Delete */,
                Export: "EXPORT" /* Export */
            };
            this.resizeHandleMouseDown$ = new core.EventEmitter();
            this.resizeHandleContainerMouseMove$ = new core.EventEmitter();
            this.resizeHandleContainerMouseUp$ = new core.EventEmitter();
            this.unsubscribe$ = new rxjs.Subject();
        }
        Object.defineProperty(DataGridComponent.prototype, "_columns", {
            set: function (columns) {
                this.columns = columns || [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_rows", {
            set: function (rows) {
                this.rows = rows || [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_pagination", {
            set: function (pagination) {
                this.pagination = pagination;
                var pageSize = lodashEs.get(this.pagination, 'pageSize');
                if (pageSize &&
                    !this.possiblePageSizes.find(function (possiblePageSize) { return possiblePageSize === pageSize; })) {
                    this.pagination = __assign({}, this.pagination, { pageSize: 10 });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_serverSideDataCallback", {
            set: function (serverSideDataCallback) {
                this.serverSideDataCallback = serverSideDataCallback;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_selectable", {
            set: function (selectable) {
                this.selectable = selectable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_selectionPrimaryKey", {
            set: function (selectionPrimaryKey) {
                this.selectionPrimaryKey = selectionPrimaryKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_displayOptions", {
            set: function (displayOptions) {
                this.displayOptions = __assign({}, this.displayOptions, displayOptions);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_actionControls", {
            set: function (actionControls) {
                this.actionControls = actionControls || [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataGridComponent.prototype, "_bulkActionControls", {
            set: function (bulkActionControls) {
                this.bulkActionControls = bulkActionControls || [];
            },
            enumerable: true,
            configurable: true
        });
        DataGridComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.searchText$
                .pipe(operators.takeUntil(this.unsubscribe$), operators.debounceTime(300), operators.distinctUntilChanged(), operators.tap(function (searchText) {
                _this.searchText = searchText;
            }))
                .subscribe(function () {
                _this.reload();
            });
            if (this.selectable) {
                rxjs.combineLatest(this.dataSource.data$, this.itemsSelect.asObservable())
                    .pipe(operators.takeUntil(this.unsubscribe$))
                    .subscribe(function (_a) {
                    var _b = __read(_a, 1), data = _b[0];
                    var currentPageEmpty = data.length === 0;
                    _this.currentPageSelectionState = {
                        allSelected: currentPageEmpty ? false : data.every(function (item) { return _this.isItemSelected(item); }),
                        allDeselected: currentPageEmpty ? true : data.every(function (item) { return !_this.isItemSelected(item); })
                    };
                });
            }
        };
        DataGridComponent.prototype.ngOnChanges = function () {
            this.updateColumns();
            this.loadData();
        };
        DataGridComponent.prototype.ngAfterViewInit = function () {
            this.updateGridColumnsSize();
            this.thEls = this.thRefs.toArray().map(function (_a) {
                var nativeElement = _a.nativeElement;
                return nativeElement;
            });
            this.setupResizeHandle();
        };
        DataGridComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        DataGridComponent.prototype.trackByName = function (index, item) {
            return item.name;
        };
        DataGridComponent.prototype.resolveCellValue = function (row, path) {
            var _this = this;
            return lodashEs.flow([
                function (x) { return _this.dataSource.resolveValue(x, path); },
                this.dataSource.resolveFunction,
                this.dataSource.normalizeNil
            ])(row);
        };
        DataGridComponent.prototype.changeSortOrder = function (columnName) {
            var column = this.columns.find(function (_a) {
                var name = _a.name;
                return name === columnName;
            });
            if (column) {
                var sortOrder = column.sortOrder;
                if (!sortOrder) {
                    this.updateSorting([columnName], 'asc');
                }
                else if (sortOrder === 'asc') {
                    this.updateSorting([columnName], 'desc');
                }
                else {
                    this.updateSorting([columnName], '');
                }
            }
        };
        DataGridComponent.prototype.updateSorting = function (columnNames, sortOrder) {
            this.columns = this.columns.map(function (column) {
                if (columnNames.includes(column.name)) {
                    return __assign({}, column, { sortOrder: sortOrder });
                }
                return column;
            });
            this.reload();
        };
        DataGridComponent.prototype.applyFilter = function (columnName, dropdown, filteringModifier) {
            this.updateFiltering([columnName], {
                type: exports.FilteringActionType.ApplyFilter,
                payload: { filteringModifier: filteringModifier }
            });
            dropdown.hide();
        };
        DataGridComponent.prototype.resetFilter = function (columnName, dropdown) {
            this.updateFiltering([columnName], { type: exports.FilteringActionType.ResetFilter });
            dropdown.hide();
        };
        DataGridComponent.prototype.clearFilters = function () {
            this.updateFiltering(this.columns.map(function (_a) {
                var name = _a.name;
                return name;
            }), {
                type: exports.FilteringActionType.ResetFilter
            });
        };
        DataGridComponent.prototype.updateFiltering = function (columnNames, action) {
            this.columns = this.columns.map(function (column) {
                if (columnNames.includes(column.name)) {
                    return __assign({}, column, (action.type === exports.FilteringActionType.ApplyFilter
                        ? action.payload.filteringModifier
                        : { filterPredicate: undefined, externalFilterQuery: undefined }));
                }
                return column;
            });
            this.updateFilteringApplied();
            this.reload();
        };
        DataGridComponent.prototype.updateFilteringApplied = function () {
            this.filteringApplied = this.columns.some(this.isColumnFilteringApplied);
        };
        DataGridComponent.prototype.isColumnFilteringApplied = function (column) {
            var filterable = column.filterable, filterPredicate = column.filterPredicate, externalFilterQuery = column.externalFilterQuery;
            return !!(filterable && (filterPredicate || externalFilterQuery));
        };
        DataGridComponent.prototype.updatePagination = function (_a) {
            var itemsPerPage = _a.itemsPerPage, page = _a.page;
            this.pagination = __assign({}, this.pagination, { pageSize: itemsPerPage, currentPage: page });
            this.loadData();
        };
        DataGridComponent.prototype.reload = function () {
            this.pagination = __assign({}, this.pagination, { currentPage: 1 });
            this.loadData();
        };
        DataGridComponent.prototype.getCellRendererSpec = function (_a) {
            var value = _a.value, row = _a.row, columnName = _a.columnName;
            return this._getCellRendererSpec({ type: 'CELL', value: value, row: row, columnName: columnName });
        };
        DataGridComponent.prototype.getHeaderCellRendererSpec = function (_a) {
            var value = _a.value, columnName = _a.columnName;
            return this._getCellRendererSpec({ type: 'HEADER', value: value, row: undefined, columnName: columnName });
        };
        DataGridComponent.prototype.getFilteringFormRendererSpec = function (_a) {
            var column = _a.column, dropdown = _a.dropdown;
            return {
                renderer: lodashEs.get(this.getColumnRenderer(column), 'filteringFormRendererDef.template') ||
                    column.filteringFormRendererComponent,
                context: {
                    property: column,
                    applyFilter: this.applyFilter.bind(this, column.name, dropdown),
                    resetFilter: this.resetFilter.bind(this, column.name, dropdown)
                }
            };
        };
        DataGridComponent.prototype.setAllItemsSelected = function (selected) {
            var _this = this;
            this.dataSource.selection$
                .pipe(operators.first())
                .subscribe(function (_a) {
                var filteredDataIds = _a.filteredDataIds;
                return _this.setItemsSelected(filteredDataIds, selected);
            });
        };
        DataGridComponent.prototype.setAllItemsInCurrentPageSelected = function (selected) {
            var _this = this;
            this.dataSource.data$.pipe(operators.first()).subscribe(function (data) { return _this.setItemsSelected(data, selected); });
        };
        DataGridComponent.prototype.setItemsSelected = function (items, selected) {
            var _this = this;
            var itemIds = items.map(function (item) {
                return typeof item === 'object' ? item[_this.selectionPrimaryKey] : item;
            });
            this.selectedItemIds = selected
                ? lodashEs.union(this.selectedItemIds, itemIds)
                : lodashEs.without.apply(void 0, __spread([this.selectedItemIds], itemIds));
            this.itemsSelect.emit(this.selectedItemIds);
        };
        DataGridComponent.prototype.isItemSelected = function (item) {
            return this.selectedItemIds.includes(item[this.selectionPrimaryKey]);
        };
        DataGridComponent.prototype.onColumnDrop = function (_a) {
            var previousIndex = _a.previousIndex, currentIndex = _a.currentIndex;
            var differentIndex = previousIndex !== currentIndex;
            if (differentIndex) {
                var column = this.columns.splice(previousIndex, 1);
                this.columns.splice(currentIndex, 0, column[0]);
            }
            this.updateColumnNames();
            this.updateGridColumnsSize();
        };
        DataGridComponent.prototype.updateGridColumnsSize = function () {
            this.styles = __assign({}, this.styles, { gridTemplateColumns: this.sanitizer.bypassSecurityTrustStyle(this.columns
                    .filter(function (column) { return column.visible; })
                    .map(function (_a) {
                    var gridTrackSize = _a.gridTrackSize;
                    return gridTrackSize;
                })
                    .join(' ')) });
        };
        DataGridComponent.prototype.updateColumns = function () {
            var specialColumn = {
                gridTrackSize: '42px',
                sortable: false,
                positionFixed: true
            };
            this.columns = __spread([
                this.selectable ? __assign({}, specialColumn, { name: "checkbox" /* Checkbox */ }) : undefined
            ], this.columns, [
                this.actionControls.length > 0
                    ? __assign({}, specialColumn, { name: "actions" /* Actions */ }) : undefined
            ]).filter(Boolean)
                .map(this.withColumnDefaults);
            this.updateColumnNames();
            this.updateGridColumnsSize();
            this.updateFilteringApplied();
        };
        DataGridComponent.prototype.withColumnDefaults = function (column) {
            var dataType = column.dataType || "text-short" /* TextShort */;
            var headerCSSClassName = column.headerCSSClassName, cellCSSClassName = column.cellCSSClassName;
            return __assign({ visible: true, positionFixed: false, sortable: true, sortOrder: '', filterable: false }, column, { dataType: dataType, gridTrackSize: column.gridTrackSize ||
                    "minmax(" + minColumnGridTrackSize + "px, " + ratiosByColumnTypes[dataType] + "fr)", headerCSSClassName: (typeof headerCSSClassName === 'string'
                    ? headerCSSClassName.split(' ')
                    : headerCSSClassName) || [], cellCSSClassName: (typeof cellCSSClassName === 'string' ? cellCSSClassName.split(' ') : cellCSSClassName) ||
                    [] });
        };
        DataGridComponent.prototype.updateColumnNames = function () {
            this.columnNames = this.columns.map(function (_a) {
                var name = _a.name;
                return name;
            });
        };
        DataGridComponent.prototype.setupResizeHandle = function () {
            var _this = this;
            var resizeHandleDrag$ = this.resizeHandleMouseDown$.pipe(operators.takeUntil(this.unsubscribe$), operators.tap(function () { return _this.clearMouseHighlights(); }), operators.mergeMap(function (_a) {
                var event = _a.event, targetColumnName = _a.targetColumnName;
                _this.columns = _this.columns.map(function (column) {
                    if (column.name === targetColumnName) {
                        return __assign({}, column, { headerCSSClassName: lodashEs.union(column.headerCSSClassName, ['header--being-resized']) });
                    }
                    return column;
                });
                _this.headerBeingResized = {
                    columnName: targetColumnName,
                    el: event.target.parentNode
                };
                _this.styles = __assign({}, _this.styles, { tableCursor: 'col-resize' });
                return _this.resizeHandleContainerMouseMove$.pipe(operators.tap(function () { return _this.clearMouseHighlights(); }), operators.takeUntil(_this.resizeHandleContainerMouseUp$));
            }));
            resizeHandleDrag$.subscribe(function (event) {
                requestAnimationFrame(function () {
                    _this.columns = _this.columns.map(function (column, i) {
                        if (column.name === _this.headerBeingResized.columnName) {
                            var wrapper = _this.hostRef.nativeElement;
                            // Read wrapper's offset left relative to the document.
                            var horizontalOffset = wrapper.getBoundingClientRect().left;
                            // Adjust with the wrapper horizontal scroll position.
                            var horizontalScrollOffset = wrapper.scrollLeft - horizontalOffset;
                            // Calculate the desired width.
                            var width = horizontalScrollOffset + event.clientX - (_this.headerBeingResized.el.offsetLeft || 0);
                            return __assign({}, column, { 
                                // Update the column object with the new size value, enforce our minimum size.
                                gridTrackSize: Math.max(minColumnGridTrackSize, width) + "px" });
                        }
                        // For the other headers which don't have a set width, fix it to their computed width.
                        if (column.gridTrackSize.startsWith('minmax')) {
                            return __assign({}, column, { 
                                // isn't fixed yet (it would be a px value)
                                gridTrackSize: lodashEs.parseInt(_this.thEls[i].clientWidth) + "px" });
                        }
                        return column;
                    });
                    /*
                     * Update the column sizes.
                     * Note: grid-template-columns sets the width for all columns in one value.
                     */
                    _this.updateGridColumnsSize();
                });
            });
            this.resizeHandleContainerMouseUp$.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function () {
                if (_this.headerBeingResized) {
                    _this.columns = _this.columns.map(function (column) {
                        if (column.name === _this.headerBeingResized.columnName) {
                            return __assign({}, column, { headerCSSClassName: lodashEs.without(column.headerCSSClassName, 'header--being-resized') });
                        }
                        return column;
                    });
                    _this.headerBeingResized = undefined;
                    _this.styles = __assign({}, _this.styles, { tableCursor: 'auto' });
                }
            });
        };
        DataGridComponent.prototype.clearMouseHighlights = function () {
            if (window.getSelection) {
                window.getSelection().removeAllRanges();
            }
        };
        DataGridComponent.prototype._getCellRendererSpec = function (_a) {
            var type = _a.type, value = _a.value, row = _a.row, columnName = _a.columnName;
            var column = this.columns.find(function (_a) {
                var name = _a.name;
                return name === columnName;
            });
            var columnRenderer = this.getColumnRenderer(column);
            var rendererTemplate = lodashEs.get(columnRenderer, (type === 'HEADER' ? 'headerCellRendererDef' : 'cellRendererDef') + ".template");
            var cellRendererComponent = column.cellRendererComponent, headerCellRendererComponent = column.headerCellRendererComponent;
            var rendererComponent = type === 'HEADER' ? headerCellRendererComponent : cellRendererComponent;
            return {
                renderer: rendererTemplate || rendererComponent,
                context: {
                    value: value,
                    item: row,
                    property: column
                }
            };
        };
        DataGridComponent.prototype.getColumnRenderer = function (column) {
            return this.columnRenderers.toArray().find(function (_a) {
                var name = _a.name;
                return name === column.name;
            });
        };
        DataGridComponent.prototype.loadData = function () {
            var _this = this;
            var _a = this, rows = _a.rows, columns = _a.columns, pagination = _a.pagination, searchText = _a.searchText, serverSideDataCallback = _a.serverSideDataCallback, selectable = _a.selectable, selectionPrimaryKey = _a.selectionPrimaryKey;
            this.dataSource.loadData({
                rows: rows,
                columns: columns,
                pagination: pagination,
                searchText: searchText,
                serverSideDataCallback: serverSideDataCallback,
                selectable: selectable,
                selectionPrimaryKey: selectionPrimaryKey
            });
            this.dataSource.stats$.subscribe(function (stats) {
                _this.updateFilteringLabelsParams(stats);
                _this.updatePaginationLabelParams(stats);
            });
        };
        DataGridComponent.prototype.updateFilteringLabelsParams = function (stats) {
            this.filteringLabelsParams = {
                filteredItemsCount: stats.filteredSize,
                allItemsCount: stats.size
            };
        };
        DataGridComponent.prototype.updatePaginationLabelParams = function (stats) {
            var pageFirstItemIdx = (stats.currentPage - 1) * stats.firstPageSize + 1;
            this.paginationLabelParams = {
                pageFirstItemIdx: pageFirstItemIdx,
                pageLastItemIdx: pageFirstItemIdx + (stats.currentPageSize - 1),
                itemsTotal: stats.filteredSize
            };
        };
        DataGridComponent.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer },
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input()
        ], DataGridComponent.prototype, "title", void 0);
        __decorate([
            core.Input()
        ], DataGridComponent.prototype, "loadingItemsLabel", void 0);
        __decorate([
            core.Input()
        ], DataGridComponent.prototype, "noMatchingItemsLabel", void 0);
        __decorate([
            core.Input('columns')
        ], DataGridComponent.prototype, "_columns", null);
        __decorate([
            core.Input('rows')
        ], DataGridComponent.prototype, "_rows", null);
        __decorate([
            core.Input('pagination')
        ], DataGridComponent.prototype, "_pagination", null);
        __decorate([
            core.Input('serverSideDataCallback')
        ], DataGridComponent.prototype, "_serverSideDataCallback", null);
        __decorate([
            core.Input('selectable')
        ], DataGridComponent.prototype, "_selectable", null);
        __decorate([
            core.Input('selectionPrimaryKey')
        ], DataGridComponent.prototype, "_selectionPrimaryKey", null);
        __decorate([
            core.Input('displayOptions')
        ], DataGridComponent.prototype, "_displayOptions", null);
        __decorate([
            core.Input('actionControls')
        ], DataGridComponent.prototype, "_actionControls", null);
        __decorate([
            core.Input('bulkActionControls')
        ], DataGridComponent.prototype, "_bulkActionControls", null);
        __decorate([
            core.Output()
        ], DataGridComponent.prototype, "rowMouseOver", void 0);
        __decorate([
            core.Output()
        ], DataGridComponent.prototype, "rowMouseLeave", void 0);
        __decorate([
            core.Output()
        ], DataGridComponent.prototype, "rowClick", void 0);
        __decorate([
            core.Output()
        ], DataGridComponent.prototype, "itemsSelect", void 0);
        __decorate([
            core.ContentChildren(ColumnDirective)
        ], DataGridComponent.prototype, "columnRenderers", void 0);
        __decorate([
            core.ViewChildren(table.CdkHeaderCell, { read: core.ElementRef })
        ], DataGridComponent.prototype, "thRefs", void 0);
        DataGridComponent = __decorate([
            core.Component({
                selector: 'c8y-data-grid',
                template: "<div class=\"table-data-grid-scroll\">\n  <div *ngIf=\"displayOptions.gridHeader\" class=\"table-data-grid-header separator\">\n    <h4 class=\"m-r-16\">{{ title | translate }}</h4>\n    <span *ngIf=\"!filteringApplied\">\n      <span class=\"label label-warning m-r-4\" translate>No filters</span>\n      <small class=\"m-r-4\" ngNonBindable translate [translateParams]=\"filteringLabelsParams\"\n        >{{ filteredItemsCount }} of {{ allItemsCount }} items</small\n      >\n    </span>\n    <span *ngIf=\"filteringApplied\">\n      <span class=\"badge badge-info m-r-4\">\n        {{ (dataSource.stats$ | async).filteredSize }}\n      </span>\n      <small ngNonBindable translate [translateParams]=\"filteringLabelsParams\"\n        >of {{ allItemsCount }} items</small\n      >\n      <button class=\"m-l-8 btn btn-xs btn-default m-r-4\" (click)=\"clearFilters()\" translate>\n        Clear filters\n      </button>\n    </span>\n    <span class=\"hidden-xs hidden-sm\">\n      <button\n        class=\"btn-clean text-primary\"\n        popover=\"{{ 'Click the column headers to apply filters.' | translate }}\"\n        placement=\"right\"\n        triggers=\"focus\"\n      >\n        <i c8yIcon=\"question-circle-o\"></i>\n      </button>\n    </span>\n\n    <div class=\"flex-item-right\">\n      <div class=\"btnbar flex-row\">\n        <div class=\"dropdown\" dropdown [insideClick]=\"true\">\n          <button class=\"btnbar-btn c8y-dropdown\" dropdownToggle>\n            <i c8yIcon=\"columns\" class=\"m-r-4\"></i> <span translate>Configure columns</span>\n          </button>\n\n          <ul\n            *dropdownMenu\n            class=\"dropdown-menu dropdown-menu-right\"\n            (click)=\"$event.stopPropagation()\"\n          >\n            <li class=\"\">\n              <div cdkDropList (cdkDropListDropped)=\"onColumnDrop($event)\" class=\"list-group m-0\">\n                <div *ngFor=\"let column of columns\" cdkDrag cdkDragLockAxis=\"y\">\n                  <ng-container *ngIf=\"!column.positionFixed\">\n                    <div class=\"list-group-item draggable-after\">\n                      <label class=\"c8y-checkbox\">\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column.visible\"\n                          (change)=\"updateGridColumnsSize()\"\n                        />\n                        <span></span>&nbsp;\n                        {{ (column.header | translate) || column.name }}\n                      </label>\n                    </div>\n                  </ng-container>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n\n        <button\n          class=\"btnbar-btn\"\n          [disabled]=\"dataSource.loading$ | async\"\n          (click)=\"searchText = ''; reload()\"\n        >\n          <i c8yIcon=\"refresh\"></i> <span translate> Reload</span>\n        </button>\n\n        <div *ngIf=\"!serverSideDataCallback\" class=\"input-group input-group-search\">\n          <input\n            type=\"search\"\n            class=\"form-control\"\n            placeholder=\"{{ 'Search\u2026' | translate }}\"\n            [ngModel]=\"searchText\"\n            (input)=\"searchText$.emit($event.target.value)\"\n          />\n          <div class=\"input-group-addon\">\n            <i c8yIcon=\"search\" *ngIf=\"searchText.length === 0\"></i>\n            <i\n              c8yIcon=\"times\"\n              class=\"pointer\"\n              *ngIf=\"searchText.length > 0\"\n              (click)=\"searchText = ''; searchText$.emit('')\"\n            ></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"table-data-grid-header-bulk-actions animated slideInDown fast\"\n      *ngIf=\"selectedItemIds.length !== 0\"\n    >\n      <h4>\n        <span ngNonBindable translate [translateParams]=\"{ count: selectedItemIds.length }\">\n          {{ count }} selected items.\n        </span>\n        <br class=\"visible-xs\" />\n        <small *ngIf=\"selectedItemIds.length >= pagination.pageSize\">\n          <a (click)=\"setAllItemsSelected(true)\" style=\"cursor: pointer\">\n            <span\n              ngNonBindable\n              translate\n              [translateParams]=\"{ count: (dataSource.stats$ | async).filteredSize }\"\n            >\n              Select all {{ count }} items\n            </span>\n          </a>\n        </small>\n      </h4>\n      <div class=\"flex-item-right\">\n        <div class=\"btnbar flex-row\">\n          <ng-container\n            *ngFor=\"let bulkActionControl of bulkActionControls\"\n            [ngSwitch]=\"bulkActionControl.type\"\n          >\n            <button\n              *ngSwitchCase=\"builtInActionType.Export\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"sign-out\"></i> <span translate>Export</span>\n            </button>\n\n            <button\n              *ngSwitchCase=\"builtInActionType.Delete\"\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"trash\"></i> <span translate>Delete</span>\n            </button>\n\n            <button\n              *ngSwitchDefault\n              class=\"btnbar-btn\"\n              (click)=\"bulkActionControl.callback(selectedItemIds, reload.bind(this))\"\n            >\n              <i c8yIcon=\"{{ bulkActionControl.icon }}\"></i>\n              {{ bulkActionControl.text | translate }}\n            </button>\n          </ng-container>\n\n          <button class=\"btnbar-btn\" (click)=\"setAllItemsSelected(false)\">\n            <i c8yIcon=\"times\"></i> <span translate>Cancel</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <table\n    class=\"table table-hover table-filtered-sorted table-data-grid\"\n    cdk-table\n    [dataSource]=\"dataSource\"\n    [trackBy]=\"trackByName\"\n    [class.table-striped]=\"displayOptions.striped\"\n    [class.table-bordered]=\"displayOptions.bordered\"\n    [class.table-data-grid-with-checkboxes]=\"selectable\"\n    [class.table-data-grid-with-actions]=\"actionControls.length > 0\"\n    [style.grid-template-columns]=\"styles.gridTemplateColumns\"\n    (mousemove)=\"resizeHandleContainerMouseMove$.emit($event)\"\n    (mouseup)=\"resizeHandleContainerMouseUp$.emit($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\" [cdkColumnDef]=\"column.name\">\n      <ng-container [ngSwitch]=\"column.name\">\n        <ng-container *ngSwitchCase=\"'checkbox'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\">\n            <div>\n              <label class=\"c8y-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [checked]=\"currentPageSelectionState.allSelected\"\n                  [indeterminate]=\"\n                    !(\n                      currentPageSelectionState.allSelected ||\n                      currentPageSelectionState.allDeselected\n                    )\n                  \"\n                  (change)=\"setAllItemsInCurrentPageSelected($event.target.checked)\"\n                />\n                <span></span>\n              </label>\n            </div>\n          </th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <label class=\"c8y-checkbox\">\n              <input\n                type=\"checkbox\"\n                [checked]=\"isItemSelected(row)\"\n                (change)=\"setItemsSelected([row], $event.target.checked)\"\n              />\n              <span></span>\n            </label>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"'actions'\">\n          <th cdk-header-cell *cdkHeaderCellDef data-type=\"icon\"></th>\n\n          <td cdk-cell *cdkCellDef=\"let row\">\n            <ng-container *ngIf=\"actionControls.length <= 2\">\n              <ng-container\n                *ngFor=\"let actionControl of actionControls\"\n                [ngSwitch]=\"actionControl.type\"\n              >\n                <button\n                  *ngSwitchCase=\"builtInActionType.Edit\"\n                  class=\"btn btn-icon btn-xs btn-primary\"\n                  title=\"{{ 'Edit' | translate }}\"\n                  (click)=\"actionControl.callback(row, reload.bind(this))\"\n                >\n                  <i c8yIcon=\"pencil\"></i>\n                </button>\n                <button\n                  *ngSwitchCase=\"builtInActionType.Delete\"\n                  class=\"btn btn-dot showOnHover\"\n                  title=\"{{ 'Delete' | translate }}\"\n                  (click)=\"actionControl.callback(row, reload.bind(this))\"\n                >\n                  <i class=\"text-danger\" c8yIcon=\"minus-circle\"></i>\n                </button>\n                <button\n                  *ngSwitchDefault\n                  class=\"btn btn-icon btn-xs btn-primary\"\n                  title=\"{{ actionControl.text | translate }}\"\n                  (click)=\"actionControl.callback(row, reload.bind(this))\"\n                >\n                  <i c8yIcon=\"{{ actionControl.icon }}\"></i>\n                </button>\n              </ng-container>\n            </ng-container>\n\n            <div *ngIf=\"actionControls.length > 2\" class=\"dropdown\" dropdown>\n              <button\n                class=\"dropdown-toggle c8y-dropdown\"\n                title=\"{{ 'Actions' | translate }}\"\n                dropdownToggle\n              >\n                <i c8yIcon=\"ellipsis-v\"></i>\n              </button>\n              <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n                <li *ngFor=\"let actionControl of actionControls\" [ngSwitch]=\"actionControl.type\">\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Edit\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"pencil\"></i> {{ 'Edit' | translate }}\n                  </button>\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Delete\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"trash\"></i> {{ 'Delete' | translate }}\n                  </button>\n                  <button\n                    *ngSwitchCase=\"builtInActionType.Export\"\n                    (click)=\"actionControl.callback(row, reload.bind(this))\"\n                  >\n                    <i c8yIcon=\"download\"></i> {{ 'Export' | translate }}\n                  </button>\n                  <button *ngSwitchDefault (click)=\"actionControl.callback(row, reload.bind(this))\">\n                    <i c8yIcon=\"{{ actionControl.icon }}\"></i> {{ actionControl.text | translate }}\n                  </button>\n                </li>\n              </ul>\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <th\n            cdk-header-cell\n            *cdkHeaderCellDef\n            [ngClass]=\"column.headerCSSClassName\"\n            [attr.data-type]=\"column.dataType\"\n            [class.sorted]=\"column.sortOrder\"\n            [class.filtered]=\"column | map: isColumnFilteringApplied\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <div *ngIf=\"!column.filterable\" [title]=\"(column.header | translate) || column.name\">\n              <ng-container\n                *ngIf=\"\n                  (\n                    [{\n                      columnName: column.name, \n                      value: ((column.header | translate) || column.name) \n                    }]\n                      | map:getHeaderCellRendererSpec:this\n                  ) as cellRendererSpec\n                \"\n              >\n                <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n              </ng-container>\n            </div>\n\n            <div\n              *ngIf=\"column.filterable\"\n              class=\"dropdown\"\n              dropdown\n              #dropdown=\"bs-dropdown\"\n              container=\"body\"\n              [insideClick]=\"true\"\n            >\n              <button\n                class=\"btn-header c8y-dropdown\"\n                dropdownToggle\n                [title]=\"(column.header | translate) || column.name\"\n              >\n                <ng-container\n                  *ngIf=\"\n                    (\n                      [{\n                        columnName: column.name, \n                        value: ((column.header | translate) || column.name) \n                      }]\n                        | map:getHeaderCellRendererSpec:this\n                    ) as cellRendererSpec\n                  \"\n                >\n                  <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n                </ng-container>\n                <i c8yIcon=\"filter\"></i>\n              </button>\n\n              <ul *dropdownMenu class=\"dropdown-menu\" (click)=\"$event.stopPropagation()\">\n                <li class=\"dropdown-form\">\n                  <ng-container\n                    *ngIf=\"\n                      (\n                        [{\n                          column: column, \n                          dropdown: dropdown \n                        }]\n                          | map:getFilteringFormRendererSpec:this\n                      ) as filteringFormRendererSpec\n                    \"\n                  >\n                    <c8y-filtering-form-renderer [spec]=\"filteringFormRendererSpec\">\n                    </c8y-filtering-form-renderer>\n                  </ng-container>\n                </li>\n              </ul>\n            </div>\n\n            <button\n              *ngIf=\"column.sortable\"\n              class=\"btn-sort\"\n              title=\"{{ 'Sort' | translate }}\"\n              (click)=\"changeSortOrder(column.name)\"\n            >\n              <ng-container [ngSwitch]=\"column.sortOrder\">\n                <i *ngSwitchCase=\"'asc'\" c8yIcon=\"long-arrow-up\"></i>\n                <i *ngSwitchCase=\"'desc'\" c8yIcon=\"long-arrow-down\"></i>\n                <i *ngSwitchDefault c8yIcon=\"exchange\"></i>\n              </ng-container>\n            </button>\n\n            <span\n              class=\"resize-handle\"\n              (mousedown)=\"\n                resizeHandleMouseDown$.emit({ event: $event, targetColumnName: column.name })\n              \"\n            >\n            </span>\n          </th>\n\n          <td\n            cdk-cell\n            *cdkCellDef=\"let row\"\n            [ngClass]=\"column.cellCSSClassName\"\n            [attr.data-cell-title]=\"column.header | translate\"\n            [class.hidden]=\"!column.visible\"\n          >\n            <ng-container\n              *ngIf=\"\n                (\n                  [{ \n                    value: resolveCellValue(row, column.path), \n                    row: row, \n                    columnName: column.name \n                  }]\n                    | map:getCellRendererSpec:this\n                ) as cellRendererSpec\n              \"\n            >\n              <c8y-cell-renderer [spec]=\"cellRendererSpec\"></c8y-cell-renderer>\n            </ng-container>\n          </td>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <tr cdk-header-row *cdkHeaderRowDef=\"columnNames\"></tr>\n\n    <tr\n      cdk-row\n      *cdkRowDef=\"let row; columns: columnNames\"\n      (mouseover)=\"rowMouseOver.emit(row)\"\n      (mouseleave)=\"rowMouseLeave.emit(row)\"\n      (click)=\"rowClick.emit(row)\"\n    ></tr>\n  </table>\n\n  <div *ngIf=\"dataSource.loading$ | async\" class=\"text-center\">\n    <c8y-progress-bar [message]=\"loadingItemsLabel\"></c8y-progress-bar>\n  </div>\n\n  <div\n    class=\"row m-0 p-t-40 p-b-40\"\n    *ngIf=\"!(dataSource.loading$ | async) && (dataSource.stats$ | async).filteredSize === 0\"\n  >\n    <div class=\"col-md-4 col-md-offset-4\">\n      <div class=\"c8y-empty-state\">\n        <h1 c8yIcon=\"search\"></h1>\n        <div>\n          <p>\n            <strong>{{ noMatchingItemsLabel | translate }}</strong>\n          </p>\n          <small>{{ 'Refine your search terms' | translate }}</small>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"pagination\" class=\"table-data-grid-footer separator\">\n    <div class=\"col-sm-4 no-gutter\">\n      <div *ngIf=\"(dataSource.stats$ | async).currentPageSize > 0\" class=\"counter\">\n        <span class=\"text-muted\" ngNonBindable translate [translateParams]=\"paginationLabelParams\"\n          >{{ pageFirstItemIdx }} - {{ pageLastItemIdx }} of {{ itemsTotal }}</span\n        >\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-center\">\n      <div\n        *ngIf=\"(dataSource.stats$ | async).filteredSize > minPossiblePageSize\"\n        class=\"form-group form-inline\"\n      >\n        <label class=\"m-r-4\" translate>Items per page</label>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            class=\"form-control\"\n            [ngModel]=\"pagination.pageSize\"\n            (ngModelChange)=\"\n              updatePagination({ itemsPerPage: $event, page: pagination.currentPage })\n            \"\n          >\n            <option *ngFor=\"let pageSize of possiblePageSizes\" [ngValue]=\"pageSize\">\n              {{ pageSize }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-sm-4 no-gutter text-right\">\n      <pagination\n        [class.hidden]=\"totalPagesCount <= 1\"\n        [ngModel]=\"pagination.currentPage\"\n        (pageChanged)=\"updatePagination($event)\"\n        [totalItems]=\"(dataSource.stats$ | async).filteredSize\"\n        [itemsPerPage]=\"pagination.pageSize\"\n        (numPages)=\"totalPagesCount = $event\"\n        [maxSize]=\"5\"\n        [boundaryLinks]=\"false\"\n        previousText=\" \"\n        nextText=\" \"\n      ></pagination>\n    </div>\n  </div>\n</div>\n"
            })
        ], DataGridComponent);
        return DataGridComponent;
    }());

    var CellRendererComponent = /** @class */ (function () {
        function CellRendererComponent(injector, cd) {
            this.injector = injector;
            this.cd = cd;
        }
        Object.defineProperty(CellRendererComponent.prototype, "_spec", {
            set: function (spec) {
                this.spec = spec;
            },
            enumerable: true,
            configurable: true
        });
        CellRendererComponent.prototype.ngOnChanges = function () {
            if (!this.prevSpec) {
                this.prevSpec = this.spec;
            }
            var renderer = this.spec.renderer;
            if (renderer instanceof core.TemplateRef) {
                this.rendererType = 'TEMPLATE';
            }
            else if (renderer instanceof core.Type) {
                this.rendererType = 'COMPONENT';
                this.rendererInjector = core.Injector.create({
                    providers: [{ provide: CellRendererContext, useValue: this.spec.context }],
                    parent: this.injector
                });
            }
        };
        CellRendererComponent.prototype.ngDoCheck = function () {
            if (!this.spec.context.value === this.prevSpec.context.value) {
                this.prevSpec = this.spec;
                this.cd.markForCheck();
            }
        };
        CellRendererComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input('spec')
        ], CellRendererComponent.prototype, "_spec", null);
        CellRendererComponent = __decorate([
            core.Component({
                selector: 'c8y-cell-renderer',
                template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  {{ spec.context.value }}\n</ng-container>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], CellRendererComponent);
        return CellRendererComponent;
    }());

    var FilteringFormRendererComponent = /** @class */ (function () {
        function FilteringFormRendererComponent(injector, cd) {
            this.injector = injector;
            this.cd = cd;
            this.defaultRendererFilterText = '';
        }
        Object.defineProperty(FilteringFormRendererComponent.prototype, "_spec", {
            set: function (spec) {
                this.spec = spec;
            },
            enumerable: true,
            configurable: true
        });
        FilteringFormRendererComponent.prototype.ngOnChanges = function () {
            var _a = this.spec, renderer = _a.renderer, context = _a.context;
            if (renderer instanceof core.TemplateRef) {
                this.rendererType = 'TEMPLATE';
            }
            else if (renderer instanceof core.Type) {
                this.rendererType = 'COMPONENT';
                this.rendererInjector = core.Injector.create({
                    providers: [{ provide: FilteringFormRendererContext, useValue: this.spec.context }],
                    parent: this.injector
                });
            }
            var filterPredicate = context.property.filterPredicate;
            if (typeof filterPredicate === 'string') {
                this.defaultRendererFilterText = filterPredicate;
            }
        };
        FilteringFormRendererComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input('spec')
        ], FilteringFormRendererComponent.prototype, "_spec", null);
        FilteringFormRendererComponent = __decorate([
            core.Component({
                selector: 'c8y-filtering-form-renderer',
                template: "<ng-container *ngIf=\"spec.renderer\">\n  <ng-container\n    *ngIf=\"rendererType === 'TEMPLATE'\"\n    [ngTemplateOutlet]=\"spec.renderer\"\n    [ngTemplateOutletContext]=\"{ $implicit: spec.context }\"\n  >\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"rendererType === 'COMPONENT'\"\n    [ngComponentOutlet]=\"spec.renderer\"\n    [ngComponentOutletInjector]=\"rendererInjector\"\n  >\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"!spec.renderer\">\n  <div class=\"form-group\">\n    <label translate>Filter text</label>\n    <input\n      class=\"form-control\"\n      [(ngModel)]=\"defaultRendererFilterText\"\n      (keyup.enter)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n    />\n  </div>\n  <div class=\"flex-row\">\n    <button\n      class=\"btn btn-default btn-sm flex-grow m-r-8\"\n      (click)=\"defaultRendererFilterText = ''; spec.context.resetFilter()\"\n      translate\n    >\n      Reset\n    </button>\n    <button\n      class=\"btn btn-primary btn-sm flex-grow\"\n      (click)=\"\n        spec.context.applyFilter({\n          filterPredicate: defaultRendererFilterText\n        })\n      \"\n      translate\n    >\n      Apply\n    </button>\n  </div>\n</ng-container>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], FilteringFormRendererComponent);
        return FilteringFormRendererComponent;
    }());

    var DataGridModule = /** @class */ (function () {
        function DataGridModule() {
        }
        DataGridModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    table.CdkTableModule,
                    dragDrop.DragDropModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    CommonModule,
                    dropdown.BsDropdownModule.forRoot(),
                    popover.PopoverModule.forRoot(),
                    pagination.PaginationModule.forRoot()
                ],
                declarations: [
                    CellRendererDefDirective,
                    HeaderCellRendererDefDirective,
                    CellRendererComponent,
                    FilteringFormRendererDefDirective,
                    FilteringFormRendererComponent,
                    ColumnDirective,
                    DataGridComponent
                ],
                exports: [
                    CellRendererDefDirective,
                    HeaderCellRendererDefDirective,
                    FilteringFormRendererDefDirective,
                    ColumnDirective,
                    DataGridComponent
                ],
                entryComponents: [DataGridComponent]
            })
        ], DataGridModule);
        return DataGridModule;
    }());

    var BaseDeviceGridColumn = /** @class */ (function () {
        function BaseDeviceGridColumn() {
        }
        return BaseDeviceGridColumn;
    }());

    var StatusCellRendererComponent = /** @class */ (function () {
        function StatusCellRendererComponent(context) {
            this.context = context;
        }
        StatusCellRendererComponent.ctorParameters = function () { return [
            { type: CellRendererContext }
        ]; };
        StatusCellRendererComponent = __decorate([
            core.Component({
                template: "\n    <device-status [mo]=\"context.item\"></device-status>\n  "
            })
        ], StatusCellRendererComponent);
        return StatusCellRendererComponent;
    }());

    var StatusDeviceGridColumn = /** @class */ (function (_super) {
        __extends(StatusDeviceGridColumn, _super);
        function StatusDeviceGridColumn() {
            var _this = _super.call(this) || this;
            var availabilityStatusPath = 'c8y_Availability.status';
            var requiredAvailabilityPath = 'c8y_RequiredAvailability';
            var connectionStatusPath = 'c8y_Connection.status';
            _this.name = 'status';
            _this.header = gettext('Status');
            _this.dataType = "icon" /* Icon */;
            _this.cellRendererComponent = StatusCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        sendOnline: {
                            type: 'boolean'
                        },
                        sendOffline: {
                            type: 'boolean'
                        },
                        sendUnknown: {
                            type: 'boolean'
                        },
                        sendNotMonitored: {
                            type: 'boolean'
                        },
                        pushOnline: {
                            type: 'boolean'
                        },
                        pushOffline: {
                            type: 'boolean'
                        },
                        pushUnknown: {
                            type: 'boolean'
                        },
                        maintenance: {
                            type: 'boolean'
                        }
                    }
                },
                form: [
                    {
                        type: 'template',
                        template: "<label><span translate>" + gettext('Show devices with send status') + "</span>:</label>"
                    },
                    {
                        key: 'sendOnline',
                        title: gettext('Online')
                    },
                    {
                        key: 'sendOffline',
                        title: gettext('Offline')
                    },
                    {
                        key: 'sendUnknown',
                        title: gettext('Unknown')
                    },
                    {
                        key: 'sendNotMonitored',
                        title: gettext('Not monitored')
                    },
                    {
                        type: 'template',
                        template: "<label><span translate>" + gettext('Show devices with push status') + "</span>:</label>"
                    },
                    {
                        key: 'pushOnline',
                        title: gettext('Online')
                    },
                    {
                        key: 'pushOffline',
                        title: gettext('Offline')
                    },
                    {
                        key: 'pushUnknown',
                        title: gettext('Not monitored')
                    },
                    {
                        type: 'template',
                        template: "<label><span translate>" + gettext('Show devices with maintenance status') + "</span>:</label>"
                    },
                    {
                        key: 'maintenance',
                        title: gettext('Under maintenance')
                    }
                ],
                getFilter: function (model) {
                    var _a, _b;
                    var filter = {};
                    var ors = [];
                    var sendIns = [];
                    var pushIns = [];
                    if (model) {
                        if (model.sendOnline) {
                            sendIns.push('AVAILABLE');
                        }
                        if (model.maintenance) {
                            sendIns.push('MAINTENANCE');
                        }
                        if (model.sendOffline) {
                            sendIns.push('UNAVAILABLE');
                        }
                        if (model.sendUnknown) {
                            ors.push({
                                __and: [
                                    { __not: { __has: availabilityStatusPath } },
                                    { __has: requiredAvailabilityPath }
                                ]
                            });
                        }
                        if (model.sendNotMonitored) {
                            ors.push({
                                __and: [
                                    { __not: { __has: availabilityStatusPath } },
                                    { __not: { __has: requiredAvailabilityPath } }
                                ]
                            });
                        }
                        if (model.pushOnline) {
                            pushIns.push('CONNECTED');
                        }
                        if (model.pushOffline) {
                            pushIns.push('DISCONNECTED');
                        }
                        if (model.pushUnknown) {
                            ors.push({
                                __not: { __has: connectionStatusPath }
                            });
                        }
                        if (sendIns.length) {
                            ors.push((_a = {}, _a[availabilityStatusPath] = { __in: sendIns }, _a));
                        }
                        if (pushIns.length) {
                            ors.push((_b = {}, _b[connectionStatusPath] = { __in: pushIns }, _b));
                        }
                        if (ors.length) {
                            filter.__or = ors;
                        }
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: availabilityStatusPath }]
            };
            return _this;
        }
        return StatusDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var NameCellRendererComponent = /** @class */ (function () {
        function NameCellRendererComponent(context, deviceGridService) {
            this.context = context;
            this.deviceGridService = deviceGridService;
        }
        NameCellRendererComponent.ctorParameters = function () { return [
            { type: CellRendererContext },
            { type: DeviceGridService, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return DeviceGridService; }),] }] }
        ]; };
        NameCellRendererComponent = __decorate([
            core.Component({
                template: "\n    <a\n      [href]=\"deviceGridService.getDeviceHref(context.item)\"\n      title=\"{{ deviceGridService.getProperName(context.item) }}\"\n      class=\"interact\"\n    >\n      {{ deviceGridService.getProperName(context.item) }}\n    </a>\n  "
            }),
            __param(1, core.Inject(core.forwardRef(function () { return DeviceGridService; })))
        ], NameCellRendererComponent);
        return NameCellRendererComponent;
    }());

    var NameDeviceGridColumn = /** @class */ (function (_super) {
        __extends(NameDeviceGridColumn, _super);
        function NameDeviceGridColumn() {
            var _this = _super.call(this) || this;
            _this.name = 'name';
            _this.path = 'name';
            _this.header = gettext('Name');
            _this.cellCSSClassName = "data-record-header" /* Header */;
            _this.cellRendererComponent = NameCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        names: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                },
                form: [
                    {
                        key: 'names',
                        title: gettext('Show devices with name'),
                        add: gettext('Or'),
                        items: [
                            {
                                key: 'names[]',
                                notitle: true,
                                placeholder: gettext('e.g. My Device, you can use an asterisk (*) as wildcard character')
                            }
                        ]
                    }
                ],
                getFilter: function (model) {
                    var filter = {};
                    if (model.names.length) {
                        filter.name = { __in: model.names };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return NameDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var ModelCellRendererComponent = /** @class */ (function () {
        function ModelCellRendererComponent(context, deviceGridService) {
            this.context = context;
            this.deviceGridService = deviceGridService;
        }
        ModelCellRendererComponent.ctorParameters = function () { return [
            { type: CellRendererContext },
            { type: DeviceGridService, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return DeviceGridService; }),] }] }
        ]; };
        ModelCellRendererComponent = __decorate([
            core.Component({
                template: "\n    {{ deviceGridService.getModel(context.item) }}\n  "
            }),
            __param(1, core.Inject(core.forwardRef(function () { return DeviceGridService; })))
        ], ModelCellRendererComponent);
        return ModelCellRendererComponent;
    }());

    var ModelDeviceGridColumn = /** @class */ (function (_super) {
        __extends(ModelDeviceGridColumn, _super);
        function ModelDeviceGridColumn() {
            var _this = _super.call(this) || this;
            var hardwareModelPath = 'c8y_Hardware.model';
            var vendingModelPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.model';
            _this.name = 'model';
            _this.header = gettext('Model');
            _this.cellRendererComponent = ModelCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        models: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                },
                form: [
                    {
                        key: 'models',
                        title: gettext('Show devices with model'),
                        add: gettext('Or'),
                        items: [
                            {
                                key: 'models[]',
                                notitle: true,
                                placeholder: gettext('e.g. ModelName, you can use an asterisk (*) as wildcard character')
                            }
                        ]
                    }
                ],
                getFilter: function (model) {
                    var _a;
                    var filter = {};
                    if (model.models.length) {
                        filter.__or = (_a = {},
                            _a[hardwareModelPath] = { __in: model.models },
                            _a[vendingModelPath] = { __in: model.models },
                            _a);
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: hardwareModelPath }, { path: vendingModelPath }]
            };
            return _this;
        }
        return ModelDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var SerialNumberCellRendererComponent = /** @class */ (function () {
        function SerialNumberCellRendererComponent(context, deviceGridService) {
            this.context = context;
            this.deviceGridService = deviceGridService;
        }
        SerialNumberCellRendererComponent.ctorParameters = function () { return [
            { type: CellRendererContext },
            { type: DeviceGridService, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return DeviceGridService; }),] }] }
        ]; };
        SerialNumberCellRendererComponent = __decorate([
            core.Component({
                template: "\n    {{ deviceGridService.getSerialNumber(context.item) }}\n  "
            }),
            __param(1, core.Inject(core.forwardRef(function () { return DeviceGridService; })))
        ], SerialNumberCellRendererComponent);
        return SerialNumberCellRendererComponent;
    }());

    var SerialNumberDeviceGridColumn = /** @class */ (function (_super) {
        __extends(SerialNumberDeviceGridColumn, _super);
        function SerialNumberDeviceGridColumn() {
            var _this = _super.call(this) || this;
            var hardwareSerialNumberPath = 'c8y_Hardware.serialNumber';
            var vendingSerialNumberPath = 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo.serial';
            _this.name = 'serialNumber';
            _this.header = gettext('Serial number');
            _this.cellRendererComponent = SerialNumberCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        serialNumbers: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                },
                form: [
                    {
                        key: 'serialNumbers',
                        title: gettext('Show devices with serial number'),
                        add: gettext('Or'),
                        items: [
                            {
                                key: 'serialNumbers[]',
                                notitle: true,
                                placeholder: gettext('e.g. 54321-123, you can use an asterisk (*) as wildcard character')
                            }
                        ]
                    }
                ],
                getFilter: function (model) {
                    var _a;
                    var filter = {};
                    if (model.serialNumbers.length) {
                        filter.__or = (_a = {},
                            _a[hardwareSerialNumberPath] = { __in: model.serialNumbers },
                            _a[vendingSerialNumberPath] = { __in: model.serialNumbers },
                            _a);
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: hardwareSerialNumberPath }, { path: vendingSerialNumberPath }]
            };
            return _this;
        }
        return SerialNumberDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var GroupCellRendererComponent = /** @class */ (function () {
        function GroupCellRendererComponent(context, deviceGridService) {
            this.context = context;
            this.deviceGridService = deviceGridService;
        }
        GroupCellRendererComponent.ctorParameters = function () { return [
            { type: CellRendererContext },
            { type: DeviceGridService, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return DeviceGridService; }),] }] }
        ]; };
        GroupCellRendererComponent = __decorate([
            core.Component({
                template: "<span\n  title=\"{{\n    deviceGridService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\"\n  class=\"text-truncate\"\n>\n  {{\n    deviceGridService.getParentsNames(\n      context.item,\n      context.property.externalFilterQuery?.deviceGroupId\n    )\n  }}\n</span>\n"
            }),
            __param(1, core.Inject(core.forwardRef(function () { return DeviceGridService; })))
        ], GroupCellRendererComponent);
        return GroupCellRendererComponent;
    }());

    var GroupDeviceGridColumn = /** @class */ (function (_super) {
        __extends(GroupDeviceGridColumn, _super);
        function GroupDeviceGridColumn() {
            var _this = _super.call(this) || this;
            _this.name = 'group';
            _this.header = gettext('Group');
            _this.cellRendererComponent = GroupCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        deviceGroupId: {
                            type: 'integer',
                            format: 'deviceGroupId'
                        }
                    }
                },
                form: [
                    {
                        key: 'deviceGroupId',
                        title: gettext('Show devices in group')
                    }
                ],
                getFilter: function (model) {
                    var filter = {};
                    if (model.deviceGroupId) {
                        filter.__bygroupid = model.deviceGroupId;
                    }
                    return filter;
                }
            };
            _this.sortable = false;
            return _this;
        }
        return GroupDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var RegistrationDateCellRendererComponent = /** @class */ (function () {
        function RegistrationDateCellRendererComponent(context) {
            this.context = context;
        }
        RegistrationDateCellRendererComponent.ctorParameters = function () { return [
            { type: CellRendererContext }
        ]; };
        RegistrationDateCellRendererComponent = __decorate([
            core.Component({
                template: "\n    {{ context.value | date: 'medium' }}\n  "
            })
        ], RegistrationDateCellRendererComponent);
        return RegistrationDateCellRendererComponent;
    }());

    var RegistrationDateDeviceGridColumn = /** @class */ (function (_super) {
        __extends(RegistrationDateDeviceGridColumn, _super);
        function RegistrationDateDeviceGridColumn() {
            var _this = _super.call(this) || this;
            var self = _this;
            _this.path = 'creationTime';
            _this.name = 'registrationDate';
            _this.header = gettext('Registration date');
            _this.cellRendererComponent = RegistrationDateCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        registrationDate: {
                            type: 'object',
                            properties: {
                                after: {
                                    type: 'string',
                                    format: 'datetime'
                                },
                                before: {
                                    type: 'string',
                                    format: 'datetime'
                                }
                            }
                        }
                    }
                },
                form: [
                    {
                        key: 'registrationDate.after',
                        title: gettext('Show devices registered after'),
                        maxDateKey: 'registrationDate.before'
                    },
                    {
                        key: 'registrationDate.before',
                        title: gettext('And before`date`'),
                        minDateKey: 'registrationDate.after'
                    }
                ],
                getFilter: function (model) {
                    var _a, _b;
                    var filter = {};
                    var dates = model && model.registrationDate;
                    if (dates && (dates.after || dates.before)) {
                        filter.__and = [];
                        if (dates.after) {
                            var after = self.formatDate(dates.after);
                            filter.__and.push({
                                __or: (_a = {},
                                    _a[self.path] = { __gt: after },
                                    _a[self.path + ".date"] = { __gt: after },
                                    _a)
                            });
                        }
                        if (dates.before) {
                            var before = self.formatDate(dates.before);
                            filter.__and.push({
                                __or: (_b = {},
                                    _b[self.path] = { __lt: before },
                                    _b[self.path + ".date"] = { __lt: before },
                                    _b)
                            });
                        }
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path + ".date" }, { path: _this.path }]
            };
            return _this;
        }
        RegistrationDateDeviceGridColumn.prototype.formatDate = function (dateToFormat) {
            return new Date(dateToFormat).toISOString();
        };
        return RegistrationDateDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var SystemIdDeviceGridColumn = /** @class */ (function (_super) {
        __extends(SystemIdDeviceGridColumn, _super);
        function SystemIdDeviceGridColumn() {
            var _this = _super.call(this) || this;
            var self = _this;
            _this.path = 'id';
            _this.name = 'systemId';
            _this.header = gettext('System ID');
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        ids: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                },
                form: [
                    {
                        key: 'ids',
                        title: gettext('Show devices with system ID'),
                        add: gettext('Or'),
                        items: [
                            {
                                key: 'ids[]',
                                notitle: true,
                                placeholder: gettext('e.g. 10300, you can use an asterisk (*) as wildcard character')
                            }
                        ]
                    }
                ],
                getFilter: function (model) {
                    var filter = {};
                    if (model.ids.length) {
                        filter[self.path] = { __in: model.ids };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return SystemIdDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var ImeiDeviceGridColumn = /** @class */ (function (_super) {
        __extends(ImeiDeviceGridColumn, _super);
        function ImeiDeviceGridColumn() {
            var _this = _super.call(this) || this;
            var self = _this;
            _this.path = 'c8y_Mobile.imei';
            _this.name = 'imei';
            _this.header = gettext('IMEI');
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        imeis: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                },
                form: [
                    {
                        key: 'imeis',
                        title: gettext('Show devices with IMEI'),
                        add: gettext('Or'),
                        items: [
                            {
                                key: 'imeis[]',
                                notitle: true,
                                placeholder: gettext('e.g. 46543432321, you can use an asterisk (*) as wildcard character')
                            }
                        ]
                    }
                ],
                getFilter: function (model) {
                    var filter = {};
                    if (model.imeis.length) {
                        filter[self.path] = { __in: model.imeis };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [{ path: _this.path }]
            };
            return _this;
        }
        return ImeiDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var AlarmsCellRendererComponent = /** @class */ (function () {
        function AlarmsCellRendererComponent(context, deviceGridService) {
            this.context = context;
            this.deviceGridService = deviceGridService;
        }
        AlarmsCellRendererComponent.ctorParameters = function () { return [
            { type: CellRendererContext },
            { type: DeviceGridService, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return DeviceGridService; }),] }] }
        ]; };
        AlarmsCellRendererComponent = __decorate([
            core.Component({
                template: "<a [href]=\"deviceGridService.getAlarmsHref(context.item)\" class=\"listLink\">\n  <small\n    class=\"status critical\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.critical\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.critical }} <i [c8yIcon]=\"'warning'\"></i>\n  </small>\n  <small\n    class=\"status major\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.major\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.major }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small\n    class=\"status minor\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.minor\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.minor }}\n    <i [c8yIcon]=\"'exclamation-circle'\"></i>\n  </small>\n  <small\n    class=\"status warning\"\n    *ngIf=\"context.item.c8y_ActiveAlarmsStatus?.warning\"\n    style=\"white-space: nowrap;\"\n  >\n    {{ context.item.c8y_ActiveAlarmsStatus?.warning }} <i [c8yIcon]=\"'circle'\"></i>\n  </small>\n</a>\n"
            }),
            __param(1, core.Inject(core.forwardRef(function () { return DeviceGridService; })))
        ], AlarmsCellRendererComponent);
        return AlarmsCellRendererComponent;
    }());

    var AlarmsDeviceGridColumn = /** @class */ (function (_super) {
        __extends(AlarmsDeviceGridColumn, _super);
        function AlarmsDeviceGridColumn() {
            var _this = _super.call(this) || this;
            _this.name = 'alarms';
            _this.header = gettext('Alarms');
            _this.cellRendererComponent = AlarmsCellRendererComponent;
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        critical: {
                            type: 'boolean'
                        },
                        major: {
                            type: 'boolean'
                        },
                        minor: {
                            type: 'boolean'
                        },
                        warning: {
                            type: 'boolean'
                        },
                        none: {
                            type: 'boolean'
                        }
                    }
                },
                form: [
                    {
                        type: 'template',
                        template: "<label><span translate>" + gettext('Show devices with active') + "</span>:</label>"
                    },
                    {
                        key: 'critical',
                        title: gettext('Critical alarms')
                    },
                    {
                        key: 'major',
                        title: gettext('Major alarms')
                    },
                    {
                        key: 'minor',
                        title: gettext('Minor alarms')
                    },
                    {
                        key: 'warning',
                        title: gettext('Warnings')
                    },
                    {
                        key: 'none',
                        title: gettext('No alarms')
                    }
                ],
                getFilter: function (model) {
                    var filter = {};
                    var ors = [];
                    if (model.critical) {
                        ors.push({ 'c8y_ActiveAlarmsStatus.critical': { __gt: 0 } });
                    }
                    if (model.major) {
                        ors.push({ 'c8y_ActiveAlarmsStatus.major': { __gt: 0 } });
                    }
                    if (model.minor) {
                        ors.push({ 'c8y_ActiveAlarmsStatus.minor': { __gt: 0 } });
                    }
                    if (model.warning) {
                        ors.push({ 'c8y_ActiveAlarmsStatus.warning': { __gt: 0 } });
                    }
                    if (model.none) {
                        ors.push({ __not: { __has: 'c8y_ActiveAlarmsStatus' } });
                        ors.push({
                            __and: lodashEs.map(['critical', 'major', 'minor', 'warning'], function (sev) {
                                var zero = {};
                                var has = { __not: { __has: undefined } };
                                var key = "c8y_ActiveAlarmsStatus." + sev;
                                zero[key] = 0;
                                has.__not.__has = key;
                                return { __or: [zero, has] };
                            })
                        });
                    }
                    if (ors.length) {
                        filter.__or = ors;
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            _this.sortingConfig = {
                pathSortingConfigs: [
                    { path: 'c8y_ActiveAlarmsStatus.critical' },
                    { path: 'c8y_ActiveAlarmsStatus.major' },
                    { path: 'c8y_ActiveAlarmsStatus.minor' },
                    { path: 'c8y_ActiveAlarmsStatus.warning' }
                ]
            };
            return _this;
        }
        return AlarmsDeviceGridColumn;
    }(BaseDeviceGridColumn));

    var DeviceGridService = /** @class */ (function () {
        function DeviceGridService(inventoryService, translateService) {
            this.inventoryService = inventoryService;
            this.translateService = translateService;
            this.queriesUtil = new client.QueriesUtil();
        }
        DeviceGridService.prototype.getDefaultColumns = function () {
            return [
                new StatusDeviceGridColumn(),
                new NameDeviceGridColumn(),
                new ModelDeviceGridColumn(),
                new SerialNumberDeviceGridColumn(),
                new GroupDeviceGridColumn(),
                new RegistrationDateDeviceGridColumn(),
                new SystemIdDeviceGridColumn(),
                new ImeiDeviceGridColumn(),
                new AlarmsDeviceGridColumn()
            ];
        };
        DeviceGridService.prototype.getDefaultPagination = function () {
            return {
                pageSize: 10,
                currentPage: 1
            };
        };
        DeviceGridService.prototype.getDefaultActionControls = function () {
            var _this = this;
            return [
                {
                    type: "DELETE" /* Delete */,
                    callback: function (item) { return _this.delete(item); }
                }
            ];
        };
        DeviceGridService.prototype.getDefaultBulkActionControls = function () {
            return [];
        };
        DeviceGridService.prototype.getProperName = function (device) {
            var id = device.id, name = device.name;
            return name ? name : this.translateService.instant('Device {{id}}', { id: id });
        };
        DeviceGridService.prototype.getModel = function (device) {
            var hardware = this.getHardware(device);
            return hardware && hardware.model;
        };
        DeviceGridService.prototype.getSerialNumber = function (device) {
            var hardware = this.getHardware(device);
            var serialPropertyName = this.isVendme(device) ? 'serial' : 'serialNumber';
            return hardware && hardware[serialPropertyName];
        };
        DeviceGridService.prototype.getParentsNames = function (device, featuredParentId) {
            var assetParentsReferences = device.assetParents.references;
            var assetParents = lodashEs.map(assetParentsReferences, 'managedObject');
            var sortedByName = lodashEs.sortBy(assetParents, ['name']);
            var featuredItems = lodashEs.remove(sortedByName, { id: featuredParentId });
            var items = featuredItems.concat(sortedByName);
            var names = lodashEs.map(items, 'name');
            return names.join(', ');
        };
        DeviceGridService.prototype.getDeviceHref = function (device) {
            return "#/device/" + device.id;
        };
        DeviceGridService.prototype.getAlarmsHref = function (device) {
            return this.getDeviceHref(device) + "/alarms";
        };
        DeviceGridService.prototype.delete = function (device) {
            console.log('should delete', device);
        };
        DeviceGridService.prototype.getDevices = function (columns, pagination) {
            return __awaiter(this, void 0, void 0, function () {
                var filters;
                return __generator(this, function (_a) {
                    filters = __assign({}, this.getDevicesFilters(columns, pagination), { withParents: true });
                    return [2 /*return*/, this.inventoryService.list(filters)];
                });
            });
        };
        DeviceGridService.prototype.getDevicesCount = function (columns, pagination) {
            return __awaiter(this, void 0, void 0, function () {
                var filters;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filters = __assign({}, this.getDevicesFilters(columns, pagination), { pageSize: 1, currentPage: 1 });
                            return [4 /*yield*/, this.inventoryService.list(filters)];
                        case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                    }
                });
            });
        };
        DeviceGridService.prototype.getDevicesTotal = function () {
            return __awaiter(this, void 0, void 0, function () {
                var filters;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filters = {
                                q: '',
                                pageSize: 1,
                                withTotalPages: true
                            };
                            return [4 /*yield*/, this.inventoryService.list(filters)];
                        case 1: return [2 /*return*/, (_a.sent()).paging.totalPages];
                    }
                });
            });
        };
        DeviceGridService.prototype.getDeviceQueryString = function (columns) {
            return this.queriesUtil.buildQuery(this.getQueryObj(columns));
        };
        DeviceGridService.prototype.getHardware = function (device) {
            var hardwarePropertyName = this.isVendme(device)
                ? 'com_nsn_startups_vendme_fragments_VendingMachineTypeInfo'
                : 'c8y_Hardware';
            return device && device[hardwarePropertyName];
        };
        DeviceGridService.prototype.isVendme = function (device) {
            return device.type === 'com_nsn_startups_vendme_VendingMachine';
        };
        DeviceGridService.prototype.getDevicesFilters = function (columns, pagination) {
            return {
                q: this.getDeviceQueryString(columns),
                pageSize: pagination.pageSize,
                currentPage: pagination.currentPage,
                withTotalPages: true
            };
        };
        DeviceGridService.prototype.getQueryObj = function (columns) {
            var _this = this;
            return lodashEs.transform(columns, function (query, column) { return _this.extendQueryByColumn(query, column); }, {
                __filter: {},
                __orderby: []
            });
        };
        DeviceGridService.prototype.extendQueryByColumn = function (query, column) {
            if (column.filterable && column.externalFilterQuery) {
                var getFilter = column.filteringConfig.getFilter || lodashEs.identity;
                var queryObj = getFilter(column.externalFilterQuery);
                if (queryObj.__or) {
                    query.__filter.__and = query.__filter.__and || [];
                    query.__filter.__and.push(queryObj);
                }
                else if (queryObj.__and && lodashEs.get(query, '__filter.__and')) {
                    queryObj.__and.map(function (obj) { return query.__filter.__and.push(obj); });
                }
                else {
                    lodashEs.assign(query.__filter, queryObj);
                }
            }
            if (column.sortable && column.sortOrder) {
                var cs_1 = {};
                lodashEs.forEach(column.sortingConfig.pathSortingConfigs, function (pathSortingConfig) {
                    cs_1[pathSortingConfig.path] =
                        (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);
                });
                query.__orderby.push(cs_1);
            }
            return query;
        };
        DeviceGridService.ctorParameters = function () { return [
            { type: client.InventoryService },
            { type: core$1.TranslateService }
        ]; };
        DeviceGridService = __decorate([
            core.Injectable()
        ], DeviceGridService);
        return DeviceGridService;
    }());

    var DeviceGridComponent = /** @class */ (function () {
        function DeviceGridComponent(deviceGridService) {
            this.deviceGridService = deviceGridService;
            this.title = gettext('Devices');
            this.loadingItemsLabel = gettext('Loading devices…');
            this.noMatchingItemsLabel = gettext('No matching devices.');
            this.selectable = false;
            this.onColumnsChange = new core.EventEmitter();
            this.onDeviceQueryStringChange = new core.EventEmitter();
            this.columns = this.deviceGridService.getDefaultColumns();
            this.pagination = this.deviceGridService.getDefaultPagination();
            this.actionControls = this.deviceGridService.getDefaultActionControls();
            this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
            this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        }
        Object.defineProperty(DeviceGridComponent.prototype, "_columns", {
            set: function (value) {
                if (value) {
                    this.columns = value;
                }
                else {
                    this.columns = this.deviceGridService.getDefaultColumns();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceGridComponent.prototype, "_pagination", {
            set: function (value) {
                if (value) {
                    this.pagination = value;
                }
                else {
                    this.pagination = this.deviceGridService.getDefaultPagination();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceGridComponent.prototype, "_actionControls", {
            set: function (value) {
                if (value) {
                    this.actionControls = value;
                }
                else {
                    this.actionControls = this.deviceGridService.getDefaultActionControls();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeviceGridComponent.prototype, "_bulkActionControls", {
            set: function (value) {
                if (value) {
                    this.bulkActionControls = value;
                }
                else {
                    this.bulkActionControls = this.deviceGridService.getDefaultBulkActionControls();
                }
            },
            enumerable: true,
            configurable: true
        });
        DeviceGridComponent.prototype.trackByName = function (_index, column) {
            return column.name;
        };
        DeviceGridComponent.prototype.onDataSourceModifier = function (dataSourceModifier) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, res, data, paging, filteredSize, size;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.deviceGridService.getDevices(dataSourceModifier.columns, dataSourceModifier.pagination)];
                        case 1:
                            _a = _b.sent(), res = _a.res, data = _a.data, paging = _a.paging;
                            return [4 /*yield*/, this.deviceGridService.getDevicesCount(dataSourceModifier.columns, dataSourceModifier.pagination)];
                        case 2:
                            filteredSize = _b.sent();
                            return [4 /*yield*/, this.deviceGridService.getDevicesTotal()];
                        case 3:
                            size = _b.sent();
                            this.onColumnsChange.emit(dataSourceModifier.columns);
                            this.onDeviceQueryStringChange.emit(this.deviceGridService.getDeviceQueryString(dataSourceModifier.columns));
                            return [2 /*return*/, {
                                    res: res,
                                    data: data,
                                    paging: paging,
                                    filteredSize: filteredSize,
                                    size: size
                                }];
                    }
                });
            });
        };
        DeviceGridComponent.ctorParameters = function () { return [
            { type: DeviceGridService }
        ]; };
        __decorate([
            core.Input()
        ], DeviceGridComponent.prototype, "title", void 0);
        __decorate([
            core.Input()
        ], DeviceGridComponent.prototype, "loadingItemsLabel", void 0);
        __decorate([
            core.Input()
        ], DeviceGridComponent.prototype, "noMatchingItemsLabel", void 0);
        __decorate([
            core.Input('columns')
        ], DeviceGridComponent.prototype, "_columns", null);
        __decorate([
            core.Input('pagination')
        ], DeviceGridComponent.prototype, "_pagination", null);
        __decorate([
            core.Input('actionControls')
        ], DeviceGridComponent.prototype, "_actionControls", null);
        __decorate([
            core.Input()
        ], DeviceGridComponent.prototype, "selectable", void 0);
        __decorate([
            core.Input('bulkActionControls')
        ], DeviceGridComponent.prototype, "_bulkActionControls", null);
        __decorate([
            core.Output()
        ], DeviceGridComponent.prototype, "onColumnsChange", void 0);
        __decorate([
            core.Output()
        ], DeviceGridComponent.prototype, "onDeviceQueryStringChange", void 0);
        DeviceGridComponent = __decorate([
            core.Component({
                selector: 'c8y-device-grid',
                template: "<c8y-data-grid\n  [title]=\"title\"\n  [loadingItemsLabel]=\"loadingItemsLabel\"\n  [noMatchingItemsLabel]=\"noMatchingItemsLabel\"\n  [columns]=\"columns\"\n  [pagination]=\"pagination\"\n  [actionControls]=\"actionControls\"\n  [selectable]=\"selectable\"\n  [bulkActionControls]=\"bulkActionControls\"\n  [serverSideDataCallback]=\"serverSideDataCallback\"\n>\n  <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n    <c8y-column [name]=\"column.name\">\n      <ng-container *ngIf=\"column.filteringConfig\">\n        <ng-container *c8yFilteringFormRendererDef=\"let context\">\n          <c8y-filtering-form [context]=\"context\"></c8y-filtering-form>\n        </ng-container>\n      </ng-container>\n    </c8y-column>\n  </ng-container>\n</c8y-data-grid>\n"
            })
        ], DeviceGridComponent);
        return DeviceGridComponent;
    }());

    // TODO remove  when c8y-icon will works
    var deviceAvailabilityIconMap = {
        sendData: {
            AVAILABLE: {
                icon: 'long-arrow-right',
                class: 'statusOk'
            },
            UNAVAILABLE: {
                icon: 'long-arrow-right',
                class: 'statusNok'
            },
            UNKNOWN: {
                icon: 'long-arrow-right',
                class: 'statusUnknown'
            },
            NOT_MONITORED: {
                icon: 'long-arrow-right',
                class: 'statusUnknown'
            }
        },
        push: {
            CONNECTED: {
                icon: 'long-arrow-left',
                class: 'statusOk'
            },
            DISCONNECTED: {
                icon: 'long-arrow-left',
                class: 'statusUnknown'
            },
            UNKNOWN: {
                icon: 'long-arrow-left',
                class: 'statusUnknown'
            },
            MAINTENANCE: {
                icon: 'wrench',
                class: 'statusAlert'
            }
        },
        device: {
            MAINTENANCE: {
                icon: 'wrench',
                class: 'statusAlert'
            }
        }
    };
    var ɵ0 = function (lastMessage, translateService) {
        var date = common.formatDate(new Date(lastMessage), 'medium', translateService.currentLang);
        return translateService.instant(gettext('Device last request:\n{{date}}'), { date: date });
    };
    var tooltips = {
        sendStatusConnected: ɵ0,
        sendStatusDisconnected: gettext('Connection not monitored'),
        pushStatusConnected: gettext('Connection to device established'),
        pushStatusDisconnected: gettext('Connection to device not established (not supported by device or no connectivity)'),
        maintenance: gettext('Under maintenance')
    };

    (function (PushStatusLabels) {
        PushStatusLabels[PushStatusLabels["CONNECTED"] = gettext('Push connection: active')] = "CONNECTED";
        PushStatusLabels[PushStatusLabels["DISCONNECTED"] = gettext('Push connection: inactive')] = "DISCONNECTED";
        PushStatusLabels[PushStatusLabels["UNKNOWN"] = gettext('Push connection: inactive')] = "UNKNOWN";
    })(exports.PushStatusLabels || (exports.PushStatusLabels = {}));

    (function (SendStatusLabels) {
        SendStatusLabels[SendStatusLabels["AVAILABLE"] = gettext('Send connection: online')] = "AVAILABLE";
        SendStatusLabels[SendStatusLabels["NOT_MONITORED"] = gettext('Send connection: not monitored')] = "NOT_MONITORED";
        SendStatusLabels[SendStatusLabels["UNAVAILABLE"] = gettext('Send connection: offline')] = "UNAVAILABLE";
        SendStatusLabels[SendStatusLabels["UNKNOWN"] = gettext('Send connection status unknown')] = "UNKNOWN";
        SendStatusLabels[SendStatusLabels["MAINTENANCE"] = gettext('Under maintenance')] = "MAINTENANCE";
    })(exports.SendStatusLabels || (exports.SendStatusLabels = {}));

    var DeviceStatusComponent = /** @class */ (function () {
        function DeviceStatusComponent(translateService) {
            this.translateService = translateService;
        }
        Object.defineProperty(DeviceStatusComponent.prototype, "node", {
            set: function (value) {
                this._mo = value.mo || value;
            },
            enumerable: true,
            configurable: true
        });
        DeviceStatusComponent.prototype.get = function () {
            return this._mo;
        };
        DeviceStatusComponent.prototype.ngAfterContentInit = function () {
            this.requiredAvailability = lodashEs.get(this._mo, 'c8y_RequiredAvailability');
            this.availabilityStatus = lodashEs.get(this._mo, 'c8y_Availability.status');
            this.pushStatus = lodashEs.get(this._mo, 'c8y_Connection.status') || 'UNKNOWN';
            this.sendStatus = this.availabilityStatus || (this.requiredAvailability ? ('UNKNOWN') : ('NOT_MONITORED'));
        };
        DeviceStatusComponent.prototype.status = function () {
            var statuses;
            if (this.availabilityStatus === 'MAINTENANCE' || this.pushStatus === 'MAINTENANCE') {
                statuses = this.getMaintenanceStatus();
            }
            else {
                statuses = this.getSendPushStatus();
            }
            return statuses;
        };
        DeviceStatusComponent.prototype.getMaintenanceStatus = function () {
            return ({
                sendStatus: false,
                pushStatus: false,
                maintenanceStatus: {
                    icon: deviceAvailabilityIconMap.device.MAINTENANCE.icon,
                    class: deviceAvailabilityIconMap.device.MAINTENANCE.class,
                    tooltip: tooltips.maintenance
                }
            });
        };
        DeviceStatusComponent.prototype.getSendPushStatus = function () {
            return ({
                sendStatus: {
                    icon: deviceAvailabilityIconMap.sendData[this.sendStatus].icon,
                    class: deviceAvailabilityIconMap.sendData[this.sendStatus].class,
                    status: this.sendStatus,
                    label: exports.SendStatusLabels[this.sendStatus],
                    tooltip: this.getSendStatusTooltip(this._mo)
                },
                pushStatus: {
                    icon: deviceAvailabilityIconMap.push[this.pushStatus].icon,
                    class: deviceAvailabilityIconMap.push[this.pushStatus].class,
                    status: this.pushStatus,
                    label: exports.PushStatusLabels[this.pushStatus],
                    tooltip: this.getPushStatusTooltip(this.pushStatus === 'CONNECTED')
                },
                maintenanceStatus: false
            });
        };
        DeviceStatusComponent.prototype.getSendStatusTooltip = function (device) {
            var availability = device && device.c8y_Availability;
            var lastMessage = availability && availability.lastMessage;
            if (lastMessage) {
                return tooltips.sendStatusConnected(lastMessage, this.translateService);
            }
            return tooltips.sendStatusDisconnected;
        };
        DeviceStatusComponent.prototype.getPushStatusTooltip = function (isActive) {
            return isActive ? tooltips.pushStatusConnected : tooltips.pushStatusDisconnected;
        };
        DeviceStatusComponent.ctorParameters = function () { return [
            { type: core$1.TranslateService }
        ]; };
        __decorate([
            core.Input('mo')
        ], DeviceStatusComponent.prototype, "node", null);
        DeviceStatusComponent = __decorate([
            core.Component({
                selector: 'device-status',
                template: "<!-- ATTENTION: keep text format in `tooltip` attribute -->\n<div class=\"statusContainer\"\n    tooltip=\"{{status().sendStatus.tooltip | translate}}\n{{status().pushStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"left\"\n   >\n    <div\n    *ngIf=\"!!status().sendStatus\"\n    class=\"sendStatus\"\n    [c8yIcon]=\"status().sendStatus.icon\"\n    [ngClass]=\"status().sendStatus.class\"\n    ></div>\n    <div\n    *ngIf=\"!!status().pushStatus\"\n    class=\"pushStatus\"\n    [c8yIcon]=\"status().pushStatus.icon\"\n    [ngClass]=\"status().pushStatus.class\"\n    >\n    </div>\n\n  <div *ngIf=\"!!status().maintenanceStatus\"\n    class=\"maintenanceStatus\"\n    tooltip=\"{{status().maintenanceStatus.tooltip | translate}}\"\n    container=\"body\"\n    placement=\"auto\"\n    [c8yIcon]=\"status().maintenanceStatus.icon\"\n    [ngClass]=\"status().maintenanceStatus.class\"></div>\n</div>\n"
            })
        ], DeviceStatusComponent);
        return DeviceStatusComponent;
    }());

    /**
     * The angular module definition for a device-status.
     * @exports DeviceStatusComponent
     */
    var DeviceStatusModule = /** @class */ (function () {
        function DeviceStatusModule() {
        }
        DeviceStatusModule = __decorate([
            core.NgModule({
                imports: [
                    CommonModule,
                    tooltip.TooltipModule
                ],
                exports: [
                    DeviceStatusComponent
                ],
                declarations: [
                    DeviceStatusComponent
                ]
            })
        ], DeviceStatusModule);
        return DeviceStatusModule;
    }());

    var FilteringFormComponent = /** @class */ (function () {
        function FilteringFormComponent() {
        }
        FilteringFormComponent.prototype.ngOnInit = function () {
            var column = this.context.property;
            this.schema = lodashEs.cloneDeep(column.filteringConfig.schema);
            this.form = lodashEs.cloneDeep(column.filteringConfig.form);
            this.model = lodashEs.cloneDeep(column.externalFilterQuery || {});
            this.options = { formDefaults: { ngModelOptions: { debounce: 100 } } };
        };
        FilteringFormComponent.prototype.canApply = function () {
            return lodashEs.get(this.schemaFormComponent, '$componentScope.vm.ngForm.$invalid');
        };
        FilteringFormComponent.prototype.applyFilter = function () {
            this.context.applyFilter({
                externalFilterQuery: this.model
            });
        };
        FilteringFormComponent.prototype.resetFilter = function () {
            this.context.resetFilter();
        };
        __decorate([
            core.Input()
        ], FilteringFormComponent.prototype, "context", void 0);
        __decorate([
            core.ViewChild(core.forwardRef(function () { return SchemaFormComponent; }), { static: false })
        ], FilteringFormComponent.prototype, "schemaFormComponent", void 0);
        FilteringFormComponent = __decorate([
            core.Component({
                selector: 'c8y-filtering-form',
                template: "<c8y-schema-form\n  [schema]=\"schema\"\n  [form]=\"form\"\n  [model]=\"model\"\n  [options]=\"options\"\n></c8y-schema-form>\n<div class=\"flex-row p-t-16\">\n  <button\n    class=\"btn btn-default btn-sm m-r-8 flex-grow\"\n    (click)=\"resetFilter()\"\n    title=\"{{ 'Reset' | translate }}\"\n    translate\n  >\n    Reset\n  </button>\n\n  <button\n    class=\"btn btn-primary btn-sm flex-grow\"\n    (click)=\"applyFilter()\"\n    [disabled]=\"canApply()\"\n    title=\"{{ 'Apply' | translate }}\"\n    translate\n  >\n    Apply\n  </button>\n</div>\n"
            })
        ], FilteringFormComponent);
        return FilteringFormComponent;
    }());

    var DeviceGridModule = /** @class */ (function () {
        function DeviceGridModule() {
        }
        DeviceGridModule = __decorate([
            core.NgModule({
                imports: [CommonModule, FormsModule, DeviceStatusModule, DataGridModule],
                declarations: [
                    DeviceGridComponent,
                    FilteringFormComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                exports: [
                    DeviceGridComponent,
                    FilteringFormComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                entryComponents: [
                    DeviceGridComponent,
                    FilteringFormComponent,
                    StatusCellRendererComponent,
                    NameCellRendererComponent,
                    ModelCellRendererComponent,
                    SerialNumberCellRendererComponent,
                    GroupCellRendererComponent,
                    RegistrationDateCellRendererComponent,
                    AlarmsCellRendererComponent
                ],
                providers: [DeviceGridService]
            })
        ], DeviceGridModule);
        return DeviceGridModule;
    }());

    var DropAreaComponent = /** @class */ (function () {
        function DropAreaComponent() {
            this.title = 'Upload file';
            this.message = 'Drop file here';
            this.icon = 'plus-square';
            this.loadingMessage = 'Uploading ...';
            this.alwaysShow = false;
            this.clickToOpen = true;
            this.loading = false;
            this.progress = -1; // -1 = spinner
            this.dropped = new core.EventEmitter();
            this.isOver = false;
            this.fileIsEmpty = false;
        }
        DropAreaComponent.prototype.ngOnInit = function () {
            this.alwaysShow = this.alwaysShow || this.area.nativeElement.children.length === 0;
        };
        DropAreaComponent.prototype.toggle = function ($event) {
            this.zone.nativeElement.style.height = this.area.nativeElement.offsetHeight + 'px';
            this.onOver();
        };
        DropAreaComponent.prototype.showPicker = function ($event) {
            this.preventDefault($event);
            this.picker.nativeElement.value = '';
            this.picker.nativeElement.click();
        };
        DropAreaComponent.prototype.onOver = function () {
            if (!this.isOver) {
                this.isOver = true;
                document.addEventListener('dragover', this.preventDefault);
                document.addEventListener('drop', this.preventDefault);
            }
        };
        DropAreaComponent.prototype.onPick = function ($event) {
            this.fileIsEmpty = false;
            this.preventDefault($event);
            this.onFilesSelected($event.target.files);
        };
        DropAreaComponent.prototype.onDrop = function ($event) {
            this.preventDefault($event);
            this.onFilesSelected($event.dataTransfer.files);
            this.stopDragging();
        };
        DropAreaComponent.prototype.onFilesSelected = function (files) {
            this.fileIsEmpty = false;
            if (files && files.length > 0) {
                if (this.isAnyFileEmpty(files)) {
                    this.fileIsEmpty = true;
                    this.dropped.emit([]);
                }
                else {
                    this.dropped.emit(this.compose(files));
                }
            }
        };
        DropAreaComponent.prototype.isAnyFileEmpty = function (files) {
            return lodashEs.some(Array.from(files), ['size', 0]);
        };
        DropAreaComponent.prototype.stopDragging = function () {
            document.removeEventListener('dragover', this.preventDefault);
            document.removeEventListener('drop', this.preventDefault);
            this.isOver = false;
        };
        DropAreaComponent.prototype.preventDefault = function ($event) {
            if ($event) {
                $event.preventDefault();
            }
        };
        DropAreaComponent.prototype.compose = function (files) {
            var _this = this;
            return Array.from(files).map(function (file) { return ({
                file: file,
                readAsJson: function () { return __awaiter(_this, void 0, void 0, function () { var _a, _b; return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = (_a = JSON).parse;
                            return [4 /*yield*/, this.read(file, ReadAsType.TEXT)];
                        case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                    }
                }); }); },
                readAsText: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/, this.read(file, ReadAsType.TEXT)];
                }); }); },
                readAsArrayBuffer: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/, this.read(file, ReadAsType.ARRAY_BUFFER)];
                }); }); },
                readAsBinaryString: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/, this.read(file, ReadAsType.BINARY_STRING)];
                }); }); },
                readAsDataURL: function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/, this.read(file, ReadAsType.DATA_URL)];
                }); }); }
            }); });
        };
        DropAreaComponent.prototype.read = function (file, type) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var reader = new FileReader();
                            switch (type) {
                                case ReadAsType.TEXT: {
                                    reader.readAsText(file);
                                    break;
                                }
                                case ReadAsType.ARRAY_BUFFER: {
                                    reader.readAsArrayBuffer(file);
                                    break;
                                }
                                case ReadAsType.BINARY_STRING: {
                                    reader.readAsBinaryString(file);
                                    break;
                                }
                                case ReadAsType.DATA_URL: {
                                    reader.readAsDataURL(file);
                                    break;
                                }
                            }
                            reader.onload = function () { return _this.onLoad(reader, resolve, reject); };
                        })];
                });
            });
        };
        DropAreaComponent.prototype.onLoad = function (reader, resolve, reject) {
            if (reader.readyState !== 2) {
                return;
            }
            if (reader.error) {
                reject(reader.error);
            }
            resolve(reader.result);
        };
        __decorate([
            core.Input()
        ], DropAreaComponent.prototype, "title", void 0);
        __decorate([
            core.Input()
        ], DropAreaComponent.prototype, "message", void 0);
        __decorate([
            core.Input()
        ], DropAreaComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], DropAreaComponent.prototype, "loadingMessage", void 0);
        __decorate([
            core.Input()
        ], DropAreaComponent.prototype, "alwaysShow", void 0);
        __decorate([
            core.Input()
        ], DropAreaComponent.prototype, "clickToOpen", void 0);
        __decorate([
            core.Input()
        ], DropAreaComponent.prototype, "loading", void 0);
        __decorate([
            core.Input()
        ], DropAreaComponent.prototype, "progress", void 0);
        __decorate([
            core.Output()
        ], DropAreaComponent.prototype, "dropped", void 0);
        __decorate([
            core.ViewChild('area', { static: true })
        ], DropAreaComponent.prototype, "area", void 0);
        __decorate([
            core.ViewChild('zone', { static: false })
        ], DropAreaComponent.prototype, "zone", void 0);
        __decorate([
            core.ViewChild('picker', { static: false })
        ], DropAreaComponent.prototype, "picker", void 0);
        DropAreaComponent = __decorate([
            core.Component({
                selector: 'c8y-drop-area',
                template: "<div  [ngClass]=\"{'form-group': true,'has-error': fileIsEmpty }\">\n  <small class=\"form-control-feedback-message\">\n    <span *ngIf=\"fileIsEmpty\" translate>\n        File must not be empty, select another one.\n    </span>\n  </small>\n</div>\n<div class=\"drop-zone\" [style.pointerEvents]=\"loading ? 'none' : 'auto'\" #zone style=\"padding-bottom: 0px; height: auto; min-height: 120px; max-height: 80vh;\"\n  (dragleave)=\"stopDragging()\" (drop)=\"onDrop($event)\" (dragover)=\"onOver()\" [style.display]=\"isOver || alwaysShow || loading ? 'block' : 'none'\"\n  (click)=\"showPicker($event)\">\n  <div class=\"file-placeholder\" style=\"pointer-events: none;\" [ngClass]=\"{ 'drag-over': isOver }\">\n\n    <div *ngIf=\"loading\" class=\"hint-placeholder\" style=\"width: 300px;\">\n      <p>\n        {{loadingMessage}}\n      </p>\n      <div class=\"progress progress-striped active\" *ngIf=\"progress !== -1\">\n        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" [style.width]=\"progress + '%'\"></div>\n      </div>\n      <div class=\"spinner\" *ngIf=\"progress === -1\" style=\"position: relative;\">\n        <div class=\"rect1\"></div>\n        <div class=\"rect2\"></div>\n        <div class=\"rect3\"></div>\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"></div>\n      </div>\n    </div>\n\n    <div *ngIf=\"!loading\" class=\"hint-placeholder\">\n      <i class=\"fa fw fa-{{icon}}\"></i>\n      <p>\n        <span>{{title}}</span>\n      </p>\n      <p>\n        <b>{{message}}</b>\n        <br>\n        <span *ngIf=\"alwaysShow && clickToOpen\" translate>or click to browse your computer.</span>\n      </p>\n    </div>\n\n  </div>\n</div>\n<input #picker *ngIf=\"clickToOpen\" (change)=\"onPick($event)\" multiple type=\"file\" style=\"opacity: 0; filter: alpha(opacity = 0); height: 0px\">\n<div #area [hidden]=\"isOver || loading\" (dragover)=\"toggle($event)\">\n  <ng-content></ng-content>\n</div>\n"
            })
        ], DropAreaComponent);
        return DropAreaComponent;
    }());
    var ReadAsType;
    (function (ReadAsType) {
        ReadAsType[ReadAsType["TEXT"] = 0] = "TEXT";
        ReadAsType[ReadAsType["DATA_URL"] = 1] = "DATA_URL";
        ReadAsType[ReadAsType["ARRAY_BUFFER"] = 2] = "ARRAY_BUFFER";
        ReadAsType[ReadAsType["BINARY_STRING"] = 3] = "BINARY_STRING";
    })(ReadAsType || (ReadAsType = {}));

    /**
     * The angular module definition for a drop-area.
     * @exports DropAreaComponent
     */
    var DropAreaModule = /** @class */ (function () {
        function DropAreaModule() {
        }
        DropAreaModule = __decorate([
            core.NgModule({
                imports: [
                    CommonModule,
                ],
                exports: [
                    DropAreaComponent,
                ],
                declarations: [
                    DropAreaComponent,
                ]
            })
        ], DropAreaModule);
        return DropAreaModule;
    }());

    var SelectComponent = /** @class */ (function () {
        function SelectComponent() {
            this.placeholder = 'Select item';
            this.applyLabel = 'Apply';
            this.onChange = new core.EventEmitter();
            this.textFilter = '';
            this.labelText = '';
            this.isOpen = false;
            this.filteredItems = [];
            this.sizeToShowFilter = 5;
            this.itemsSelected = new Set();
            this.stopClicks = false;
        }
        SelectComponent.prototype.preventClick = function (evt) {
            if (this.stopClicks) {
                evt.stopPropagation();
            }
            this.stopClicks = this.isOpen;
        };
        SelectComponent.prototype.isOpenChange = function (isOpen) {
            this.isOpen = isOpen;
            if (isOpen) {
                this.updateSelected();
            }
            else {
                this.stopClicks = false;
            }
        };
        SelectComponent.prototype.outterSelected = function (item) {
            var _a = this, selected = _a.selected, itemsSelected = _a.itemsSelected, items = _a.items;
            var isSelected = function () { return false; };
            if (typeof selected === 'function') {
                isSelected = selected;
            }
            else if (Array.isArray(selected)) {
                isSelected = function (i) { return selected.indexOf(i) > -1; };
            }
            return isSelected(item);
        };
        SelectComponent.prototype.isSelected = function (item) {
            return this.itemsSelected.has(item);
        };
        SelectComponent.prototype.applyChanges = function () {
            var selected = Array.from(this.itemsSelected.values());
            this.onChange.emit(selected);
            this.dropdown.hide();
        };
        SelectComponent.prototype.selectAll = function (checked) {
            var _this = this;
            this.filteredItems.forEach(function (item) { return _this.onChangeItem(checked, item); });
        };
        SelectComponent.prototype.allSelected = function () {
            return this.filteredItems.length === this.itemsSelected.size;
        };
        SelectComponent.prototype.onChangeItem = function (checked, item) {
            if (checked) {
                this.itemsSelected.add(item);
            }
            else {
                this.itemsSelected.delete(item);
            }
        };
        SelectComponent.prototype.updateFiltered = function (term) {
            if (term) {
                var search_1 = new RegExp(term, 'i');
                this.filteredItems = this.items.filter(function (_a) {
                    var name = _a.name;
                    return search_1.test(name);
                });
            }
            else {
                this.filteredItems = this.items;
            }
        };
        SelectComponent.prototype.ngOnChanges = function (changes) {
            if (this.isOpen) {
                return;
            }
            if (changes.items || changes.selected || changes.applyLabel) {
                this.updateSelected();
                this.updateLabel();
            }
        };
        SelectComponent.prototype.updateLabel = function () {
            var _this = this;
            var outterSelected = this.items.filter(function (i) { return _this.outterSelected(i); });
            if (typeof this.selectedLabel === 'string') {
                this.labelText = this.selectedLabel;
            }
            else if (typeof this.selectedLabel === 'function') {
                this.labelText = this.selectedLabel(outterSelected);
            }
            else {
                this.labelText = outterSelected.map(function (_a) {
                    var name = _a.name;
                    return name;
                }).join(', ');
            }
        };
        SelectComponent.prototype.updateSelected = function () {
            var _this = this;
            var _a = this, itemsSelected = _a.itemsSelected, items = _a.items;
            itemsSelected.clear();
            items.forEach(function (item) {
                if (_this.outterSelected(item)) {
                    itemsSelected.add(item);
                }
            });
            this.filteredItems = items;
        };
        __decorate([
            core.Input()
        ], SelectComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input()
        ], SelectComponent.prototype, "selectedLabel", void 0);
        __decorate([
            core.Input()
        ], SelectComponent.prototype, "applyLabel", void 0);
        __decorate([
            core.Input()
        ], SelectComponent.prototype, "items", void 0);
        __decorate([
            core.Input()
        ], SelectComponent.prototype, "selected", void 0);
        __decorate([
            core.Output()
        ], SelectComponent.prototype, "onChange", void 0);
        __decorate([
            core.ViewChild(dropdown.BsDropdownDirective, { static: false })
        ], SelectComponent.prototype, "dropdown", void 0);
        __decorate([
            core.HostListener('click', ['$event'])
        ], SelectComponent.prototype, "preventClick", null);
        SelectComponent = __decorate([
            core.Component({
                selector: 'c8y-select',
                template: "<div\n  class=\"c8y-child-assets-selector  dropdown fit-h\"\n  (isOpenChange)=\"isOpenChange($event)\"\n  dropdown\n  #dropdown\n>\n  <button\n    type=\"button\"\n    class=\"btn dropdown-toggle c8y-dropdown\"\n    title=\"{{ labelText || placeholder | translate }}\"\n    dropdownToggle\n  >\n    <span class=\"text-truncate\" *ngIf=\"labelText\">{{ labelText | translate }}</span>\n    <span class=\"text-truncate text-muted\" *ngIf=\"!labelText\">{{ placeholder | translate }}</span>\n  </button>\n\n  <ul class=\"dropdown-menu multiselect-container\" *dropdownMenu>\n    <li *ngIf=\"items.length > sizeToShowFilter\" class=\"multiselect-item\">\n      <div class=\"input-group input-group-search\">\n        <input\n          type=\"search\"\n          class=\"form-control\"\n          placeholder=\"{{ 'Filter' | translate }}&hellip;\"\n          (keyup)=\"updateFiltered($event.target.value)\"\n        />\n        <span class=\"input-group-addon\">\n          <i class=\"fa fa-search\" *ngIf=\"!textFilter\"></i>\n          <i class=\"fa fa-times text-muted\" *ngIf=\"textFilter\" (click)=\"textFilter = ''\"></i>\n        </span>\n      </div>\n    </li>\n\n    <li class=\"multiselect-item\">\n      <label\n        title=\"{{ 'All' | translate }}\"\n        class=\"c8y-checkbox input-sm\"\n        ng-click=\"vm.toggleSelectAll(); $event.preventDefault()\"\n      >\n        <input\n          type=\"checkbox\"\n          [checked]=\"allSelected()\"\n          (change)=\"selectAll($event.target.checked)\"\n          style=\"margin-top:0;\"\n        /><span></span> &nbsp;<span span class=\"label-text \" translate>All</span>\n      </label>\n    </li>\n\n    <li class=\"multiselect-item-container\">\n      <ul class=\"list-unstyled\">\n        <li class=\"multiselect-item\" *ngFor=\"let item of filteredItems\">\n          <label class=\"c8y-checkbox input-sm text-truncate\">\n            <input\n              type=\"checkbox\"\n              [checked]=\"isSelected(item)\"\n              (change)=\"onChangeItem($event.target.checked, item)\"\n              style=\"margin-top:0\"\n            />\n            <span></span>\n            &nbsp;<span class=\"label-text \" title=\"{{ item.name | translate }}\">{{\n              item.name | translate\n            }}</span>\n          </label>\n        </li>\n      </ul>\n    </li>\n    <li class=\"divider\"></li>\n    <li>\n      <button\n        title=\"{{ applyLabel | translate }}\"\n        class=\"btn btn-primary btn-block\"\n        (click)=\"applyChanges()\"\n      >\n        {{ applyLabel | translate }}\n      </button>\n    </li>\n  </ul>\n</div>\n"
            })
        ], SelectComponent);
        return SelectComponent;
    }());

    var ListItemActionComponent = /** @class */ (function () {
        function ListItemActionComponent() {
            this.click = new core.EventEmitter();
        }
        __decorate([
            core.ViewChild('template', { static: false })
        ], ListItemActionComponent.prototype, "template", void 0);
        __decorate([
            core.Input()
        ], ListItemActionComponent.prototype, "label", void 0);
        __decorate([
            core.Input()
        ], ListItemActionComponent.prototype, "icon", void 0);
        __decorate([
            core.Output()
        ], ListItemActionComponent.prototype, "click", void 0);
        ListItemActionComponent = __decorate([
            core.Component({
                selector: 'c8y-list-item-action, c8y-li-action',
                template: "<ng-template #template>\n  <li>\n    <button title=\"{{ label | translate }}\" (click)=\"click.emit($event)\">\n      <i [c8yIcon]=\"icon\" *ngIf=\"icon\"></i>\n      <span *ngIf=\"label\">{{ label | translate }}</span>\n      <ng-content></ng-content>\n    </button>\n  </li>\n</ng-template>\n"
            })
        ], ListItemActionComponent);
        return ListItemActionComponent;
    }());

    var ListItemCollapseComponent = /** @class */ (function () {
        function ListItemCollapseComponent() {
        }
        __decorate([
            core.Input()
        ], ListItemCollapseComponent.prototype, "item", void 0);
        ListItemCollapseComponent = __decorate([
            core.Component({
                selector: 'c8y-list-item-collapse, c8y-li-collapse',
                template: "<ng-content></ng-content>\n"
            })
        ], ListItemCollapseComponent);
        return ListItemCollapseComponent;
    }());

    var ListItemFooterComponent = /** @class */ (function () {
        function ListItemFooterComponent() {
        }
        __decorate([
            core.Input()
        ], ListItemFooterComponent.prototype, "footer", void 0);
        ListItemFooterComponent = __decorate([
            core.Component({
                selector: 'c8y-list-item-footer, c8y-li-footer',
                template: "<span *ngIf=\"footer\">{{footer}}</span>\n<ng-content></ng-content>\n"
            })
        ], ListItemFooterComponent);
        return ListItemFooterComponent;
    }());

    var ListItemComponent = /** @class */ (function () {
        function ListItemComponent(element) {
            this.element = element;
            this.active = false;
            this.collapsed = true;
            this.showFooter = false;
            this.showActions = false;
            this.showCollapse = false;
            this.dropdownUp = false;
            this.ACTION_ITEM_HEIGHT = 40;
        }
        ListItemComponent.prototype.ngAfterContentChecked = function () {
            this.actions = this.itemActions.toArray();
            this.showFooter = this.itemFooter != null;
            this.showActions = this.itemActions.length > 0;
            this.showCollapse = this.itemCollapse != null;
        };
        /**
         * A helper function which helps to determine if the dropdown
         * should toggle up.
         * @param dropdown The dropdown instance.
         */
        ListItemComponent.prototype.showDropdownUp = function () {
            var rect = this.element.nativeElement.getBoundingClientRect();
            this.dropdownUp =
                rect.bottom + this.itemActions.length * this.ACTION_ITEM_HEIGHT > window.innerHeight;
        };
        ListItemComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input(),
            core.HostBinding('class.active')
        ], ListItemComponent.prototype, "active", void 0);
        __decorate([
            core.Input()
        ], ListItemComponent.prototype, "collapsed", void 0);
        __decorate([
            core.ContentChild(ListItemFooterComponent, { static: false })
        ], ListItemComponent.prototype, "itemFooter", void 0);
        __decorate([
            core.ContentChildren(ListItemActionComponent)
        ], ListItemComponent.prototype, "itemActions", void 0);
        __decorate([
            core.ContentChild(ListItemCollapseComponent, { static: false })
        ], ListItemComponent.prototype, "itemCollapse", void 0);
        ListItemComponent = __decorate([
            core.Component({
                selector: 'c8y-list-item, c8y-li',
                template: "<div [ngClass]=\"{ expanded: !collapsed }\">\n  <div class=\"c8y-list__item__block\">\n    <ng-content select=\"c8y-list-item-radio, c8y-li-radio\"></ng-content>\n    <ng-content select=\"c8y-list-item-checkbox, c8y-li-checkbox\"></ng-content>\n\n    <ng-content select=\"c8y-list-item-icon, c8y-li-icon\"></ng-content>\n\n    <div class=\"c8y-list__item__body text-truncate-wrap\">\n      <ng-content select=\"c8y-list-item-body, c8y-li-body\"></ng-content>\n      <ng-content></ng-content>\n      <div class=\"c8y-list__item__footer\" *ngIf=\"showFooter\">\n        <ng-content select=\"c8y-list-item-footer, c8y-li-footer\"></ng-content>\n      </div>\n    </div>\n\n    <div class=\"c8y-list__item__actions\" *ngIf=\"showCollapse || showActions\">\n      <button\n        class=\"collapse-btn\"\n        title=\"{{ 'Expand' | translate }}\"\n        type=\"button\"\n        (click)=\"collapsed = !collapsed\"\n        [attr.aria-expanded]=\"!collapsed\"\n        *ngIf=\"showCollapse\"\n      >\n        <i [c8yIcon]=\"'chevron-down'\"></i>\n      </button>\n      <div\n        class=\"dropdown\"\n        dropdown\n        [dropup]=\"dropdownUp\"\n        *ngIf=\"showActions\"\n        (onShown)=\"showDropdownUp()\"\n      >\n        <button\n          class=\"dropdown-toggle c8y-dropdown\"\n          dropdownToggle\n          title=\"{{ 'Options' | translate }}\"\n          type=\"button\"\n          aria-haspopup=\"true\"\n        >\n          <i [c8yIcon]=\"'ellipsis-v'\"></i>\n        </button>\n        <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n          <ng-content select=\"c8y-list-item-action, c8y-li-action\"></ng-content>\n          <ng-container *ngFor=\"let action of actions\">\n            <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n          </ng-container>\n        </ul>\n      </div>\n\n      <ng-content select=\"c8y-list-item-action, c8y-li-action\" *ngIf=\"showActions\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"showCollapse\" [collapse]=\"collapsed\" [isAnimated]=\"true\">\n    <div class=\"c8y-list__item__collapse--container\">\n      <ng-content select=\"c8y-list-item-collapse, c8y-li-collapse\"></ng-content>\n    </div>\n  </div>\n</div>\n",
                host: {
                    class: 'c8y-list__item'
                }
            })
        ], ListItemComponent);
        return ListItemComponent;
    }());

    var TypeaheadComponent = /** @class */ (function () {
        function TypeaheadComponent() {
            var _a;
            this.required = false;
            this.displayProperty = 'name';
            this.name = this.displayProperty;
            this.selected = (_a = {
                    id: null
                },
                _a[this.displayProperty] = '',
                _a);
            this.selectedChange = new core.EventEmitter();
            this.onSearch = new core.EventEmitter();
            this.KEYCODE_UP = 38;
            this.KEYCODE_DOWN = 40;
            this.KEYCODE_TAB = 9;
            this.KEYCODE_ENTER = 13;
            this.KEYCODE_ESC = 27;
        }
        TypeaheadComponent.prototype.onShown = function () {
            this.searchControl.nativeElement.focus();
        };
        TypeaheadComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        TypeaheadComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.subscription = rxjs.fromEvent(this.searchControl.nativeElement, 'keydown')
                .pipe(operators.map(function (e) { return _this.handleKeyboard(e); }), operators.filter(function (e) { return e; }), operators.debounceTime(200), operators.map(function (e) { return e.target.value; }), operators.distinctUntilChanged())
                .subscribe(function (value) {
                var _a;
                _this.selectedChange.emit((_a = {
                        id: null
                    },
                    _a[_this.displayProperty] = value,
                    _a));
                _this.onSearch.emit(value);
            });
        };
        TypeaheadComponent.prototype.handleKeyboard = function (event) {
            var keyCode = event.keyCode;
            if ([this.KEYCODE_ENTER, this.KEYCODE_DOWN, this.KEYCODE_TAB, this.KEYCODE_UP].includes(keyCode)) {
                var items = this.list.toArray();
                var index = lodashEs.findIndex(items, function (item) { return item.active; });
                if (keyCode === this.KEYCODE_ENTER || keyCode === this.KEYCODE_TAB) {
                    if (index > -1) {
                        event.preventDefault();
                        items[index].element.nativeElement.click();
                    }
                    this.dropdown.hide();
                    this.searchControl.nativeElement.blur();
                }
                else {
                    this.dropdown.show();
                    var upOrDown = keyCode === this.KEYCODE_DOWN ? 1 : -1;
                    if (index > -1) {
                        items[index].active = false;
                    }
                    if (items[index + upOrDown]) {
                        items[index + upOrDown].active = true;
                    }
                }
                return;
            }
            else if (keyCode === this.KEYCODE_ESC) {
                event.stopPropagation();
                this.dropdown.hide();
                this.searchControl.nativeElement.blur();
                return;
            }
            else {
                this.dropdown.show();
            }
            return event;
        };
        __decorate([
            core.ViewChild('searchControl', { static: false })
        ], TypeaheadComponent.prototype, "searchControl", void 0);
        __decorate([
            core.ViewChild('dropdown', { static: false })
        ], TypeaheadComponent.prototype, "dropdown", void 0);
        __decorate([
            core.ContentChildren(ListItemComponent)
        ], TypeaheadComponent.prototype, "list", void 0);
        __decorate([
            core.Input()
        ], TypeaheadComponent.prototype, "required", void 0);
        __decorate([
            core.Input()
        ], TypeaheadComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input()
        ], TypeaheadComponent.prototype, "displayProperty", void 0);
        __decorate([
            core.Input()
        ], TypeaheadComponent.prototype, "name", void 0);
        __decorate([
            core.Input()
        ], TypeaheadComponent.prototype, "selected", void 0);
        __decorate([
            core.Output()
        ], TypeaheadComponent.prototype, "selectedChange", void 0);
        __decorate([
            core.Output()
        ], TypeaheadComponent.prototype, "onSearch", void 0);
        TypeaheadComponent = __decorate([
            core.Component({
                selector: 'c8y-typeahead',
                template: "<div\n  class=\"c8y-child-assets-selector dropdown\"\n  dropdown\n  #dropdown=\"bs-dropdown\"\n  [autoClose]=\"true\"\n  (onShown)=\"onShown()\"\n>\n  <div class=\"input-group input-group-dropdown\" dropdownToggle>\n    <input\n      #searchControl\n      type=\"text\"\n      class=\"form-control\"\n      [required]=\"required\"\n      [ngModel]=\"selected ? selected[displayProperty] : ''\"\n      [value]=\"selected ? selected[displayProperty] : ''\"\n      [placeholder]=\"placeholder | translate\"\n      [name]=\"name\"\n    />\n\n    <span\n      class=\"label label-info\"\n      style=\"position: absolute; right: 40px; top: 10px; z-index: 10;\"\n      translate\n      *ngIf=\"selected ? selected.id === null && selected[displayProperty].length > 0 : false\"\n      >New</span\n    >\n\n    <span class=\"input-group-btn\">\n      <button type=\"button\" class=\"btn btn-clean\">\n        <i class=\"dropdown-caret\"></i>\n      </button>\n    </span>\n  </div>\n\n  <c8y-list-group class=\"dropdown-menu\" *dropdownMenu>\n    <ng-content select=\"c8y-li, c8y-list-item, button, a\"></ng-content>\n  </c8y-list-group>\n</div>\n",
                viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
            })
        ], TypeaheadComponent);
        return TypeaheadComponent;
    }());

    var ListGroupComponent = /** @class */ (function () {
        function ListGroupComponent() {
        }
        ListGroupComponent = __decorate([
            core.Component({
                selector: 'c8y-list-group',
                template: "<ng-content></ng-content>\n\n",
                host: {
                    class: 'c8y-list__group'
                }
            })
        ], ListGroupComponent);
        return ListGroupComponent;
    }());

    var ListItemIconComponent = /** @class */ (function () {
        function ListItemIconComponent() {
        }
        __decorate([
            core.Input()
        ], ListItemIconComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], ListItemIconComponent.prototype, "status", void 0);
        ListItemIconComponent = __decorate([
            core.Component({
                selector: 'c8y-list-item-icon, c8y-li-icon',
                template: "<i [c8yIcon]=\"icon\" [ngClass]=\"status\" *ngIf=\"icon\"></i>\n<ng-content></ng-content>",
                host: {
                    class: 'c8y-list__item__icon'
                }
            })
        ], ListItemIconComponent);
        return ListItemIconComponent;
    }());

    var ListItemBodyComponent = /** @class */ (function () {
        function ListItemBodyComponent() {
        }
        __decorate([
            core.Input()
        ], ListItemBodyComponent.prototype, "body", void 0);
        ListItemBodyComponent = __decorate([
            core.Component({
                selector: 'c8y-list-item-body, c8y-li-body',
                template: "<span *ngIf=\"body\">{{body}}</span>\n<ng-content></ng-content>\n"
            })
        ], ListItemBodyComponent);
        return ListItemBodyComponent;
    }());

    var ListItemCheckboxComponent = /** @class */ (function () {
        function ListItemCheckboxComponent() {
            this.selected = false;
            this.onSelect = new core.EventEmitter();
        }
        ListItemCheckboxComponent.prototype.ngOnChanges = function (changes) {
            if (changes.selected && !changes.selected.firstChange) {
                this.onSelect.emit(changes.selected.currentValue);
            }
        };
        __decorate([
            core.Input()
        ], ListItemCheckboxComponent.prototype, "selected", void 0);
        __decorate([
            core.Output()
        ], ListItemCheckboxComponent.prototype, "onSelect", void 0);
        ListItemCheckboxComponent = __decorate([
            core.Component({
                selector: 'c8y-list-item-checkbox, c8y-li-checkbox',
                template: "<label class=\"c8y-checkbox\">\n  <input\n    type=\"checkbox\"\n    [checked]=\"selected\"\n    (change)=\"onSelect.emit($event.target.checked); (false)\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
                host: {
                    class: 'c8y-list__item__check'
                }
            })
        ], ListItemCheckboxComponent);
        return ListItemCheckboxComponent;
    }());

    var ListItemRadioComponent = /** @class */ (function () {
        function ListItemRadioComponent() {
            this.selected = false;
            this.name = 'list_item_radio';
            this.onSelect = new core.EventEmitter();
        }
        ListItemRadioComponent.prototype.ngOnChanges = function (changes) {
            if (changes.selected && !changes.selected.firstChange) {
                this.onSelect.emit(changes.selected.currentValue);
            }
        };
        __decorate([
            core.Input()
        ], ListItemRadioComponent.prototype, "selected", void 0);
        __decorate([
            core.Input()
        ], ListItemRadioComponent.prototype, "name", void 0);
        __decorate([
            core.Output()
        ], ListItemRadioComponent.prototype, "onSelect", void 0);
        ListItemRadioComponent = __decorate([
            core.Component({
                selector: 'c8y-list-item-radio, c8y-li-radio',
                template: "<label class=\"c8y-checkbox\">\n  <input\n    type=\"radio\"\n    [name]=\"name\"\n    [checked]=\"selected\"\n    (change)=\"onSelect.emit($event.target.checked); (false)\"\n  />\n  <span></span>\n</label>\n<ng-content></ng-content>\n",
                host: {
                    class: 'c8y-list__item__radio'
                }
            })
        ], ListItemRadioComponent);
        return ListItemRadioComponent;
    }());

    var ListGroupModule = /** @class */ (function () {
        function ListGroupModule() {
        }
        ListGroupModule = __decorate([
            core.NgModule({
                imports: [
                    CommonModule,
                    collapse.CollapseModule.forRoot(),
                    dropdown.BsDropdownModule
                ],
                declarations: [
                    ListGroupComponent,
                    ListItemComponent,
                    ListItemIconComponent,
                    ListItemBodyComponent,
                    ListItemFooterComponent,
                    ListItemActionComponent,
                    ListItemCollapseComponent,
                    ListItemCheckboxComponent,
                    ListItemRadioComponent
                ],
                exports: [
                    ListGroupComponent,
                    ListItemComponent,
                    ListItemIconComponent,
                    ListItemBodyComponent,
                    ListItemFooterComponent,
                    ListItemActionComponent,
                    ListItemCollapseComponent,
                    ListItemCheckboxComponent,
                    ListItemRadioComponent
                ]
            })
        ], ListGroupModule);
        return ListGroupModule;
    }());

    /**
     * The angular module definition for a select.
     * @exports SelectComponent
     */
    var SelectModule = /** @class */ (function () {
        function SelectModule() {
        }
        SelectModule = __decorate([
            core.NgModule({
                imports: [
                    dropdown.BsDropdownModule.forRoot(),
                    CommonModule,
                    ListGroupModule,
                    FormsModule
                ],
                exports: [
                    SelectComponent,
                    TypeaheadComponent
                ],
                declarations: [
                    SelectComponent,
                    TypeaheadComponent
                ]
            })
        ], SelectModule);
        return SelectModule;
    }());

    var GuideHrefDirective = /** @class */ (function () {
        function GuideHrefDirective(elementRef) {
            this.elementRef = elementRef;
            this.htmlAnchor = this.elementRef.nativeElement;
            if (!this.htmlAnchor.hasAttribute('target')) {
                this.htmlAnchor.setAttribute('target', '_blank');
            }
        }
        Object.defineProperty(GuideHrefDirective.prototype, "baseHref", {
            set: function (href) {
                this.htmlAnchor.href = href + "/" + this.c8yGuideHref;
            },
            enumerable: true,
            configurable: true
        });
        GuideHrefDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.Input('c8y-guide-href')
        ], GuideHrefDirective.prototype, "c8yGuideHref", void 0);
        GuideHrefDirective = __decorate([
            core.Directive({
                selector: '[c8y-guide-href]'
            })
        ], GuideHrefDirective);
        return GuideHrefDirective;
    }());

    var GuideDocsComponent = /** @class */ (function () {
        function GuideDocsComponent(docs) {
            this.docs = docs;
        }
        GuideDocsComponent.prototype.ngOnInit = function () {
            this.baseUrl = this.docs.getBaseUrl();
        };
        GuideDocsComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.links.forEach(function (guide) {
                guide.baseHref = _this.baseUrl;
            });
        };
        GuideDocsComponent.ctorParameters = function () { return [
            { type: DocsService }
        ]; };
        __decorate([
            core.ContentChildren(GuideHrefDirective, { descendants: true })
        ], GuideDocsComponent.prototype, "links", void 0);
        GuideDocsComponent = __decorate([
            core.Component({
                selector: '[c8y-guide-docs]',
                template: "<ng-container *ngIf=\"!!baseUrl\">\n  <ng-content></ng-content>\n</ng-container>\n"
            })
        ], GuideDocsComponent);
        return GuideDocsComponent;
    }());

    var DocsModule = /** @class */ (function () {
        function DocsModule() {
        }
        DocsModule = __decorate([
            core.NgModule({
                declarations: [
                    GuideHrefDirective,
                    GuideDocsComponent
                ],
                imports: [common.CommonModule],
                exports: [
                    GuideHrefDirective,
                    GuideDocsComponent
                ],
                providers: [DocsService],
            })
        ], DocsModule);
        return DocsModule;
    }());

    /**
     * A hook to add dynamic components to the UI (e.g. widgets).
     */
    var HOOK_COMPONENTS = new core.InjectionToken('Hook Dynamic Component');
    /**
     * A hook to add dynamic components to the UI (e.g. widgets).
     * @deprecated: Use HOOK_COMPONENTS
     */
    var HOOK_COMPONENT = new core.InjectionToken('Hook Dynamic Component @deprecated');

    var DynamicComponentService = /** @class */ (function (_super) {
        __extends(DynamicComponentService, _super);
        function DynamicComponentService(injector, router) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.refreshTrigger = new rxjs.Subject();
            _this.state$ = new rxjs.BehaviorSubject(new Set());
            _this.items$ = fromFactories([function () { return _this.injector.get(HOOK_COMPONENTS, []); }, function () { return _this.getComponentsViaDeprecatedHook(); }], router, false);
            _this.items$.subscribe(function (cmps) {
                cmps.forEach(function (cmp) {
                    _this.state.add(cmp);
                });
                _this.emitNewState();
            });
            return _this;
        }
        DynamicComponentService.prototype.getComponentsViaDeprecatedHook = function () {
            var componentsViaDeprecatedHook = this.injector.get(HOOK_COMPONENT, []);
            if (componentsViaDeprecatedHook &&
                componentsViaDeprecatedHook.length &&
                __MODE__ !== 'production') {
                console.warn('HOOK_COMPONENT is now deprecated. Use HOOK_COMPONENTS instead.');
            }
            return componentsViaDeprecatedHook;
        };
        DynamicComponentService.prototype.refresh = function () {
            this.refreshTrigger.next(1);
        };
        Object.defineProperty(DynamicComponentService.prototype, "state", {
            get: function () {
                return this.state$.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Returns a component by it's id as an observable.
         * @param id The id of the component.
         */
        DynamicComponentService.prototype.getById$ = function (id) {
            return this.state$.pipe(operators.filter(function (cmps) { return cmps.size > 0; }), operators.mergeMap(function (cmps) {
                return rxjs.of(Array.from(cmps).find(function (cmp) { return cmp.id === id; }));
            }), operators.take(1));
        };
        DynamicComponentService.prototype.add = function (component) {
            this.state.add(component);
            this.emitNewState();
        };
        DynamicComponentService.prototype.remove = function (component) {
            this.state.delete(component);
            this.emitNewState();
        };
        DynamicComponentService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: router.Router }
        ]; };
        DynamicComponentService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function DynamicComponentService_Factory() { return new DynamicComponentService(core.ɵɵinject(core.INJECTOR), core.ɵɵinject(router.Router)); }, token: DynamicComponentService, providedIn: "root" });
        DynamicComponentService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], DynamicComponentService);
        return DynamicComponentService;
    }(StateService));

    /**
     * C8y dynamic component.
     * ## Example:
     *
     * register component in HOOK in module:
     * ```typescript
     *  import { HOOK_COMPONENT } from '@c8y/ngx-components';
     *
     * @NgModule({
     *  ...,
     *  providers: [{
     *      provide: HOOK_COMPONENT,
     *      multi: true,
     *      useValue: [{
     *          id: 'test-component',
     *          label: 'My test component',
     *          description: 'this is test component',
     *          component: TestComponent
     *      }],
     *  ...
     *  }]
     *
     * ```
     * Showing dynamic component:
     * ```html
     * <c8y-dynamic-component [componentId]="'test-component'" [config]="config"></c8y-dynamic-component>
     * ```
     */
    var DynamicComponentComponent = /** @class */ (function () {
        function DynamicComponentComponent(componentFactoryResolver, dynamicComponentService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.dynamicComponentService = dynamicComponentService;
            this.mode = 'component';
            this.notFoundError = true;
            this.expandErrorDetails = false;
        }
        DynamicComponentComponent.prototype.ngOnChanges = function () {
            var _this = this;
            this.dynamicComponentService
                .getById$(this.componentId)
                .subscribe(function (cmp) { return _this.loadComponent(cmp); });
        };
        DynamicComponentComponent.prototype.loadComponent = function (dynamicComponent) {
            try {
                this.error = undefined;
                var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.mode === 'component' ? dynamicComponent.component : dynamicComponent.configComponent);
                this.host.clear();
                var componentRef = this.host.createComponent(componentFactory);
                componentRef.instance.config = this.config;
            }
            catch (ex) {
                this.error = ex;
            }
        };
        DynamicComponentComponent.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver },
            { type: DynamicComponentService }
        ]; };
        __decorate([
            core.Input()
        ], DynamicComponentComponent.prototype, "componentId", void 0);
        __decorate([
            core.Input()
        ], DynamicComponentComponent.prototype, "config", void 0);
        __decorate([
            core.Input()
        ], DynamicComponentComponent.prototype, "mode", void 0);
        __decorate([
            core.Input()
        ], DynamicComponentComponent.prototype, "notFoundError", void 0);
        __decorate([
            core.ViewChild('host', { read: core.ViewContainerRef, static: true })
        ], DynamicComponentComponent.prototype, "host", void 0);
        DynamicComponentComponent = __decorate([
            core.Component({
                selector: 'c8y-dynamic-component',
                template: "<ng-template #host></ng-template>\n\n<div class=\"alert alert-warning m-8\" role=\"alert\" *ngIf=\"notFoundError && error\">\n  <strong class=\"message\">\n    {{\n      'This widget cannot be rendered because the current application does not support the following component:'\n        | translate\n    }}\n    {{ componentId }}.\n  </strong>\n  <p class=\"text-muted top-m-sm\">\n    <button class=\"btn btn-clean\" (click)=\"expandErrorDetails = !expandErrorDetails\">\n      <i class=\"fa fa-chevron-down\"></i>\n      <span *ngIf=\"!expandErrorDetails\" translate>Show details</span>\n      <span *ngIf=\"expandErrorDetails\" translate>Hide details</span>\n    </button>\n  </p>\n  <div [collapse]=\"!expandErrorDetails\" [isAnimated]=\"true\">\n    <pre>\n      {{ error }}\n    </pre>\n  </div>\n</div>\n"
            })
        ], DynamicComponentComponent);
        return DynamicComponentComponent;
    }());

    var DynamicComponentModule = /** @class */ (function () {
        function DynamicComponentModule() {
        }
        DynamicComponentModule = __decorate([
            core.NgModule({
                declarations: [DynamicComponentComponent],
                imports: [common.CommonModule, collapse.CollapseModule, router.RouterModule.forChild([]), I18nModule],
                exports: [DynamicComponentComponent],
                providers: [DynamicComponentService]
            })
        ], DynamicComponentModule);
        return DynamicComponentModule;
    }());

    var DashboardChildActionComponent = /** @class */ (function () {
        function DashboardChildActionComponent() {
        }
        __decorate([
            core.ViewChild('template', { static: false })
        ], DashboardChildActionComponent.prototype, "template", void 0);
        DashboardChildActionComponent = __decorate([
            core.Component({
                selector: 'c8y-dashboard-child-action',
                template: "<ng-template #template>\n  <li>\n    <ng-content></ng-content>\n  </li>\n</ng-template>\n"
            })
        ], DashboardChildActionComponent);
        return DashboardChildActionComponent;
    }());

    var DashboardChildTitleComponent = /** @class */ (function () {
        function DashboardChildTitleComponent() {
        }
        DashboardChildTitleComponent = __decorate([
            core.Component({
                selector: 'c8y-dashboard-child-title',
                template: "<div class=\"card-title\">\n  <ng-content></ng-content>\n</div>\n"
            })
        ], DashboardChildTitleComponent);
        return DashboardChildTitleComponent;
    }());

    /**
     * Displays a CSS grid which is customizable by the customer. You can set
     * `c8y-dashboard-child`-components on it or position any element on it by
     * setting the grid CSS properties. On change (resize, or rearrange) the
     * component emits an change event.
     *
     * ## Example:
     *
     * ```html
     * <c8y-title>Hello from outlet</c8y-title>
     *
     * <c8y-action-bar-item [placement]="'right'">
     *   <button class="btn btn-link" (click)="addRandom()"><i class="fa fa-plus"></i> Add random</button>
     * </c8y-action-bar-item>
     * <c8y-action-bar-item [placement]="'right'">
     *   <button class="btn btn-link" (click)="isFrozen = !isFrozen">
     *     <i [c8yIcon]="isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
     *   </button>
     * </c8y-action-bar-item>
     *
     * <c8y-dashboard (dashboardChange)="dashboardChange($event)">
     *   <c8y-dashboard-child
     *     [isFrozen]="isFrozen"
     *     title="dynamic"
     *     *ngFor="let widget of widgets"
     *     #current
     *   >
     *     x: {{ current.x }}<br />
     *     y: {{ current.y }}<br />
     *     width: {{ current.width }}<br />
     *     height: {{ current.height }}<br />
     *   </c8y-dashboard-child>
     *   <c8y-dashboard-child
     *     #cpWidget
     *     [isFrozen]="isFrozen"
     *     [x]="0"
     *     [y]="1"
     *     [width]="3"
     *     [height]="2"
     *     [data]="widget"
     *     [class]="'card card-dashboard panel-title-regular panel-content-branded panel-title-overlay'"
     *   >
     *     <c8y-dashboard-child-title>
     *       <span>World!</span>
     *     </c8y-dashboard-child-title>
     *     x: {{ cpWidget.x }}<br />
     *     y: {{ cpWidget.y }}<br />
     *     width: {{ cpWidget.width }}<br />
     *     height: {{ cpWidget.height }}<br />
     *   </c8y-dashboard-child>
     *   <c8y-dashboard-child
     *     #cpWidget2
     *     [isFrozen]="isFrozen"
     *     [x]="8"
     *     [y]="1"
     *     [width]="4"
     *     [height]="4"
     *     [class]="'card card-dashboard panel-content-dark'"
     *   >
     *     <c8y-dashboard-child-title>
     *       <span>Hello!</span>
     *     </c8y-dashboard-child-title>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="cpWidget2.isFrozen = !cpWidget2.isFrozen; (false)">
     *         <i [c8yIcon]="cpWidget2.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
     *       </a>
     *     </c8y-dashboard-child-action>
     *     x: {{ cpWidget2.x }}<br />
     *     y: {{ cpWidget2.y }}<br />
     *     width: {{ cpWidget2.width }}<br />
     *     height: {{ cpWidget2.height }}<br />
     *   </c8y-dashboard-child>
     *
     *   <c8y-dashboard-child
     *     #cpWidget3
     *     [isFrozen]="isFrozen"
     *     [x]="0"
     *     [y]="3"
     *     [width]="4"
     *     [height]="4"
     *     [class]="'card-dashboard panel-content-transparent'"
     *   >
     *     <c8y-dashboard-child-title *ngIf="showTitle">
     *       <span>Transparent!</span>
     *     </c8y-dashboard-child-title>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="showTitle = !showTitle; (false)">
     *         <i [c8yIcon]="'heading'"></i> Hide/show title
     *       </a>
     *     </c8y-dashboard-child-action>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
     *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
     *       </a>
     *     </c8y-dashboard-child-action>
     *     x: {{ cpWidget3.x }}<br />
     *     y: {{ cpWidget3.y }}<br />
     *     width: {{ cpWidget3.width }}<br />
     *     height: {{ cpWidget3.height }}<br />
     *   </c8y-dashboard-child>
     * </c8y-dashboard>
     * ```
     */
    var DashboardComponent = /** @class */ (function () {
        function DashboardComponent(element, sanitizer) {
            this.element = element;
            this.sanitizer = sanitizer;
            /**
             * The amount of columns on that dashboard.
             */
            this.columns = 12;
            /**
             * The spacing between each children in pixel.
             */
            this.gap = 12;
            /**
             * The amount of rows to dusplay. Set to auto to
             * auto extend the rows.
             */
            this.rows = 'auto';
            /**
             * An event fired if the dashboard was changed.
             */
            this.dashboardChange = new core.EventEmitter();
            this.lastRow = 1;
            this.DEFAULT_ROW_SIZE = 68;
        }
        Object.defineProperty(DashboardComponent.prototype, "columnSize", {
            /**
             * The current column size.
             */
            get: function () {
                return this.dashboardRect.width / this.columns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DashboardComponent.prototype, "rowSize", {
            /**
             * The current row size.
             */
            get: function () {
                return this.rows === 'auto' ? this.DEFAULT_ROW_SIZE : this.calculateRowSize();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DashboardComponent.prototype, "inlineStyle", {
            /**
             * Returns all positioning styles. Nasty workaround for that issue:
             * https://github.com/angular/angular/issues/9343
             */
            get: function () {
                return this.sanitizer.bypassSecurityTrustStyle("\n        -ms-grid-columns: (1fr)[" + this.columns + "];\n        grid-template-columns: repeat(" + this.columns + ", 1fr);\n        " + (this.rows !== 'auto' ? "grid-template-rows: repeat(" + this.rows + ", 1fr);" : '') + "\n        grid-auto-rows: " + (this.rowSize + this.gap) + "px;\n        -ms-grid-rows: (" + (this.rowSize + this.gap) + "px)[" + (this.rows === 'auto' ? this.lastRow : this.rows) + "];\n        margin: -" + this.gap + "px;\n      ");
            },
            enumerable: true,
            configurable: true
        });
        DashboardComponent.prototype.ngAfterContentInit = function () {
            this.onResize();
            this.getLastRow();
        };
        DashboardComponent.prototype.onResize = function () {
            this.updateRectSize();
        };
        /**
         * Gets the last row
         * (mainly for IE11 which doesn't support grid-auto-rows CSS property)
         */
        DashboardComponent.prototype.getLastRow = function () {
            var lastRow = 1;
            this.children.forEach(function (widget) {
                if (lastRow < widget.y + widget.width) {
                    lastRow = widget.y + widget.width;
                }
            });
            this.lastRow = lastRow + 1;
        };
        /**
         * Updates the current rect size of the dashboard.
         */
        DashboardComponent.prototype.updateRectSize = function () {
            var ele = this.element.nativeElement;
            this.dashboardRect = ele.getBoundingClientRect();
        };
        DashboardComponent.prototype.emitChange = function (widget) {
            this.dashboardChange.emit({ source: widget, children: this.children.toArray() });
        };
        DashboardComponent.prototype.calculateRowSize = function () {
            return this.dashboardRect.height / this.rows;
        };
        DashboardComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: platformBrowser.DomSanitizer }
        ]; };
        __decorate([
            core.ContentChildren(core.forwardRef(function () { return DashboardChildComponent; }))
        ], DashboardComponent.prototype, "children", void 0);
        __decorate([
            core.Input()
        ], DashboardComponent.prototype, "columns", void 0);
        __decorate([
            core.Input()
        ], DashboardComponent.prototype, "gap", void 0);
        __decorate([
            core.Input()
        ], DashboardComponent.prototype, "rows", void 0);
        __decorate([
            core.Output()
        ], DashboardComponent.prototype, "dashboardChange", void 0);
        __decorate([
            core.HostBinding('attr.style')
        ], DashboardComponent.prototype, "inlineStyle", null);
        __decorate([
            core.HostListener('window:resize')
        ], DashboardComponent.prototype, "onResize", null);
        DashboardComponent = __decorate([
            core.Component({
                selector: 'c8y-dashboard',
                template: "<ng-content></ng-content>\n",
                host: {
                    class: 'c8y-grid-dashboard dashboard-grid'
                },
                changeDetection: core.ChangeDetectionStrategy.OnPush
            })
        ], DashboardComponent);
        return DashboardComponent;
    }());

    var DashboardChildChange = /** @class */ (function () {
        function DashboardChildChange(childToChange) {
            this.MIN_WIDTH = 2;
            this.MIN_HEIGHT = 1;
            this.PIXEL_SIZE_THRESHOLD = 10;
            this.diffX = 0;
            this.diffY = 0;
            this.dashboard = childToChange.dashboard;
            this.children = childToChange.dashboard.children
                ? childToChange.dashboard.children.filter(function (child) { return childToChange !== child; })
                : [];
            this.child = childToChange;
        }
        Object.defineProperty(DashboardChildChange.prototype, "resize$", {
            get: function () {
                var _this = this;
                return this.child.dragSource.moved.pipe(operators.map(function (move) { return _this.getPixelSize(move); }), operators.tap(function (resizeDimension) { return _this.setPixelSize(resizeDimension); }), operators.map(function (resizeDimension) { return _this.getDimensionSize(resizeDimension); }), operators.distinctUntilChanged(function (prev, next) { return prev.width === next.width && prev.height === next.height; }), operators.map(function (dimension) { return _this.setDimension(dimension); }), this.arrangePipe());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DashboardChildChange.prototype, "drag$", {
            get: function () {
                var _this = this;
                return this.child.dragSource.moved.pipe(operators.map(function (move) { return _this.getDimensionPosition(move); }), operators.filter(function (dimension) {
                    return dimension.x >= 0 &&
                        dimension.x <= _this.dashboard.columns - _this.child.width &&
                        dimension.y >= 0;
                }), operators.distinctUntilChanged(function (prev, next) { return prev.x === next.x && prev.y === next.y; }), this.arrangePipe());
            },
            enumerable: true,
            configurable: true
        });
        DashboardChildChange.prototype.findFreeDimension = function () {
            var y = -1;
            var x = 0;
            var found = false;
            var _a = this.child, width = _a.width, height = _a.height;
            if (width > this.dashboard.columns) {
                throw new Error('The child does not fit on the current dashboard.');
            }
            do {
                x = 0;
                y++;
                while (x + width <= this.dashboard.columns) {
                    if (this.getCollided({ x: x, y: y, width: width, height: height }).length === 0) {
                        found = true;
                        break;
                    }
                    x++;
                }
            } while (!found);
            return { x: x, y: y, width: width, height: height };
        };
        DashboardChildChange.prototype.collapseUpAll = function () {
            return lodashEs.sortBy(__spread([this.child], this.children), ['y']).forEach(function (w) {
                var ds = new DashboardChildChange(w);
                var newPosition = ds.collapseUp(w);
                ds.setDimension(newPosition);
            });
        };
        DashboardChildChange.prototype.arrangeAll = function (arrange) {
            var current = arrange.current, scan = arrange.scan, spacing = arrange.spacing, origin = arrange.origin;
            var collided = this.getCollided(current, lodashEs.sortBy(scan, ['y']));
            return collided.map(function (child) {
                var ds = new DashboardChildChange(child);
                ds.setDimension(__assign({}, child, { y: spacing }));
                return {
                    current: child,
                    scan: scan.filter(function (w) { return w !== child; }),
                    spacing: child.y + child.height,
                    origin: origin
                };
            });
        };
        DashboardChildChange.prototype.arrangePipe = function () {
            var _this = this;
            return rxjs.pipe(operators.map(function (dimension) {
                return ({
                    current: dimension,
                    scan: _this.children,
                    spacing: dimension.y + dimension.height,
                    origin: __assign({}, dimension)
                });
            }), operators.expand(function (dimensions) { return _this.arrangeAll(dimensions); }), operators.map(function (_a) {
                var origin = _a.origin;
                return origin;
            }), operators.map(function (dimension) { return _this.setDimension(dimension, true); }), operators.tap(function () { return _this.collapseUpAll(); }), operators.tap(function () { return _this.dashboard.getLastRow(); }));
        };
        DashboardChildChange.prototype.collapseUp = function (dimension) {
            var y = dimension.y;
            while (y > 0) {
                if (this.getCollided(__assign({}, dimension, { y: y - 1 })).length !== 0) {
                    break;
                }
                y--;
            }
            return __assign({}, dimension, { y: y });
        };
        DashboardChildChange.prototype.setDimension = function (dimension, notIfColliding) {
            if (notIfColliding === void 0) { notIfColliding = false; }
            if (notIfColliding && this.getCollided(dimension).length > 0) {
                return;
            }
            this.child.x = dimension.x;
            this.child.y = dimension.y;
            if (dimension.width >= this.MIN_WIDTH &&
                dimension.x + dimension.width <= this.dashboard.columns) {
                this.child.width = dimension.width;
            }
            else if (dimension.width < this.MIN_WIDTH) {
                dimension.width = this.MIN_WIDTH;
            }
            else {
                dimension.width = this.dashboard.columns - dimension.x;
            }
            if (dimension.height >= this.MIN_HEIGHT) {
                this.child.height = dimension.height;
            }
            else {
                dimension.height = this.MIN_WIDTH;
            }
            return dimension;
        };
        DashboardChildChange.prototype.setPixelSize = function (_a) {
            var width = _a.width, height = _a.height;
            if (width >= this.dashboard.columnSize * this.MIN_WIDTH - this.dashboard.gap) {
                this.child.pxWidth = width + this.PIXEL_SIZE_THRESHOLD;
            }
            if (height >= this.dashboard.rowSize * this.MIN_HEIGHT - this.dashboard.gap) {
                this.child.pxHeight = height + this.PIXEL_SIZE_THRESHOLD;
            }
        };
        DashboardChildChange.prototype.getPixelSize = function (moveEvent) {
            var draggedElement = moveEvent.source.element.nativeElement.parentNode;
            if (!this.diffX) {
                var rect = draggedElement.getBoundingClientRect();
                this.diffX = rect.left;
                this.diffY = rect.top;
            }
            var _a = moveEvent.pointerPosition, x = _a.x, y = _a.y;
            var width = Math.round(x - this.diffX);
            var height = Math.round(y - this.diffY);
            return { width: width, height: height, pointer: { x: x, y: y } };
        };
        DashboardChildChange.prototype.getDimensionSize = function (resizePosition) {
            var _a = this.child, x = _a.x, y = _a.y;
            var ds = this.dashboard.dashboardRect;
            var column = this.dashboard.columnSize;
            var row = this.dashboard.rowSize + this.dashboard.gap;
            var width = Math.round((resizePosition.pointer.x - ds.left + this.dashboard.gap) / column) - x;
            var height = Math.round((resizePosition.pointer.y - ds.top + this.dashboard.gap) / row) - y;
            return { x: x, y: y, width: width, height: height };
        };
        DashboardChildChange.prototype.getDimensionPosition = function (moveEvent) {
            var draggedElement = moveEvent.source.element.nativeElement.nextElementSibling;
            if (!this.diffX) {
                var rect = draggedElement.getBoundingClientRect();
                this.diffX = moveEvent.pointerPosition.x - rect.left;
                this.diffY = moveEvent.pointerPosition.y - rect.top;
            }
            var left = moveEvent.pointerPosition.x - this.diffX;
            var top = moveEvent.pointerPosition.y - this.diffY;
            var _a = this.child, width = _a.width, height = _a.height;
            var ds = this.dashboard.dashboardRect;
            var column = this.dashboard.columnSize;
            var row = this.dashboard.rowSize + this.dashboard.gap / 2;
            var x = Math.round((left - ds.left) / column);
            var y = Math.round((top - ds.top) / row);
            return { x: x, y: y, width: width, height: height };
        };
        DashboardChildChange.prototype.doesCollide = function (a, b) {
            if (b.x === undefined) {
                return false;
            }
            return !(a.y + a.height - 1 < b.y ||
                a.y > b.y + b.height - 1 ||
                a.x + a.width - 1 < b.x ||
                a.x > b.x + b.width - 1);
        };
        DashboardChildChange.prototype.getCollided = function (currentDimension, dimensions) {
            var _this = this;
            if (dimensions === void 0) { dimensions = this.children; }
            var collided = dimensions.filter(function (dimension) { return _this.doesCollide(currentDimension, dimension); });
            return collided;
        };
        return DashboardChildChange;
    }());

    /**
     * A dashboard child allows to position elements
     * correctly on a grid. The user can then resize and
     * rearrange the elements, as long as they are not `frozen`.
     *
     * By setting `c8y-dashboard-child-actions` and
     * `c8y-dashboard-child-title` on the element you can add
     * custom actions or a custom title to the current child.
     *
     * By adding the correct branded classes, you can define
     * the look and feel of the child. By default it is displayed
     * as a card.
     *
     * Example:
     *
     * ```html
     *   <c8y-dashboard-child
     *     #cpWidget3
     *     [isFrozen]="isFrozen"
     *     [x]="0"
     *     [y]="3"
     *     [width]="4"
     *     [height]="4"
     *     [class]="'card-dashboard panel-content-transparent'"
     *   >
     *     <c8y-dashboard-child-title *ngIf="showTitle">
     *       <span>Transparent!</span>
     *     </c8y-dashboard-child-title>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="showTitle = !showTitle; (false)">
     *         <i [c8yIcon]="'heading'"></i> Hide/show title
     *       </a>
     *     </c8y-dashboard-child-action>
     *     <c8y-dashboard-child-action>
     *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
     *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
     *       </a>
     *     </c8y-dashboard-child-action>
     *     x: {{ cpWidget3.x }}<br />
     *     y: {{ cpWidget3.y }}<br />
     *     width: {{ cpWidget3.width }}<br />
     *     height: {{ cpWidget3.height }}<br />
     *   </c8y-dashboard-child>
     * ```
     */
    var DashboardChildComponent = /** @class */ (function () {
        function DashboardChildComponent(dashboard, sanitizer, element) {
            this.dashboard = dashboard;
            this.sanitizer = sanitizer;
            this.element = element;
            this.actions = [];
            this.isResize = false;
            this.isDragging = false;
            this.klasses = {};
            this._pxWidth = '100%';
            this._pxHeight = '100%';
            /**
             * The width of the component in grid-columns.
             */
            this.width = 1;
            /**
             * The height of the component in grid-rows.
             */
            this.height = 1;
            /**
             * The margin of the child in pixel.
             */
            this.margin = 12;
            /**
             * If a dashboard is frozen, all children cannot be moved
             * or resized.
             */
            this.isFrozen = false;
            /**
             * The child content is initialized, as soon it is scrolled into viewport
             */
            this.useIntersection = false;
            /**
             * An event fired if a child change is started (dragging or resizing)
             */
            this.changeStart = new core.EventEmitter();
            /**
             * An event fired if a child change is ended
             */
            this.changeEnd = new core.EventEmitter();
            /**
             * All classes added to this child
             */
            this.class = {};
            /**
             * An indicator if the child is intersected (that mean visible for the user)
             */
            this.intersected = false;
        }
        Object.defineProperty(DashboardChildComponent.prototype, "pxWidth", {
            /**
             * Updates the pixel width of the child (used for resizing)
             */
            set: function (value) {
                this._pxWidth = value + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DashboardChildComponent.prototype, "pxHeight", {
            /**
             * Updates the pixel height of the child (used for resizing)
             */
            set: function (value) {
                this._pxHeight = value + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DashboardChildComponent.prototype, "inlineStyle", {
            /**
             * nasty workaround for that issue:
             * https://github.com/angular/angular/issues/9343
             */
            get: function () {
                return this.sanitizer.bypassSecurityTrustStyle("\n    grid-column-start: " + (this.x + 1) + ";\n    -ms-grid-column: " + (this.x + 1) + ";\n    grid-row-start: " + (this.y + 1) + ";\n    -ms-grid-row: " + (this.y + 1) + ";\n    grid-column-end: span " + this.width + ";\n    -ms-grid-column-span: " + this.width + ";\n    grid-row-end: span " + this.height + ";\n    -ms-grid-row-span: " + this.height + ";\n    display: block;\n    margin: " + (this.margin || 12) + "px;\n    ");
            },
            enumerable: true,
            configurable: true
        });
        DashboardChildComponent.prototype.ngOnChanges = function () {
            this.klasses = __assign({ card: true, 'card-dashboard': true, disabled: this.isFrozen, 'on-resize': this.isResize }, this.class);
        };
        DashboardChildComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.x === undefined || this.y === undefined) {
                setTimeout(function () { return _this.setDynamicDimension(); });
            }
            if (this.useIntersection && 'IntersectionObserver' in window) {
                var intersectionObserver_1 = new IntersectionObserver(function (event) { return (_this.intersected = _this.childInView(event[0], intersectionObserver_1)); });
                intersectionObserver_1.observe(this.element.nativeElement);
            }
            else {
                this.intersected = true;
            }
        };
        DashboardChildComponent.prototype.setDynamicDimension = function () {
            var ds = new DashboardChildChange(this);
            var _a = ds.findFreeDimension(), x = _a.x, y = _a.y;
            this.x = x;
            this.y = y;
        };
        DashboardChildComponent.prototype.resizeStarted = function ($event) {
            this.isResize = true;
            this.dashboard.updateRectSize();
            this.dragSource = $event.source;
            var positioning = new DashboardChildChange(this);
            this.changeSubscription = positioning.resize$.subscribe();
            this.changeStart.emit(this);
            this.ngOnChanges();
        };
        DashboardChildComponent.prototype.dragStarted = function ($event) {
            this.isDragging = true;
            this.dashboard.updateRectSize();
            this.dragSource = $event.source;
            var positioning = new DashboardChildChange(this);
            this.changeSubscription = positioning.drag$.subscribe();
            this.changeStart.emit(this);
        };
        DashboardChildComponent.prototype.reset = function ($event) {
            this.isResize = false;
            this.isDragging = false;
            this._pxWidth = '100%';
            this._pxHeight = '100%';
            this.ngOnChanges();
            if ($event) {
                $event.source.reset();
            }
            if (this.changeSubscription) {
                this.changeSubscription.unsubscribe();
                this.dashboard.emitChange(this);
                this.changeEnd.emit(this);
            }
        };
        DashboardChildComponent.prototype.childInView = function (event, observer) {
            if (event.isIntersecting) {
                observer.unobserve(event.target);
                return true;
            }
            return false;
        };
        DashboardChildComponent.ctorParameters = function () { return [
            { type: DashboardComponent, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return DashboardComponent; }),] }] },
            { type: platformBrowser.DomSanitizer },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.ContentChildren(DashboardChildActionComponent)
        ], DashboardChildComponent.prototype, "actions", void 0);
        __decorate([
            core.Input()
        ], DashboardChildComponent.prototype, "x", void 0);
        __decorate([
            core.Input()
        ], DashboardChildComponent.prototype, "y", void 0);
        __decorate([
            core.Input()
        ], DashboardChildComponent.prototype, "width", void 0);
        __decorate([
            core.Input()
        ], DashboardChildComponent.prototype, "height", void 0);
        __decorate([
            core.Input()
        ], DashboardChildComponent.prototype, "data", void 0);
        __decorate([
            core.Input()
        ], DashboardChildComponent.prototype, "margin", void 0);
        __decorate([
            core.Input()
        ], DashboardChildComponent.prototype, "isFrozen", void 0);
        __decorate([
            core.Input()
        ], DashboardChildComponent.prototype, "useIntersection", void 0);
        __decorate([
            core.Output()
        ], DashboardChildComponent.prototype, "changeStart", void 0);
        __decorate([
            core.Output()
        ], DashboardChildComponent.prototype, "changeEnd", void 0);
        __decorate([
            core.Input()
        ], DashboardChildComponent.prototype, "class", void 0);
        __decorate([
            core.HostBinding('attr.style')
        ], DashboardChildComponent.prototype, "inlineStyle", null);
        DashboardChildComponent = __decorate([
            core.Component({
                selector: 'c8y-dashboard-child',
                template: "<div cdkDropList>\n  <div *ngIf=\"isResize\" class=\"card-placeholder\"></div>\n  <div\n    [ngClass]=\"klasses\"\n    cdkDrag\n    [ngStyle]=\"{ width: _pxWidth, height: _pxHeight }\"\n    (cdkDragStarted)=\"dragStarted($event)\"\n    (cdkDragEnded)=\"reset($event)\"\n    [cdkDragDisabled]=\"isFrozen\"\n  >\n    <div\n      class=\"card-header-actions card-header-grid\"\n      [ngClass]=\"{ 'drag-handle': !isFrozen, draggableCursor: !isFrozen }\"\n      cdkDragHandle\n    >\n      <ng-content select=\"c8y-dashboard-child-title\"></ng-content>\n      <div class=\"header-actions\" *ngIf=\"!isFrozen && actions.length > 0\">\n        <div class=\"optionsBtn dropdown\" dropdown container=\"body\">\n          <a\n            title=\"{{ 'Settings' | translate }}\"\n            href=\"\"\n            class=\"btnIcon c8y-dropdown\"\n            (click)=\"(false)\"\n            dropdownToggle\n          >\n            <i [c8yIcon]=\"'cog'\"></i>\n          </a>\n          <ul\n            class=\"dropdown-menu dropdown-menu-right\"\n            style=\"right: -41px;top: 3px;\"\n            *dropdownMenu\n          >\n            <ng-container *ngFor=\"let action of actions\">\n              <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n            </ng-container>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-inner-scroll\">\n      <ng-content></ng-content>\n    </div>\n    <div\n      *ngIf=\"!isFrozen && !isDragging\"\n      class=\"resize-handle\"\n      cdkDrag\n      [cdkDragDisabled]=\"isFrozen\"\n      (cdkDragStarted)=\"resizeStarted($event)\"\n      (cdkDragEnded)=\"reset($event)\"\n    ></div>\n    <div class=\"resize-icon\" *ngIf=\"!isFrozen && !isDragging\"></div>\n\n    <div *cdkDragPlaceholder class=\"card-placeholder\"></div>\n  </div>\n</div>\n",
                host: {
                    class: 'dashboard-grid-child'
                }
            }),
            __param(0, core.Inject(core.forwardRef(function () { return DashboardComponent; })))
        ], DashboardChildComponent);
        return DashboardChildComponent;
    }());

    var WidgetsDashboardComponent = /** @class */ (function () {
        function WidgetsDashboardComponent() {
            this.settings = {
                isFrozen: false,
                isDisabled: false,
                widgetMargin: 12,
                translateWidgetTitle: false,
                defaultHeight: 4,
                defaultWidth: 4,
                allowFullscreen: false,
                canDelete: true,
                isLoading: false,
            };
            this.onAddWidget = new core.EventEmitter();
            this.onEditWidget = new core.EventEmitter();
            this.onDeleteWidget = new core.EventEmitter();
            this.onChangeDashboard = new core.EventEmitter();
            this.onEditDashboard = new core.EventEmitter();
            this.onDeleteDashboard = new core.EventEmitter();
            this.onFreeze = new core.EventEmitter();
            this.onChangeStart = new core.EventEmitter();
            this.onChangeEnd = new core.EventEmitter();
        }
        Object.defineProperty(WidgetsDashboardComponent.prototype, "_settings", {
            set: function (settings) {
                this.settings = __assign({}, this.settings, settings);
            },
            enumerable: true,
            configurable: true
        });
        WidgetsDashboardComponent.prototype.toggleFullscreen = function () {
            var elem = document.body;
            var doc = document;
            if (!this.fullScreen()) {
                if (elem.requestFullscreen) {
                    elem.requestFullscreen();
                }
                else if (elem.msRequestFullscreen) {
                    elem.msRequestFullscreen();
                }
                else if (elem.mozRequestFullScreen) {
                    elem.mozRequestFullScreen();
                }
                else if (elem.webkitRequestFullscreen) {
                    elem.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                }
            }
            else if (doc.exitFullscreen) {
                doc.exitFullscreen();
            }
            else if (doc.msExitFullscreen) {
                doc.msExitFullscreen();
            }
            else if (doc.mozCancelFullScreen) {
                doc.mozCancelFullScreen();
            }
            else if (doc.webkitExitFullscreen) {
                doc.webkitExitFullscreen();
            }
        };
        WidgetsDashboardComponent.prototype.fullScreen = function () {
            var doc = document;
            return !!(doc.fullscreenElement ||
                doc.mozFullScreenElement ||
                doc.webkitFullscreenElement ||
                doc.msFullscreenElement);
        };
        __decorate([
            core.Input()
        ], WidgetsDashboardComponent.prototype, "widgets", void 0);
        __decorate([
            core.Input()
        ], WidgetsDashboardComponent.prototype, "context", void 0);
        __decorate([
            core.Input()
        ], WidgetsDashboardComponent.prototype, "contextDashboard", void 0);
        __decorate([
            core.Input('settings')
        ], WidgetsDashboardComponent.prototype, "_settings", null);
        __decorate([
            core.Output()
        ], WidgetsDashboardComponent.prototype, "onAddWidget", void 0);
        __decorate([
            core.Output()
        ], WidgetsDashboardComponent.prototype, "onEditWidget", void 0);
        __decorate([
            core.Output()
        ], WidgetsDashboardComponent.prototype, "onDeleteWidget", void 0);
        __decorate([
            core.Output()
        ], WidgetsDashboardComponent.prototype, "onChangeDashboard", void 0);
        __decorate([
            core.Output()
        ], WidgetsDashboardComponent.prototype, "onEditDashboard", void 0);
        __decorate([
            core.Output()
        ], WidgetsDashboardComponent.prototype, "onDeleteDashboard", void 0);
        __decorate([
            core.Output()
        ], WidgetsDashboardComponent.prototype, "onFreeze", void 0);
        __decorate([
            core.Output()
        ], WidgetsDashboardComponent.prototype, "onChangeStart", void 0);
        __decorate([
            core.Output()
        ], WidgetsDashboardComponent.prototype, "onChangeEnd", void 0);
        WidgetsDashboardComponent = __decorate([
            core.Component({
                selector: 'c8y-widgets-dashboard',
                template: "<c8y-title *ngIf=\"!!settings.title\">\n  {{ settings.title | translate }}\n</c8y-title>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"onAddWidget.observers.length\">\n  <button\n    class=\"btn btn-link\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n    (click)=\"onAddWidget.emit()\"\n  >\n    <i c8yIcon=\"plus-circle\"></i> {{ 'Add widget' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"onEditDashboard.observers.length\">\n  <button\n    class=\"btn btn-link\"\n    [disabled]=\"settings.isFrozen || settings.isDisabled\"\n    (click)=\"onEditDashboard.emit()\"\n  >\n    <i c8yIcon=\"pencil\"></i> {{ 'Edit' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item [placement]=\"'right'\" *ngIf=\"settings.allowFullscreen\">\n  <button class=\"btn btn-link\" (click)=\"toggleFullscreen()\">\n    <i [c8yIcon]=\"fullScreen() ? 'compress' : 'expand'\"></i> {{ 'Full screen' | translate }}\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item\n  [placement]=\"'right'\"\n  itemClass=\"navbar-form\"\n  *ngIf=\"onFreeze.observers.length\"\n>\n  <button\n    title=\"{{ 'Lock/unlock this dashboard' | translate }}\"\n    class=\"btn btn-default\"\n    [ngClass]=\"{ active: settings.isFrozen }\"\n    (click)=\"onFreeze.emit(settings)\"\n    [disabled]=\"settings.isDisabled\"\n    uib-btn-checkbox\n  >\n    <i [c8yIcon]=\"settings.isFrozen ? 'lock' : 'unlock'\"></i>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-action-bar-item\n  [placement]=\"'more'\"\n  [priority]=\"-3000\"\n  *ngIf=\"settings.canDelete && onDeleteDashboard.observers.length\"\n>\n  <button (click)=\"onDeleteDashboard.emit()\" [disabled]=\"settings.isFrozen || settings.isDisabled\">\n    <i c8yIcon=\"trash\"></i>&nbsp;<span translate>Delete dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<!-- empty state -->\n<div class=\"c8y-empty-state text-center\" *ngIf=\"!settings.isLoading && widgets.length === 0\">\n  <h1 class=\"c8y-icon c8y-icon-device c8y-icon-duocolor\"></h1>\n  <h3 translate>No widgets to display.</h3>\n  <div *ngIf=\"!settings.isFrozen && onAddWidget.observers.length\">\n    <p translate>Add widgets to this dashboard.</p>\n    <div>\n      <button\n        [disabled]=\"settings.isFrozen || settings.isDisabled\"\n        (click)=\"onAddWidget.emit()\"\n        class=\"btn btn-primary\"\n        translate\n      >\n        Add widget\n      </button>\n    </div>\n    <p c8y-guide-docs>\n      <small translate\n        >Find out more in the\n        <a c8y-guide-href=\"users-guide/cockpit/#dashboards\">User guide`KEEP_ORIGINAL`</a>.</small\n      >\n    </p>\n  </div>\n</div>\n<!-- /.empty settings -->\n\n<div class=\"col-xs-12 text-center\" *ngIf=\"settings.isLoading\">\n  <div class=\"spinner\" style=\"position: relative;\">\n    <div class=\"rect1\"></div>\n    <div class=\"rect2\"></div>\n    <div class=\"rect3\"></div>\n    <div class=\"rect4\"></div>\n    <div class=\"rect5\"></div>\n  </div>\n</div>\n\n<c8y-dashboard\n  (dashboardChange)=\"onChangeDashboard.emit($event)\"\n  #dashboard\n  *ngIf=\"!settings.isLoading\"\n>\n  <c8y-dashboard-child\n    *ngFor=\"let widget of widgets\"\n    [x]=\"widget._x\"\n    [y]=\"widget._y\"\n    [width]=\"widget._width || settings.defaultWidth\"\n    [height]=\"widget._height || settings.defaultHeight\"\n    [margin]=\"settings.widgetMargin\"\n    [isFrozen]=\"settings.isFrozen || settings.isDisabled\"\n    [class]=\"widget.classes\"\n    [data]=\"widget\"\n    [useIntersection]=\"true\"\n    (changeStart)=\"onChangeStart.emit({ widget: widget, source: child, dashboard: dashboard })\"\n    (changeEnd)=\"onChangeEnd.emit({ widget: widget, source: child, dashboard: dashboard })\"\n    #child\n  >\n    <c8y-dashboard-child-title>\n      <span *ngIf=\"settings.translateWidgetTitle\"> {{ widget.title | translate }}</span>\n      <span *ngIf=\"!settings.translateWidgetTitle\">\n        {{ widget.title }}\n      </span>\n    </c8y-dashboard-child-title>\n    <c8y-dashboard-child-action *ngIf=\"onEditWidget.observers.length\">\n      <button (click)=\"onEditWidget.emit({ widget: widget, source: child, dashboard: dashboard })\">\n        <i c8yIcon=\"pencil\"></i>&nbsp;<span translate>Edit</span>\n      </button>\n    </c8y-dashboard-child-action>\n    <c8y-dashboard-child-action *ngIf=\"onDeleteWidget.observers.length\">\n      <button\n        (click)=\"onDeleteWidget.emit({ widget: widget, source: child, dashboard: dashboard })\"\n      >\n        <i c8yIcon=\"trash\"></i>&nbsp;<span translate>Remove</span>\n      </button>\n    </c8y-dashboard-child-action>\n    <c8y-dynamic-component\n      [componentId]=\"widget.componentId || widget.name\"\n      [config]=\"\n        widget.templateUrl || widget.widgetComponent\n          ? { child: widget, dashboard: contextDashboard, context: context }\n          : widget.config\n      \"\n      *ngIf=\"child.intersected\"\n    ></c8y-dynamic-component>\n  </c8y-dashboard-child>\n</c8y-dashboard>\n",
                host: {
                    style: "\n      display: block;\n    ",
                    class: 'dashboard c8y-grid-dashboard'
                }
            })
        ], WidgetsDashboardComponent);
        return WidgetsDashboardComponent;
    }());

    var DashboardModule = /** @class */ (function () {
        function DashboardModule() {
        }
        DashboardModule = __decorate([
            core.NgModule({
                declarations: [
                    DashboardChildComponent,
                    DashboardComponent,
                    DashboardChildTitleComponent,
                    DashboardChildActionComponent,
                    WidgetsDashboardComponent
                ],
                imports: [
                    CommonModule,
                    ActionBarModule,
                    DynamicComponentModule,
                    dragDrop.DragDropModule,
                    dropdown.BsDropdownModule.forRoot(),
                    HeaderModule,
                    DocsModule
                ],
                exports: [
                    DashboardComponent,
                    DashboardChildComponent,
                    DashboardChildTitleComponent,
                    DashboardChildActionComponent,
                    WidgetsDashboardComponent
                ]
            })
        ], DashboardModule);
        return DashboardModule;
    }());

    /**
     * Template to be used to override the icons inside the step header.
     */
    var C8yStepperIcon = /** @class */ (function () {
        function C8yStepperIcon(templateRef) {
            this.templateRef = templateRef;
        }
        C8yStepperIcon.ctorParameters = function () { return [
            { type: core.TemplateRef }
        ]; };
        __decorate([
            core.Input('c8yStepperIcon')
        ], C8yStepperIcon.prototype, "name", void 0);
        C8yStepperIcon = __decorate([
            core.Directive({
                selector: 'ng-template[c8yStepperIcon]'
            })
        ], C8yStepperIcon);
        return C8yStepperIcon;
    }());

    /**
     * C8yStepper extends the CdkStepper. You can use cdk based functionality and inputs.
     * Additional to that you are able to modify the behavior and also the look and feel when
     * using the C8yStepper.
     *
     * The C8yStepper is used to present any step-based process to the user.
     * A stepper, C8yStepper and/or CdkStepper is the parent of cdk-steps.
     * Each cdk-step represents one step in the whole process that you want to provide to the user.
     *
     * The C8yStepper will create, based on the given cdk-steps, a kind of stepper-progress which looks like this:
     * (1)---(2)---(3)---(n)
     * The stepper will handle the state of each step and provides styles for active steps, done-steps or in edit-mode.
     * You are able to override icons for each step in the stepper-progress with a template. You are also able to activate
     * default-icons for states like 'edit' and 'done'.
     *
     * To force users through every provided step, set the stepper to 'linear'.
     * This will disable the possibility to move for example from step one to step three.
     *
     * Whenever it comes to validation try to use formGroups. It is possible to
     * assign a formGroup to a cdk-step input called [stepControl], which automatically respects the
     * validation-rules that you created for this formGroup. If fields are required but not filled or
     * any other validation, like a pattern, is not matched the formGroup will be invalid. In this case
     * stepping in a linear stepper to the next step gets impossible.
     *
     * If there is the need to execute asynchronous code you have at least two possibilities.
     * First: As you learned, a cdk-step works with formGroups and Validators, so you are able to use
     * asyncValidators as well.
     * Second: The C8yStepper provides an event-emitter onStepChange which is called whenever a step-button (1)--(2)--(n)
     * in the stepper-progress is clicked. The event of this emitter holds the index of the step as number. You can
     * use this EventEmitter to call for example a custom navigate-method which performs first any async-call and then moves
     * on to the given step.
     *
     * @example
     * ```
     * <c8y-stepper
     * (onStepChange)="navigate($event)"
     * [disableDefaultIcons]="{ edit: true, done: false }"
     * [customClasses]="['m-l-40', 'm-r-40', 'm-t-32']"
     * linear
     * >
     * <!-- override icons -->
     * <ng-template c8yStepperIcon="final">
     *   <span [c8yIcon]="'hand-peace-o'"></span>
     * </ng-template>
     *
     * <cdk-step [stepControl]="formGroupStepOne" label="Name of the hero">
     *   <div class="m-l-40 m-r-40 m-t-32">
     *     <h4 class="p-b-8" translate>What is the name of your hero?</h4>
     *     <c8y-form-group>
     *      <div [formGroup]="formGroupStepOne">
     *       <input
     *         class="form-control"
     *         type="text"
     *         formControlName="name"
     *         placeholder="Mister X"
     *         #nameRef
     *         required
     *       />
     *       <c8y-messages>
     *         <c8y-message *ngIf="!formGroupStepOne.untouched && !nameRef.value" translate
     *           >Enter the name of the Superhero</c8y-message
     *         >
     *       </c8y-messages>
     *      </div>
     *     </c8y-form-group>
     *   </div>
     *   <c8y-stepper-buttons></c8y-stepper-buttons>
     * </cdk-step>
     * <cdk-step>
     *  ...
     * </cdk-step state="final">
     * </c8y-stepper>
     * ```
     */
    var C8yStepper = /** @class */ (function (_super) {
        __extends(C8yStepper, _super);
        function C8yStepper() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Optional
             * Indicator if icons for edit and done state should be shown in step-header buttons
             */
            _this.disableDefaultIcons = { edit: true, done: true };
            /**
             * Will emit the step index number whenever a step-header button was clicked
             * It listens to the stepIndex Subject.
             */
            _this.onStepChange = new core.EventEmitter();
            /** Consumer-specified template-refs to be used to override the header icons. */
            _this._iconOverrides = {};
            _this._stepIndex = new rxjs.Subject();
            return _this;
        }
        C8yStepper_1 = C8yStepper;
        C8yStepper.prototype.ngAfterContentInit = function () {
            var _this = this;
            this._icons.forEach(function (_a) {
                var name = _a.name, templateRef = _a.templateRef;
                return (_this._iconOverrides[name] = templateRef);
            });
            this._stepIndexSubscription = this._stepIndex.subscribe(function (index) { return _this.onStepChange.emit(index); });
        };
        C8yStepper.prototype.ngOnDestroy = function () {
            if (this._stepIndexSubscription && !this._stepIndexSubscription.closed) {
                this._stepIndexSubscription.unsubscribe();
            }
        };
        /**
         * Manipulates the state based on the disabledDefaultIcons Input()
         * Changing edit or done to false will change the icons within step-header buttons
         * @param index step index
         * @param state step state, like 'done', 'edit', 'error'
         */
        C8yStepper.prototype.getIndicatorType = function (index, state) {
            var stepState = this._getIndicatorType(index, state);
            var _state = state;
            switch (stepState) {
                case stepper.STEP_STATE.EDIT:
                    if (!this.disableDefaultIcons.edit) {
                        _state = stepper.STEP_STATE.EDIT;
                    }
                    break;
                case stepper.STEP_STATE.DONE:
                    if (!this.disableDefaultIcons.done) {
                        _state = stepper.STEP_STATE.DONE;
                    }
                    else {
                        _state = '_done';
                    }
                    break;
            }
            return _state;
        };
        /**
         * Pushs the step index to the subject
         * @param index step index
         */
        C8yStepper.prototype.setIndex = function (index) {
            this._stepIndex.next(index);
        };
        var C8yStepper_1;
        __decorate([
            core.Input()
        ], C8yStepper.prototype, "disableDefaultIcons", void 0);
        __decorate([
            core.Input()
        ], C8yStepper.prototype, "customClasses", void 0);
        __decorate([
            core.Output()
        ], C8yStepper.prototype, "onStepChange", void 0);
        __decorate([
            core.ContentChildren(C8yStepperIcon, { descendants: true })
        ], C8yStepper.prototype, "_icons", void 0);
        C8yStepper = C8yStepper_1 = __decorate([
            core.Component({
                selector: 'c8y-stepper',
                template: "<ul class=\"c8y-stepper\" [ngClass]=\"customClasses\">\n  <li *ngFor=\"let step of steps; let i = index\">\n    <c8y-stepper-progress\n      [iconOverrides]=\"_iconOverrides\"\n      [state]=\"getIndicatorType(i, step.state)\"\n      [index]=\"i\"\n      [selected]=\"selectedIndex === i\"\n      (onStepClicked)=\"setIndex($event)\"\n      tooltip=\"{{ step.label | translate }}\"\n      placement=\"bottom\"\n      container=\"body\"\n    >\n    </c8y-stepper-progress>\n  </li>\n</ul>\n<ng-container [ngTemplateOutlet]=\"selected.content\"></ng-container>\n",
                providers: [{ provide: stepper.CdkStepper, useExisting: C8yStepper_1 }]
            })
        ], C8yStepper);
        return C8yStepper;
    }(stepper.CdkStepper));

    var C8yStepperProgress = /** @class */ (function () {
        function C8yStepperProgress() {
            /** Emits the index: number of the step which was clicked */
            this.onStepClicked = new core.EventEmitter();
        }
        /** Called on click and emits the step index */
        C8yStepperProgress.prototype.stepSelected = function () {
            this.onStepClicked.emit(this.index);
        };
        __decorate([
            core.Input()
        ], C8yStepperProgress.prototype, "iconOverrides", void 0);
        __decorate([
            core.Input()
        ], C8yStepperProgress.prototype, "index", void 0);
        __decorate([
            core.Input()
        ], C8yStepperProgress.prototype, "selected", void 0);
        __decorate([
            core.Input()
        ], C8yStepperProgress.prototype, "state", void 0);
        __decorate([
            core.Output()
        ], C8yStepperProgress.prototype, "onStepClicked", void 0);
        C8yStepperProgress = __decorate([
            core.Component({
                selector: 'c8y-stepper-progress',
                template: "<button\n  type=\"button\"\n  class=\"c8y-step\"\n  [ngClass]=\"{ active: selected, 'step-done': state === 'done' || state === '_done' }\"\n  [ngSwitch]=\"!!(iconOverrides && iconOverrides[state])\"\n  (click)=\"stepSelected()\"\n>\n  <ng-container *ngSwitchCase=\"true\" [ngTemplateOutlet]=\"iconOverrides[state]\"></ng-container>\n  <ng-container *ngSwitchDefault [ngSwitch]=\"state\">\n    <span *ngSwitchCase=\"'edit'\">\n      <span [c8yIcon]=\"'edit'\"></span>\n    </span>\n    <span *ngSwitchCase=\"'done'\">\n      <span [c8yIcon]=\"'check'\"></span>\n    </span>\n    <span *ngSwitchDefault> {{ index + 1 }} </span>\n  </ng-container>\n</button>\n"
            })
        ], C8yStepperProgress);
        return C8yStepperProgress;
    }());

    /**
     * C8yStepperButtons provides a convinient way to have, according to
     * the C8yStepper and each cdk-step, buttons to navigate between steps or to cancel the whole
     * step-process. Buttons rendered with the help of this component will use the branding css.
     *
     * By default all steps with this component in use will render a next button, expect the last step.
     * The other way around, every step using this component will render a back button, expect the first step.
     * To get a cancel button rendered you need to handle the onCancel event.
     * For next and back button you don't need to handle the available events onNext and onBack because default behavior
     * is implemented. The default will just call, according to the button, the stepper.next() or stepper.previous()
     * methods and moves the stepper forth or back. Using the EventEmitter onNext and onBack will emit for you the following
     * object: {stepper: C8yStepper, step: CdkStep}. This is useful if you need to implement custom logic before moving
     * to the next step or sending data to a backend. In this case you need to tell the stepper to move forward or back
     * on your own.
     *
     * With the component input [labels] you can change the label of each button in each step. It takes an object like this:
     * {next?: string, back?: string, cancel?: string}
     *
     * The [pending] input is of type boolean and will enable css animation for the next button when true.
     *
     * If the cdk-step provides a stepControl the component will set the next button disabled when the formGroup
     * behind it is invalid. As long as the [pending] input is true the back and next button is also disabled.
     * This will prevent multiple clicks while running a request or stepping back while a request is ongoing.
     *
     * @example
     * ```
     * <c8y-stepper>
     *  <cdk-step>
     *    <!--
     *      your html code
     *          ...
     *          ...    -->
     *    <c8y-stepper-buttons
     *     (onNext)="save()"
     *     [labels]="{ next: 'Save' }"
     *     [pending]="pendingStatus"
     *     ></c8y-stepper-buttons>
     *  </cdk-step>
     * </c8y-stepper>
     *
     * // in your component:
     * async save() {
     *   this.pendingStatus = true;
     *   // your async request goes here ...
     *   // await something();
     *   this.pendingStatus = false;
     *   this.stepper.next();
     * }
     * ```
     */
    var C8yStepperButtons = /** @class */ (function () {
        function C8yStepperButtons(stepper, step) {
            this.stepper = stepper;
            this.step = step;
            /**
             * Optional
             * Indicates if a request is pending and sets the next button
             * to disabled when true
             */
            this.pending = false;
            /**
             * EventEmitter which emits when cancel button is clicked
             */
            this.onCancel = new core.EventEmitter();
            /**
             * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when next button is clicked.
             */
            this.onNext = new core.EventEmitter();
            /**
             * EventEmitter which emits {stepper: C8yStepper; step: CdkStep} when back button is clicked.
             */
            this.onBack = new core.EventEmitter();
            /**
             * Indicator which button should be shown.
             * Based on the cdk-steps within the c8y-stepper
             * next and back buttons are rendered.
             */
            this.showBtns = {
                cancel: false,
                back: false,
                next: false
            };
            /**
             * Disabled state of a button
             */
            this.disabled = false;
        }
        C8yStepperButtons.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.showBtns.cancel = this.onCancel.observers.length > 0;
            if (this.stepper && this.stepper.steps && this.step) {
                this.showBtns.back = this.stepper.steps.first !== this.step;
                this.showBtns.next = this.stepper.steps.last !== this.step;
            }
            if (this.step && this.step.stepControl) {
                this.disabled = this.step.stepControl.invalid;
                this.statusChangeSubscription = this.step.stepControl.statusChanges.subscribe(function (status) {
                    _this.disabled = _this.step.stepControl.invalid;
                });
            }
        };
        C8yStepperButtons.prototype.ngOnChanges = function (changes) {
            /**
             * Disable save/next button while the status is pending
             * This will prevent multiple clicks and therefore multiple requests
             */
            if (changes && changes.pending) {
                this.disabled = changes.pending.currentValue;
            }
        };
        C8yStepperButtons.prototype.ngOnDestroy = function () {
            if (this.statusChangeSubscription && !this.statusChangeSubscription.closed) {
                this.statusChangeSubscription.unsubscribe();
            }
        };
        /**
         * Gets called when cancel button is clicked.
         * It will emit immediate.
         */
        C8yStepperButtons.prototype.cancel = function () {
            this.onCancel.emit();
        };
        /**
         * Gets called when next button is clicked. When onNext EventEmitter has an observer registered
         * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
         * Otherwise it will call stepper.next() as default.
         */
        C8yStepperButtons.prototype.next = function () {
            if (this.onNext.observers.length > 0) {
                this.onNext.emit({ stepper: this.stepper, step: this.step });
            }
            else {
                this.stepper.next();
            }
        };
        /**
         * Gets called when back button is clicked. When onBack EventEmitter has an observer registered
         * it will emit the following object {stepper: C8yStepper; step: CdkStep}.
         * Otherwise it will call stepper.previous() as default.
         */
        C8yStepperButtons.prototype.back = function () {
            if (this.onBack.observers.length > 0) {
                this.onBack.emit({ stepper: this.stepper, step: this.step });
            }
            else {
                this.stepper.previous();
            }
        };
        C8yStepperButtons.ctorParameters = function () { return [
            { type: C8yStepper, decorators: [{ type: core.Host }] },
            { type: stepper.CdkStep, decorators: [{ type: core.Host }] }
        ]; };
        __decorate([
            core.Input()
        ], C8yStepperButtons.prototype, "labels", void 0);
        __decorate([
            core.Input()
        ], C8yStepperButtons.prototype, "pending", void 0);
        __decorate([
            core.Output()
        ], C8yStepperButtons.prototype, "onCancel", void 0);
        __decorate([
            core.Output()
        ], C8yStepperButtons.prototype, "onNext", void 0);
        __decorate([
            core.Output()
        ], C8yStepperButtons.prototype, "onBack", void 0);
        C8yStepperButtons = __decorate([
            core.Component({
                selector: 'c8y-stepper-buttons',
                template: "<div class=\"text-center\">\n  <button *ngIf=\"showBtns.cancel\" (click)=\"cancel()\" type=\"button\" class=\"btn btn-default\">\n    <span>{{labels?.cancel || 'Cancel' | translate}}</span>\n  </button>\n  <button\n    *ngIf=\"showBtns.back\"\n    type=\"button\"\n    (click)=\"back()\"\n    class=\"btn btn-default\"\n    [disabled]=\"pending\"\n  >\n    <span>{{ labels?.back || 'Back' | translate }}</span>\n  </button>\n  <button\n    (click)=\"next()\"\n    *ngIf=\"showBtns.next\"\n    type=\"button\"\n    class=\"btn btn-primary\"\n    [ngClass]=\"{ 'btn-pending': pending }\"\n    [disabled]=\"disabled\"\n  >\n    <span>{{labels?.next || 'Next' | translate }}</span>\n  </button>\n</div>\n"
            }),
            __param(0, core.Host()), __param(1, core.Host())
        ], C8yStepperButtons);
        return C8yStepperButtons;
    }());

    var ɵ0$1 = { displayDefaultIndicatorType: false };
    /**
     * The angular module definition for c8y-stepper (Wizard).
     * @exports C8yStepper
     * @exports C8yStepperIcon
     * @exports C8yStepperButtons
     * @exports CdkStep
     */
    var StepperModule = /** @class */ (function () {
        function StepperModule() {
        }
        StepperModule = __decorate([
            core.NgModule({
                imports: [CommonModule, stepper.CdkStepperModule, tooltip.TooltipModule],
                declarations: [C8yStepper, C8yStepperIcon, C8yStepperProgress, C8yStepperButtons],
                exports: [C8yStepper, stepper.CdkStep, C8yStepperIcon, C8yStepperButtons],
                providers: [
                    {
                        /**
                         * This emables additional states, like: edit, done and error
                         * These states are used to display custom icons, if needed.
                         * Any change in here will most probably result in not showing custom icons anymore
                         */
                        provide: stepper.STEPPER_GLOBAL_OPTIONS,
                        useValue: ɵ0$1
                    }
                ]
            })
        ], StepperModule);
        return StepperModule;
    }());

    try {
        // Levarage webpack to load ngx-bootstrap style
        // it's here and not in @c8y/styles because it's not a dependency of styles
        // @ts-ignore
        // tslint:disable-next-line:no-var-requires
        require('ngx-bootstrap/datepicker/bs-datepicker.css');
    }
    catch (e) {
        // empty block
    }
    var CoreModule = /** @class */ (function () {
        function CoreModule() {
        }
        CoreModule_1 = CoreModule;
        CoreModule.forRoot = function () {
            return {
                ngModule: CoreModule_1,
                providers: __spread(CommonModule.providers(), LoginModule.providers())
            };
        };
        var CoreModule_1;
        CoreModule = CoreModule_1 = __decorate([
            core.NgModule({
                exports: [
                    ActionBarModule,
                    ActionModule,
                    AlertModule,
                    BootstrapModule,
                    BreadcrumbModule,
                    CommonModule,
                    DataGridModule,
                    DeviceGridModule,
                    DropAreaModule,
                    HeaderModule,
                    LoginModule,
                    ModalModule,
                    NavigatorModule,
                    AuthenticationModule,
                    SearchModule,
                    SelectModule,
                    TabsModule,
                    UserModule,
                    FormsModule,
                    DeviceStatusModule,
                    DocsModule,
                    StepperModule,
                    DynamicComponentModule,
                    DashboardModule,
                    ListGroupModule
                ]
            })
        ], CoreModule);
        return CoreModule;
    }());

    /**
     * A hook to use for Multi Provider extension.
     */
    var HOOK_ONCE_ROUTE = new core.InjectionToken('RouteFactory');
    /**
     * A service which defines routes
     */
    var RouterService = /** @class */ (function () {
        function RouterService(factories, router) {
            var _this = this;
            this.router = router;
            fromFactories(factories).subscribe(function (routes) {
                _this.addRoute(routes);
            });
        }
        /**
         * Add a new route to the router configuration or a context.
         * @param route The route to add
         */
        RouterService.prototype.addRoute = function (route) {
            this.addRoutes(Array.isArray(route) ? route : [route]);
        };
        RouterService.prototype.addRoutes = function (routes) {
            var _this = this;
            var emptyRoute = this.router.config.find(function (r) { return r.path === '**'; });
            this.router.resetConfig(__spread(this.router.config.filter(function (r) { return r.path !== '**'; }), routes
                .map(function (r) { return _this.convertRoute(_this.router.config, r); }), [
                emptyRoute
            ]).filter(Boolean));
        };
        RouterService.prototype.convertRoute = function (initialConfig, route) {
            if (route.context) {
                initialConfig.forEach(function (r) {
                    if (r.data && r.data.context === route.context) {
                        r.children = __spread([route], (r.children || []));
                    }
                });
                return;
            }
            return route;
        };
        RouterService.ctorParameters = function () { return [
            { type: Array, decorators: [{ type: core.Optional }, { type: core.Inject, args: [HOOK_ONCE_ROUTE,] }] },
            { type: router.Router }
        ]; };
        RouterService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function RouterService_Factory() { return new RouterService(core.ɵɵinject(HOOK_ONCE_ROUTE, 8), core.ɵɵinject(router.Router)); }, token: RouterService, providedIn: "root" });
        RouterService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __param(0, core.Optional()), __param(0, core.Inject(HOOK_ONCE_ROUTE))
        ], RouterService);
        return RouterService;
    }());

    var RouterTabsResolver = /** @class */ (function () {
        function RouterTabsResolver(injector, router) {
            this.injector = injector;
            this.router = router;
        }
        Object.defineProperty(RouterTabsResolver.prototype, "routerStateSnapshot", {
            get: function () {
                return this.router.routerState.snapshot;
            },
            enumerable: true,
            configurable: true
        });
        RouterTabsResolver.prototype.resolve = function (route) {
            var _this = this;
            return rxjs.from(route.routeConfig.children || []).pipe(operators.mergeMap(function (child) {
                return rxjs.from(_this.getGuards(child)).pipe(operators.map(function (guard) { return guard.canActivate(route, _this.routerStateSnapshot); }), operators.mergeMap(function (result) {
                    if (rxjs.isObservable(result)) {
                        return result;
                    }
                    if (result && typeof result.then === 'function') {
                        return rxjs.from(result);
                    }
                    return rxjs.of(result);
                }), operators.tap(function (result) {
                    if (Array.isArray(result)) {
                        child.tabs = result;
                    }
                }), operators.every(function (result) { return !!result; }), operators.filter(function (result) { return result; }), operators.mergeMap(function () { return Array.isArray(child.tabs) ? rxjs.from(child.tabs) : rxjs.of(child); }), operators.map(function (result) { return result.label
                    ? {
                        label: result.label,
                        icon: result.icon,
                        path: route.url.join('/') + "/" + result.path,
                        priority: result.priority
                    }
                    : undefined; }));
            }), operators.filter(function (tabs) { return !!tabs; }), operators.toArray());
        };
        RouterTabsResolver.prototype.getGuards = function (child) {
            var _this = this;
            var guards = (child.canActivate || []).map(function (guard) {
                return _this.injector.get(guard);
            });
            if (child.data && child.data.showIf) {
                guards.push({ canActivate: child.data.showIf });
            }
            return guards;
        };
        RouterTabsResolver.ctorParameters = function () { return [
            { type: core.Injector },
            { type: router.Router }
        ]; };
        RouterTabsResolver = __decorate([
            core.Injectable()
        ], RouterTabsResolver);
        return RouterTabsResolver;
    }());


    (function (ViewContext) {
        ViewContext["Device"] = "device/:id";
        ViewContext["Group"] = "group/:id";
        ViewContext["User"] = "users/:id";
        ViewContext["Application"] = "applications/:id";
        ViewContext["SubscribedApplications"] = "subscribedApplications/:id";
        ViewContext["Tenant"] = "tenants/:id";
    })(exports.ViewContext || (exports.ViewContext = {}));

    var ViewContextServices = /** @class */ (function () {
        function ViewContextServices() {
        }
        ViewContextServices.contextToService = function (context) {
            return ViewContextServices.services.get(context);
        };
        ViewContextServices.services = new Map([
            [exports.ViewContext.Device, client.InventoryService],
            [exports.ViewContext.Group, client.InventoryService],
            [exports.ViewContext.User, client.UserService],
            [exports.ViewContext.Application, client.ApplicationService],
            [exports.ViewContext.SubscribedApplications, client.ApplicationService],
            [exports.ViewContext.Tenant, client.TenantService],
        ]);
        return ViewContextServices;
    }());

    var ContextRouteComponent = /** @class */ (function () {
        function ContextRouteComponent(tabsResolver, tabsService, route, router, apiService, injector) {
            this.tabsResolver = tabsResolver;
            this.tabsService = tabsService;
            this.route = route;
            this.router = router;
            this.apiService = apiService;
            this.injector = injector;
            this.lastAddedTabs = [];
            this.refreshTrigger = new rxjs.Subject();
        }
        ContextRouteComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.routerSubscription = this.router.events
                .pipe(operators.filter(function (e) { return e instanceof router.NavigationEnd; }))
                .subscribe(function () { return _this.redirectToFirstTab(); });
            var refreshObservable = this.refreshTrigger.pipe(operators.merge(this.updatedContext()), operators.switchMap(function () { return _this.tabsResolver.resolve(_this.route.snapshot); }));
            this.dataSubscription = this.route.data.pipe(operators.map(function (_a) {
                var tabs = _a.tabs;
                return tabs;
            }), operators.merge(refreshObservable)).subscribe(function (tabs) { return _this.updateTabs(tabs); });
        };
        ContextRouteComponent.prototype.ngOnDestroy = function () {
            var _this = this;
            this.dataSubscription.unsubscribe();
            this.routerSubscription.unsubscribe();
            this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
        };
        ContextRouteComponent.prototype.refreshTabs = function () {
            this.refreshTrigger.next();
        };
        ContextRouteComponent.prototype.updatedContext = function () {
            var data = this.route.snapshot.data;
            var serviceInstance = ViewContextServices.contextToService(data.context);
            if (serviceInstance) {
                var service = this.injector.get(serviceInstance);
                var contextRegex_1 = new RegExp(service.getDetailUrl(data.contextData), 'i');
                var childrenRegex_1 = new RegExp(service.getDetailUrl(data.contextData) + "/child", 'i');
                var filterResponse = function (_a) {
                    var url = _a.url, method = _a.method;
                    var contextChanged = contextRegex_1.test(url) && method === 'PUT';
                    var childrenAffected = childrenRegex_1.test(url) && ['POST', 'DELETE'].includes(method);
                    return contextChanged || childrenAffected;
                };
                return this.apiService.hookResponse(filterResponse);
            }
            return rxjs.NEVER;
        };
        ContextRouteComponent.prototype.updateTabs = function (tabs) {
            var _this = this;
            if (tabs === void 0) { tabs = []; }
            this.lastAddedTabs.forEach(function (t) { return _this.tabsService.remove(t); });
            this.lastAddedTabs = tabs;
            tabs.forEach(function (t) { return _this.tabsService.add(t); });
            this.redirectToFirstTab();
        };
        ContextRouteComponent.prototype.redirectToFirstTab = function () {
            var _this = this;
            if (this.needsRedirect()) {
                this.tabsService.firstTab$.subscribe(function (tab) {
                    if (tab) {
                        _this.router.navigateByUrl(tab.path, { replaceUrl: true });
                    }
                });
            }
        };
        ContextRouteComponent.prototype.needsRedirect = function () {
            var tree = this.router.parseUrl(this.router.url);
            var groups = tree.root.children[router.PRIMARY_OUTLET];
            var isContextRoute = groups.segments.length === 2;
            return isContextRoute;
        };
        ContextRouteComponent.ctorParameters = function () { return [
            { type: RouterTabsResolver },
            { type: TabsService },
            { type: router.ActivatedRoute },
            { type: router.Router },
            { type: api.ApiService },
            { type: core.Injector }
        ]; };
        ContextRouteComponent = __decorate([
            core.Component({
                selector: 'c8y-context-route',
                template: "<router-outlet></router-outlet>\n"
            })
        ], ContextRouteComponent);
        return ContextRouteComponent;
    }());

    var ContextRouteGuard = /** @class */ (function () {
        function ContextRouteGuard(injector) {
            this.injector = injector;
            this.caches = new Map();
        }
        ContextRouteGuard.prototype.canActivate = function (route) {
            var id = route.paramMap.get('id');
            var service = this.service(route);
            this.clearDetailCached(service, id);
            return this.detailCached(service, id).pipe(operators.tap(function (contextData) { return route.data = __assign({}, route.data, { contextData: contextData }); }), operators.map(function () { return true; }), operators.catchError(function (ex) { return rxjs.of(false); }));
        };
        ContextRouteGuard.prototype.service = function (route) {
            var serviceInstance = ViewContextServices.contextToService(route.data.context);
            return this.injector.get(serviceInstance);
        };
        ContextRouteGuard.prototype.detailCached = function (service, id) {
            var cache = this.getCache(service);
            var cached = cache[id];
            if (!cached) {
                cached = rxjs.from(service.detail(id)).pipe(operators.map(function (_a) {
                    var data = _a.data;
                    return data;
                }), operators.shareReplay(1));
                cache[id] = cached;
            }
            return cached;
        };
        ContextRouteGuard.prototype.clearDetailCached = function (service, id) {
            var cache = this.getCache(service);
            delete cache[id];
        };
        ContextRouteGuard.prototype.getCache = function (service) {
            var cache = this.caches.get(service);
            if (!cache) {
                cache = {};
                this.caches.set(service, cache);
            }
            return cache;
        };
        ContextRouteGuard.ctorParameters = function () { return [
            { type: core.Injector }
        ]; };
        ContextRouteGuard = __decorate([
            core.Injectable()
        ], ContextRouteGuard);
        return ContextRouteGuard;
    }());

    var EmptyComponent = /** @class */ (function () {
        function EmptyComponent() {
        }
        EmptyComponent = __decorate([
            core.Component({ selector: 'empty', template: '' })
        ], EmptyComponent);
        return EmptyComponent;
    }());

    var routes = [{
            path: 'users/new',
            component: EmptyComponent
        },
        {
            path: 'tenants/new',
            component: EmptyComponent
        }];
    // tslint:disable-next-line: forin
    for (var key in exports.ViewContext) {
        var context = exports.ViewContext[key];
        routes.push({
            path: context,
            component: ContextRouteComponent,
            canActivate: [ContextRouteGuard],
            data: { context: context, contextData: {} },
            resolve: {
                tabs: RouterTabsResolver,
            }
        });
    }
    var RouterModule = /** @class */ (function () {
        function RouterModule(routerService) {
            // Declared but never used is intended: to always have a instance of RouterService.
        }
        RouterModule_1 = RouterModule;
        RouterModule.providers = function () {
            return [
                ContextRouteGuard,
                RouterTabsResolver,
                RouterService
            ];
        };
        RouterModule.forRoot = function () {
            return {
                ngModule: RouterModule_1,
                providers: RouterModule_1.providers()
            };
        };
        var RouterModule_1;
        RouterModule.ctorParameters = function () { return [
            { type: RouterService }
        ]; };
        RouterModule = RouterModule_1 = __decorate([
            core.NgModule({
                declarations: [ContextRouteComponent, EmptyComponent],
                imports: [
                    router.RouterModule.forRoot(routes),
                    HeaderModule,
                    CommonModule
                ],
                entryComponents: [ContextRouteComponent, EmptyComponent]
            })
        ], RouterModule);
        return RouterModule;
    }());

    var QuickLinkComponent = /** @class */ (function () {
        function QuickLinkComponent() {
        }
        __decorate([
            core.Input()
        ], QuickLinkComponent.prototype, "icon", void 0);
        __decorate([
            core.Input()
        ], QuickLinkComponent.prototype, "label", void 0);
        QuickLinkComponent = __decorate([
            core.Component({
                selector: 'c8y-quick-link',
                template: "<div class=\"card-block text-center\" title=\"{{ label | translate }}\">\r\n  <h1 class=\"text-gray-darker\">\r\n    <i [c8yIcon]=\"icon\" class=\"c8y-icon-duocolor\"></i>\r\n  </h1>\r\n  <p class=\"text-muted\">{{ label | translate }}</p>\r\n</div>\r\n"
            })
        ], QuickLinkComponent);
        return QuickLinkComponent;
    }());

    var QuickLinkModule = /** @class */ (function () {
        function QuickLinkModule() {
        }
        QuickLinkModule = __decorate([
            core.NgModule({
                declarations: [QuickLinkComponent],
                imports: [CoreModule],
                exports: [QuickLinkComponent],
                providers: []
            })
        ], QuickLinkModule);
        return QuickLinkModule;
    }());

    var CustomDeviceGridColumn = /** @class */ (function (_super) {
        __extends(CustomDeviceGridColumn, _super);
        function CustomDeviceGridColumn() {
            var _this = _super.call(this) || this;
            var self = _this;
            _this.name = 'custom';
            _this.header = gettext('Custom');
            _this.filterable = true;
            _this.filteringConfig = {
                schema: {
                    type: 'object',
                    properties: {
                        exists: {
                            type: 'boolean',
                            default: false,
                            title: gettext('Only rows where value is defined')
                        },
                        equals: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                },
                form: [
                    {
                        key: 'exists'
                    },
                    {
                        key: 'equals',
                        title: gettext('Only rows where value equals to:'),
                        add: gettext('Or'),
                        items: [
                            {
                                key: 'equals[]',
                                notitle: true,
                                placeholder: gettext('e.g. value, you can use an asterisk (*) as wildcard character')
                            }
                        ]
                    }
                ],
                getFilter: function (model) {
                    var filter = {};
                    if (model.exists) {
                        filter.__has = self.path;
                    }
                    if (model.equals) {
                        filter[self.path] = { __in: model.equals };
                    }
                    return filter;
                }
            };
            _this.sortable = true;
            return _this;
        }
        Object.defineProperty(CustomDeviceGridColumn.prototype, "sortingConfig", {
            get: function () {
                return {
                    pathSortingConfigs: [{ path: this.path }]
                };
            },
            enumerable: true,
            configurable: true
        });
        return CustomDeviceGridColumn;
    }(BaseDeviceGridColumn));

    exports.ActionBarService = ActionBarService;
    exports.ActionService = ActionService;
    exports.AlarmsDeviceGridColumn = AlarmsDeviceGridColumn;
    exports.AlertService = AlertService;
    exports.AppStateService = AppStateService;
    exports.AuthenticationModule = AuthenticationModule;
    exports.BaseDeviceGridColumn = BaseDeviceGridColumn;
    exports.BootstrapComponent = BootstrapComponent;
    exports.BreadcrumbService = BreadcrumbService;
    exports.C8yStepper = C8yStepper;
    exports.C8yStepperButtons = C8yStepperButtons;
    exports.CellRendererContext = CellRendererContext;
    exports.CellRendererDefDirective = CellRendererDefDirective;
    exports.CommonModule = CommonModule;
    exports.ConfirmModalComponent = ConfirmModalComponent;
    exports.ContextRouteComponent = ContextRouteComponent;
    exports.CoreModule = CoreModule;
    exports.CustomDeviceGridColumn = CustomDeviceGridColumn;
    exports.DashboardChildActionComponent = DashboardChildActionComponent;
    exports.DashboardChildChange = DashboardChildChange;
    exports.DashboardChildComponent = DashboardChildComponent;
    exports.DashboardChildTitleComponent = DashboardChildTitleComponent;
    exports.DashboardComponent = DashboardComponent;
    exports.DashboardModule = DashboardModule;
    exports.DataGridComponent = DataGridComponent;
    exports.DataGridModule = DataGridModule;
    exports.DefaultValidationDirective = DefaultValidationDirective;
    exports.DeviceGridComponent = DeviceGridComponent;
    exports.DeviceGridModule = DeviceGridModule;
    exports.DeviceGridService = DeviceGridService;
    exports.DeviceStatusComponent = DeviceStatusComponent;
    exports.DeviceStatusModule = DeviceStatusModule;
    exports.DocsModule = DocsModule;
    exports.DocsService = DocsService;
    exports.DropAreaComponent = DropAreaComponent;
    exports.DropAreaModule = DropAreaModule;
    exports.DynamicComponentComponent = DynamicComponentComponent;
    exports.DynamicComponentModule = DynamicComponentModule;
    exports.DynamicComponentService = DynamicComponentService;
    exports.EmptyComponent = EmptyComponent;
    exports.FormGroupComponent = FormGroupComponent;
    exports.FormsModule = FormsModule;
    exports.GroupDeviceGridColumn = GroupDeviceGridColumn;
    exports.GuideDocsComponent = GuideDocsComponent;
    exports.GuideHrefDirective = GuideHrefDirective;
    exports.HOOK_ACTION = HOOK_ACTION;
    exports.HOOK_ACTION_BAR = HOOK_ACTION_BAR;
    exports.HOOK_BREADCRUMB = HOOK_BREADCRUMB;
    exports.HOOK_COMPONENT = HOOK_COMPONENT;
    exports.HOOK_COMPONENTS = HOOK_COMPONENTS;
    exports.HOOK_DOCS = HOOK_DOCS;
    exports.HOOK_NAVIGATOR_NODES = HOOK_NAVIGATOR_NODES;
    exports.HOOK_ONCE_ROUTE = HOOK_ONCE_ROUTE;
    exports.HOOK_OPTIONS = HOOK_OPTIONS;
    exports.HOOK_PATTERN_MESSAGES = HOOK_PATTERN_MESSAGES;
    exports.HOOK_SEARCH = HOOK_SEARCH;
    exports.HOOK_TABS = HOOK_TABS;
    exports.HeaderBarComponent = HeaderBarComponent;
    exports.HeaderCellRendererDefDirective = HeaderCellRendererDefDirective;
    exports.HeaderModule = HeaderModule;
    exports.HeaderService = HeaderService;
    exports.HighlightComponent = HighlightComponent;
    exports.HumanizeAppNamePipe = HumanizeAppNamePipe;
    exports.HumanizePipe = HumanizePipe;
    exports.ICON_LIST = ICON_LIST;
    exports.ImeiDeviceGridColumn = ImeiDeviceGridColumn;
    exports.InputGroupListComponent = InputGroupListComponent;
    exports.JsonValidationPrettifierDirective = JsonValidationPrettifierDirective;
    exports.ListGroupComponent = ListGroupComponent;
    exports.ListGroupModule = ListGroupModule;
    exports.LoginService = LoginService;
    exports.MaxValidationDirective = MaxValidationDirective;
    exports.MessageDirective = MessageDirective;
    exports.MessagesComponent = MessagesComponent;
    exports.MinValidationDirective = MinValidationDirective;
    exports.ModalModule = ModalModule;
    exports.ModalService = ModalService;
    exports.ModelDeviceGridColumn = ModelDeviceGridColumn;
    exports.NameDeviceGridColumn = NameDeviceGridColumn;
    exports.NavigatorIconComponent = NavigatorIconComponent;
    exports.NavigatorItemComponent = NavigatorItemComponent;
    exports.NavigatorNode = NavigatorNode;
    exports.NavigatorNodeRoot = NavigatorNodeRoot;
    exports.NavigatorService = NavigatorService;
    exports.NewPasswordComponent = NewPasswordComponent;
    exports.OptionsService = OptionsService;
    exports.PasswordCheckListComponent = PasswordCheckListComponent;
    exports.PasswordConfirm = PasswordConfirm;
    exports.PasswordConfirmModalComponent = PasswordConfirmModalComponent;
    exports.PasswordService = PasswordService;
    exports.PasswordStrengthCheckerService = PasswordStrengthCheckerService;
    exports.PasswordStrengthComponent = PasswordStrengthComponent;
    exports.PhoneValidationDirective = PhoneValidationDirective;
    exports.PopoverConfirmComponent = PopoverConfirmComponent;
    exports.QuickLinkModule = QuickLinkModule;
    exports.RegistrationDateDeviceGridColumn = RegistrationDateDeviceGridColumn;
    exports.RouterModule = RouterModule;
    exports.RouterService = RouterService;
    exports.SchemaFormComponent = SchemaFormComponent;
    exports.SearchModule = SearchModule;
    exports.SearchService = SearchService;
    exports.SelectComponent = SelectComponent;
    exports.SelectModule = SelectModule;
    exports.SerialNumberDeviceGridColumn = SerialNumberDeviceGridColumn;
    exports.SmsChallengeComponent = SmsChallengeComponent;
    exports.StateService = StateService;
    exports.StatusDeviceGridColumn = StatusDeviceGridColumn;
    exports.StepperModule = StepperModule;
    exports.SystemIdDeviceGridColumn = SystemIdDeviceGridColumn;
    exports.TabsService = TabsService;
    exports.TextAreaRowHeightDirective = TextAreaRowHeightDirective;
    exports.TitleComponent = TitleComponent;
    exports.TotpChallengeComponent = TotpChallengeComponent;
    exports.TotpSetupComponent = TotpSetupComponent;
    exports.TranslateService = TranslateService;
    exports.TypeaheadComponent = TypeaheadComponent;
    exports.UserMenuService = UserMenuService;
    exports.UserTotpRevokeComponent = UserTotpRevokeComponent;
    exports.ValidationPattern = ValidationPattern;
    exports.WidgetsDashboardComponent = WidgetsDashboardComponent;
    exports._ = _;
    exports.deviceAvailabilityIconMap = deviceAvailabilityIconMap;
    exports.fromFactories = fromFactories;
    exports.fromTrigger = fromTrigger;
    exports.getActivatedRoute = getActivatedRoute;
    exports.gettext = gettext;
    exports.initializeServices = initializeServices;
    exports.minColumnGridTrackSize = minColumnGridTrackSize;
    exports.operationStatusClasses = operationStatusClasses;
    exports.operationStatusIcons = operationStatusIcons;
    exports.ratiosByColumnTypes = ratiosByColumnTypes;
    exports.resolveInjectedFactories = resolveInjectedFactories;
    exports.routes = routes;
    exports.sortByPriority = sortByPriority;
    exports.stateToFactory = stateToFactory;
    exports.statusAlert = statusAlert;
    exports.statusClasses = statusClasses;
    exports.statusIcons = statusIcons;
    exports.tooltips = tooltips;
    exports.ɵ0 = ɵ0;
    exports.ɵa = ApplicationOptions;
    exports.ɵb = translateLoaderFactory;
    exports.ɵba = ActionOutletComponent;
    exports.ɵbb = ActionComponent;
    exports.ɵbc = AlertModule;
    exports.ɵbd = AlertOutletComponent;
    exports.ɵbe = AlertComponent;
    exports.ɵbf = AlertDetailsComponent;
    exports.ɵbg = AlertTextComponent;
    exports.ɵbh = BootstrapModule;
    exports.ɵbi = CookieBannerComponent;
    exports.ɵbj = TitleOutletComponent;
    exports.ɵbk = AppIconComponent;
    exports.ɵbl = AppSwitcherComponent;
    exports.ɵbm = RightDrawerComponent;
    exports.ɵbn = UserModule;
    exports.ɵbo = UserMenuOutletComponent;
    exports.ɵbp = UserEditComponent;
    exports.ɵbq = UserEditModalComponent;
    exports.ɵbr = UserMenuItemComponent;
    exports.ɵbs = UserTotpSetupComponent;
    exports.ɵbt = InputGroupListContainerDirective;
    exports.ɵbu = RequiredInputPlaceholderDirective;
    exports.ɵbv = IpRangeInputListComponent;
    exports.ɵbw = FilterInputComponent;
    exports.ɵbx = ModalComponent;
    exports.ɵby = SearchOutletComponent;
    exports.ɵbz = SearchComponent;
    exports.ɵc = localePathFactory;
    exports.ɵca = BreadcrumbModule;
    exports.ɵcb = BreadcrumbComponent;
    exports.ɵcc = BreadcrumbItemComponent;
    exports.ɵcd = BreadcrumbOutletComponent;
    exports.ɵce = NavigatorModule;
    exports.ɵcf = NavigatorOutletComponent;
    exports.ɵcg = NavigatorNodeComponent;
    exports.ɵch = LoginModule;
    exports.ɵci = LoginComponent;
    exports.ɵcj = RecoverPasswordComponent;
    exports.ɵck = ChangePasswordComponent;
    exports.ɵcl = CredentialsComponent;
    exports.ɵcm = TotpAuthComponent;
    exports.ɵcn = TabsModule;
    exports.ɵco = TabsOutletComponent;
    exports.ɵcp = TabComponent;
    exports.ɵcq = CellRendererComponent;
    exports.ɵcr = FilteringFormRendererDefDirective;
    exports.ɵcs = FilteringFormRendererComponent;
    exports.ɵct = ColumnDirective;
    exports.ɵcu = FilteringFormComponent;
    exports.ɵcv = StatusCellRendererComponent;
    exports.ɵcw = NameCellRendererComponent;
    exports.ɵcx = ModelCellRendererComponent;
    exports.ɵcy = SerialNumberCellRendererComponent;
    exports.ɵcz = GroupCellRendererComponent;
    exports.ɵd = languagesFactory;
    exports.ɵda = RegistrationDateCellRendererComponent;
    exports.ɵdb = AlarmsCellRendererComponent;
    exports.ɵdc = ListItemComponent;
    exports.ɵdd = ListItemFooterComponent;
    exports.ɵde = ListItemActionComponent;
    exports.ɵdf = ListItemCollapseComponent;
    exports.ɵdg = ListItemIconComponent;
    exports.ɵdh = ListItemBodyComponent;
    exports.ɵdi = ListItemCheckboxComponent;
    exports.ɵdj = ListItemRadioComponent;
    exports.ɵdk = C8yStepperIcon;
    exports.ɵdl = C8yStepperProgress;
    exports.ɵdn = RouterTabsResolver;
    exports.ɵdo = ContextRouteGuard;
    exports.ɵdp = QuickLinkComponent;
    exports.ɵe = localeId;
    exports.ɵf = I18nModule;
    exports.ɵg = MESSAGES;
    exports.ɵh = LOCALE_PATH;
    exports.ɵi = LANGUAGES;
    exports.ɵj = TranslateCustomLoader;
    exports.ɵk = TranslateParserCustom;
    exports.ɵl = MissingTranslationCustomHandler;
    exports.ɵm = PatternMessagesService;
    exports.ɵn = IconDirective;
    exports.ɵo = ICONS;
    exports.ɵp = OutletDirective;
    exports.ɵq = ShortenUserNamePipe;
    exports.ɵr = ForOfDirective;
    exports.ɵs = LoadMoreComponent;
    exports.ɵt = MapFunctionPipe;
    exports.ɵu = ProgressBarComponent;
    exports.ɵv = UserPreferencesService;
    exports.ɵw = ActionBarModule;
    exports.ɵx = ActionBarComponent;
    exports.ɵy = ActionBarItemComponent;
    exports.ɵz = ActionModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=c8y-ngx-components.umd.js.map
