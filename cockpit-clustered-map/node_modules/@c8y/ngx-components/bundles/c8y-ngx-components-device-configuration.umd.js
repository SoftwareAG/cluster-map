(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('@angular/router'), require('@c8y/client'), require('@ngx-translate/core'), require('ngx-bootstrap/tooltip'), require('file-saver/FileSaver'), require('ngx-bootstrap/modal'), require('lodash-es')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/device-configuration', ['exports', '@angular/core', '@c8y/ngx-components', '@angular/router', '@c8y/client', '@ngx-translate/core', 'ngx-bootstrap/tooltip', 'file-saver/FileSaver', 'ngx-bootstrap/modal', 'lodash-es'], factory) :
    (global = global || self, factory((global.c8y = global.c8y || {}, global.c8y['ngx-components'] = global.c8y['ngx-components'] || {}, global.c8y['ngx-components']['device-configuration'] = {}), global.ng.core, global.c8y['ngx-components'], global.ng.router, global.client, global.core$1, global.tooltip, global.FileSaver, global.modal, global.lodashEs));
}(this, (function (exports, core, ngxComponents, router, client, core$1, tooltip, FileSaver, modal, lodashEs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var DeviceConfigurationService = /** @class */ (function () {
        function DeviceConfigurationService(eventService, eventBinaryService, operationService, alertService, inventoryService, inventoryBinaryService, translateService) {
            this.eventService = eventService;
            this.eventBinaryService = eventBinaryService;
            this.operationService = operationService;
            this.alertService = alertService;
            this.inventoryService = inventoryService;
            this.inventoryBinaryService = inventoryBinaryService;
            this.translateService = translateService;
            this.dateFrom = new Date(0);
            this.dateTo = new Date(Date.now() + 86400000); // 1 day in the future
            this.repositoryConfigListUpdated = new core.EventEmitter();
        }
        DeviceConfigurationService.prototype.getLatestConfigurationEvent = function (deviceId, type) {
            return __awaiter(this, void 0, void 0, function () {
                var filter, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filter = {
                                source: deviceId,
                                type: type,
                                dateFrom: this.dateFrom.toISOString(),
                                dateTo: this.dateTo.toISOString(),
                                pageSize: 1
                            };
                            return [4 /*yield*/, this.eventService.list(filter)];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data[0]];
                    }
                });
            });
        };
        DeviceConfigurationService.prototype.getEventConfigurationBinary = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var binary, res, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.eventBinaryService.download(event)];
                        case 1:
                            res = _a.sent();
                            binary = res.text();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            this.alertService.addServerFailure(ex_1);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/, binary];
                    }
                });
            });
        };
        DeviceConfigurationService.prototype.createUploadConfigFileOperation = function (device, configurationType) {
            return __awaiter(this, void 0, void 0, function () {
                var operation, operationText, operationCfg, data, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationText = ngxComponents.gettext('Retrieve {{ configurationType }} configuration snapshot from device {{ deviceName }}');
                            operationCfg = {
                                deviceId: device.id,
                                c8y_UploadConfigFile: {
                                    type: configurationType
                                },
                                description: this.translateService.instant(operationText, {
                                    configurationType: configurationType,
                                    deviceName: device.name
                                })
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.operationService.create(operationCfg)];
                        case 2:
                            data = (_a.sent()).data;
                            operation = data;
                            return [3 /*break*/, 4];
                        case 3:
                            ex_2 = _a.sent();
                            this.alertService.addServerFailure(ex_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, operation];
                    }
                });
            });
        };
        DeviceConfigurationService.prototype.getLatestConfigFileOperation = function (deviceId, configType, operationType) {
            return __awaiter(this, void 0, void 0, function () {
                var filter, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filter = {
                                deviceId: deviceId,
                                fragmentType: operationType,
                                dateFrom: this.dateFrom.toISOString(),
                                dateTo: this.dateTo.toISOString(),
                                revert: true,
                                pageSize: 2000
                            };
                            return [4 /*yield*/, this.operationService.list(filter)];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data.find(function (op) { return op[operationType].type === configType; })];
                    }
                });
            });
        };
        DeviceConfigurationService.prototype.getSnapshotsFromRepository = function (deviceType, configurationType) {
            return __awaiter(this, void 0, void 0, function () {
                var query, filter, deviceTypeFilter;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filter = {
                                pageSize: 2000,
                                withTotalPages: true
                            };
                            query = {
                                __filter: {
                                    __and: [
                                        {
                                            type: 'c8y_ConfigurationDump'
                                        },
                                        {
                                            __or: [
                                                { configurationType: { __eq: configurationType } },
                                                {
                                                    __not: {
                                                        __has: 'configurationType'
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                __orderby: [{ configurationType: -1, name: 1 }]
                            };
                            if (deviceType) {
                                deviceTypeFilter = {
                                    __or: [
                                        { deviceType: { __eq: deviceType } },
                                        {
                                            __not: {
                                                __has: 'deviceType'
                                            }
                                        }
                                    ]
                                };
                                query.__filter.__and.push(deviceTypeFilter);
                            }
                            return [4 /*yield*/, this.inventoryService.listQuery(query, filter)];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            });
        };
        DeviceConfigurationService.prototype.createDownloadConfigFileOperation = function (device, configurationType, binaryUrl) {
            return __awaiter(this, void 0, void 0, function () {
                var operation, operationText, operationCfg, data, ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationText = ngxComponents.gettext('Send configuration {{ configurationType }} to device {{ deviceName }}');
                            operationCfg = {
                                deviceId: device.id,
                                c8y_DownloadConfigFile: {
                                    url: binaryUrl,
                                    type: configurationType
                                },
                                description: this.translateService.instant(operationText, {
                                    configurationType: configurationType,
                                    deviceName: device.name
                                })
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.operationService.create(operationCfg)];
                        case 2:
                            data = (_a.sent()).data;
                            operation = data;
                            return [3 /*break*/, 4];
                        case 3:
                            ex_3 = _a.sent();
                            this.alertService.addServerFailure(ex_3);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, operation];
                    }
                });
            });
        };
        DeviceConfigurationService.prototype.getConfigurationBinaryFile = function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var binary, moId, binaryMO, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            moId = this.inventoryBinaryService.getIdFromUrl(url);
                            if (!moId) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.inventoryService.detail(moId)];
                        case 1:
                            binaryMO = (_a.sent()).data;
                            return [4 /*yield*/, this.inventoryBinaryService.download(binaryMO)];
                        case 2:
                            res = _a.sent();
                            return [4 /*yield*/, res.text()];
                        case 3:
                            binary = _a.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            binary = this.fetchExternalBinary(url);
                            _a.label = 5;
                        case 5: return [2 /*return*/, binary];
                    }
                });
            });
        };
        DeviceConfigurationService.prototype.saveToConfigurationRepository = function (config) {
            return __awaiter(this, void 0, void 0, function () {
                var mo, response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mo = {};
                            Object.assign(mo, {
                                name: config.name,
                                type: 'c8y_ConfigurationDump',
                                deviceType: config.deviceType,
                                configurationType: config.configurationType,
                                c8y_Global: {}
                            });
                            return [4 /*yield*/, this.inventoryBinaryService.create(new Blob([config.binary]), {
                                    c8y_Global: {}
                                })];
                        case 1:
                            response = _a.sent();
                            mo.url = response.data.self;
                            return [2 /*return*/, this.inventoryService.create(mo)];
                    }
                });
            });
        };
        DeviceConfigurationService.prototype.updateRepositoryConfigList = function () {
            this.repositoryConfigListUpdated.emit();
        };
        DeviceConfigurationService.prototype.fetchExternalBinary = function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var configBinary, res, ex_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            return [4 /*yield*/, fetch(url)];
                        case 1:
                            res = _a.sent();
                            if (!(res.status === 200)) return [3 /*break*/, 3];
                            return [4 /*yield*/, res.text()];
                        case 2:
                            configBinary = _a.sent();
                            _a.label = 3;
                        case 3: return [3 /*break*/, 5];
                        case 4:
                            ex_4 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/, configBinary];
                    }
                });
            });
        };
        DeviceConfigurationService.ctorParameters = function () { return [
            { type: client.EventService },
            { type: client.EventBinaryService },
            { type: client.OperationService },
            { type: ngxComponents.AlertService },
            { type: client.InventoryService },
            { type: client.InventoryBinaryService },
            { type: core$1.TranslateService }
        ]; };
        DeviceConfigurationService = __decorate([
            core.Injectable()
        ], DeviceConfigurationService);
        return DeviceConfigurationService;
    }());

    var DeviceConfigurationComponent = /** @class */ (function () {
        function DeviceConfigurationComponent(route, deviceConfigurationService, realtime) {
            var _this = this;
            this.route = route;
            this.deviceConfigurationService = deviceConfigurationService;
            this.realtime = realtime;
            this.configSnapshot = {};
            this.deviceConfigurationService.repositoryConfigListUpdated.subscribe(function () { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.repositorySnapshot = undefined;
                            _a = this;
                            return [4 /*yield*/, this.getSnapshotsFromRepository(this.device.type, this.configurationType)];
                        case 1:
                            _a.repositorySnapshots = _b.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        }
        DeviceConfigurationComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.device = this.route.snapshot.parent.data.contextData;
            this.supportedConfigurations = this.device.c8y_SupportedConfigurations.map(function (item) { return ({
                name: item
            }); });
            this.repositorySnapshotsEmptyState = {
                icon: 'gears',
                title: ngxComponents.gettext('No configurations available.'),
                text: ngxComponents.gettext('Add configuration to configuration repository')
            };
            var eventsChannel = '/eventsWithChildren/' + this.device.id;
            this.eventsSubscription = this.realtime.observable(eventsChannel).subscribe(function (_a) {
                var data = _a.data;
                _this.updateConfigSnapshotOnEvent(data);
            });
        };
        DeviceConfigurationComponent.prototype.onConfigTypeSelected = function (config) {
            return __awaiter(this, void 0, void 0, function () {
                var configEvent, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.configurationType = undefined;
                            this.repositorySnapshot = undefined;
                            this.configSnapshot = {};
                            return [4 /*yield*/, this.deviceConfigurationService.getLatestConfigurationEvent(this.device.id, config.name)];
                        case 1:
                            configEvent = _b.sent();
                            this.updateConfigSnapshotOnEvent(configEvent, config.name);
                            this.configurationType = config.name;
                            _a = this;
                            return [4 /*yield*/, this.getSnapshotsFromRepository(this.device.type, config.name)];
                        case 2:
                            _a.repositorySnapshots = _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        DeviceConfigurationComponent.prototype.getSnapshotsFromRepository = function (deviceType, configurationType) {
            return this.deviceConfigurationService.getSnapshotsFromRepository(deviceType, configurationType);
        };
        DeviceConfigurationComponent.prototype.updateConfigSnapshotOnEvent = function (event, configurationType) {
            return __awaiter(this, void 0, void 0, function () {
                var type, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            type = configurationType || this.configurationType;
                            if (!(event && event.type === type)) return [3 /*break*/, 2];
                            this.configSnapshot = {
                                time: event.time,
                                name: event.text,
                                deviceType: this.device.deviceType,
                                configurationType: type
                            };
                            _a = this.configSnapshot;
                            return [4 /*yield*/, this.deviceConfigurationService.getEventConfigurationBinary(event)];
                        case 1:
                            _a.binary = _b.sent();
                            _b.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceConfigurationComponent.prototype.onRepositoryConfigSelected = function (config) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.repositorySnapshot = {
                                time: config.creationTime,
                                name: config.name,
                                binaryUrl: config.url,
                                deviceType: config.deviceType,
                                configurationType: config.configurationType
                            };
                            if (!config.url) return [3 /*break*/, 2];
                            _a = this.repositorySnapshot;
                            return [4 /*yield*/, this.deviceConfigurationService.getConfigurationBinaryFile(config.url)];
                        case 1:
                            _a.binary = _b.sent();
                            _b.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        DeviceConfigurationComponent.prototype.ngOnDestroy = function () {
            this.eventsSubscription.unsubscribe();
        };
        DeviceConfigurationComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute },
            { type: DeviceConfigurationService },
            { type: client.Realtime }
        ]; };
        DeviceConfigurationComponent = __decorate([
            core.Component({
                selector: 'c8y-device-configuration',
                template: "<div class=\"card card--grid card--grid--fullpage grid__col--4-8 grid__row--6-6\">\n  <!-- DEVICE SUPPORTED CONFIGURATIONS -->\n  <div class=\"card--grid__inner-scroll\">\n    <div class=\"card-header separator\">\n      <h4 class=\"card-title\" translate>Configurations</h4>\n    </div>\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\"><span translate>Device-supported configurations</span></h5>\n    </div>\n    <div class=\"p-r-16\">\n      <c8y-device-configuration-list\n        [items]=\"supportedConfigurations\"\n        [itemIcon]=\"'gears'\"\n        (configSelected)=\"onConfigTypeSelected($event)\"\n      ></c8y-device-configuration-list>\n    </div>\n  </div>\n\n  <!-- CONFIGURATION PREVIEW -->\n  <div class=\"card--grid__inner-scroll bg-gray-lighter\">\n    <div class=\"card-header separator bg-gray-lighter hidden-xs hidden-sm\">\n      <h4>&nbsp;</h4>\n    </div>\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\"><span translate>Preview</span></h5>\n\n      <!-- EMPTY STATE -->\n      <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n        <h1 [c8yIcon]=\"'file-text'\"></h1>\n        <p>\n          <strong translate>No configuration selected.</strong><br />\n          <small translate>Select a configuration to preview</small>\n        </p>\n      </div>\n\n      <!-- PREVIEW AVAILABLE STATE -->\n      <c8y-device-configuration-preview\n        *ngIf=\"configurationType\"\n        [device]=\"device\"\n        [configurationType]=\"configurationType\"\n        [configSnapshot]=\"configSnapshot\"\n        [canSaveSnapshot]=\"true\"\n        [operationToTrigger]=\"'c8y_UploadConfigFile'\"\n        [actionButtonText]=\"'Get snapshot from device' | translate\"\n        [actionButtonIcon]=\"'download'\"\n      ></c8y-device-configuration-preview>\n    </div>\n  </div>\n\n  <!-- AVAILABLE SUPPORTED CONFIGURATIONS -->\n  <div class=\"card--grid__inner-scroll\">\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\" translate>Available supported configurations</h5>\n    </div>\n\n    <!-- EMPTY STATE -->\n    <div class=\"c8y-empty-state text-left\" *ngIf=\"!configurationType\">\n      <h1 [c8yIcon]=\"'gears'\"></h1>\n      <p>\n        <strong translate>No selection</strong><br />\n        <small translate>Select a configuration from the device-supported configuration list</small>\n      </p>\n    </div>\n    <div class=\"p-r-16\" *ngIf=\"configurationType\">\n      <c8y-device-configuration-list\n        [items]=\"repositorySnapshots\"\n        [itemIcon]=\"'file-text'\"\n        [emptyState]=\"repositorySnapshotsEmptyState\"\n        [isFilterEnabled]=\"true\"\n        (configSelected)=\"onRepositoryConfigSelected($event)\"\n      ></c8y-device-configuration-list>\n    </div>\n  </div>\n\n  <!-- CONFIGURATION PREVIEW -->\n  <div class=\"card--grid__inner-scroll bg-gray-lighter\">\n    <div class=\"card-block\">\n      <h5 class=\"legend form-block\" translate>Preview</h5>\n\n      <!-- EMPTY STATE -->\n\n      <div class=\"c8y-empty-state text-left\" *ngIf=\"!repositorySnapshot\">\n        <h1 [c8yIcon]=\"'file-text'\"></h1>\n        <p>\n          <strong translate>No configuration selected.</strong><br />\n          <small *ngIf=\"!configurationType; else noSnapshot\" translate\n            >Select a configuration to preview</small\n          >\n          <ng-template #noSnapshot>\n            <small translate>Select the configuration you want to preview</small>\n          </ng-template>\n        </p>\n      </div>\n\n      <!-- CONFIGURATION SELECTED STATE -->\n      <c8y-device-configuration-preview\n        *ngIf=\"repositorySnapshot\"\n        [device]=\"device\"\n        [configurationType]=\"configurationType\"\n        [configSnapshot]=\"repositorySnapshot\"\n        [operationToTrigger]=\"'c8y_DownloadConfigFile'\"\n        [actionButtonText]=\"'Send configuration to device' | translate\"\n        [actionButtonIcon]=\"'upload'\"\n      ></c8y-device-configuration-preview>\n    </div>\n  </div>\n</div>\n"
            })
        ], DeviceConfigurationComponent);
        return DeviceConfigurationComponent;
    }());

    var ConfigurationListComponent = /** @class */ (function () {
        function ConfigurationListComponent() {
            this.configSelected = new core.EventEmitter();
            this.filterTerm = '';
        }
        ConfigurationListComponent.prototype.showConfigurationTypePreview = function (config) {
            this.selectedConfig = config;
            this.configSelected.emit(config);
        };
        ConfigurationListComponent.prototype.updatePipe = function (filterTerm) {
            this.filterTerm = filterTerm;
        };
        __decorate([
            core.Input()
        ], ConfigurationListComponent.prototype, "items", void 0);
        __decorate([
            core.Input()
        ], ConfigurationListComponent.prototype, "itemIcon", void 0);
        __decorate([
            core.Input()
        ], ConfigurationListComponent.prototype, "emptyState", void 0);
        __decorate([
            core.Input()
        ], ConfigurationListComponent.prototype, "isFilterEnabled", void 0);
        __decorate([
            core.Output()
        ], ConfigurationListComponent.prototype, "configSelected", void 0);
        ConfigurationListComponent = __decorate([
            core.Component({
                selector: 'c8y-device-configuration-list',
                template: "<div class=\"left-p-md bottom-p-xs\" *ngIf=\"isFilterEnabled\">\n  <c8y-filter [icon]=\"'search'\" (onSearch)=\"updatePipe($event)\"></c8y-filter>\n</div>\n\n<!-- EMPTY STATE -->\n<div class=\"c8y-empty-state text-left\" *ngIf=\"items?.length === 0\">\n  <h1 [c8yIcon]=\"emptyState.icon\"></h1>\n  <p>\n    <strong>{{ emptyState.title | translate }}</strong\n    ><br />\n    <small>{{ emptyState.text | translate }}</small>\n  </p>\n</div>\n\n<!-- CONFIGURATIONS AVAILABLE -->\n<div class=\"c8y-nav-stacked\">\n  <div\n    class=\"c8y-stacked-item flex-row\"\n    [class.active]=\"config === selectedConfig\"\n    *ngFor=\"let config of items | configurationFilterPipe: filterTerm\"\n    (click)=\"showConfigurationTypePreview(config)\"\n  >\n    <div class=\"list-item-icon\">\n      <i [c8yIcon]=\"itemIcon\"></i>\n    </div>\n    <div class=\"list-item-body text-truncate\">\n      <span>{{ config.name }}</span>\n      <span class=\"text-uppercase text-gray-light pull-right\">{{ config.deviceType }}</span>\n    </div>\n  </div>\n</div>\n\n<!-- for Carlos: config.configurationType to differentiate whether a config matches configuration type. -->\n"
            })
        ], ConfigurationListComponent);
        return ConfigurationListComponent;
    }());

    var ConfigurationOperationComponent = /** @class */ (function () {
        function ConfigurationOperationComponent() {
        }
        ConfigurationOperationComponent.prototype.ngOnInit = function () {
            this.statusIcons = ngxComponents.operationStatusIcons;
            this.statusClasses = ngxComponents.operationStatusClasses;
        };
        __decorate([
            core.Input()
        ], ConfigurationOperationComponent.prototype, "operation", void 0);
        ConfigurationOperationComponent = __decorate([
            core.Component({
                selector: 'c8y-device-configuration-operation',
                template: "<div class=\"card\">\n  <div class=\"list-group list-group-links\">\n    <a class=\"list-group-item flex-row\" href=\"#/device/{{ operation.deviceId }}/control\">\n      <div class=\"list-item-icon\">\n        <i\n          [c8yIcon]=\"statusIcons[operation.status]\"\n          [ngClass]=\"statusClasses[operation.status]\"\n          [tooltip]=\"operation.status | translate\"\n          tooltip-placement=\"right\"\n        ></i>\n      </div>\n      <div class=\"list-item-body\">\n        <div class=\"flex-row row\">\n          <span class=\"col-sm-8\">{{ operation.description | translate }}</span>\n          <div class=\"col-sm-4 text-muted\">\n            <i c8yIcon=\"calendar\"></i>&nbsp;\n            <small>{{ operation.creationTime | date: 'medium' }}</small>\n          </div>\n        </div>\n      </div>\n    </a>\n  </div>\n</div>\n"
            })
        ], ConfigurationOperationComponent);
        return ConfigurationOperationComponent;
    }());

    var SourceCodePreviewComponent = /** @class */ (function () {
        function SourceCodePreviewComponent() {
        }
        __decorate([
            core.Input()
        ], SourceCodePreviewComponent.prototype, "isDisabled", void 0);
        __decorate([
            core.Input()
        ], SourceCodePreviewComponent.prototype, "text", void 0);
        SourceCodePreviewComponent = __decorate([
            core.Component({
                selector: 'c8y-source-code-preview',
                template: "<textarea [disabled]=\"isDisabled\" class=\"form-control no-resize\" rows=\"8\">{{ text }}</textarea>\n"
            })
        ], SourceCodePreviewComponent);
        return SourceCodePreviewComponent;
    }());

    var DeviceConfigurationGuard = /** @class */ (function () {
        function DeviceConfigurationGuard() {
        }
        DeviceConfigurationGuard.prototype.canActivate = function (route, state) {
            var contextData = route.data.contextData || route.parent.data.contextData;
            return (contextData &&
                contextData.c8y_SupportedConfigurations &&
                contextData.c8y_SupportedConfigurations.length > 0);
        };
        return DeviceConfigurationGuard;
    }());

    var DeviceConfigurationOperation;
    (function (DeviceConfigurationOperation) {
        DeviceConfigurationOperation["UPLOAD_CONFIG"] = "c8y_UploadConfigFile";
        DeviceConfigurationOperation["DOWNLOAD_CONFIG"] = "c8y_DownloadConfigFile";
    })(DeviceConfigurationOperation || (DeviceConfigurationOperation = {}));

    var SaveToRepositoryComponent = /** @class */ (function () {
        function SaveToRepositoryComponent(modal, alertService, deviceConfigurationService) {
            var _this = this;
            this.modal = modal;
            this.alertService = alertService;
            this.deviceConfigurationService = deviceConfigurationService;
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
        }
        SaveToRepositoryComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.deviceConfigurationService.saveToConfigurationRepository(this.configSnapshot)];
                        case 1:
                            _a.sent();
                            this.alertService.success(ngxComponents.gettext('Configuration saved.'));
                            this._save();
                            return [3 /*break*/, 3];
                        case 2:
                            ex_1 = _a.sent();
                            if (ex_1.data) {
                                this.alertService.danger(ex_1.data.message);
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        SaveToRepositoryComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
        SaveToRepositoryComponent.ctorParameters = function () { return [
            { type: modal.BsModalRef },
            { type: ngxComponents.AlertService },
            { type: DeviceConfigurationService }
        ]; };
        SaveToRepositoryComponent = __decorate([
            core.Component({
                selector: 'c8y-save-config-to-configuration-repository',
                template: "<div class=\"modal-header bg-primary text-center text-white\">\n  <div style=\"font-size: 62px;\">\n    <span c8yIcon=\"gears\"></span>\n  </div>\n  <h4 class=\"text-uppercase\" translate>\n    Save configuration\n  </h4>\n</div>\n<div class=\"modal-body\">\n  <form #saveConfigurationSnapshot=\"ngForm\" class=\"p-t-24\">\n    <c8y-form-group>\n      <label translate for=\"name\">Name</label>\n      <input\n        id=\"name\"\n        type=\"text\"\n        class=\"form-control\"\n        autocomplete=\"off\"\n        name=\"name\"\n        [(ngModel)]=\"configSnapshot.name\"\n        required\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"deviceType\">Device type</label>\n      <input\n        id=\"deviceType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"deviceType\"\n        [(ngModel)]=\"configSnapshot.deviceType\"\n      />\n    </c8y-form-group>\n    <c8y-form-group>\n      <label translate for=\"configurationType\">Configuration type</label>\n      <input\n        id=\"configurationType\"\n        class=\"form-control\"\n        rows=\"6\"\n        name=\"configurationType\"\n        [(ngModel)]=\"configSnapshot.configurationType\"\n      />\n    </c8y-form-group>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n    Cancel\n  </button>\n\n  <button\n    title=\"{{ 'Add certificate' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"saveConfigurationSnapshot.form.invalid\"\n    translate\n  >\n    Save\n  </button>\n</div>\n"
            })
        ], SaveToRepositoryComponent);
        return SaveToRepositoryComponent;
    }());

    var ConfigurationPreviewComponent = /** @class */ (function () {
        function ConfigurationPreviewComponent(deviceConfigurationService, realtime, bsModal, user, appState) {
            this.deviceConfigurationService = deviceConfigurationService;
            this.realtime = realtime;
            this.bsModal = bsModal;
            this.user = user;
            this.appState = appState;
        }
        ConfigurationPreviewComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var configOperation, operationsChannel;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.operationToTrigger === DeviceConfigurationOperation.UPLOAD_CONFIG)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.getOperation()];
                        case 1:
                            configOperation = _a.sent();
                            this.updateOperation(configOperation);
                            _a.label = 2;
                        case 2:
                            operationsChannel = "/operations/" + this.device.id;
                            this.operationsSubscription = this.realtime
                                .observable(operationsChannel)
                                .subscribe(function (_a) {
                                var data = _a.data;
                                _this.updateOperation(data);
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationPreviewComponent.prototype.createDeviceOperation = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!(this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG)) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, this.deviceConfigurationService.createDownloadConfigFileOperation(this.device, this.configurationType, this.configSnapshot.binaryUrl)];
                        case 1:
                            _a.operation = _c.sent();
                            _c.label = 2;
                        case 2:
                            if (!(this.operationToTrigger === DeviceConfigurationOperation.UPLOAD_CONFIG)) return [3 /*break*/, 4];
                            _b = this;
                            return [4 /*yield*/, this.deviceConfigurationService.createUploadConfigFileOperation(this.device, this.configurationType)];
                        case 3:
                            _b.operation = _c.sent();
                            _c.label = 4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationPreviewComponent.prototype.showOperation = function () {
            if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
                return !!this.operation;
            }
            return (this.operation &&
                [client.OperationStatus.PENDING, client.OperationStatus.EXECUTING, client.OperationStatus.FAILED].includes(this.operation.status));
        };
        ConfigurationPreviewComponent.prototype.showBinary = function () {
            if (this.operationToTrigger === DeviceConfigurationOperation.DOWNLOAD_CONFIG) {
                return true;
            }
            return !this.showOperation();
        };
        ConfigurationPreviewComponent.prototype.isCreateOperationDisabled = function () {
            return (this.operation &&
                [client.OperationStatus.PENDING, client.OperationStatus.EXECUTING].includes(this.operation.status));
        };
        ConfigurationPreviewComponent.prototype.updateOperation = function (operation) {
            if (operation &&
                operation[this.operationToTrigger] &&
                operation[this.operationToTrigger].type &&
                operation[this.operationToTrigger].type === this.configurationType) {
                this.operation = operation;
            }
        };
        ConfigurationPreviewComponent.prototype.getOperation = function () {
            return this.deviceConfigurationService.getLatestConfigFileOperation(this.device.id, this.configurationType, this.operationToTrigger);
        };
        ConfigurationPreviewComponent.prototype.download = function () {
            var blob = new Blob([this.configSnapshot.binary]);
            var fileName = this.configSnapshot.name;
            FileSaver.saveAs(blob, fileName);
        };
        ConfigurationPreviewComponent.prototype.saveToRepository = function () {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            initialState = {
                                configSnapshot: lodashEs.cloneDeep(this.configSnapshot)
                            };
                            modal = this.bsModal.show(SaveToRepositoryComponent, {
                                class: 'modal-sm',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            _a.sent();
                            this.deviceConfigurationService.updateRepositoryConfigList();
                            modal.close();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ConfigurationPreviewComponent.prototype.hasPermission = function () {
            return this.user.hasAnyRole(this.appState.currentUser.value, [
                'ROLE_INVENTORY_ADMIN',
                'ROLE_INVENTORY_CREATE'
            ]);
        };
        ConfigurationPreviewComponent.prototype.ngOnDestroy = function () {
            this.operationsSubscription.unsubscribe();
        };
        ConfigurationPreviewComponent.ctorParameters = function () { return [
            { type: DeviceConfigurationService },
            { type: client.Realtime },
            { type: modal.BsModalService },
            { type: client.UserService },
            { type: ngxComponents.AppStateService }
        ]; };
        __decorate([
            core.Input()
        ], ConfigurationPreviewComponent.prototype, "device", void 0);
        __decorate([
            core.Input()
        ], ConfigurationPreviewComponent.prototype, "configurationType", void 0);
        __decorate([
            core.Input()
        ], ConfigurationPreviewComponent.prototype, "configSnapshot", void 0);
        __decorate([
            core.Input()
        ], ConfigurationPreviewComponent.prototype, "canSaveSnapshot", void 0);
        __decorate([
            core.Input()
        ], ConfigurationPreviewComponent.prototype, "actionButtonText", void 0);
        __decorate([
            core.Input()
        ], ConfigurationPreviewComponent.prototype, "actionButtonIcon", void 0);
        __decorate([
            core.Input()
        ], ConfigurationPreviewComponent.prototype, "operationToTrigger", void 0);
        ConfigurationPreviewComponent = __decorate([
            core.Component({
                selector: 'c8y-device-configuration-preview',
                template: "<div *ngIf=\"configSnapshot\">\n  <div class=\"content-flex-55 p-b-16\">\n    <div class=\"col-5 p-t-4\">\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Configuration</span>\n      <span *ngIf=\"configSnapshot.name; else emptyText\">\n        <strong>{{ configSnapshot.name }}</strong>\n      </span>\n      <ng-template #emptyText> --- </ng-template>\n    </div>\n    <div class=\"col-4 p-t-4\">\n      <span class=\"text-label-small text-uppercase m-r-4\" translate>Last updated</span>\n      <small *ngIf=\"configSnapshot.time; else emptyDate\">\n        {{ configSnapshot.time | date: 'medium' }}\n      </small>\n      <ng-template #emptyDate> --- </ng-template>\n    </div>\n    <div class=\"col-3\">\n      <button\n        class=\"btn btn-default btn-sm pull-right\"\n        type=\"button\"\n        title=\"{{ actionButtonText | translate }}\"\n        (click)=\"createDeviceOperation()\"\n        [disabled]=\"isCreateOperationDisabled()\"\n      >\n        <i [c8yIcon]=\"actionButtonIcon\"></i> {{ actionButtonText | translate }}\n      </button>\n    </div>\n  </div>\n  <div class=\"c8y-empty-state text-left\" *ngIf=\"!configSnapshot.binary && showBinary()\">\n    <h1 [c8yIcon]=\"'file-image-o'\"></h1>\n    <p>\n      <strong translate>No preview available.</strong><br />\n      <small translate>Could not fetch the file.</small>\n    </p>\n  </div>\n  <div *ngIf=\"configSnapshot.binary && showBinary()\">\n    <c8y-source-code-preview\n      [text]=\"configSnapshot.binary\"\n      [isDisabled]=\"true\"\n    ></c8y-source-code-preview>\n    <div *ngIf=\"canSaveSnapshot\" class=\"top-p-md\">\n      <button\n        type=\"button\"\n        class=\"btn btn-primary btn-sm pull-right left-m-sm\"\n        (click)=\"download()\"\n        translate\n      >\n        Download\n      </button>\n      <button\n        *ngIf=\"hasPermission()\"\n        type=\"button\"\n        class=\"btn btn-default btn-sm pull-right\"\n        (click)=\"saveToRepository()\"\n        translate\n      >\n        Save to repository\n      </button>\n    </div>\n  </div>\n  <div *ngIf=\"showOperation()\">\n    <c8y-device-configuration-operation\n      [operation]=\"operation\"\n    ></c8y-device-configuration-operation>\n  </div>\n</div>\n"
            })
        ], ConfigurationPreviewComponent);
        return ConfigurationPreviewComponent;
    }());

    var ConfigurationFilterPipe = /** @class */ (function () {
        function ConfigurationFilterPipe() {
        }
        ConfigurationFilterPipe.prototype.transform = function (items, filterTerm) {
            var _this = this;
            return filterTerm.trim().length === 0
                ? items
                : items.filter(function (item) {
                    return _this.filterContainString(item.name, filterTerm) ||
                        _this.filterContainString(item.deviceType, filterTerm);
                });
        };
        ConfigurationFilterPipe.prototype.filterContainString = function (name, filterTerm) {
            var term = filterTerm.toLowerCase().trim();
            return name && name.toLowerCase().indexOf(term) > -1;
        };
        ConfigurationFilterPipe = __decorate([
            core.Pipe({
                name: 'configurationFilterPipe'
            })
        ], ConfigurationFilterPipe);
        return ConfigurationFilterPipe;
    }());

    var routes = [
        {
            context: ngxComponents.ViewContext.Device,
            path: 'device-configuration',
            component: DeviceConfigurationComponent,
            label: ngxComponents.gettext('Configuration'),
            icon: 'gears',
            canActivate: [DeviceConfigurationGuard]
        }
    ];
    var ɵ0 = routes;
    var DeviceConfigurationModule = /** @class */ (function () {
        function DeviceConfigurationModule() {
        }
        DeviceConfigurationModule = __decorate([
            core.NgModule({
                declarations: [
                    DeviceConfigurationComponent,
                    ConfigurationListComponent,
                    ConfigurationOperationComponent,
                    SourceCodePreviewComponent,
                    ConfigurationPreviewComponent,
                    ConfigurationFilterPipe,
                    SaveToRepositoryComponent
                ],
                exports: [],
                imports: [ngxComponents.CoreModule, tooltip.TooltipModule],
                entryComponents: [DeviceConfigurationComponent, SaveToRepositoryComponent],
                providers: [
                    DeviceConfigurationService,
                    DeviceConfigurationGuard,
                    {
                        provide: ngxComponents.HOOK_ONCE_ROUTE,
                        useValue: ɵ0,
                        multi: true
                    }
                ]
            })
        ], DeviceConfigurationModule);
        return DeviceConfigurationModule;
    }());

    exports.DeviceConfigurationModule = DeviceConfigurationModule;
    exports.ɵ0 = ɵ0;
    exports.ɵa = DeviceConfigurationComponent;
    exports.ɵb = DeviceConfigurationService;
    exports.ɵc = ConfigurationListComponent;
    exports.ɵd = ConfigurationOperationComponent;
    exports.ɵe = SourceCodePreviewComponent;
    exports.ɵf = ConfigurationPreviewComponent;
    exports.ɵg = ConfigurationFilterPipe;
    exports.ɵh = SaveToRepositoryComponent;
    exports.ɵi = DeviceConfigurationGuard;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=c8y-ngx-components-device-configuration.umd.js.map
