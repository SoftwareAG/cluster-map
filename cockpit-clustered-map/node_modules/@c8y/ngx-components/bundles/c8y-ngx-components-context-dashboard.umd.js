(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('@angular/router'), require('@c8y/client'), require('@ngx-translate/core'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('ngx-bootstrap/modal'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/tooltip'), require('ngx-bootstrap/popover'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/context-dashboard', ['exports', '@angular/core', '@c8y/ngx-components', '@angular/router', '@c8y/client', '@ngx-translate/core', 'lodash-es', 'rxjs', 'rxjs/operators', 'ngx-bootstrap/modal', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/tooltip', 'ngx-bootstrap/popover', '@angular/forms'], factory) :
    (global = global || self, factory((global.c8y = global.c8y || {}, global.c8y['ngx-components'] = global.c8y['ngx-components'] || {}, global.c8y['ngx-components']['context-dashboard'] = {}), global.ng.core, global.c8y['ngx-components'], global.ng.router, global.client, global.core$1, global.lodashEs, global.rxjs, global.rxjs.operators, global.modal, global.dropdown, global.tooltip, global.popover, global.ng.forms));
}(this, (function (exports, core, ngxComponents, router, client, core$1, lodashEs, rxjs, operators, modal, dropdown, tooltip, popover, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var CONTEXT_DASHBOARD_CONFIG = new core.InjectionToken('ContextDashboardConfig');

    (function (ContextDashboardType) {
        ContextDashboardType["Device"] = "device";
        ContextDashboardType["DeviceType"] = "type";
        ContextDashboardType["Group"] = "group";
        ContextDashboardType["Named"] = "name";
    })(exports.ContextDashboardType || (exports.ContextDashboardType = {}));
    var WIDGET_HEADER_CLASSES = [
        {
            label: ngxComponents.gettext('Regular`style`'),
            class: 'panel-title-regular',
            description: ngxComponents.gettext('The widget has no border between header and content.')
        },
        {
            label: ngxComponents.gettext('Border`style`'),
            class: 'panel-title-border',
            description: ngxComponents.gettext('The widget has a small separation border between header and content.')
        },
        {
            label: ngxComponents.gettext('Overlay`style`'),
            class: 'panel-title-overlay',
            description: ngxComponents.gettext('The widget content overlays the header.')
        },
        {
            label: ngxComponents.gettext('Hidden`style`'),
            class: 'panel-title-hidden',
            description: ngxComponents.gettext('The widget header is not shown.')
        }
    ];
    var WIDGET_CONTENT_CLASSES = [
        {
            label: ngxComponents.gettext('Light`style`'),
            class: 'panel-content-light',
            description: ngxComponents.gettext('The widget is styled with a light background and has low contrast.')
        },
        {
            label: ngxComponents.gettext('Dark`style`'),
            class: 'panel-content-dark',
            description: ngxComponents.gettext('The widget is styled with a dark background and has high contrast.')
        },
        {
            label: ngxComponents.gettext('Transparent`style`'),
            class: 'panel-content-transparent',
            description: ngxComponents.gettext('The widget is styled with a transparent background and therefore is border-less.')
        },
        {
            label: ngxComponents.gettext('Branded`style`'),
            class: 'panel-content-branded',
            description: ngxComponents.gettext('The widget is styled with the main brand color.')
        }
    ];
    var DASHBOARD_THEME_CLASSES = [
        {
            label: ngxComponents.gettext('Light`theme`'),
            class: 'dashboard-theme-light',
            description: ngxComponents.gettext('The dashboard is styled with a light background and has low contrast.')
        },
        {
            label: ngxComponents.gettext('Dark`theme`'),
            class: 'dashboard-theme-dark',
            description: ngxComponents.gettext('The dashboard is styled with a dark background and has high contrast.')
        },
        {
            label: ngxComponents.gettext('Transparent`theme`'),
            class: 'dashboard-theme-transparent',
            description: ngxComponents.gettext('The dashboard is styled with a transparent background and therefore is border-less.')
        },
        {
            label: ngxComponents.gettext('Branded`theme`'),
            class: 'dashboard-theme-branded',
            description: ngxComponents.gettext('The dashboard is styled with the main brand color.')
        }
    ];

    var ContextDashboardService = /** @class */ (function () {
        function ContextDashboardService(inventory, tabs, modal, translateService, router, user, appState) {
            this.inventory = inventory;
            this.tabs = tabs;
            this.modal = modal;
            this.translateService = translateService;
            this.router = router;
            this.user = user;
            this.appState = appState;
            this.cache = new Map();
            this.DEFAULT_PAGESIZE = 1000;
            this.FRAGMENT_NAME = 'c8y_Dashboard';
            this.DASHBOARD_ROUTE_PATH = 'dashboard';
            this.INDEX_SPLIT = '!';
            this._formDisabled = true;
        }
        Object.defineProperty(ContextDashboardService.prototype, "formDisabled", {
            get: function () {
                return this._formDisabled;
            },
            set: function (value) {
                this._formDisabled = value;
            },
            enumerable: true,
            configurable: true
        });
        ContextDashboardService.prototype.create = function (dashboardCfg, contextOrName) {
            return __awaiter(this, void 0, void 0, function () {
                var id, dashboardType, dashboard, value, fragmentKey, data, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (typeof contextOrName === 'string') {
                                id = contextOrName;
                                dashboardType = exports.ContextDashboardType.Named;
                            }
                            else {
                                id = contextOrName.contextData.id;
                                dashboardType = this.getDashboardTypeFromViewContext(dashboardCfg, contextOrName);
                            }
                            dashboard = {};
                            lodashEs.assign(dashboard, { c8y_Dashboard: dashboardCfg });
                            value = dashboardType === exports.ContextDashboardType.DeviceType ? dashboardCfg.deviceTypeValue : id;
                            fragmentKey = this.createFragmentKey(dashboardType, value);
                            dashboard[fragmentKey] = {};
                            if (this.shouldSetGlobal(dashboard)) {
                                lodashEs.assign(dashboard, { c8y_Global: {} });
                            }
                            if (!(dashboardType === exports.ContextDashboardType.Group || dashboardType === exports.ContextDashboardType.Device)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.inventory.childAdditionsCreate(dashboard, id)];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.inventory.create(dashboard)];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            data = (_a).data;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        ContextDashboardService.prototype.detail = function (dashboardMO) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.inventory.detail(dashboardMO)];
                        case 1:
                            data = (_a.sent()).data;
                            this.cache.set(dashboardMO.id, data);
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        ContextDashboardService.prototype.update = function (dashboard) {
            return __awaiter(this, void 0, void 0, function () {
                var cleanedDashboard, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cleanedDashboard = this.clean(lodashEs.pick(dashboard, [this.FRAGMENT_NAME, 'id']));
                            cleanedDashboard.c8y_Global = this.shouldSetGlobal(dashboard);
                            return [4 /*yield*/, this.inventory.update(cleanedDashboard)];
                        case 1:
                            data = (_a.sent()).data;
                            this.cache.set(dashboard.id, data);
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        ContextDashboardService.prototype.delete = function (dashboard) {
            return __awaiter(this, void 0, void 0, function () {
                var msg, tabToRemove, ex_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            msg = ngxComponents.gettext("You are about to delete the dashboard \"{{ dashboardName }}\". Do you want to proceed?");
                            if (this.isDeviceType(dashboard)) {
                                msg = ngxComponents.gettext("You are about to delete the dashboard \"{{ dashboardName }}\" from all devices of the type \"{{ deviceType }}\".\n           Do you want to proceed?");
                            }
                            return [4 /*yield*/, this.modal.confirm(ngxComponents.gettext('Delete dashboard'), this.translateService.instant(msg, {
                                    dashboardName: dashboard.c8y_Dashboard.name,
                                    deviceType: dashboard.c8y_Dashboard.deviceTypeValue
                                }), ngxComponents.Status.DANGER, {
                                    ok: ngxComponents.gettext('Delete'),
                                    cancel: ngxComponents.gettext('Cancel')
                                })];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.inventory.delete(dashboard)];
                        case 2:
                            _a.sent();
                            tabToRemove = Array.from(this.tabs.state).find(function (tab) {
                                return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboard.id);
                            });
                            this.tabs.remove(tabToRemove);
                            this.tabs.refresh();
                            return [3 /*break*/, 4];
                        case 3:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardService.prototype.activateDashboards = function (route, types) {
            var dashboardId = route.params.dashboardId;
            if (dashboardId) {
                return this.getDashboard$(dashboardId, types, route.parent.data.contextData).pipe(operators.tap(function (dashboard) {
                    route.data = { dashboard: dashboard };
                }), operators.map(function () { return true; }), operators.catchError(function () {
                    return rxjs.of(false);
                }));
            }
            return this.getTabs$(route.data.contextData, types);
        };
        ContextDashboardService.prototype.getNamedDashboardOrCreate = function (name, defaultWidgets) {
            var _this = this;
            var children = this.mapWidgets(defaultWidgets);
            return this.getDashboard$(name, [exports.ContextDashboardType.Named]).pipe(operators.throwIfEmpty(), operators.catchError(function () {
                return rxjs.from(_this.create({ children: children }, name));
            }));
        };
        ContextDashboardService.prototype.refreshTabs = function (dashboardMO) {
            return __awaiter(this, void 0, void 0, function () {
                var tabToUpdate, data, _a, icon, priority, name_1;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!!this.isNamed(dashboardMO)) return [3 /*break*/, 4];
                            tabToUpdate = Array.from(this.tabs.state).find(function (tab) {
                                return tab.path.endsWith(_this.DASHBOARD_ROUTE_PATH + "/" + dashboardMO.id);
                            });
                            if (!!tabToUpdate) return [3 /*break*/, 1];
                            this.addTab(dashboardMO);
                            return [3 /*break*/, 3];
                        case 1: return [4 /*yield*/, this.detail(dashboardMO)];
                        case 2:
                            data = _b.sent();
                            _a = data.c8y_Dashboard, icon = _a.icon, priority = _a.priority, name_1 = _a.name;
                            tabToUpdate.icon = icon;
                            tabToUpdate.priority = priority;
                            tabToUpdate.label = name_1;
                            _b.label = 3;
                        case 3:
                            this.tabs.refresh();
                            _b.label = 4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardService.prototype.addTab = function (dashboard) {
            return __awaiter(this, void 0, void 0, function () {
                var data, _a, icon, priority, name;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.detail(dashboard)];
                        case 1:
                            data = _b.sent();
                            _a = data.c8y_Dashboard, icon = _a.icon, priority = _a.priority, name = _a.name;
                            this.tabs.add({
                                icon: icon,
                                priority: priority,
                                label: name,
                                path: this.currentContextRoute + "/" + this.DASHBOARD_ROUTE_PATH + "/" + data.id
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardService.prototype.navigateToDashboard = function (dashboardMO) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (/dashboard/.test(this.router.url)) {
                        this.router.navigate(['..', dashboardMO.id], {
                            relativeTo: ngxComponents.getActivatedRoute(this.router)
                        });
                    }
                    else {
                        this.router.navigate(['..', 'dashboard', dashboardMO.id], {
                            relativeTo: ngxComponents.getActivatedRoute(this.router)
                        });
                    }
                    return [2 /*return*/];
                });
            });
        };
        ContextDashboardService.prototype.hasPermission = function () {
            return this.user.hasAnyRole(this.appState.currentUser.value, [
                'ROLE_INVENTORY_ADMIN',
                'ROLE_INVENTORY_CREATE'
            ]);
        };
        ContextDashboardService.prototype.isNamed = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) {
                return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Named + _this.INDEX_SPLIT).test(prop);
            });
        };
        ContextDashboardService.prototype.isDeviceType = function (dashboard) {
            var _this = this;
            return lodashEs.some(lodashEs.keys(dashboard), function (prop) {
                return new RegExp("^" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.DeviceType + _this.INDEX_SPLIT).test(prop);
            });
        };
        ContextDashboardService.prototype.getStyling = function (styleList, styleName, defaultValue) {
            var styling = styleList.find(function (style) { return style && new RegExp(styleName, 'i').test(style.class); });
            return styling ? styling.class : defaultValue;
        };
        ContextDashboardService.prototype.mapWidgets = function (widgets) {
            return lodashEs.keyBy(widgets.map(function (widget) {
                widget.id = String(Math.random()).substr(2);
                return widget;
            }), 'id');
        };
        ContextDashboardService.prototype.getDashboard$ = function (dashboardIdOrName, dashboardType, mo) {
            var _this = this;
            var cache = this.cache.get(dashboardIdOrName);
            var dashboards = mo
                ? this.getContextDashboards(mo, dashboardType)
                : [this.getNamedDashboard(dashboardIdOrName)];
            var cacheRefresh = this.getContextDashboards$(dashboards).pipe(operators.tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), operators.filter(function (dashboard) {
                return dashboard.id === dashboardIdOrName ||
                    lodashEs.has(dashboard, "" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + exports.ContextDashboardType.Named + _this.INDEX_SPLIT + dashboardIdOrName);
            }));
            return cache ? rxjs.of(cache) : cacheRefresh;
        };
        ContextDashboardService.prototype.getTabs$ = function (mo, dashboardType) {
            var _this = this;
            var dashboards = this.getContextDashboards(mo, dashboardType);
            this.setBaseContextRoute(mo, dashboardType);
            return this.getContextDashboards$(dashboards).pipe(operators.map(function (dashboard) { return _this.removeDashboardMoProperty(dashboard); }), operators.tap(function (dashboard) { return _this.cacheDashboard(dashboard); }), operators.map(function (dashboard) { return _this.createDashboardTab(dashboard); }), operators.toArray());
        };
        ContextDashboardService.prototype.getContextDashboards$ = function (requests) {
            return rxjs.from(requests).pipe(operators.mergeAll(), operators.mergeMap(function (response) { return response.data; }));
        };
        ContextDashboardService.prototype.setBaseContextRoute = function (mo, dashboardType) {
            var type = dashboardType.includes(exports.ContextDashboardType.Device)
                ? exports.ContextDashboardType.Device
                : exports.ContextDashboardType.Group;
            this.currentContextRoute = type + "/" + mo.id;
        };
        /**
         * Cleans already corrupted dashboards from dashboardMo property.
         * Added to fix dashboards on the cloud instance (eu-latest).
         * @deprecated This is going to be removed after 1007.7.0.
         */
        ContextDashboardService.prototype.removeDashboardMoProperty = function (dashboard) {
            var dashboardCopy = lodashEs.cloneDeep(dashboard);
            var children = lodashEs.get(dashboardCopy, 'c8y_Dashboard.children');
            var updateDashboard = false;
            lodashEs.forEach(children, function (child) {
                if (lodashEs.get(child, 'componentTransformConfigWithContext')) {
                    delete child.componentTransformConfigWithContext;
                    updateDashboard = true;
                }
                if (lodashEs.get(child, 'config.dashboardMo')) {
                    delete child.config.dashboardMo;
                    updateDashboard = true;
                }
            });
            if (updateDashboard) {
                this.update(dashboardCopy);
            }
            return dashboardCopy;
        };
        ContextDashboardService.prototype.cacheDashboard = function (dashboard) {
            this.cache.set(dashboard.id, dashboard);
        };
        ContextDashboardService.prototype.createDashboardTab = function (dashboard) {
            var _dashboard = dashboard.c8y_Dashboard, id = dashboard.id;
            return ({
                icon: _dashboard.icon,
                path: this.DASHBOARD_ROUTE_PATH + "/" + id,
                label: _dashboard.name,
                priority: _dashboard.priority
            });
        };
        ContextDashboardService.prototype.clean = function (dashboard) {
            var jsonString = JSON.stringify(dashboard, function (key, value) {
                if (key === '$$hashKey' || key === 'klasses') {
                    return undefined;
                }
                return value;
            });
            return JSON.parse(jsonString);
        };
        ContextDashboardService.prototype.getNamedDashboard = function (name) {
            return this.inventory.list({
                fragmentType: "" + this.FRAGMENT_NAME + this.INDEX_SPLIT + exports.ContextDashboardType.Named + this.INDEX_SPLIT + name,
                pageSize: 1
            });
        };
        ContextDashboardService.prototype.getContextDashboards = function (mo, dashboardType) {
            var _this = this;
            return dashboardType.map(function (type) {
                return _this.inventory.list({
                    fragmentType: "" + _this.FRAGMENT_NAME + _this.INDEX_SPLIT + type + _this.INDEX_SPLIT + (type === exports.ContextDashboardType.DeviceType ? mo.type : mo.id),
                    pageSize: _this.DEFAULT_PAGESIZE
                });
            });
        };
        ContextDashboardService.prototype.getDashboardTypeFromViewContext = function (dashboardCfg, context) {
            var dashboardType;
            if (context.context === ngxComponents.ViewContext.Device) {
                dashboardType = dashboardCfg.deviceType
                    ? exports.ContextDashboardType.DeviceType
                    : exports.ContextDashboardType.Device;
            }
            if (context.context === ngxComponents.ViewContext.Group) {
                dashboardType = exports.ContextDashboardType.Group;
            }
            return dashboardType;
        };
        ContextDashboardService.prototype.createFragmentKey = function (contextDashboardType, value) {
            return [this.FRAGMENT_NAME, contextDashboardType, value].join(this.INDEX_SPLIT);
        };
        ContextDashboardService.prototype.shouldSetGlobal = function (dashboard) {
            if (this.isNamed(dashboard) || this.isDeviceType(dashboard)) {
                return {};
            }
            return null;
        };
        ContextDashboardService.ctorParameters = function () { return [
            { type: client.InventoryService },
            { type: ngxComponents.TabsService },
            { type: ngxComponents.ModalService },
            { type: core$1.TranslateService },
            { type: router.Router },
            { type: client.UserService },
            { type: ngxComponents.AppStateService }
        ]; };
        ContextDashboardService = __decorate([
            core.Injectable()
        ], ContextDashboardService);
        return ContextDashboardService;
    }());

    var DeviceDashboardGuard = /** @class */ (function () {
        function DeviceDashboardGuard(contextDashboardService) {
            this.contextDashboardService = contextDashboardService;
        }
        DeviceDashboardGuard.prototype.canActivate = function (route) {
            return this.contextDashboardService.activateDashboards(route, [
                exports.ContextDashboardType.Device,
                exports.ContextDashboardType.DeviceType
            ]);
        };
        DeviceDashboardGuard.ctorParameters = function () { return [
            { type: ContextDashboardService }
        ]; };
        DeviceDashboardGuard = __decorate([
            core.Injectable()
        ], DeviceDashboardGuard);
        return DeviceDashboardGuard;
    }());

    var DashboardDetailComponent = /** @class */ (function () {
        function DashboardDetailComponent(modal, iconList, contextDashboardService) {
            var _this = this;
            this.modal = modal;
            this.contextDashboardService = contextDashboardService;
            this.styling = {
                themeClass: 'dashboard-theme-light',
                headerClass: 'panel-title-regular'
            };
            this.possibleStyling = { DASHBOARD_THEME_CLASSES: DASHBOARD_THEME_CLASSES, WIDGET_HEADER_CLASSES: WIDGET_HEADER_CLASSES };
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
            this.DEFAULT_DASHBOARD_MARGIN = 12;
            this.DEFAULT_DASHBOARD_ICON = 'th';
            this.DEFAULT_DASHBOARD_PRIORITY = 10000;
            this.DEFAULT_DASHBOARD_NAME = 'Dashboard';
            this.icons = iconList;
            this.filteredIcons = iconList;
        }
        DashboardDetailComponent.prototype.ngAfterContentInit = function () {
            var defaultDashboardCfg = {
                name: this.DEFAULT_DASHBOARD_NAME,
                priority: this.DEFAULT_DASHBOARD_PRIORITY,
                icon: this.DEFAULT_DASHBOARD_ICON,
                deviceTypeValue: this.deviceType
            };
            if (this.dashboard) {
                this.current = lodashEs.clone(this.dashboard);
                this.setDashboardStyle();
            }
            else {
                this.dashboard = defaultDashboardCfg;
                this.dashboardDetailForm.form.markAsDirty();
            }
        };
        DashboardDetailComponent.prototype.save = function () {
            var _a, _b;
            this.dashboard.classes = (_a = {}, _a[this.styling.themeClass] = true, _a);
            this.dashboard.widgetClasses = (_b = {}, _b[this.styling.headerClass] = true, _b);
            this._save(this.dashboard);
        };
        DashboardDetailComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
        DashboardDetailComponent.prototype.getDashboardPreviewStyle = function () {
            var cssClasses = {};
            cssClasses[this.styling.headerClass] = true;
            cssClasses[this.styling.themeClass] = true;
            return cssClasses;
        };
        DashboardDetailComponent.prototype.selectIcon = function (icon) {
            this.dashboard.icon = icon;
            this.dashboardDetailForm.form.markAsDirty();
        };
        DashboardDetailComponent.prototype.updateFiltered = function (term) {
            if (term) {
                var search_1 = new RegExp(term, 'i');
                this.filteredIcons = this.icons.filter(function (val) { return search_1.test(val); });
            }
            else {
                this.filteredIcons = this.icons;
            }
        };
        DashboardDetailComponent.prototype.setDashboardStyle = function () {
            var _this = this;
            var allClasses = __assign({}, this.dashboard.classes, this.dashboard.widgetClasses);
            var styles = Object.keys(allClasses).map(function (c) { return c.split('-').pop(); });
            styles.forEach(function (styleName) {
                _this.styling.themeClass = _this.contextDashboardService.getStyling(DASHBOARD_THEME_CLASSES, styleName, _this.styling.themeClass);
                _this.styling.headerClass = _this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, _this.styling.headerClass);
            });
        };
        DashboardDetailComponent.ctorParameters = function () { return [
            { type: modal.BsModalRef },
            { type: Array, decorators: [{ type: core.Inject, args: [ngxComponents.ICON_LIST,] }] },
            { type: ContextDashboardService }
        ]; };
        __decorate([
            core.ViewChild('dashboardDetailForm', { static: true })
        ], DashboardDetailComponent.prototype, "dashboardDetailForm", void 0);
        DashboardDetailComponent = __decorate([
            core.Component({
                selector: 'c8y-dashboard-detail',
                template: "<div class=\"modal-header\">\n  <h3 *ngIf=\"!current\" translate>\n    Add dashboard\n  </h3>\n  <h3 *ngIf=\"current\" translate>Edit dashboard</h3>\n</div>\n\n<div class=\"modal-body\">\n  <form #dashboardDetailForm=\"ngForm\">\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <div *ngIf=\"!isNamedDashboard\">\n          <h6 class=\"legend form-block\"><span translate>Tab</span></h6>\n          <div class=\"input-group\">\n            <c8y-form-group>\n              <label class=\"m-r-8\" translate>Icon</label>\n              <div dropdown class=\"dropdown\">\n                <button\n                  title=\"{{ 'Icon' | translate }}\"\n                  class=\"btn-default btn btn-gray\"\n                  dropdownToggle\n                >\n                  <i c8yIcon=\"{{dashboard.icon}}\"></i>\n                  <span class=\"caret\"></span> \n                </button>                  \n                <ul\n                  *dropdownMenu\n                  class=\"dropdown-menu modal-inner-scroll dropdown-menu-grid-4\"\n                  style=\"max-height: 250px;margin-left: 0;\"\n                >\n                  <ng-container *ngFor=\"let icon of filteredIcons\">\n                    <li (click)=\"selectIcon(icon)\">\n                      <a style=\"cursor: pointer\" title=\"{{icon}}\" [ngClass]=\"{'active': dashboard.icon === icon}\">\n                        <i class=\"icon\" [c8yIcon]=\"icon\" ></i>\n                      </a>\n                    </li>\n                  </ng-container>\n                </ul>\n              </div>\n            </c8y-form-group>\n            <c8y-form-group class=\"flex-grow\">\n              <label>\n                <span class=\"m-r-4\" translate>Menu label</span>\n                <button class=\"btn btn-clean\"\n                  popover=\"{{\n                    'Menu label to display in submenu when dashboard is attached' | translate\n                  }}\"\n                  triggers=\"focus\"\n                  placement=\"right\"\n                  container=\"body\"\n                >\n                  <i\n                    [c8yIcon]=\"'question-circle-o'\"\n                    class=\"text-primary\"\n                  ></i>\n                </button>\n              </label>\n              <input\n                title=\"{{ 'Menu label' | translate }}\"\n                class=\"form-control\"\n                name=\"name\"\n                [(ngModel)]=\"dashboard.name\"\n                placeholder=\"{{ 'e.g. My dashboard' | translate }}\"\n                required\n              />\n            </c8y-form-group>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-sm-6\">\n              <c8y-form-group>\n                <label>\n                  <span translate class=\"m-r-4\">Position in navigation</span>\n                  <button class=\"btn btn-clean\"\n                    popover=\"{{\n                      'Position in navigation menu (10000 first, -10000 last)' | translate\n                    }}\"\n                    triggers=\"focus\"\n                    placement=\"right\"\n                    container=\"body\"\n                  >\n                    <i \n                      [c8yIcon]=\"'question-circle-o'\"\n                      class=\"text-primary\"\n                    ></i>\n                  </button>\n                  \n                </label>\n                <input\n                  title=\"{{ 'Position in navigation' | translate }}\"\n                  type=\"number\"\n                  class=\"form-control\"\n                  name=\"priority\"\n                  [(ngModel)]=\"dashboard.priority\"\n                  min=\"-10000\"\n                  max=\"10000\"\n                  placeholder=\"{{ 'e.g.' | translate }} 500\"\n                  required\n                />\n              </c8y-form-group>\n            </div>\n            <div class=\"col-sm-6\">\n             \n            </div>\n\n            <div style=\"position: relative;\">\n              <div class=\"col-sm-12\">\n                <div class=\"form-group m-b-24\" *ngIf=\"!current && deviceType\">\n                  <label class=\"c8y-checkbox\">\n                    <input type=\"checkbox\" name=\"deviceType\" [(ngModel)]=\"dashboard.deviceType\" />\n                    <span></span>\n                    {{ 'Apply dashboard to all devices of type ' | translate\n                    }}<i>{{ dashboard.deviceTypeValue }}</i>\n                  </label>\n                </div>\n\n                <div\n                  class=\"alert alert-info  m-b-24\"\n                  *ngIf=\"dashboard.deviceType && dashboard.deviceTypeValue\"\n                >\n                  <i c8y-icon=\"info\"></i>\n                  {{ 'This dashboard is shared between all devices of the type ' | translate }}\n                  <i>{{ dashboard.deviceTypeValue }}</i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <c8y-appearance-settings\n            [(themeClass)]=\"styling.themeClass\"\n            [(headerClass)]=\"styling.headerClass\"\n          >\n          </c8y-appearance-settings>\n          <div class=\"row\">\n            <div class=\"col-sm-6\">\n              <c8y-form-group>\n                <label>{{ 'Widget margin' | translate }}</label>\n                <div class=\"input-group\">\n                  <input\n                    title=\"{{ 'Widget margin' | translate }}\"\n                    id=\"margin\"\n                    name=\"margin\"\n                    type=\"number\"\n                    class=\"form-control\"\n                    [(ngModel)]=\"dashboard.widgetMargin\"\n                    min=\"0\"\n                    max=\"50\"\n                    placeholder=\"{{ DEFAULT_DASHBOARD_MARGIN }}\"\n                  />\n                  <span class=\"input-group-addon\">px</span>\n                </div>\n              </c8y-form-group>\n            </div>\n            <div class=\"col-sm-6\">\n              <label translate>Widget titles</label>\n              <c8y-form-group>\n                <label\n                  title=\"{{ 'Translate widget titles if possible' | translate }}\"\n                  class=\"c8y-checkbox\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    name=\"translateWidgetTitle\"\n                    [(ngModel)]=\"dashboard.translateWidgetTitle\"\n                  /><span></span>\n                  <span>{{ 'Translate if possible' | translate }}</span>\n                </label>\n              </c8y-form-group>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-sm-6\">\n        <c8y-widget-preview\n          [tab]=\"!isNamedDashboard ? dashboard : undefined\"\n          [previewClasses]=\"getDashboardPreviewStyle()\"\n        ></c8y-widget-preview>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n    Cancel\n  </button>\n  <button\n    title=\"{{ 'Save' | translate }}\"\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [disabled]=\"dashboardDetailForm.form.invalid || dashboardDetailForm.form.pristine\"\n    translate\n  >\n    Save\n  </button>\n</div>\n"
            }),
            __param(1, core.Inject(ngxComponents.ICON_LIST))
        ], DashboardDetailComponent);
        return DashboardDetailComponent;
    }());

    var WidgetService = /** @class */ (function () {
        function WidgetService(dynamicComponentService, translateService, moduleConfig) {
            this.dynamicComponentService = dynamicComponentService;
            this.translateService = translateService;
            this.moduleConfig = moduleConfig;
        }
        WidgetService.prototype.getWidgetDefinition = function (componentId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.dynamicComponentService.getById$(componentId).toPromise()];
                });
            });
        };
        WidgetService.prototype.getWidgetDefinitions = function () {
            var _this = this;
            var translatedComponents = Array.from(this.dynamicComponentService.state).map(function (cmp) { return (__assign({}, cmp, { label: _this.translateService.instant(cmp.label) })); });
            return lodashEs.cloneDeep(lodashEs.sortBy(translatedComponents, 'label').filter(this.moduleConfig.widgetFilter));
        };
        WidgetService.ctorParameters = function () { return [
            { type: ngxComponents.DynamicComponentService },
            { type: core$1.TranslateService },
            { type: undefined, decorators: [{ type: core.Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] }
        ]; };
        WidgetService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function WidgetService_Factory() { return new WidgetService(core.ɵɵinject(ngxComponents.DynamicComponentService), core.ɵɵinject(core$1.TranslateService), core.ɵɵinject(CONTEXT_DASHBOARD_CONFIG)); }, token: WidgetService, providedIn: "root" });
        WidgetService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __param(2, core.Inject(CONTEXT_DASHBOARD_CONFIG))
        ], WidgetService);
        return WidgetService;
    }());

    var WidgetConfigComponent = /** @class */ (function () {
        function WidgetConfigComponent(widgetService, modal, contextDashboardService) {
            var _this = this;
            this.widgetService = widgetService;
            this.modal = modal;
            this.contextDashboardService = contextDashboardService;
            this.mode = 'select';
            this.searchChange$ = new rxjs.Subject();
            this.searchTerm = '';
            this.styling = {
                headerClass: 'panel-title-regular',
                contentClass: 'panel-content-light'
            };
            this.defaultStyling = {
                headerClass: 'panel-title-regular',
                contentClass: 'panel-content-light'
            };
            this.possibleStyling = { WIDGET_HEADER_CLASSES: WIDGET_HEADER_CLASSES, WIDGET_CONTENT_CLASSES: WIDGET_CONTENT_CLASSES };
            this.isUpgrade = false;
            this.result = new Promise(function (resolve, reject) {
                _this._save = resolve;
                _this._cancel = reject;
            });
        }
        Object.defineProperty(WidgetConfigComponent.prototype, "isEdit", {
            get: function () {
                return !!this.current;
            },
            enumerable: true,
            configurable: true
        });
        WidgetConfigComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.components = this.widgetService.getWidgetDefinitions();
            if (this.selected) {
                this.current = lodashEs.clone(this.selected);
                this.select(this.selected, this.isEdit ? 'config' : 'select');
            }
            this.searchSub = this.searchChange$
                .pipe(operators.switchMap(function (event) { return rxjs.iif(function () { return event.which !== 13; }, rxjs.timer(200), rxjs.timer(10)); }))
                .subscribe(function () {
                _this.search();
            });
            if (this.mo.c8y_Dashboard.classes) {
                this.styling = this.setDefaultStyle(__assign({}, this.mo.c8y_Dashboard.classes, this.mo.c8y_Dashboard.widgetClasses, (this.isEdit ? this.current.data.classes : {})));
                this.defaultStyling = this.setDefaultStyle(__assign({}, this.mo.c8y_Dashboard.classes, this.mo.c8y_Dashboard.widgetClasses));
            }
        };
        WidgetConfigComponent.prototype.save = function () {
            var _a = this.selected.data, _x = _a._x, _y = _a._y, _width = _a._width, _height = _a._height;
            if (this.widgetConfig && this.widgetConfig.device) {
                var _b = this.widgetConfig.device, id = _b.id, name_1 = _b.name;
                this.widgetConfig.device = { id: id, name: name_1 };
            }
            var widget = __assign({ _x: _x,
                _y: _y,
                _width: _width,
                _height: _height, config: lodashEs.omit(this.widgetConfig, 'settings'), title: this.selected.data.title, componentId: this.selected.id, id: this.isEdit ? this.current.data.id : String(Math.random()).substr(2), classes: this.getStyle() }, (!this.isEdit ? this.widgetConfig.settings.widgetDefaults : {}));
            this._save(widget);
        };
        WidgetConfigComponent.prototype.select = function (cmp, mode) {
            if (mode === void 0) { mode = 'config'; }
            cmp.data = cmp.data || {};
            this.selected = cmp;
            this.isUpgrade = !!lodashEs.get(cmp, 'data.settings.upgrade');
            this.contextDashboardService.formDisabled = this.isUpgrade;
            if (this.isEdit) {
                var _a = this.current.data, _x = _a._x, _y = _a._y, _width = _a._width, _height = _a._height, classes = _a.classes, title = _a.title;
                this.selected.data = __assign({}, this.selected.data, { _x: _x, _y: _y, _width: _width, _height: _height, classes: classes, title: title });
            }
            this.widgetConfig = lodashEs.cloneDeep(this.composeWidgetConfig(this.selected, this.context));
            this.selected.data.title = this.selected.data.title || cmp.label;
            this.componentLabel = cmp.label;
            this.mode = mode;
        };
        WidgetConfigComponent.prototype.search = function () {
            var _this = this;
            if (this.searchTerm.length > 0) {
                this.searchResult = this.components.filter(function (cmp) {
                    return new RegExp(lodashEs.escapeRegExp(_this.searchTerm.trim()), 'i').test(cmp.label);
                });
            }
            else {
                this.resetSearch();
            }
        };
        WidgetConfigComponent.prototype.resetSearch = function () {
            this.searchTerm = '';
            this.searchResult = undefined;
        };
        WidgetConfigComponent.prototype.changeMode = function (mode) {
            this.mode = mode;
        };
        WidgetConfigComponent.prototype.close = function () {
            this._cancel();
            this.modal.hide();
        };
        WidgetConfigComponent.prototype.getStyle = function (isPreview) {
            if (isPreview === void 0) { isPreview = false; }
            var cssClasses = {};
            if (isPreview || !this.isDashboardDefaultStyle(this.styling.headerClass)) {
                cssClasses[this.styling.headerClass] = true;
            }
            if (isPreview || !this.isDashboardDefaultStyle(this.styling.contentClass)) {
                cssClasses[this.styling.contentClass] = true;
            }
            if (isPreview) {
                cssClasses["dashboard-theme-" + this.defaultStyling.contentClass.split('-').pop()] = true;
            }
            return cssClasses;
        };
        WidgetConfigComponent.prototype.ngOnDestroy = function () {
            this.contextDashboardService.formDisabled = true;
            if (this.searchSub) {
                this.searchSub.unsubscribe();
            }
        };
        WidgetConfigComponent.prototype.isDashboardDefaultStyle = function (className) {
            var allClasses = __assign({}, this.mo.c8y_Dashboard.classes, this.mo.c8y_Dashboard.widgetClasses);
            var styles = Object.keys(allClasses).map(function (cssClass) { return ({ class: cssClass }); });
            var style = this.contextDashboardService.getStyling(styles, className.split('-').pop(), undefined);
            return !!style;
        };
        WidgetConfigComponent.prototype.setDefaultStyle = function (setClasses) {
            var _this = this;
            var contentClass = this.styling.contentClass;
            var headerClass = this.styling.headerClass;
            var styles = Object.keys(setClasses).map(function (c) { return c.split('-').pop(); });
            styles.forEach(function (styleName) {
                contentClass = _this.contextDashboardService.getStyling(WIDGET_CONTENT_CLASSES, styleName, contentClass);
                headerClass = _this.contextDashboardService.getStyling(WIDGET_HEADER_CLASSES, styleName, headerClass);
            });
            return { headerClass: headerClass, contentClass: contentClass };
        };
        WidgetConfigComponent.prototype.composeWidgetConfig = function (selectedComponent, context) {
            if (context === void 0) { context = {}; }
            var setting = __assign({ settings: __assign({}, selectedComponent.data.settings, lodashEs.get(selectedComponent.data.settings, 'ng1.options'), lodashEs.get(selectedComponent.data, 'ng1.options'), { context: context, dashboardMo: this.mo.c8y_Dashboard }) }, selectedComponent.data.config);
            return this.applyTargetIfDeviceDashboard(setting);
        };
        WidgetConfigComponent.prototype.applyTargetIfDeviceDashboard = function (widgetConfig) {
            var isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
            if (isDeviceType) {
                widgetConfig.settings.hideTarget = isDeviceType;
                var noDeviceTarget = widgetConfig.settings.ng1
                    ? widgetConfig.settings.ng1.options.noDeviceTarget
                    : widgetConfig.settings.noDeviceTarget;
                if (!noDeviceTarget) {
                    widgetConfig.device = {
                        id: this.context.id,
                        name: this.context.name
                    };
                }
            }
            return widgetConfig;
        };
        WidgetConfigComponent.ctorParameters = function () { return [
            { type: WidgetService },
            { type: modal.BsModalRef },
            { type: ContextDashboardService }
        ]; };
        WidgetConfigComponent = __decorate([
            core.Component({
                selector: 'c8y-widget-config',
                template: "<div class=\"modal-header separator\">\n  <h3 *ngIf=\"!current\" translate>Add widget</h3>\n  <h3 *ngIf=\"current\" translate>Edit widget</h3>\n</div>\n<form #configForm=\"ngForm\" name=\"form\">\n  <div class=\"c8y-modal-tabs\">\n    <div class=\"tabContainer\">\n      <ul class=\"nav nav-tabs nav-tabsc8y p-l-24\">\n        <li [class.active]=\"mode === 'select'\">\n          <button type=\"button\" class=\"btn\" (click)=\"changeMode('select'); (false)\">\n            <i c8yIcon=\"th-large\"></i> <span class=\"txt\" translate>Select widget</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'config'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('config'); (false)\"\n          >\n            <i c8yIcon=\"cog\"></i> <span class=\"txt\" translate>Configuration</span>\n          </button>\n        </li>\n        <li [class.active]=\"mode === 'style'\">\n          <button\n            type=\"button\"\n            class=\"btn\"\n            [disabled]=\"!selected\"\n            (click)=\"changeMode('style'); (false)\"\n          >\n            <i c8yIcon=\"paint-brush\"></i> <span class=\"txt\" translate>Appearance</span>\n          </button>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <div class=\"modal-inner-scroll\">\n    <div\n      *ngIf=\"mode === 'select'\"\n      class=\"bg-white p-l-24 p-r-24 p-t-8 p-b-8 sticky-header-top-0\"\n      style=\"z-index: 2;\"\n    >\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <div class=\"input-group input-group-search\">\n            <input\n              class=\"form-control\"\n              placeholder=\"{{ 'Search\u2026' | translate }}\"\n              type=\"text\"\n              [(ngModel)]=\"searchTerm\"\n              [ngModelOptions]=\"{ standalone: true }\"\n              (keydown)=\"searchChange$.next($event)\"\n            />\n            <span class=\"input-group-btn\">\n              <button class=\"btn btn-clean\" (click)=\"resetSearch()\">\n                <i [c8yIcon]=\"searchTerm.length === 0 ? 'search' : 'close'\"></i>\n              </button>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-body bg-gray-lighter\" *ngIf=\"mode === 'select'\">\n      <div class=\"card-group card-select\" style=\"margin-bottom:-24px;\">\n        <div\n          class=\"col-md-3 col-sm-4 col-xs-6\"\n          *ngFor=\"let cmp of searchResult || components\"\n          title=\"{{ cmp.description | translate }}\"\n        >\n          <div class=\"card p-8\" [class.active]=\"selected === cmp\" (click)=\"select(cmp)\">\n            <div\n              class=\"text-center p-8 m-b-8 flex-col flex-center\"\n              style=\"min-height: 170px; background-color: var(--body-background-color, #f2f3f4);\"\n            >\n              <ng-container *ngIf=\"!cmp.previewImage; else previewImage\">\n                <h1><i c8yIcon=\"file-image-o\"></i></h1>\n                <small translate>Preview not available</small>\n              </ng-container>\n              <ng-template #previewImage>\n                <img class=\"img-responsive\" [src]=\"cmp.previewImage\" />\n              </ng-template>\n            </div>\n            <p class=\"card-title text-truncate\">\n              <c8y-highlight\n                text=\"{{ cmp.label | translate }}\"\n                [pattern]=\"searchTerm\"\n              ></c8y-highlight>\n            </p>\n          </div>\n        </div>\n\n        <div class=\"c8y-empty-state text-center\" *ngIf=\"searchResult && searchResult.length === 0\">\n          <h1 class=\"c8y-icon c8y-icon-device c8y-icon-duocolor\"></h1>\n          <h3 translate>No widgets found.</h3>\n          <div>\n            <p translate>Rephrase your search term.</p>\n            <div>\n              <button class=\"btn btn-primary\" (click)=\"resetSearch()\" translate>\n                Reset search\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-body\" *ngIf=\"mode === 'config'\" style=\"min-height: calc(100vh - 290px);\">\n      <h4 style=\"text-align: left;\">\n        <strong>\n          {{ selected.label | translate }}\n        </strong>\n      </h4>\n      <p class=\"m-b-24\">\n        {{ selected.description | translate }}\n      </p>\n      <div class=\"row\">\n        <!-- change to col-sm-6 when preview is available -->\n        <div class=\"col-sm-12\">\n          <div class=\"legend form-block\" translate>Configuration</div>\n          <c8y-form-group>\n            <label for=\"widgetTitle\" translate>Title</label>\n            <input\n              id=\"widgetTitle\"\n              [(ngModel)]=\"selected.data.title\"\n              type=\"text\"\n              name=\"title\"\n              class=\"form-control\"\n              placeholder=\"{{ 'e.g.' | translate }} {{ componentLabel | translate }}\"\n              required\n            />\n          </c8y-form-group>\n\n          <!-- This is an upgraded component for the device selector and still needs to be migrated -->\n          <c8y-dynamic-component\n            componentId=\"device.selector.legacy\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n            *ngIf=\"!isUpgrade\"\n          ></c8y-dynamic-component>\n\n          <c8y-dynamic-component\n            [componentId]=\"selected.id\"\n            mode=\"config\"\n            [config]=\"widgetConfig\"\n            [notFoundError]=\"false\"\n          ></c8y-dynamic-component>\n        </div>\n        <!-- markup for the preview \n        \n        <div class=\"col-sm-6 sticky-header-top-0\" >\n          <div class=\"legend form-block\">\n            Preview\n          </div>\n          <div class=\"bg-gray-lighter p-16\">\n            <div class=\"card card-dashboard\" style=\"margin-bottom:0;\">\n              <div class=\"card-header-actions\">\n                <div class=\"card-title text-uppercase\">{{ selected.data.title }}</div>\n                <div class=\"header-actions\">\n                  <div class=\"optionsBtn dropdow\" class=\"btnIcon dropdown-toggle c8y-dropdown\">\n                    <i c8yIcon=\"cog\"></i>\n                  </div>\n                </div>\n              </div>\n              <div class=\"card-inner-scroll\">\n                <div class=\"card-block\" style=\"min-height: 240px;\">\n                  include here the widget\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      --></div>\n    </div>\n\n    <div *ngIf=\"mode === 'style'\" class=\"modal-body p-t-0\" style=\"min-height: calc(100vh - 290px);\">\n      <div class=\"row\">\n        <div class=\"col-xs-6\">\n          <c8y-appearance-settings\n            [(themeClass)]=\"styling.contentClass\"\n            [(headerClass)]=\"styling.headerClass\"\n            [possibleStylingTheme]=\"possibleStyling.WIDGET_CONTENT_CLASSES\"\n            [possibleStylingHeader]=\"possibleStyling.WIDGET_HEADER_CLASSES\"\n            [defaultThemeClass]=\"defaultStyling.contentClass\"\n            [defaultHeaderClass]=\"defaultStyling.headerClass\"\n          >\n          </c8y-appearance-settings>\n        </div>\n        <div class=\"col-xs-6 sticky-header-top-0\">\n          <c8y-widget-preview [previewClasses]=\"getStyle(true)\"></c8y-widget-preview>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"modal-footer\">\n    <button title=\"{{ 'Cancel' | translate }}\" class=\"btn btn-default\" (click)=\"close()\" translate>\n      Cancel\n    </button>\n    <button\n      title=\"{{ 'Save' | translate }}\"\n      class=\"btn btn-primary\"\n      (click)=\"save()\"\n      translate\n      [disabled]=\"contextDashboardService.formDisabled || configForm.invalid\"\n    >\n      Save\n    </button>\n  </div>\n</form>\n"
            })
        ], WidgetConfigComponent);
        return WidgetConfigComponent;
    }());

    /**
     * The context dashboard is a dashboard which resolves it data from the current context (device or group)
     * it is displayed on. It usually uses the route.data for it, but you can pass
     * a different managedObject to the [mo] input parameter to change that behavior.
     */
    var ContextDashboardComponent = /** @class */ (function () {
        function ContextDashboardComponent(route, router, contextDashboardService, alert, renderer, moduleConfig, widgetService, bsModal) {
            this.route = route;
            this.router = router;
            this.contextDashboardService = contextDashboardService;
            this.alert = alert;
            this.renderer = renderer;
            this.moduleConfig = moduleConfig;
            this.widgetService = widgetService;
            this.bsModal = bsModal;
            this.childrenClasses = '';
            this.setTitle = false;
            this.disabled = false;
            this.defaultWidgets = [];
            this.canDelete = true;
            this.isLoading = true;
            this.class = '';
            this.widgets = [];
        }
        ContextDashboardComponent.prototype.ngOnInit = function () {
            if (!this.name) {
                this.loadContextDashboard();
                return;
            }
            this.loadNamedDashboard();
        };
        /**
         * Applies the current context to the widget
         * @param widget The widget to apply the context to.
         */
        ContextDashboardComponent.prototype.applyDeviceTarget = function (widget) {
            if (widget.config.device) {
                widget.config.device = { id: this.context.id, name: this.context.name };
            }
        };
        /**
         * Removes the route listener.
         */
        ContextDashboardComponent.prototype.ngOnDestroy = function () {
            if (this.dataSub) {
                this.dataSub.unsubscribe();
            }
        };
        /**
         * Restores the dashboard widgets to the default widgets.
         */
        ContextDashboardComponent.prototype.restore = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.isLoading = true;
                            this.mo.c8y_Dashboard.children = this.contextDashboardService.mapWidgets(this.defaultWidgets);
                            return [4 /*yield*/, this.contextDashboardService.update(this.mo)];
                        case 1:
                            _a.sent();
                            this.onLoad();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Updates all dashboards children's. Useful for position changes on the dashboard.
         * @param child The child to change.
         */
        ContextDashboardComponent.prototype.updateDashboardChildren = function (child) {
            return __awaiter(this, void 0, void 0, function () {
                var children, dashboardMO, mappedChildren;
                var _this = this;
                return __generator(this, function (_a) {
                    children = child.children;
                    dashboardMO = this.mo;
                    mappedChildren = lodashEs.keyBy(children.map(function (c) { return _this.componentToWidget(c); }), 'id');
                    dashboardMO.c8y_Dashboard.children = mappedChildren;
                    return [2 /*return*/, this.contextDashboardService.update(dashboardMO)];
                });
            });
        };
        /**
         * Remove the complete dashboard and navigate away.
         */
        ContextDashboardComponent.prototype.deleteDashboard = function () {
            return __awaiter(this, void 0, void 0, function () {
                var route;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.contextDashboardService.delete(this.mo)];
                        case 1:
                            _a.sent();
                            if (this.route.parent) {
                                route = this.route.parent.snapshot.url.map(function (segment) { return segment.path; }).join('/');
                                this.router.navigateByUrl(route);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Edits the current dashboard
         */
        ContextDashboardComponent.prototype.editDashboard = function () {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, dashboardMO, _a, ex_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            initialState = {
                                dashboard: this.dashboard,
                                deviceType: this.context.type,
                                isNamedDashboard: this.contextDashboardService.isNamed(this.mo)
                            };
                            modal = this.bsModal.show(DashboardDetailComponent, {
                                class: 'modal-lg',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 5, , 6]);
                            dashboardMO = lodashEs.cloneDeep(this.mo);
                            _a = dashboardMO;
                            return [4 /*yield*/, modal.result];
                        case 2:
                            _a.c8y_Dashboard = _b.sent();
                            return [4 /*yield*/, this.contextDashboardService.update(dashboardMO)];
                        case 3:
                            _b.sent();
                            return [4 /*yield*/, this.contextDashboardService.refreshTabs(dashboardMO)];
                        case 4:
                            _b.sent();
                            this.onLoad();
                            modal.close();
                            return [3 /*break*/, 6];
                        case 5:
                            ex_1 = _b.sent();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Edits a widget on the dashboard.
         * @param change The widget change event.
         */
        ContextDashboardComponent.prototype.editWidget = function (change) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, x, y, width, height, component;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = change.source, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
                            return [4 /*yield*/, this.widgetService.getWidgetDefinition(change.widget.name || change.widget.componentId)];
                        case 1:
                            component = _b.sent();
                            if (!component) {
                                this.addWidget();
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.addWidget(__assign({}, component, { data: __assign({}, component.data, change.widget, { _x: x, _y: y, _width: width, _height: height }) }))];
                        case 2:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Adds a widget to the dashboard.
         * @param selected Define a selected component to switch to edit mode directly.
         */
        ContextDashboardComponent.prototype.addWidget = function (selected) {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, newWidget, ex_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            initialState = {
                                mo: this.mo,
                                context: this.context,
                                selected: lodashEs.cloneDeep(selected)
                            };
                            modal = this.bsModal.show(WidgetConfigComponent, {
                                class: 'modal-lg',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            newWidget = _a.sent();
                            if (!this.mo.c8y_Dashboard.children) {
                                this.mo.c8y_Dashboard.children = {};
                            }
                            this.mo.c8y_Dashboard.children[newWidget.id] = newWidget;
                            this.contextDashboardService.update(this.mo);
                            newWidget.classes = this.mergeWidgetClasses(newWidget);
                            return [4 /*yield*/, this.updateWidget(newWidget)];
                        case 3:
                            _a.sent();
                            modal.close();
                            return [3 /*break*/, 5];
                        case 4:
                            ex_2 = _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Updates a widget or adds a new one if it doesn't exist on
         * the dashboard.
         * @param widget The new widget
         */
        ContextDashboardComponent.prototype.updateWidget = function (widget) {
            return __awaiter(this, void 0, void 0, function () {
                var index, isNew, mappedWidget;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            index = lodashEs.findIndex(this.widgets, { id: widget.id });
                            isNew = index === -1;
                            return [4 /*yield*/, this.mapLegacy(widget)];
                        case 1:
                            mappedWidget = _a.sent();
                            if (isNew) {
                                this.widgets.push(mappedWidget);
                            }
                            else {
                                this.widgets.splice(index, 1, mappedWidget);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Removes a widget and rearranges the remaining ones
         * if necessary.
         * @param change The change event.
         */
        ContextDashboardComponent.prototype.deleteWidget = function (change) {
            var _this = this;
            var widget = change.widget, source = change.source;
            delete this.mo.c8y_Dashboard.children[widget.id];
            var removed = this.widgets.find(function (_a) {
                var id = _a.id;
                return id === widget.id;
            });
            this.widgets.splice(this.widgets.indexOf(removed), 1);
            // using setTimeout to give the component the chance to remove it.
            setTimeout(function () {
                var child = new ngxComponents.DashboardChildChange(source);
                child.collapseUpAll();
                _this.updateDashboardChildren(child);
            });
        };
        /**
         * This is a workaround to ensure that the dragged-element
         * (which is attached to the body) has the right styling.
         */
        ContextDashboardComponent.prototype.addDashboardClassToBody = function () {
            var _this = this;
            this.class.split(' ').forEach(function (cssClass) {
                _this.renderer.addClass(document.body, cssClass);
            });
        };
        /**
         * This is a workaround to ensure that the dragged-element
         * (which is attached to the body) has the right styling.
         */
        ContextDashboardComponent.prototype.removeDashboardClassFromBody = function () {
            var _this = this;
            this.class.split(' ').forEach(function (cssClass) {
                _this.renderer.removeClass(document.body, cssClass);
            });
        };
        /**
         * Changes the dashboard settings to frozen or vice versa.
         * @param settings The current settings of the dashboard.
         */
        ContextDashboardComponent.prototype.toggleFreeze = function (settings) {
            return __awaiter(this, void 0, void 0, function () {
                var ex_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.toggleIsFrozenFlag(settings);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.contextDashboardService.update(this.mo)];
                        case 2:
                            _a.sent();
                            if (this.dashboard.isFrozen) {
                                this.alert.success(ngxComponents.gettext('Your dashboard is locked now.'));
                            }
                            else {
                                this.alert.success(ngxComponents.gettext('Your dashboard is unlocked now.'));
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            ex_3 = _a.sent();
                            this.alert.addServerFailure(ex_3);
                            this.toggleIsFrozenFlag(settings);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardComponent.prototype.toggleIsFrozenFlag = function (settings) {
            settings.isFrozen = !settings.isFrozen;
            this.dashboard.isFrozen = settings.isFrozen;
        };
        ContextDashboardComponent.prototype.loadContextDashboard = function () {
            var _this = this;
            this.dataSub = this.route.data.subscribe(function (_a) {
                var dashboard = _a.dashboard;
                _this.context = _this.route.parent.snapshot.data.contextData;
                _this.mo = dashboard;
                _this.dashboard = _this.mo.c8y_Dashboard;
                _this.onLoad();
            });
        };
        ContextDashboardComponent.prototype.loadNamedDashboard = function () {
            var _this = this;
            this.dataSub = this.contextDashboardService
                .getNamedDashboardOrCreate(this.name, this.defaultWidgets)
                .subscribe(function (mo) {
                _this.context = _this.context || {};
                _this.mo = mo;
                _this.dashboard = _this.mo.c8y_Dashboard;
                _this.onLoad();
            });
        };
        ContextDashboardComponent.prototype.onLoad = function () {
            return __awaiter(this, void 0, void 0, function () {
                var dashboardChildren, isDeviceType, dashboardClasses, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.disabled = !this.contextDashboardService.hasPermission();
                            dashboardChildren = lodashEs.cloneDeep(this.mo.c8y_Dashboard.children);
                            isDeviceType = this.contextDashboardService.isDeviceType(this.mo);
                            dashboardClasses = __assign({ 'c8y-grid-dashboard': true, dashboard: true }, this.dashboard.classes);
                            _a = this;
                            return [4 /*yield*/, Promise.all(lodashEs.values(dashboardChildren).map(function (widget) {
                                    widget.classes = _this.mergeWidgetClasses(widget);
                                    if (isDeviceType) {
                                        _this.applyDeviceTarget(widget);
                                    }
                                    return _this.mapLegacy(widget);
                                }))];
                        case 1:
                            _a.widgets = _b.sent();
                            this.class = Object.keys(dashboardClasses).join(' ');
                            this.disabled = !this.contextDashboardService.hasPermission();
                            this.isLoading = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ContextDashboardComponent.prototype.mergeWidgetClasses = function (widget) {
            var hasHeaderClass = WIDGET_HEADER_CLASSES.find(function (el) { return widget.classes && widget.classes[el.class]; });
            var widgetClasses = hasHeaderClass
                ? __assign({}, widget.classes) : __assign({}, this.dashboard.widgetClasses, widget.classes);
            return __assign({ card: true, 'card-dashboard': true }, widgetClasses);
        };
        ContextDashboardComponent.prototype.componentToWidget = function (child) {
            return __assign({}, lodashEs.omit(child.data, ['componentTransformConfigWithContext', 'transformConfigWithContext']), {
                _x: child.x,
                _y: child.y,
                _width: child.width,
                _height: child.height
            });
        };
        ContextDashboardComponent.prototype.mapLegacy = function (widget) {
            return __awaiter(this, void 0, void 0, function () {
                var cmp;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.widgetService.getWidgetDefinition(widget.componentId || widget.name)];
                        case 1:
                            cmp = _a.sent();
                            if (lodashEs.get(cmp, 'data.settings.upgrade')) {
                                widget.widgetComponent = cmp.data.settings.widgetComponent;
                                widget.configComponent = cmp.data.settings.configComponent;
                                widget.templateUrl = cmp.data.settings.templateUrl;
                                widget.configTemplateUrl = cmp.data.settings.configTemplateUrl;
                                widget.transformConfigWithContext =
                                    cmp.data.settings.componentTransformConfigWithContext ||
                                        cmp.data.settings.transformConfigWithContext;
                            }
                            else {
                                delete widget.templateUrl;
                                delete widget.configTemplateUrl;
                            }
                            return [2 /*return*/, widget];
                    }
                });
            });
        };
        ContextDashboardComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute },
            { type: router.Router },
            { type: ContextDashboardService },
            { type: ngxComponents.AlertService },
            { type: core.Renderer2 },
            { type: undefined, decorators: [{ type: core.Inject, args: [CONTEXT_DASHBOARD_CONFIG,] }] },
            { type: WidgetService },
            { type: modal.BsModalService }
        ]; };
        __decorate([
            core.Input()
        ], ContextDashboardComponent.prototype, "name", void 0);
        __decorate([
            core.Input()
        ], ContextDashboardComponent.prototype, "childrenClasses", void 0);
        __decorate([
            core.Input()
        ], ContextDashboardComponent.prototype, "context", void 0);
        __decorate([
            core.Input()
        ], ContextDashboardComponent.prototype, "setTitle", void 0);
        __decorate([
            core.Input()
        ], ContextDashboardComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input()
        ], ContextDashboardComponent.prototype, "defaultWidgets", void 0);
        __decorate([
            core.Input()
        ], ContextDashboardComponent.prototype, "canDelete", void 0);
        __decorate([
            core.Input()
        ], ContextDashboardComponent.prototype, "isLoading", void 0);
        __decorate([
            core.HostBinding('class')
        ], ContextDashboardComponent.prototype, "class", void 0);
        ContextDashboardComponent = __decorate([
            core.Component({
                selector: 'c8y-context-dashboard',
                template: "<c8y-action-bar-item [placement]=\"'more'\" *ngIf=\"defaultWidgets.length > 0\">\n  <button (click)=\"restore()\" [disabled]=\"dashboard?.isFrozen || disabled\">\n    <i c8yIcon=\"undo\"></i>&nbsp;<span translate>Restore dashboard</span>\n  </button>\n</c8y-action-bar-item>\n\n<c8y-widgets-dashboard\n  [context]=\"context\"\n  [contextDashboard]=\"dashboard\"\n  [widgets]=\"widgets\"\n  [settings]=\"{\n    isLoading: isLoading,\n    isFrozen: dashboard?.isFrozen,\n    isDisabled: disabled,\n    canDelete: canDelete,\n    translateWidgetTitle: dashboard?.translateWidgetTitle,\n    allowFullscreen: moduleConfig.allowFullscreen,\n    title: setTitle ? dashboard.name : undefined,\n    widgetMargin: dashboard?.widgetMargin\n  }\"\n  (onFreeze)=\"toggleFreeze($event)\"\n  (onChangeDashboard)=\"updateDashboardChildren($event)\"\n  (onAddWidget)=\"addWidget()\"\n  (onEditWidget)=\"editWidget($event)\"\n  (onDeleteWidget)=\"deleteWidget($event)\"\n  (onChangeStart)=\"addDashboardClassToBody()\"\n  (onChangeEnd)=\"removeDashboardClassFromBody()\"\n  (onEditDashboard)=\"editDashboard()\"\n  (onDeleteDashboard)=\"deleteDashboard()\"\n>\n</c8y-widgets-dashboard>\n",
                host: {
                    style: "\n      display: block;\n    ",
                    class: 'dashboard c8y-grid-dashboard'
                }
            }),
            __param(5, core.Inject(CONTEXT_DASHBOARD_CONFIG))
        ], ContextDashboardComponent);
        return ContextDashboardComponent;
    }());

    var GroupDashboardGuard = /** @class */ (function () {
        function GroupDashboardGuard(contextDashboardService) {
            this.contextDashboardService = contextDashboardService;
        }
        GroupDashboardGuard.prototype.canActivate = function (route) {
            return this.contextDashboardService.activateDashboards(route, [
                exports.ContextDashboardType.Group
            ]);
        };
        GroupDashboardGuard.ctorParameters = function () { return [
            { type: ContextDashboardService }
        ]; };
        GroupDashboardGuard = __decorate([
            core.Injectable()
        ], GroupDashboardGuard);
        return GroupDashboardGuard;
    }());

    var DashboardActionsFactory = /** @class */ (function () {
        function DashboardActionsFactory(router, contextDashboardService, bsModal) {
            this.router = router;
            this.contextDashboardService = contextDashboardService;
            this.bsModal = bsModal;
        }
        DashboardActionsFactory.prototype.get = function (activatedRoute) {
            var _this = this;
            var context = !activatedRoute.parent || activatedRoute.snapshot.data.context
                ? activatedRoute.snapshot.data
                : activatedRoute.parent.snapshot.data;
            return [
                {
                    label: ngxComponents.gettext('Add dashboard'),
                    priority: 2500,
                    action: function () { return _this.addDashboard(context); },
                    disabled: !this.isEnabled(context)
                }
            ];
        };
        DashboardActionsFactory.prototype.addDashboard = function (context) {
            return __awaiter(this, void 0, void 0, function () {
                var initialState, modal, dashboardCfg, dashboardMO, ex_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (context.context === ngxComponents.ViewContext.Device) {
                                initialState = {
                                    deviceType: context.contextData.type
                                };
                            }
                            modal = this.bsModal.show(DashboardDetailComponent, {
                                class: 'modal-lg',
                                initialState: initialState,
                                ignoreBackdropClick: true
                            }).content;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 6, , 7]);
                            return [4 /*yield*/, modal.result];
                        case 2:
                            dashboardCfg = _a.sent();
                            return [4 /*yield*/, this.contextDashboardService.create(dashboardCfg, context)];
                        case 3:
                            dashboardMO = _a.sent();
                            return [4 /*yield*/, this.contextDashboardService.navigateToDashboard(dashboardMO)];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, this.contextDashboardService.refreshTabs(dashboardMO)];
                        case 5:
                            _a.sent();
                            modal.close();
                            return [3 /*break*/, 7];
                        case 6:
                            ex_1 = _a.sent();
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        DashboardActionsFactory.prototype.isEnabled = function (context) {
            return (this.contextDashboardService.hasPermission() &&
                [ngxComponents.ViewContext.Device, ngxComponents.ViewContext.Group].includes(context.context));
        };
        DashboardActionsFactory.ctorParameters = function () { return [
            { type: router.Router },
            { type: ContextDashboardService },
            { type: modal.BsModalService }
        ]; };
        DashboardActionsFactory = __decorate([
            core.Injectable()
        ], DashboardActionsFactory);
        return DashboardActionsFactory;
    }());

    var AppearanceSettingsComponent = /** @class */ (function () {
        function AppearanceSettingsComponent() {
            this.themeClass = 'dashboard-theme-light';
            this.headerClass = 'panel-title-regular';
            this.themeClassChange = new core.EventEmitter();
            this.headerClassChange = new core.EventEmitter();
            this.possibleStylingTheme = DASHBOARD_THEME_CLASSES;
            this.possibleStylingHeader = WIDGET_HEADER_CLASSES;
        }
        AppearanceSettingsComponent.prototype.themeClassClick = function (value) {
            value = this.resetToDefault(value, this.themeClass, this.defaultThemeClass);
            this.themeClass = value;
            this.themeClassChange.emit(value);
        };
        AppearanceSettingsComponent.prototype.headerClassClick = function (value) {
            value = this.resetToDefault(value, this.headerClass, this.defaultHeaderClass);
            this.headerClass = value;
            this.headerClassChange.emit(value);
        };
        AppearanceSettingsComponent.prototype.resetToDefault = function (value, compareTo, defaultValue) {
            if (defaultValue && value === compareTo) {
                value = defaultValue;
            }
            return value;
        };
        __decorate([
            core.Input()
        ], AppearanceSettingsComponent.prototype, "themeClass", void 0);
        __decorate([
            core.Input()
        ], AppearanceSettingsComponent.prototype, "headerClass", void 0);
        __decorate([
            core.Input()
        ], AppearanceSettingsComponent.prototype, "defaultThemeClass", void 0);
        __decorate([
            core.Input()
        ], AppearanceSettingsComponent.prototype, "defaultHeaderClass", void 0);
        __decorate([
            core.Output()
        ], AppearanceSettingsComponent.prototype, "themeClassChange", void 0);
        __decorate([
            core.Output()
        ], AppearanceSettingsComponent.prototype, "headerClassChange", void 0);
        __decorate([
            core.Input()
        ], AppearanceSettingsComponent.prototype, "possibleStylingTheme", void 0);
        __decorate([
            core.Input()
        ], AppearanceSettingsComponent.prototype, "possibleStylingHeader", void 0);
        AppearanceSettingsComponent = __decorate([
            core.Component({
                selector: 'c8y-appearance-settings',
                template: "<h6 class=\"legend form-block\"><span translate>Layout</span></h6>\n<div class=\"row \">\n  <div class=\"col-sm-6 m-b-32\">\n    <label translate>Theme</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row\"\n        style=\"align-items: center; box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let themeClassItem of possibleStylingTheme; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradiocontentclass' + i\"\n              name=\"content\"\n              [value]=\"themeClassItem.class\"\n              [ngModel]=\"themeClass\"\n              (click)=\"themeClassClick(themeClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradiocontentclass' + i\">\n          <span>{{ themeClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"themeClassItem.class === defaultThemeClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ themeClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\">\n          <i \n            [c8yIcon]=\"'question-circle-o'\"\n            class=\"text-primary\"\n          ></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n  <div class=\"col-sm-6\">\n    <label translate>Widget header style</label>\n    <ul class=\"list-group\" style=\"box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);\">\n      <li\n        class=\"list-group-item flex-row\"\n        style=\"align-items: center; box-shadow: 0 1px 0 0 rgba(0, 0, 0, 0.05);\"\n        *ngFor=\"let headerClassItem of possibleStylingHeader; let i = index\"\n      >\n        <div class=\"list-item-checkbox\">\n          <label class=\"c8y-radio\">\n            <input\n              type=\"radio\"\n              [id]=\"'groupradioheaderclass' + i\"\n              name=\"header\"\n              [value]=\"headerClassItem.class\"\n              [ngModel]=\"headerClass\"\n              (click)=\"headerClassClick(headerClassItem.class)\"\n            />\n            <span></span>\n          </label>\n        </div>\n        <label [for]=\"'groupradioheaderclass' + i\">\n          <span>{{ headerClassItem.label | translate }}</span>\n          <br />\n          <small *ngIf=\"headerClassItem.class === defaultHeaderClass\" class=\"text-muted\" translate\n            >Dashboard default</small\n          >\n        </label>\n        <button class=\"btn btn-clean flex-item-top\"\n          popover=\"{{ headerClassItem.description | translate }}\"\n          container=\"body\"\n          placement=\"top\"\n          triggers=\"focus\">\n          <i \n            [c8yIcon]=\"'question-circle-o'\"\n            class=\"text-primary\"\n          ></i>\n        </button>\n      </li>\n    </ul>\n  </div>\n</div>\n",
                viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }]
            })
        ], AppearanceSettingsComponent);
        return AppearanceSettingsComponent;
    }());

    var WidgetPreviewComponent = /** @class */ (function () {
        function WidgetPreviewComponent() {
            this.previewClasses = {
                'dashboard-theme-light': true,
                'panel-title-regular': true
            };
        }
        __decorate([
            core.Input()
        ], WidgetPreviewComponent.prototype, "previewClasses", void 0);
        __decorate([
            core.Input()
        ], WidgetPreviewComponent.prototype, "tab", void 0);
        WidgetPreviewComponent = __decorate([
            core.Component({
                selector: 'c8y-widget-preview',
                template: "<div class=\"legend form-block\" translate>Preview</div>\n<label *ngIf=\"tab\" translate>Tab and layout</label>\n<label *ngIf=\"!tab\" translate>Layout</label>\n<div class=\"dashboard-preview-slot\" [ngClass]=\"previewClasses\">\n  <div\n    class=\"page-tabs page-tabs-horizontal navigator-open\"\n    style=\" position: absolute; left: 0; margin: 0 15px; overflow: hidden;\"\n    *ngIf=\"tab\"\n  >\n    <div class=\"tabContainer hidden-xs\">\n      <ul class=\"nav nav-tabs nav-tabsc8y\">\n        <li class=\"active\" style=\"left: 16px;\">\n          <a routerlinkactive=\"\" title=\"{{ tab.name }}\">\n            <i class=\"text-primary\" [c8yIcon]=\"tab.icon\"></i>\n            <span class=\"txt\">{{ tab.name }}</span></a\n          >\n        </li>\n      </ul>\n    </div>\n    <div class=\"visible-xs mobile-tabs\"></div>\n  </div>\n  <div [ngClass]=\"{ 'm-t-64': !!tab }\">\n    <div class=\"card card-dashboard\" style=\"height: 360px;\">\n      <div class=\"card-header-actions\" style=\"z-index: 8;\">\n        <div class=\"card-title\">\n          <span translate>Widget title</span>\n        </div>\n        <div class=\"header-actions\">\n          <div class=\"optionsBtn dropdown\">\n            <a href=\"\" (click)=\"(false)\" class=\"dropdown-toggle c8y-dropdown\">\n              <i c8yIcon=\"cog\"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class=\"card-inner-scroll p-t-16\">\n        <p translate>Widget example content.</p>\n      </div>\n    </div>\n  </div>\n</div>\n"
            })
        ], WidgetPreviewComponent);
        return WidgetPreviewComponent;
    }());

    var defaultConfig = {
        allowFullscreen: true,
        widgetFilter: function (_a) {
            var data = _a.data;
            return !(data && data.settings && data.settings.noNewWidgets);
        },
        routes: [
            {
                path: 'dashboard/:dashboardId',
                component: ContextDashboardComponent,
                canActivate: [DeviceDashboardGuard],
                context: ngxComponents.ViewContext.Device
            },
            {
                path: 'dashboard/:dashboardId',
                component: ContextDashboardComponent,
                canActivate: [GroupDashboardGuard],
                context: ngxComponents.ViewContext.Group
            }
        ]
    };
    var ContextDashboardModule = /** @class */ (function () {
        function ContextDashboardModule() {
        }
        ContextDashboardModule_1 = ContextDashboardModule;
        ContextDashboardModule.config = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: ContextDashboardModule_1,
                providers: [
                    {
                        provide: CONTEXT_DASHBOARD_CONFIG,
                        useValue: __assign({}, defaultConfig, config)
                    },
                    ContextDashboardService,
                    DeviceDashboardGuard,
                    GroupDashboardGuard,
                    {
                        provide: ngxComponents.HOOK_ONCE_ROUTE,
                        useValue: __assign({}, defaultConfig, config).routes,
                        multi: true
                    },
                    {
                        provide: ngxComponents.HOOK_ACTION,
                        useClass: DashboardActionsFactory,
                        multi: true
                    }
                ]
            };
        };
        var ContextDashboardModule_1;
        ContextDashboardModule = ContextDashboardModule_1 = __decorate([
            core.NgModule({
                declarations: [
                    AppearanceSettingsComponent,
                    ContextDashboardComponent,
                    WidgetConfigComponent,
                    WidgetPreviewComponent,
                    DashboardDetailComponent
                ],
                imports: [ngxComponents.CoreModule, tooltip.TooltipModule, popover.PopoverModule, dropdown.BsDropdownModule.forRoot()],
                exports: [ContextDashboardComponent, WidgetConfigComponent],
                entryComponents: [ContextDashboardComponent, WidgetConfigComponent, DashboardDetailComponent]
            })
        ], ContextDashboardModule);
        return ContextDashboardModule;
    }());

    var CockpitDashboardComponent = /** @class */ (function () {
        function CockpitDashboardComponent() {
            this.DEFAULT_HOME_WIDGETS = [
                {
                    name: 'cockpit.welcome.widget',
                    title: ngxComponents.gettext(''),
                    _x: 0,
                    _y: 0,
                    _height: 5,
                    _width: 12,
                    classes: { 'panel-title-hidden': true }
                },
                {
                    name: 'Asset Alarms',
                    title: ngxComponents.gettext('Active, critical alarms'),
                    _x: 0,
                    _y: 5,
                    _height: 4,
                    _width: 6
                },
                {
                    name: 'Recent Alarms',
                    title: ngxComponents.gettext('Recent alarms'),
                    _x: 0,
                    _y: 9,
                    _height: 4,
                    _width: 6
                },
                {
                    name: 'Map',
                    title: ngxComponents.gettext('Map'),
                    _x: 6,
                    _y: 5,
                    _height: 8,
                    _width: 6
                }
            ];
        }
        CockpitDashboardComponent = __decorate([
            core.Component({
                selector: 'c8y-cockpit-dashboard',
                template: "<c8y-title translate>\n  Home\n</c8y-title>\n\n<c8y-context-dashboard name=\"home-cockpit1\" [defaultWidgets]=\"DEFAULT_HOME_WIDGETS\" [canDelete]=\"false\"></c8y-context-dashboard>\n"
            })
        ], CockpitDashboardComponent);
        return CockpitDashboardComponent;
    }());

    var WelcomeToCockpit = /** @class */ (function () {
        function WelcomeToCockpit(tenantService, docs, router, navigator, applicationService) {
            this.tenantService = tenantService;
            this.docs = docs;
            this.router = router;
            this.navigator = navigator;
            this.applicationService = applicationService;
            this.quickLinks = [];
            this.REPORT_NODE = 'Reports';
            this.CONFIGURATION_NODE = 'Configuration';
            this.TRIAL = 'TRIAL';
        }
        WelcomeToCockpit.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.tenantService.currentTenantType()];
                        case 1:
                            _a.tenantType = _b.sent();
                            this.setMessage();
                            this.navSubscription = this.navigator.items$.subscribe(function (nodes) {
                                _this.navNodes = nodes;
                            });
                            this.docsSubscription = this.docs.items$.subscribe(function (links) {
                                _this.links = links;
                            });
                            // <---TRIAL & REGULAR TENANT --->
                            this.createConnectSmartphoneQuickLink();
                            return [4 /*yield*/, this.createQuicklinkRegisterDevice()];
                        case 2:
                            _b.sent();
                            // <--- TRIAL TENANT --->
                            if (this.tenantType === this.TRIAL) {
                                this.createQuicklinkUserGuide();
                                return [2 /*return*/];
                            }
                            // <--- REGULAR TENANT --->
                            this.createQuicklinkAddGroup();
                            this.createQuickLinkReports();
                            this.createQuicklinkDataPointLibrary();
                            this.createQuicklinkSmartRules();
                            return [2 /*return*/];
                    }
                });
            });
        };
        WelcomeToCockpit.prototype.ngOnDestroy = function () {
            if (this.docsSubscription && !this.docsSubscription.closed) {
                this.docsSubscription.unsubscribe();
            }
            if (this.navSubscription && !this.navSubscription.closed) {
                this.navSubscription.unsubscribe();
            }
        };
        WelcomeToCockpit.prototype.setMessage = function () {
            if (this.tenantType === this.TRIAL) {
                this.welcomeMessage = ngxComponents.gettext("\n        The Cockpit application allows you to build IoT applications in minutes.\n        To get started, connect any device to the platform.\n        If you do not have an IoT device to hand, you can start by connecting your smartphone.\n        Click below to be guided through the process.\n      ");
            }
            else {
                this.welcomeMessage = ngxComponents.gettext("\n        The Cockpit application provides you with options to manage\n        and monitor Internet of Things assets and data from business perspective.\n      ");
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkAddGroup = function () {
            // comes from angularJS factory c8yQuickLinks
            var addGroup = this.links.find(function (link) { return link.label === 'Add group'; });
            if (addGroup) {
                this.quickLinks.push(addGroup);
            }
        };
        WelcomeToCockpit.prototype.createConnectSmartphoneQuickLink = function () {
            // Provider in SensorPhoneModule defines the
            // 'Connect smartphone' quicklink.
            var connectSmartphone = this.links.find(function (link) { return link.label === 'Connect smartphone'; });
            if (connectSmartphone) {
                this.quickLinks.push(connectSmartphone);
            }
        };
        WelcomeToCockpit.prototype.createQuickLinkReports = function () {
            var _this = this;
            var reports = {
                icon: 'c8y-reports',
                label: ngxComponents.gettext('Reports'),
                url: '/export'
            };
            var reportsNode = this.findNavigatorNode(this.REPORT_NODE);
            if (reportsNode && reportsNode.show) {
                reports.click = function () {
                    reportsNode.open = true;
                    _this.router.navigateByUrl(reports.url);
                };
                this.quickLinks.push(reports);
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkDataPointLibrary = function () {
            var _this = this;
            var dataPointLib = {
                icon: 'c8y-data-points',
                label: ngxComponents.gettext('Data point library'),
                url: '/datapointlibrary'
            };
            var configurationNode = this.findNavigatorNode(this.CONFIGURATION_NODE);
            if (configurationNode && configurationNode.show) {
                dataPointLib.click = function () {
                    configurationNode.open = true;
                    _this.router.navigateByUrl(dataPointLib.url);
                };
                this.quickLinks.push(dataPointLib);
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkSmartRules = function () {
            var _this = this;
            var smartRules = {
                icon: 'c8y-smart-rules',
                label: ngxComponents.gettext('Smart rules'),
                url: '/rules'
            };
            var configurationNode = this.findNavigatorNode(this.CONFIGURATION_NODE);
            if (configurationNode && configurationNode.show) {
                smartRules.click = function () {
                    configurationNode.open = true;
                    _this.router.navigateByUrl(smartRules.url);
                };
                this.quickLinks.push(smartRules);
            }
        };
        WelcomeToCockpit.prototype.createQuicklinkRegisterDevice = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data, deviceManagement, deviceMgmtUrl_1, registerDevice;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.applicationService.listByUser()];
                        case 1:
                            data = (_a.sent()).data;
                            if (data) {
                                deviceManagement = data.find(function (app) { return app.contextPath === 'devicemanagement'; });
                                if (deviceManagement) {
                                    deviceMgmtUrl_1 = this.applicationService.getHref(deviceManagement);
                                    registerDevice = {
                                        icon: 'c8y-device-connect',
                                        label: ngxComponents.gettext('Register device'),
                                        click: function () { return window.open(deviceMgmtUrl_1 + "/#/deviceregistration", '_self'); }
                                    };
                                    this.quickLinks.push(registerDevice);
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        WelcomeToCockpit.prototype.createQuicklinkUserGuide = function () {
            var _this = this;
            var userGuide = {
                icon: 'c8y-user',
                label: ngxComponents.gettext('User guide'),
                url: '/users-guide/getting-started',
                click: function () {
                    var userGuideURL = _this.docs.getUserGuideLink(userGuide.url);
                    window.open(userGuideURL);
                }
            };
            this.quickLinks.push(userGuide);
        };
        WelcomeToCockpit.prototype.findNavigatorNode = function (nodeRealName) {
            if (this.navNodes && this.navNodes.length > 0) {
                return this.navNodes.find(function (node) { return node.realName === nodeRealName; });
            }
            return undefined;
        };
        WelcomeToCockpit.ctorParameters = function () { return [
            { type: client.TenantService },
            { type: ngxComponents.DocsService },
            { type: router.Router },
            { type: ngxComponents.NavigatorService },
            { type: client.ApplicationService }
        ]; };
        __decorate([
            core.Input()
        ], WelcomeToCockpit.prototype, "config", void 0);
        WelcomeToCockpit = __decorate([
            core.Component({
                selector: 'c8y-welcome-to-cockpit',
                template: "<div class=\"welcome-widget welcome-cockpit\">\r\n  <div class=\"flex-row\">\r\n    <div class=\"col-xs-12 col-md-5 flex-item-v-stretch p-24\">\r\n      <h2 class=\"text-light\">{{ 'Welcome to Cockpit' | translate }}</h2>\r\n      <p class=\"text-16 text-light p-t-16 p-b-24\">{{ welcomeMessage | translate }}</p>\r\n      <div class=\"card-group interact-grid tight-grid\">\r\n        <div *ngFor=\"let link of quickLinks\" class=\"col-sm-4 col-xs-6\">\r\n          <c8y-quick-link\r\n            (click)=\"link.click ? link.click() : false\"\r\n            [icon]=\"link.icon\"\r\n            [label]=\"link.label\"\r\n            class=\"card\"\r\n          >\r\n          </c8y-quick-link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- <div class=\"col-sm-6 welcome-illustration flex-item-v-stretch\"></div> -->\r\n  </div>\r\n</div>\r\n"
            })
        ], WelcomeToCockpit);
        return WelcomeToCockpit;
    }());

    var LegacyWelcomeComponent = /** @class */ (function () {
        function LegacyWelcomeComponent(dashboard) {
            this.dashboard = dashboard;
        }
        LegacyWelcomeComponent.prototype.restore = function () {
            this.dashboard.restore();
        };
        LegacyWelcomeComponent.ctorParameters = function () { return [
            { type: ContextDashboardComponent, decorators: [{ type: core.Host }] }
        ]; };
        LegacyWelcomeComponent = __decorate([
            core.Component({
                selector: 'c8y-legacy-welcome-widget',
                template: "<div class=\"card-block\">\r\n  <p class=\"lead\" c8y-guide-docs>\r\n    <span>{{ 'Welcome to Cockpit' | translate }}.</span>\r\n    <span title=\"{{ 'Browse the manual' | translate }}\" class=\"cockpit-welcome-manual\" translate\r\n      >Browse the manual <a c8y-guide-href=\"users-guide/cockpit/\">here</a>.</span\r\n    >\r\n  </p>\r\n  <p class=\"m-t-16\">\r\n    <em>{{ 'New default dashboard available.' | translate }} </em>\r\n  </p>\r\n  <button class=\"btn btn-primary btn-sm m-t-16\" (click)=\"restore(); (false)\" translate>\r\n    Get new dashboard\r\n  </button>\r\n</div>\r\n"
            }),
            __param(0, core.Host())
        ], LegacyWelcomeComponent);
        return LegacyWelcomeComponent;
    }());

    // import for the preview img to get into the build.
    var previewImage = '';
    try {
        // tslint:disable-next-line: no-var-requires
        previewImage = require('./welcome/img/welcome-widget-pr.png');
    }
    catch (ex) {
        // intended empty
    }
    var ɵ0 = [{ label: ngxComponents.gettext('Home'), icon: 'home', priority: 10000, path: '/' }], ɵ1 = [
        {
            id: 'cockpit.welcome.widget',
            label: ngxComponents.gettext('Welcome to Cockpit'),
            description: ngxComponents.gettext('Displays a welcome message for Cockpit'),
            component: WelcomeToCockpit,
            previewImage: previewImage,
            data: {
                settings: {
                    noNewWidgets: false,
                    widgetDefaults: {
                        _width: 12,
                        _height: 6
                    },
                    ng1: {
                        options: {
                            noDeviceTarget: true,
                            groupsSelectable: false
                        }
                    }
                }
            }
        }
    ], ɵ2 = [
        {
            id: 'Cockpit Welcome',
            label: ngxComponents.gettext('Welcome to Cockpit'),
            description: ngxComponents.gettext('Displays a welcome message for Cockpit'),
            component: LegacyWelcomeComponent,
            data: {
                settings: {
                    noNewWidgets: true,
                    ng1: {
                        options: {
                            noDeviceTarget: true,
                            groupsSelectable: false
                        }
                    }
                }
            }
        }
    ];
    var CockpitDashboardModule = /** @class */ (function () {
        function CockpitDashboardModule() {
        }
        CockpitDashboardModule = __decorate([
            core.NgModule({
                entryComponents: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                imports: [
                    ngxComponents.DocsModule,
                    ngxComponents.CoreModule,
                    ContextDashboardModule.config({
                        routes: [
                            {
                                path: 'dashboard/:dashboardId',
                                component: ContextDashboardComponent,
                                canActivate: [DeviceDashboardGuard],
                                context: ngxComponents.ViewContext.Device
                            },
                            {
                                path: 'dashboard/:dashboardId',
                                component: ContextDashboardComponent,
                                canActivate: [GroupDashboardGuard],
                                context: ngxComponents.ViewContext.Group
                            },
                            {
                                path: '',
                                component: CockpitDashboardComponent
                            }
                        ]
                    }),
                    ngxComponents.QuickLinkModule,
                    core$1.TranslateModule
                ],
                declarations: [CockpitDashboardComponent, WelcomeToCockpit, LegacyWelcomeComponent],
                providers: [
                    {
                        provide: ngxComponents.HOOK_NAVIGATOR_NODES,
                        useValue: ɵ0,
                        multi: true
                    },
                    {
                        provide: ngxComponents.HOOK_COMPONENTS,
                        multi: true,
                        useValue: ɵ1
                    },
                    {
                        provide: ngxComponents.HOOK_COMPONENTS,
                        multi: true,
                        useValue: ɵ2
                    }
                ]
            })
        ], CockpitDashboardModule);
        return CockpitDashboardModule;
    }());

    exports.CONTEXT_DASHBOARD_CONFIG = CONTEXT_DASHBOARD_CONFIG;
    exports.CockpitDashboardModule = CockpitDashboardModule;
    exports.ContextDashboardModule = ContextDashboardModule;
    exports.ContextDashboardService = ContextDashboardService;
    exports.DASHBOARD_THEME_CLASSES = DASHBOARD_THEME_CLASSES;
    exports.DeviceDashboardGuard = DeviceDashboardGuard;
    exports.GroupDashboardGuard = GroupDashboardGuard;
    exports.WIDGET_CONTENT_CLASSES = WIDGET_CONTENT_CLASSES;
    exports.WIDGET_HEADER_CLASSES = WIDGET_HEADER_CLASSES;
    exports.ɵ0 = ɵ0;
    exports.ɵ1 = ɵ1;
    exports.ɵ2 = ɵ2;
    exports.ɵa = AppearanceSettingsComponent;
    exports.ɵb = ContextDashboardComponent;
    exports.ɵc = WidgetService;
    exports.ɵd = WidgetConfigComponent;
    exports.ɵe = WidgetPreviewComponent;
    exports.ɵf = DashboardDetailComponent;
    exports.ɵg = DashboardActionsFactory;
    exports.ɵh = CockpitDashboardComponent;
    exports.ɵi = WelcomeToCockpit;
    exports.ɵj = LegacyWelcomeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=c8y-ngx-components-context-dashboard.umd.js.map
