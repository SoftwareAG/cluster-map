(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@c8y/ngx-components'), require('lodash-es'), require('@c8y/client'), require('@ngx-translate/core'), require('@angular/common'), require('ngx-bootstrap/modal'), require('lodash'), require('ngx-bootstrap/dropdown'), require('ngx-bootstrap/tooltip'), require('angular'), require('@c8y/ng1-modules/core/bootstrap'), require('@angular/upgrade/static')) :
    typeof define === 'function' && define.amd ? define('@c8y/ngx-components/reports', ['exports', '@angular/core', '@c8y/ngx-components', 'lodash-es', '@c8y/client', '@ngx-translate/core', '@angular/common', 'ngx-bootstrap/modal', 'lodash', 'ngx-bootstrap/dropdown', 'ngx-bootstrap/tooltip', 'angular', '@c8y/ng1-modules/core/bootstrap', '@angular/upgrade/static'], factory) :
    (global = global || self, factory((global.c8y = global.c8y || {}, global.c8y['ngx-components'] = global.c8y['ngx-components'] || {}, global.c8y['ngx-components'].reports = {}), global.ng.core, global.c8y['ngx-components'], global.lodashEs, global.client, global.core$1, global.ng.common, global.modal, global.lodash, global.dropdown, global.tooltip, global.angular, global.bootstrap, global.ng.upgrade.static));
}(this, (function (exports, core, ngxComponents, lodashEs, client, core$1, common, modal, lodash, dropdown, tooltip, angular, bootstrap, _static) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var ReportsService = /** @class */ (function () {
        function ReportsService(alertService, inventoryService, client) {
            this.alertService = alertService;
            this.inventoryService = inventoryService;
            this.client = client;
            this.ERROR_MESSAGES = {
                pattern_multiEmail: ngxComponents.gettext('Invalid email addresses.'),
                pattern_singleEmail: ngxComponents.gettext('Invalid email address.')
            };
            this.microserviceUrl = '/service/reporting/schedule';
            this.headers = { 'Content-Type': 'application/json' };
        }
        ReportsService.prototype.getExport = function (exportId) {
            return __awaiter(this, void 0, void 0, function () {
                var exp, exportDetail, data, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.inventoryService.detail(exportId)];
                        case 1:
                            exportDetail = _a.sent();
                            data = exportDetail.data, res = exportDetail.res;
                            if (res.status !== 200) {
                                this.alertService.addServerFailure({ data: data, res: res });
                            }
                            else {
                                exp = data ? data : {};
                            }
                            return [2 /*return*/, exp];
                    }
                });
            });
        };
        ReportsService.prototype.getScheduleList = function (exportId) {
            return __awaiter(this, void 0, void 0, function () {
                var exp;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getExport(exportId)];
                        case 1:
                            exp = _a.sent();
                            return [2 /*return*/, this.extractScheduleListFromExport(exp)];
                    }
                });
            });
        };
        ReportsService.prototype.extractScheduleListFromExport = function (exp) {
            var scheduleList;
            if (exp) {
                scheduleList = exp.c8y_ScheduleConfiguration ? exp.c8y_ScheduleConfiguration : [];
            }
            return lodashEs.orderBy(scheduleList, ['timestamp'], ['desc']);
        };
        ReportsService.prototype.addSchedule = function (schedule, exportId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.updateSchedules(exportId, [], [schedule])];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        ReportsService.prototype.updateSchedule = function (oldSchedule, schedule, exportId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.updateSchedules(exportId, [oldSchedule], [schedule])];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        ReportsService.prototype.updateSchedules = function (exportId, schedulesToRemove, schedulesToAdd) {
            if (schedulesToRemove === void 0) { schedulesToRemove = []; }
            if (schedulesToAdd === void 0) { schedulesToAdd = []; }
            return __awaiter(this, void 0, void 0, function () {
                var success, exp, schedules, _a, data, res;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            success = false;
                            return [4 /*yield*/, this.getExport(exportId)];
                        case 1:
                            exp = _b.sent();
                            schedules = this.extractScheduleListFromExport(exp);
                            lodashEs.remove(schedules, function (schedule) {
                                return lodashEs.some(schedulesToRemove, function (scheduleToRemove) { return lodashEs.isEqual(schedule, scheduleToRemove); });
                            });
                            schedules.push.apply(schedules, schedulesToAdd);
                            exp.c8y_ScheduleConfiguration = schedules;
                            return [4 /*yield*/, this.inventoryService.update(exp)];
                        case 2:
                            _a = _b.sent(), data = _a.data, res = _a.res;
                            if (!(res.status === 200)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.reschedule(exportId)];
                        case 3:
                            success = _b.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            this.alertService.addServerFailure({ data: data, res: res });
                            _b.label = 5;
                        case 5: return [2 /*return*/, success];
                    }
                });
            });
        };
        ReportsService.prototype.reschedule = function (exportId) {
            return __awaiter(this, void 0, void 0, function () {
                var options, rescheduling;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                method: 'PUT',
                                headers: this.headers
                            };
                            return [4 /*yield*/, this.client.fetch(this.microserviceUrl + "/" + exportId, options)];
                        case 1:
                            rescheduling = _a.sent();
                            return [2 /*return*/, rescheduling.status === 200];
                    }
                });
            });
        };
        ReportsService.prototype.deleteSchedule = function (schedule, exportId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.updateSchedules(exportId, [schedule], [])];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        ReportsService.ctorParameters = function () { return [
            { type: ngxComponents.AlertService },
            { type: client.InventoryService },
            { type: client.FetchClient }
        ]; };
        ReportsService = __decorate([
            core.Injectable()
        ], ReportsService);
        return ReportsService;
    }());

    var ActionType;
    (function (ActionType) {
        ActionType["CREATE"] = "create";
        ActionType["EDIT"] = "edit";
        ActionType["DUPLICATE"] = "duplicate";
    })(ActionType || (ActionType = {}));
    var Base;
    (function (Base) {
        Base[Base["Initial"] = 1] = "Initial";
        Base[Base["Hour"] = 2] = "Hour";
        Base[Base["Day"] = 3] = "Day";
        Base[Base["Week"] = 4] = "Week";
        Base[Base["Month"] = 5] = "Month";
        Base[Base["Year"] = 6] = "Year";
    })(Base || (Base = {}));

    var CronService = /** @class */ (function () {
        function CronService(translateService) {
            this.translateService = translateService;
            this.daysOfWeekPosix = [];
            this.daysOfMonth = [
                { value: '1', label: '1.' },
                { value: '2', label: '2.' },
                { value: '3', label: '3.' },
                { value: '4', label: '4.' },
                { value: '5', label: '5.' },
                { value: '6', label: '6.' },
                { value: '7', label: '7.' },
                { value: '8', label: '8.' },
                { value: '9', label: '9.' },
                { value: '10', label: '10.' },
                { value: '11', label: '11.' },
                { value: '12', label: '12.' },
                { value: '13', label: '13.' },
                { value: '14', label: '14.' },
                { value: '15', label: '15.' },
                { value: '16', label: '16.' },
                { value: '17', label: '17.' },
                { value: '18', label: '18.' },
                { value: '19', label: '19.' },
                { value: '20', label: '20.' },
                { value: '21', label: '21.' },
                { value: '22', label: '22.' },
                { value: '23', label: '23.' },
                { value: '24', label: '24.' },
                { value: '25', label: '25.' },
                { value: '26', label: '26.' },
                { value: '27', label: '27.' },
                { value: '28', label: '28.' },
                { value: '29', label: '29.' },
                { value: '30', label: '30.' },
                { value: '31', label: '31.' }
            ];
            this.months = [];
            this.hours = [];
            this.minutes = [];
            this.intervals = [
                { value: 2, label: ngxComponents.gettext('Hour') },
                { value: 3, label: ngxComponents.gettext('Day') },
                { value: 4, label: ngxComponents.gettext('Week') },
                { value: 5, label: ngxComponents.gettext('Month') },
                { value: 6, label: ngxComponents.gettext('Year') }
            ];
            for (var x = 0; x < 24; x++) {
                this.hours.push({ value: x.toString(), label: "" + x });
            }
            for (var x = 0; x < 60; x = x + 5) {
                this.minutes.push({ value: x.toString(), label: "" + x });
            }
            for (var x = 0; x < 7; x++) {
                this.daysOfWeekPosix.push({
                    value: x.toString(),
                    label: this.getWeekDayName({ weekday: x })
                });
            }
            for (var x = 1; x < 13; x++) {
                this.months.push({
                    value: x.toString(),
                    label: this.getMonthName({ month: x })
                });
            }
        }
        CronService.prototype.generateCron = function (cronConfig) {
            var cron = '';
            cron = cronConfig.minute ? "" + cronConfig.minute : '*';
            cron += cronConfig.hour ? " " + cronConfig.hour : ' *';
            cron += cronConfig.day ? " " + cronConfig.day : ' *';
            cron += cronConfig.month ? " " + cronConfig.month : ' *';
            cron += cronConfig.weekday ? " " + cronConfig.weekday : ' *';
            return cron;
        };
        CronService.prototype.generateCronConfig = function (cron) {
            var parts = cron.split(/\s+/);
            var cronConfig = {
                minute: parts[0],
                hour: parts[1],
                day: parts[2],
                month: parts[3],
                weekday: parts[4]
            };
            return cronConfig;
        };
        CronService.prototype.getBase = function (cronConfig) {
            var base = Base.Initial;
            if (cronConfig.minute !== '*' &&
                cronConfig.hour === '*' &&
                cronConfig.day === '*' &&
                cronConfig.month === '*' &&
                cronConfig.weekday === '*') {
                base = Base.Hour;
            }
            else if (cronConfig.minute !== '*' &&
                cronConfig.hour !== '*' &&
                cronConfig.day === '*' &&
                cronConfig.month === '*' &&
                cronConfig.weekday === '*') {
                base = Base.Day;
            }
            else if (cronConfig.minute !== '*' &&
                cronConfig.hour !== '*' &&
                cronConfig.day === '*' &&
                cronConfig.month === '*' &&
                cronConfig.weekday !== '*') {
                base = Base.Week;
            }
            else if (cronConfig.minute !== '*' &&
                cronConfig.hour !== '*' &&
                cronConfig.day !== '*' &&
                cronConfig.month === '*' &&
                cronConfig.weekday === '*') {
                base = Base.Month;
            }
            else if (cronConfig.minute !== '*' &&
                cronConfig.hour !== '*' &&
                cronConfig.day !== '*' &&
                cronConfig.month !== '*' &&
                cronConfig.weekday === '*') {
                base = Base.Year;
            }
            else {
                // cronConfig invalid
            }
            return base;
        };
        CronService.prototype.validateModels = function (base, cronConfig) {
            var valid;
            switch (base) {
                case Base.Initial: // Please select
                    valid = false;
                    break;
                case Base.Hour:
                    if (cronConfig.minute !== '*') {
                        valid = true;
                    }
                    else {
                        valid = false;
                    }
                    break;
                case Base.Day:
                    if (cronConfig.minute !== '*' && cronConfig.hour !== '*') {
                        valid = true;
                    }
                    else {
                        valid = false;
                    }
                    break;
                case Base.Week:
                    if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.weekday !== '*') {
                        valid = true;
                    }
                    else {
                        valid = false;
                    }
                    break;
                case Base.Month:
                    if (cronConfig.minute !== '*' && cronConfig.hour !== '*' && cronConfig.day !== '*') {
                        valid = true;
                    }
                    else {
                        valid = false;
                    }
                    break;
                case Base.Year:
                    if (cronConfig.minute !== '*' &&
                        cronConfig.hour !== '*' &&
                        cronConfig.day !== '*' &&
                        cronConfig.month !== '*') {
                        valid = true;
                    }
                    else {
                        valid = false;
                    }
                    break;
                default:
                    valid = false;
            }
            return valid;
        };
        CronService.prototype.clearNextModels = function (base, cronConfig) {
            if (base === Base.Initial) {
                // please select, delete all
                // cron expression: every minute at second 0
                cronConfig.weekday = '*';
                cronConfig.day = '*';
                cronConfig.month = '*';
                cronConfig.hour = '*';
                cronConfig.minute = '*';
            }
            else if (base === Base.Hour) {
                // hour, don't delete minutes
                // cron expression: every hour, at whatever minute, at second 0
                cronConfig.weekday = '*';
                cronConfig.day = '*';
                cronConfig.month = '*';
                cronConfig.hour = '*';
            }
            else if (base === Base.Day) {
                // day, don't delete minutes and hours
                // cron expression: every day of every month, at whatever hour and minute, at second 0
                cronConfig.weekday = '*';
                cronConfig.day = '*';
                cronConfig.month = '*';
            }
            else if (base === Base.Week) {
                // week, delete month and day
                // cron expression: every month, at whatever weekday, hour and minute, at second 0
                cronConfig.day = '*';
                cronConfig.month = '*';
            }
            else if (base === Base.Month) {
                // month, delete month and weekday
                // cron expression: every month, at whatever day of month, hour and minute, at second 0
                cronConfig.weekday = '*';
                cronConfig.month = '*';
            }
            else if (base === Base.Year) {
                // year, delete weekday
                // cron expression: every year, at whatever month, day of month, hour and minute, at second 0
                cronConfig.weekday = '*';
            }
        };
        CronService.prototype.getWeekDayName = function (cronConfig) {
            var date = new Date(0);
            var firstSundayDate = date.getDate() + 3; // because we know date 0 was on Thursday...
            date.setDate(firstSundayDate + parseInt(cronConfig.weekday, 10));
            return common.formatDate(date, 'EEEE', this.translateService.currentLang);
        };
        CronService.prototype.getMonthDayName = function (cronConfig) {
            var name = '';
            this.daysOfMonth.forEach(function (item) {
                if (item.value === cronConfig.day) {
                    name = item.label;
                }
            });
            return name;
        };
        CronService.prototype.getMonthName = function (cronConfig) {
            var date = new Date(0);
            date.setMonth(parseInt(cronConfig.month, 10) - 1);
            return common.formatDate(date, 'LLLL', this.translateService.currentLang);
        };
        CronService.ctorParameters = function () { return [
            { type: core$1.TranslateService }
        ]; };
        CronService = __decorate([
            core.Injectable()
        ], CronService);
        return CronService;
    }());

    var ScheduleModalComponent = /** @class */ (function () {
        function ScheduleModalComponent(modalRef, reportsService, cronService) {
            this.modalRef = modalRef;
            this.reportsService = reportsService;
            this.cronService = cronService;
            this.emitter = new core.EventEmitter();
            this.ActionType = ActionType;
            this.multiEmailPattern = /^([a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*,?)*$/i;
            this.singleEmailPattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/;
            this.cronExpression = '* * * * *';
            this.validCron = false;
            this.emitterPayload = {
                success: false,
                message: ''
            };
            this.placeholdersInfo = ngxComponents.gettext('Available placeholders: {tenant-domain}, {host}, {binaryId}. Whole link to downloadable file is: {tenant-domain}/inventory/binaries/{binaryId}.');
            this.savingStatus = {
                inProgress: false,
                done: false,
                error: false
            };
        }
        ScheduleModalComponent.prototype.ngOnInit = function () {
            this.oldSchedule = lodash.cloneDeep(this.schedule);
            this.populateEmailFieldsFromSchedule(this.schedule);
            this.cronExpression = this.cronService.generateCron(this.schedule.cronConfig);
            this.validCron = this.cronService.validateModels(this.cronService.getBase(this.schedule.cronConfig), this.schedule.cronConfig);
        };
        ScheduleModalComponent.prototype.populateEmailFieldsFromSchedule = function (schedule) {
            if (schedule.emailConfig.to && schedule.emailConfig.to.length) {
                this.emailTo = schedule.emailConfig.to.toString();
            }
            if (schedule.emailConfig.cc && schedule.emailConfig.cc.length) {
                this.emailCc = schedule.emailConfig.cc.toString();
            }
            if (schedule.emailConfig.bcc && schedule.emailConfig.bcc.length) {
                this.emailBcc = schedule.emailConfig.bcc.toString();
            }
            if (schedule.emailConfig.replyTo) {
                this.emailReplyTo = schedule.emailConfig.replyTo;
            }
            if (schedule.emailConfig.subject) {
                this.emailSubject = schedule.emailConfig.subject;
            }
            if (schedule.emailConfig.text) {
                this.emailText = schedule.emailConfig.text;
            }
        };
        ScheduleModalComponent.prototype.save = function () {
            return __awaiter(this, void 0, void 0, function () {
                var success, date, timestamp;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.populateScheduleFromCronExpression();
                            this.populateScheduleFromEmailFields();
                            this.savingStatus.inProgress = true;
                            success = false;
                            if (!(this.actionType === ActionType.EDIT)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.reportsService.updateSchedule(this.oldSchedule, this.schedule, this.exportId)];
                        case 1:
                            success = _a.sent();
                            return [3 /*break*/, 4];
                        case 2:
                            date = new Date();
                            timestamp = date.getTime();
                            this.schedule.timestamp = timestamp;
                            return [4 /*yield*/, this.reportsService.addSchedule(this.schedule, this.exportId)];
                        case 3:
                            success = _a.sent();
                            _a.label = 4;
                        case 4:
                            if (success) {
                                this.modalRef.hide();
                                // signal to the parent component to update list
                                this.emitterPayload.success = true;
                                this.emitter.emit(this.emitterPayload);
                            }
                            this.savingStatus.inProgress = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScheduleModalComponent.prototype.cancel = function () {
            this.modalRef.hide();
        };
        ScheduleModalComponent.prototype.getCron = function (cron) {
            this.validCron = cron.valid;
            if (cron.valid) {
                this.cronExpression = cron.cron;
            }
        };
        ScheduleModalComponent.prototype.populateScheduleFromCronExpression = function () {
            this.schedule.cronConfig = this.cronService.generateCronConfig(this.cronExpression);
        };
        ScheduleModalComponent.prototype.convertStringOfEmailsToArray = function (stringOfEmails) {
            var arr = [];
            if (stringOfEmails) {
                var parts = stringOfEmails.split(',');
                parts.forEach(function (item) {
                    if (item) {
                        arr.push(item);
                    }
                });
            }
            return arr;
        };
        ScheduleModalComponent.prototype.populateScheduleFromEmailFields = function () {
            this.schedule.emailConfig.to = this.emailTo
                ? this.convertStringOfEmailsToArray(this.emailTo)
                : null;
            this.schedule.emailConfig.cc = this.emailCc
                ? this.convertStringOfEmailsToArray(this.emailCc)
                : null;
            this.schedule.emailConfig.bcc = this.emailBcc
                ? this.convertStringOfEmailsToArray(this.emailBcc)
                : null;
            this.schedule.emailConfig.replyTo = this.emailReplyTo;
            this.schedule.emailConfig.subject = this.emailSubject;
            this.schedule.emailConfig.text = this.emailText;
        };
        ScheduleModalComponent.ctorParameters = function () { return [
            { type: modal.BsModalRef },
            { type: ReportsService },
            { type: CronService }
        ]; };
        __decorate([
            core.Output()
        ], ScheduleModalComponent.prototype, "emitter", void 0);
        ScheduleModalComponent = __decorate([
            core.Component({
                selector: 'schedule-modal',
                template: "<div class=\"modal-header text-center bg-primary\">\n  <header class=\"text-white\">\n    <div style=\"font-size: 62px;\">\n      <span c8yIcon=\"c8y-report\"></span>\n    </div>\n    <h4 class=\"text-uppercase\" style=\"margin:0; letter-spacing: 0.15em;\">\n      <span *ngIf=\"actionType === ActionType.CREATE\" translate>New export schedule</span>\n      <span *ngIf=\"actionType === ActionType.EDIT\" translate>Edit export schedule</span>\n      <span *ngIf=\"actionType === ActionType.DUPLICATE\" translate>Duplicate export schedule</span>\n    </h4>\n  </header>\n</div>\n\n<div class=\"modal-body\">\n  <p class=\"lead text-center p-t-24\" style=\"margin-bottom: 0;\" translate>\n    On schedule send export via email\n  </p>\n</div>\n<div class=\"modal-inner-scroll smart-rule-control\">\n  <form #scheduleForm=\"ngForm\" class=\"edit-smart-rule-details\">\n    <div class=\"list-group\">\n      <div class=\"list-group-item bg-gray-white\">\n        <div class=\"smart-list-icon-label\">\n          <span class=\"dot bg-primary-light\">1</span\n          ><strong class=\"p-l-4\" translate>Frequency</strong>\n        </div>\n        <div class=\"p-t-4\">\n          <div class=\"form-group\">\n            <cron [cronIn]=\"cronExpression\" (emitter)=\"getCron($event)\" name=\"cron\"></cron>\n          </div>\n        </div>\n      </div>\n      <div class=\"list-group-item\">\n        <div class=\"smart-list-icon-label\">\n          <span class=\"dot bg-primary-light\">2</span>&nbsp;<strong translate>Send email</strong>\n        </div>\n        <div class=\"form-horizontal p-t-16\">\n          <div class=\"form-group\">\n            <div class=\"text-muted col-sm-12 p-b-4\" style=\"display: flex; align-items: baseline;\">\n              <i [c8yIcon]=\"'info-circle'\" class=\"text-info m-r-8\"></i>\n              <em translate>Enter one or more valid email addresses, separated with a comma.</em>\n            </div>\n            <label class=\"control-label col-sm-3\" translate>Send to</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  name=\"to\"\n                  [(ngModel)]=\"emailTo\"\n                  placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                  required\n                  [pattern]=\"multiEmailPattern\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    [text]=\"reportsService.ERROR_MESSAGES.pattern_multiEmail\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"text-muted col-sm-12 p-b-4\" style=\"display: flex; align-items: baseline;\">\n              <i [c8yIcon]=\"'info-circle'\" class=\"text-info m-r-8\"></i>\n              <em translate>Enter one or more valid email addresses, separated with a comma.</em>\n            </div>\n            <label class=\"control-label col-sm-3\" translate>CC</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control span\"\n                  name=\"cc\"\n                  placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                  [(ngModel)]=\"emailCc\"\n                  [pattern]=\"multiEmailPattern\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    [text]=\"reportsService.ERROR_MESSAGES.pattern_multiEmail\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"text-muted col-sm-12 p-b-4\" style=\"display: flex; align-items: baseline;\">\n              <i [c8yIcon]=\"'info-circle'\" class=\"text-info m-r-8\"></i>\n              <em translate>Enter one or more valid email addresses, separated with a comma.</em>\n            </div>\n            <label class=\"control-label col-sm-3\" translate>BCC</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control span\"\n                  name=\"bcc\"\n                  placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                  [(ngModel)]=\"emailBcc\"\n                  [pattern]=\"multiEmailPattern\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    [text]=\"reportsService.ERROR_MESSAGES.pattern_multiEmail\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label col-sm-3\" translate>Reply to</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control span\"\n                  name=\"replyTo\"\n                  placeholder=\"{{ 'e.g. joe.doe@example.com`LOCALIZE`' | translate }}\"\n                  [(ngModel)]=\"emailReplyTo\"\n                  [pattern]=\"singleEmailPattern\"\n                />\n                <c8y-messages>\n                  <c8y-message\n                    name=\"pattern\"\n                    [text]=\"reportsService.ERROR_MESSAGES.pattern_singleEmail\"\n                  ></c8y-message>\n                </c8y-messages>\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label class=\"control-label col-sm-3\" translate>Subject</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <input\n                  type=\"text\"\n                  class=\"form-control span\"\n                  name=\"subject\"\n                  [(ngModel)]=\"emailSubject\"\n                  placeholder=\"{{ 'e.g. Daily report' | translate }}\"\n                  required\n                />\n              </c8y-form-group>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"text-muted col-sm-12 p-b-4\" style=\"display: flex; align-items: baseline;\">\n              <i [c8yIcon]=\"'info-circle'\" class=\"text-info m-r-8\"></i>\n              <em>{{ placeholdersInfo | translate }}</em>\n            </div>\n            <label class=\"col-sm-3 control-label\" translate>Message</label>\n            <div class=\"col-sm-9\">\n              <c8y-form-group>\n                <textarea\n                  class=\"form-control\"\n                  name=\"text\"\n                  [(ngModel)]=\"emailText\"\n                  placeholder=\"{{ 'Message' | translate }}\"\n                  required\n                ></textarea>\n              </c8y-form-group>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button class=\"btn btn-default\" (click)=\"cancel()\" title=\"{{ 'Cancel' | translate }}\" translate>\n    Cancel\n  </button>\n  <button\n    class=\"btn btn-primary\"\n    (click)=\"save()\"\n    [ngClass]=\"{ ' btn-pending ': savingStatus.inProgress }\"\n    [disabled]=\"!validCron || !scheduleForm.form.valid\"\n  >\n    <span *ngIf=\"!savingStatus.inProgress\">\n      <span *ngIf=\"actionType === ActionType.CREATE\" title=\"{{ 'Create' | translate }}\" translate\n        >Create</span\n      >\n      <span *ngIf=\"actionType === ActionType.EDIT\" title=\"{{ 'Save' | translate }}\" translate\n        >Save</span\n      >\n      <span\n        *ngIf=\"actionType === ActionType.DUPLICATE\"\n        title=\"{{ 'Duplicate' | translate }}\"\n        translate\n        >Duplicate</span\n      >\n    </span>\n    <span *ngIf=\"savingStatus.inProgress\" title=\"{{ 'Saving' | translate }}\u2026\"\n      >{{ 'Saving' | translate }}\u2026</span\n    >\n  </button>\n</div>\n"
            })
        ], ScheduleModalComponent);
        return ScheduleModalComponent;
    }());

    var ExportSchedulesComponent = /** @class */ (function () {
        function ExportSchedulesComponent(reportsService, bsModalService, cronService, translateService, userService) {
            this.reportsService = reportsService;
            this.bsModalService = bsModalService;
            this.cronService = cronService;
            this.translateService = translateService;
            this.userService = userService;
            this.scheduleList = [];
            this.initialSchedule = {
                timestamp: null,
                emailConfig: {
                    to: [],
                    cc: [],
                    bcc: [],
                    replyTo: '',
                    text: this.translateService.instant(ngxComponents.gettext('File with exported data can be downloaded from {tenant-domain}/inventory/binaries/{binaryId}.')),
                    subject: ''
                },
                cronConfig: {
                    minute: '0',
                    hour: '0',
                    day: '1',
                    month: '1',
                    weekday: '?'
                }
            };
            this.listClass = 'interact-list';
            this.sortReverse = false;
            this.isOpen = {};
            this.isEditMenuOpen = false;
            this.currentUserEmail = '';
            this.loadingStatus = {
                inProgress: false,
                done: false,
                error: false
            };
        }
        Object.defineProperty(ExportSchedulesComponent.prototype, "exportId", {
            set: function (exportId) {
                this._exportId = exportId;
            },
            enumerable: true,
            configurable: true
        });
        ExportSchedulesComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentUserEmail, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.getScheduleList(true);
                            return [4 /*yield*/, this.getCurrentUserEmail()];
                        case 1:
                            currentUserEmail = _b.sent();
                            this.initialSchedule.emailConfig.to = currentUserEmail;
                            _a = this;
                            return [4 /*yield*/, this.reportsService.getExport(this._exportId)];
                        case 2:
                            _a.exp = _b.sent();
                            this.initialSchedule.emailConfig.subject = this.translateService.instant(ngxComponents.gettext('Export of "{{expName}}"'), { expName: this.exp.name });
                            return [2 /*return*/];
                    }
                });
            });
        };
        ExportSchedulesComponent.prototype.getCurrentUserEmail = function () {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.userService.current()];
                        case 1:
                            data = (_a.sent()).data;
                            return [2 /*return*/, data && data.email ? [data.email] : []];
                    }
                });
            });
        };
        ExportSchedulesComponent.prototype.getScheduleList = function (withProgress) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (withProgress) {
                                this.loadingStatus.inProgress = true;
                            }
                            _a = this;
                            return [4 /*yield*/, this.reportsService.getScheduleList(this._exportId)];
                        case 1:
                            _a.scheduleList = _b.sent();
                            if (withProgress) {
                                this.loadingStatus.inProgress = false;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ExportSchedulesComponent.prototype.addSchedule = function () {
            this.openAddEditModal(this._exportId, this.initialSchedule, ActionType.CREATE);
        };
        ExportSchedulesComponent.prototype.editSchedule = function (schedule, event) {
            event.preventDefault();
            this.openAddEditModal(this._exportId, schedule, ActionType.EDIT);
        };
        ExportSchedulesComponent.prototype.duplicateSchedule = function (schedule, event) {
            event.preventDefault();
            this.openAddEditModal(this._exportId, schedule, ActionType.DUPLICATE);
        };
        ExportSchedulesComponent.prototype.openAddEditModal = function (exportId, schedule, actionType) {
            var _this = this;
            var payload = { actionType: actionType, exportId: exportId, schedule: lodashEs.cloneDeep(schedule) };
            var modalOptions = { class: 'modal-sm', initialState: payload };
            this.modalRef = this.bsModalService.show(ScheduleModalComponent, modalOptions);
            this.modalRef.content.emitter.subscribe(function (load) {
                return _this.getMessageFromModal(load);
            });
        };
        ExportSchedulesComponent.prototype.getMessageFromModal = function (payload) {
            if (payload.success) {
                // refresh schedule list
                this.getScheduleList(false);
            }
        };
        ExportSchedulesComponent.prototype.removeSchedule = function (schedule, event) {
            return __awaiter(this, void 0, void 0, function () {
                var subject, payload, modalOptions, confirm, success;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            event.preventDefault();
                            subject = schedule.emailConfig.subject;
                            payload = {
                                status: ngxComponents.Status.DANGER,
                                title: ngxComponents.gettext('Delete schedule'),
                                labels: { ok: ngxComponents.gettext('Delete') },
                                body: this.translateService.instant(ngxComponents.gettext('You are about to delete the schedule "{{subject}}". Do you want to proceed?'), { subject: subject })
                            };
                            modalOptions = { initialState: payload };
                            this.modalRef = this.bsModalService.show(ngxComponents.ConfirmModalComponent, modalOptions);
                            return [4 /*yield*/, this.modalRef.content.result];
                        case 1:
                            confirm = _a.sent();
                            if (!confirm) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.reportsService.deleteSchedule(schedule, this._exportId)];
                        case 2:
                            success = _a.sent();
                            if (success) {
                                // refresh schedule list
                                this.getScheduleList(false);
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        ExportSchedulesComponent.ctorParameters = function () { return [
            { type: ReportsService },
            { type: modal.BsModalService },
            { type: CronService },
            { type: core$1.TranslateService },
            { type: client.UserService }
        ]; };
        __decorate([
            core.Input()
        ], ExportSchedulesComponent.prototype, "exportId", null);
        ExportSchedulesComponent = __decorate([
            core.Component({
                selector: 'export-schedules',
                template: "<div>\n  <div *ngIf=\"loadingStatus.inProgress\" class=\"flex-row\">\n    <div style=\"position: relative; min-height: 40px;min-width: 55px;\">\n      <div class=\"spinner\">\n        <div class=\"rect1\"></div>\n        <div class=\"rect2\"></div>\n        <div class=\"rect3\"></div>\n        <div class=\"rect4\"></div>\n        <div class=\"rect5\"></div>\n      </div>\n    </div>\n    <span translate>Retrieving schedules\u2026</span>\n  </div>\n\n  <div *ngIf=\"!loadingStatus.inProgress && loadingStatus.done && loadingStatus.error\">\n    <div class=\"alert alert-warning\" translate>\n      Could not load schedules list.\n    </div>\n  </div>\n\n  <div *ngIf=\"!loadingStatus.inProgress && !loadingStatus.done && !loadingStatus.error\">\n    <div class=\"c8y-empty-state text-center\" *ngIf=\"!scheduleList.length\">\n      <h1 c8yIcon=\"c8y-report\" class=\"c8y-icon-duocolor\"></h1>\n      <h3 translate>No export schedules defined.</h3>\n    </div>\n\n    <div class=\"list-group\" *ngIf=\"scheduleList.length\">\n      <div\n        class=\"list-group-item flex-row pointer\"\n        *ngFor=\"let schedule of scheduleList\"\n        (click)=\"editSchedule(schedule, $event)\"\n      >\n        <div class=\"list-item-actions\" (click)=\"$event.stopPropagation()\">\n          <div class=\"settings dropdown\" dropdown>\n            <button\n              class=\"dropdown-toggle c8y-dropdown\"\n              dropdownToggle\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n              title=\"{{ 'Actions' | translate }}\"\n            >\n              <i [c8yIcon]=\"'ellipsis-v'\"></i>\n            </button>\n            <ul class=\"dropdown-menu dropdown-menu-right\" *dropdownMenu>\n              <li role=\"menuitem\">\n                <a\n                  href=\"\"\n                  title=\"{{ 'Edit schedule' | translate }}\"\n                  (click)=\"editSchedule(schedule, $event)\"\n                >\n                  <i [c8yIcon]=\"'pencil'\"></i> {{ 'Edit' | translate }}\n                </a>\n              </li>\n              <li role=\"menuitem\">\n                <a\n                  href=\"\"\n                  title=\"{{ 'Duplicate schedule' | translate }}\"\n                  (click)=\"duplicateSchedule(schedule, $event)\"\n                >\n                  <i [c8yIcon]=\"'copy'\"></i> {{ 'Duplicate' | translate }}\n                </a>\n              </li>\n              <li role=\"menuitem\">\n                <a\n                  href=\"\"\n                  title=\"{{ 'Delete schedule' | translate }}\"\n                  (click)=\"removeSchedule(schedule, $event)\"\n                >\n                  <i [c8yIcon]=\"'trash'\"></i> {{ 'Delete' | translate }}\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"list-item-icon\">\n          <i c8yIcon=\"c8y-report\" class=\"c8y-icon-duocolor\"></i>\n        </div>\n        <div class=\"list-item-body flex-row\">\n          <div class=\"col-sm-6\">\n            <div class=\"text-truncate\" title=\"{{ schedule.emailConfig.subject }}\">\n              {{ schedule.emailConfig.subject }}\n            </div>\n          </div>\n          <div class=\"col-sm-6\">\n            <div class=\"flex-row\" style=\"align-items: baseline;\">\n              <i c8yIcon=\"calendar\" class=\"text-muted m-r-4\"></i>\n              <small class=\"smart-rule-information text-muted\">\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 2\" translate>\n                  Hourly: {{ schedule.cronConfig.minute | number: '2.0-0' }} minute(s) past the\n                  hour.\n                </span>\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 3\" translate>\n                  Daily: at {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                    schedule.cronConfig.minute | number: '2.0-0'\n                  }}.\n                </span>\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 4\" translate>\n                  Weekly: {{ cronService.getWeekDayName(schedule.cronConfig) }}, at\n                  {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                    schedule.cronConfig.minute | number: '2.0-0'\n                  }}.\n                </span>\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 5\" translate>\n                  Monthly: {{ cronService.getMonthDayName(schedule.cronConfig) }} day of the month,\n                  at {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                    schedule.cronConfig.minute | number: '2.0-0'\n                  }}.\n                </span>\n                <span *ngIf=\"cronService.getBase(schedule.cronConfig) === 6\" translate>\n                  Yearly: {{ cronService.getMonthName(schedule.cronConfig) }},\n                  {{ cronService.getMonthDayName(schedule.cronConfig) }} day of the month, at\n                  {{ schedule.cronConfig.hour | number: '2.0-0' }}:{{\n                    schedule.cronConfig.minute | number: '2.0-0'\n                  }}.\n                </span>\n              </small>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <button\n    type=\"button\"\n    class=\"btn-add-block m-t-16\"\n    title=\"{{ 'Add schedule' | translate }}\"\n    (click)=\"addSchedule()\"\n  >\n    <i [c8yIcon]=\"'plus-square'\"></i> {{ 'Add schedule' | translate }}\n  </button>\n</div>\n"
            })
        ], ExportSchedulesComponent);
        return ExportSchedulesComponent;
    }());

    var CronComponent = /** @class */ (function () {
        function CronComponent(cronService) {
            this.cronService = cronService;
            this.emitter = new core.EventEmitter();
            this.emittedCron = {
                valid: false,
                cron: ''
            };
            this.base = Base.Initial;
            //
        }
        CronComponent.prototype.ngOnInit = function () {
            this.daysOfWeekPosix = this.cronService.daysOfWeekPosix;
            this.daysOfMonth = this.cronService.daysOfMonth;
            this.months = this.cronService.months;
            this.hours = this.cronService.hours;
            this.minutes = this.cronService.minutes;
            this.intervals = this.cronService.intervals;
            this.cronConfig = this.cronService.generateCronConfig(this.cronIn);
            this.base = this.cronService.getBase(this.cronConfig);
        };
        CronComponent.prototype.onChangeSelect = function () {
            this.cronService.clearNextModels(this.base, this.cronConfig);
            this.emittedCron.valid = this.cronService.validateModels(this.base, this.cronConfig);
            this.emittedCron.cron = this.cronService.generateCron(this.cronConfig);
            this.emitter.emit(this.emittedCron);
        };
        CronComponent.ctorParameters = function () { return [
            { type: CronService }
        ]; };
        __decorate([
            core.Input()
        ], CronComponent.prototype, "cronIn", void 0);
        __decorate([
            core.Output()
        ], CronComponent.prototype, "emitter", void 0);
        CronComponent = __decorate([
            core.Component({
                selector: 'cron',
                template: "<div class=\"cron-wrap form-horizontal\">\n  <div class=\"form-group smart-cron-job-every\">\n    <label for=\"smart-cron-job-every\" \n      class=\"col-sm-3 control-label\"\n      translate>\n      Interval\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"smart-cron-job-every\"\n          class=\"cron-select form-control\"\n          [(ngModel)]=\"base\"\n          required=\"true\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngIf=\"base === 1\" value=\"1\" translate>Select...</option>\n          <option *ngFor=\"let baseInterval of intervals\" [ngValue]=\"baseInterval.value\">\n            {{ baseInterval.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-on\" *ngIf=\"base == 4\">\n    <label for=\"smart-cron-job-on\" class=\"col-sm-3 control-label\" translate>\n      Day\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"smart-cron-job-on\"\n          class=\"cron-select form-control day-value\"\n          [(ngModel)]=\"cronConfig.weekday\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngFor=\"let dayOfWeek of daysOfWeekPosix\" [ngValue]=\"dayOfWeek.value\">\n            {{ dayOfWeek.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-of\" *ngIf=\"base == 6\">\n    <label for=\"smart-cron-job-of\" class=\"col-sm-3 control-label\" translate>\n      Month\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"smart-cron-job-of\"\n          class=\"cron-select form-control month-value\"\n          [(ngModel)]=\"cronConfig.month\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngFor=\"let month of months\" [ngValue]=\"month.value\">\n            {{ month.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-on-the\" *ngIf=\"base >= 5\">\n    <label for=\"smart-cron-job-on-the\" class=\"col-sm-3 control-label\" translate>\n      Day\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"c8y-select-wrapper\">\n        <select\n          id=\"smart-cron-job-on-the\"\n          class=\"cron-select form-control day-of-month-value\"\n          [(ngModel)]=\"cronConfig.day\"\n          (change)=\"onChangeSelect()\"\n        >\n          <option *ngFor=\"let dayOfMonth of daysOfMonth\" [ngValue]=\"dayOfMonth.value\">\n            {{ dayOfMonth.label | translate }}\n          </option>\n        </select>\n        <span></span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"form-group smart-cron-job-at\" *ngIf=\"base >= 2\">\n    <label for=\"smart-cron-job-at-hour\" class=\"col-sm-3 control-label\">\n      <span *ngIf=\"base >= 3\" translate>Time</span>\n      <span *ngIf=\"base < 3\" translate>Minutes</span>\n    </label>\n    <div class=\"col-sm-9\">\n      <div class=\"form-inline\">\n        <div class=\"c8y-select-wrapper\" *ngIf=\"base >= 3\">\n          <select\n            id=\"smart-cron-job-at-hour\"\n            class=\"cron-select form-control hour-value\"\n            [(ngModel)]=\"cronConfig.hour\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let hour of hours\" [ngValue]=\"hour.value\">\n              {{ hour.value | number: '2.0-0'  }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n        <span *ngIf=\"base >= 3\"> : </span>\n        <div class=\"c8y-select-wrapper\">\n          <select\n            id=\"smart-cron-job-at-minute\"\n            class=\"cron-select form-control minute-value\"\n            [(ngModel)]=\"cronConfig.minute\"\n            (change)=\"onChangeSelect()\"\n          >\n            <option *ngFor=\"let minute of minutes\" [ngValue]=\"minute.value\">\n              {{ minute.value | number: '2.0-0' }}\n            </option>\n          </select>\n          <span></span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
            })
        ], CronComponent);
        return CronComponent;
    }());

    /**
     * The angular module definition for reports.
     * @exports ExportSchedulesComponent
     * @exports ScheduleModalComponent
     * @exports CronComponent
     */
    var ReportsModule = /** @class */ (function () {
        function ReportsModule() {
        }
        ReportsModule = __decorate([
            core.NgModule({
                declarations: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent],
                imports: [ngxComponents.CoreModule, ngxComponents.FormsModule, dropdown.BsDropdownModule, tooltip.TooltipModule],
                entryComponents: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent],
                providers: [ReportsService, CronService],
                exports: [ExportSchedulesComponent, ScheduleModalComponent, CronComponent]
            })
        ], ReportsModule);
        return ReportsModule;
    }());

    var exportSchedulesComponent = _static.downgradeComponent({
        component: ExportSchedulesComponent
    });

    var NAME = 'c8y.upgrade.reports';
    var angularJsModule = angular.module(NAME, [])
        .directive('c8yExportSchedules', exportSchedulesComponent);
    var ng1Modules = [NAME];
    bootstrap.registerNgModule(ng1Modules);

    exports.ExportSchedulesComponent = ExportSchedulesComponent;
    exports.ReportsModule = ReportsModule;
    exports.ng1Modules = ng1Modules;
    exports.ɵa = ReportsService;
    exports.ɵb = CronService;
    exports.ɵc = ScheduleModalComponent;
    exports.ɵd = CronComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=c8y-ngx-components-reports.umd.js.map
